antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,35.096,1,41.195]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[2,45.762,3,60.183]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1-3",[0,35.096,4,56.549]],["name/1-3",[]],["text/1-3",[]],["component/1-3",[]],["title/1",[0,42.845]],["name/1",[0,0.892]],["text/1",[0,5.987,3,4.465,5,2.573,6,2.235,7,4.874,8,4.874,9,4.874,10,3.994,11,5.408,12,4.874,13,3.728,14,4.195,15,3.772,16,8.459,17,4.874,18,3.994,19,3.584,20,5.855,21,2.819,22,3.395,23,2.295,24,3.699,25,3.994,26,2.905,27,3.395,28,3.817,29,4.195,30,3.395,31,4.874,32,6.489,33,4.465,34,3.056,35,3.242,36,6.15,37,2.253,38,3.772,39,4.465,40,4.195,41,4.414,42,4.195,43,4.874,44,3.086,45,4.874,46,4.874,47,4.195,48,4.874,49,2.952,50,4.874,51,3.994,52,4.574,53,4.874,54,3.395,55,3.395,56,3.994,57,2.487,58,4.465,59,5.855,60,7.145,61,4.874,62,3.242,63,2.385,64,5.619,65,4.073,66,3.242,67,4.977,68,4.874,69,2.233,70,2.295,71,4.195,72,3.113,73,4.465,74,3.833,75,4.752,76,3.25,77,3.584,78,2.316,79,4.465,80,2.543,81,3.994,82,5.626,83,4.195,84,4.465,85,5.619,86,3.994,87,4.465,88,4.874,89,7.145,90,2.273,91,4.874,92,2.573,93,3.242,94,4.874,95,4.874,96,7.145,97,4.752,98,3.175,99,2.434,100,2.316,101,2.74,102,2.233,103,3.994,104,3.699,105,4.195,106,3.175,107,4.465,108,2.704,109,2.361,110,4.874,111,3.395,112,4.195,113,4.195,114,1.755,115,2.233,116,2.122,117,3.584,118,2.361,119,3.994,120,4.465,121,4.874,122,3.833,123,3.584,124,4.874,125,4.874,126,4.874,127,2.088,128,4.465,129,2.316,130,4.874,131,4.874,132,4.874,133,3.056,134,4.874,135,3.175,136,3.113,137,2.861,138,4.874,139,4.073,140,2.704,141,2.213,142,3.056,143,3.994,144,3.699,145,3.002,146,2.778,147,4.465,148,4.874,149,4.874,150,4.874,151,4.874,152,3.994,153,4.874]],["component/1",[154,0.914]],["title/2-1",[114,23.661,155,29.578]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[155,29.578,156,65.701]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[155,29.578,157,51.666]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[6,10.767,158,50.966,159,47.888]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2",[6,12.714,160,39.799]],["name/2",[160,1.012]],["text/2",[0,3.707,2,1.978,5,5.394,6,2.047,11,1.482,15,1.499,22,1.978,23,2.205,27,3.263,28,1.517,44,2.583,52,1.535,54,1.978,63,1.389,65,1.619,76,3.511,77,2.088,78,1.349,99,4.367,100,3.649,114,2.765,118,1.376,127,1.217,139,1.619,144,2.155,146,2.671,155,3.457,158,2.601,159,4.032,161,6.203,162,1.575,163,1.693,164,2.327,165,4.032,166,2.226,167,3.263,168,2.839,169,2.03,170,1.749,171,6.357,172,6.94,173,4.045,174,3.315,175,2.883,176,5.686,177,2.839,178,6.94,179,2.839,180,2.839,181,2.839,182,2.378,183,2.502,184,1.814,185,1.978,186,1.85,187,2.146,188,2.839,189,5.002,190,1.642,191,1.555,192,3.445,193,2.839,194,1.978,195,1.482,196,2.839,197,2.233,198,2.839,199,2.839,200,1.693,201,1.362,202,1.72,203,4.291,204,3.839,205,2.886,206,1.72,207,1.517,208,1.555,209,1.814,210,2.839,211,2.839,212,2.155,213,2.709,214,4.961,215,2.839,216,2.444,217,2.601,218,1.517,219,2.34,220,2.937,221,1.85,222,1.376,223,2.601,224,2.233,225,3.876,226,8.009,227,5.147,228,4.032,229,2.327,230,9.473,231,5.98,232,5.686,233,5.456,234,8.445,235,7.034,236,7.034,237,7.526,238,6.609,239,6.609,240,5.222,241,4.685,242,6.273,243,3.621,244,2.839,245,3.362,246,5.478,247,4.9,248,2.839,249,2.839,250,4.291,251,2.839,252,2.601,253,4.788,254,5.457,255,2.839,256,6.357,257,2.601,258,5.98,259,8.372,260,2.327,261,5.98,262,5.98,263,2.839,264,5.98,265,2.601,266,2.601,267,2.75,268,4.291,269,5.98,270,2.839,271,4.685,272,4.685,273,2.155,274,2.839,275,5.98,276,4.685,277,4.291,278,1.978,279,4.291,280,2.839,281,2.839,282,3.839,283,2.839,284,1.693,285,2.839,286,5.98,287,6.94,288,2.839,289,2.839,290,2.839,291,2.839,292,2.839,293,2.444,294,2.839,295,4.032,296,2.839,297,2.601,298,4.291,299,2.601,300,4.685,301,4.685,302,2.839,303,3.349,304,4.291,305,2.444,306,2.839,307,2.839,308,1.433,309,1.596,310,2.444,311,2.601,312,2.601,313,2.03,314,2.839,315,2.601,316,2.839,317,1.978,318,0.92,319,1.389,320,1.667,321,2.839,322,2.839,323,2.839,324,1.667,325,3.839,326,2.155,327,1.72,328,2.839,329,2.327,330,1.814,331,2.839,332,2.233,333,2.839,334,1.499,335,2.839,336,1.642,337,1.85]],["component/2",[154,0.914]],["title/3-1",[28,29.722,338,37.006,339,25.953]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[6,10.767,338,37.006,339,25.953]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3",[6,12.714,339,30.646]],["name/3",[339,0.779]],["text/3",[5,1.804,6,1.828,11,2.841,22,2.38,26,2.037,27,2.38,28,5.534,52,1.848,54,3.792,65,3.103,82,3.621,116,1.488,118,2.638,144,2.593,146,1.948,155,2.451,174,4.365,207,1.825,218,1.825,223,4.987,229,2.8,246,6.216,268,3.13,279,6.216,338,5.147,339,3.942,340,2.941,341,3.417,342,3.148,343,4.11,344,1.976,345,2.07,346,1.744,347,3.417,348,3.13,349,2.273,350,2.513,351,2.273,352,2.443,353,2.006,354,2.941,355,2.687,356,3.13,357,3.13,358,2.105,359,2.687,360,2.941,361,2.8,362,1.783,363,3.417,364,2.183,365,1.5,366,2.687,367,1.948,368,3.13,369,2.07,370,2.513,371,1.707,372,1.707,373,1.783,374,2.105,375,1.609,376,2.687,377,2.443,378,2.006,379,3.417,380,2.324,381,2.513,382,5.444,383,11.875,384,3.417,385,7.035,386,5.444,387,3.417,388,5.444,389,3.417,390,5.444,391,5.444,392,5.444,393,3.417,394,3.417,395,11.515,396,3.417,397,6.786,398,6.786,399,3.417,400,6.264,401,6.786,402,6.786,403,6.786,404,6.786,405,3.417,406,5.444,407,5.444,408,2.8,409,3.417,410,9.005,411,3.417,412,6.786,413,3.417,414,7.089,415,3.417,416,7.739,417,3.417,418,3.417,419,3.417,420,3.417,421,3.417,422,3.417,423,5.444,424,7.739,425,7.739,426,5.444,427,5.444,428,5.444,429,3.417,430,3.417,431,6.786,432,3.417,433,3.417,434,6.786,435,5.444,436,5.444,437,6.786,438,3.417,439,3.417,440,3.417,441,5.444,442,5.444,443,3.417,444,3.417,445,3.417,446,3.417,447,3.13,448,3.417,449,3.417,450,3.417,451,3.417,452,3.417,453,3.417,454,3.417,455,3.417,456,3.417,457,3.417,458,3.417,459,3.417,460,3.417,461,3.417,462,3.417,463,5.444,464,3.417,465,3.417,466,3.417,467,9.258,468,3.417,469,3.417,470,3.417,471,3.417,472,3.417,473,3.417,474,3.417,475,7.739,476,3.417,477,3.417,478,7.739,479,3.417,480,5.444,481,3.417,482,3.417,483,3.417,484,5.444,485,3.417,486,3.417,487,3.417,488,3.417,489,3.417,490,5.444,491,5.444,492,5.444,493,3.417,494,3.417,495,3.417,496,5.444,497,3.417,498,3.417,499,5.444,500,3.417]],["component/3",[154,0.914]],["title/4-1",[76,25.241,501,56.549]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[502,56.549,503,53.834]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[52,30.087,76,21.375,139,31.718]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4-4",[22,45.762,23,30.93]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["title/4-5",[6,10.767,11,29.031,23,26.194]],["name/4-5",[]],["text/4-5",[]],["component/4-5",[]],["title/4-6",[6,10.767,15,29.37,23,26.194]],["name/4-6",[]],["text/4-6",[]],["component/4-6",[]],["title/4-7",[6,10.767,23,26.194,504,47.888]],["name/4-7",[]],["text/4-7",[]],["component/4-7",[]],["title/4-8",[25,65.719]],["name/4-8",[]],["text/4-8",[]],["component/4-8",[]],["title/4-9",[27,38.754,28,29.722,70,26.194]],["name/4-9",[]],["text/4-9",[]],["component/4-9",[]],["title/4",[76,30.813]],["name/4",[76,0.642]],["text/4",[0,5.001,5,4.942,6,2.323,11,4.885,15,5.672,20,4.035,22,5.015,23,4.689,25,4.035,26,4.291,27,5.015,28,5.74,29,4.238,47,4.238,52,4.602,54,3.43,55,5.015,56,6.973,59,4.035,63,2.41,65,5.678,70,2.318,76,3.997,78,3.421,103,4.035,111,3.43,114,2.593,116,2.144,118,2.386,139,4.851,140,3.994,142,4.514,161,2.848,182,1.958,187,3.899,195,2.569,203,4.511,206,2.983,207,2.631,208,2.697,309,2.769,353,4.226,358,3.034,371,3.596,380,3.349,501,4.238,503,6.973,504,6.197,505,3.275,506,4.925,507,4.925,508,3.737,509,4.238,510,2.599,511,4.69,512,2.935,513,3.737,514,4.925,515,4.925,516,2.459,517,4.238,518,4.925,519,4.69,520,4.238,521,3.43,522,3.52,523,2.89,524,2.144,525,3.349,526,3.349,527,2.89,528,3.737,529,3.275,530,4.035,531,4.238,532,4.511,533,4.238,534,4.925,535,7.795,536,3.737,537,3.43,538,4.511,539,4.511,540,4.514,541,4.925,542,8.51,543,8.51,544,6.458,545,8.51,546,2.807,547,4.238,548,3.621,549,4.925,550,4.511,551,4.511,552,4.511,553,3.146,554,4.511,555,4.035,556,3.43,557,3.873,558,2.89,559,4.035,560,3.736,561,2.276,562,4.035,563,6.595,564,4.514,565,4.925,566,2.459,567,2.599,568,4.925,569,4.035,570,4.238,571,2.935]],["component/4",[154,0.914]],["title/5",[6,12.714,13,34.281]],["name/5",[572,0.752]],["text/5",[6,2.25,13,5.364,57,6.286,77,6.138,139,6.351,155,3.758,161,6.443,164,6.839,166,3.966,167,5.813,174,4.223,175,4.629,187,3.824,189,5.437,213,4.827,214,5.966,510,5.881,573,5.056,574,5.966,575,4.259,576,6.985]],["component/5",[176,1.277]],["title/6-1",[22,45.762,23,30.93]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[577,49.862,578,56.549]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[28,35.096,182,26.127]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[560,28.842,571,39.163]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[76,25.241,501,56.549]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6",[142,41.195,147,60.183]],["name/6",[572,0.752]],["text/6",[0,4.187,4,4.771,5,2.926,6,2.401,11,4.745,13,2.892,14,4.771,15,5.218,21,3.205,22,3.861,23,2.609,25,4.542,26,3.304,28,5.281,29,6.747,37,3.623,56,4.542,57,2.828,64,4.359,65,4.469,69,4.529,70,2.609,75,3.687,76,2.129,78,2.634,109,3.798,113,4.771,116,3.413,123,4.076,127,2.375,140,3.075,141,2.517,142,6.54,143,4.542,145,3.415,161,3.205,163,3.304,182,3.616,206,3.358,208,3.035,353,3.253,358,3.415,365,2.433,371,2.768,503,6.423,504,7.827,523,3.253,535,5.077,538,5.077,539,5.077,540,3.475,544,6.902,546,3.16,553,3.541,557,4.359,559,4.542,560,4.34,561,3.623,563,5.077,564,3.475,569,4.542,570,4.771,571,5.421,575,2.828,579,3.475,580,2.74,581,4.207,582,5.543,583,4.771,584,5.214,585,5.543,586,4.771,587,5.077,588,5.077,589,4.771,590,3.77,591,3.075,592,2.926,593,5.543,594,2.413,595,5.077,596,3.861,597,3.962,598,4.542,599,2.712,600,3.035,601,5.543,602,3.611,603,5.543,604,3.687,605,3.304,606,6.164,607,3.861,608,2.961,609,5.077,610,4.771,611,5.543,612,5.543,613,4.771,614,3.205,615,3.962,616,5.543,617,5.077,618,3.541,619,3.861]],["component/6",[57,0.43,142,0.528]],["title/7-1",[13,34.281,57,33.522]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[13,34.281,620,60.183]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[621,69.033]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[166,31.222,622,56.549]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7-5",[176,53.834,623,34.681]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["title/7-6",[13,29.031,65,31.718,624,37.838]],["name/7-6",[]],["text/7-6",[]],["component/7-6",[]],["title/7-7",[57,33.522,625,51.666]],["name/7-7",[]],["text/7-7",[]],["component/7-7",[]],["title/7-8",[626,60.183,627,60.183]],["name/7-8",[]],["text/7-8",[]],["component/7-8",[]],["title/7-9",[13,34.281,155,29.578]],["name/7-9",[]],["text/7-9",[]],["component/7-9",[]],["title/7-10",[13,25.175,155,21.722,628,25.469,629,27.506]],["name/7-10",[]],["text/7-10",[]],["component/7-10",[]],["title/7-11",[141,19.342,155,19.175,628,22.483,630,29.667,631,17.967]],["name/7-11",[]],["text/7-11",[]],["component/7-11",[]],["title/7-12",[632,48.316,633,38.563]],["name/7-12",[]],["text/7-12",[]],["component/7-12",[]],["title/7-13",[621,56.549,634,48.316]],["name/7-13",[]],["text/7-13",[]],["component/7-13",[]],["title/7-14",[378,38.563,635,28.152]],["name/7-14",[]],["text/7-14",[]],["component/7-14",[]],["title/7-15",[636,60.87]],["name/7-15",[]],["text/7-15",[]],["component/7-15",[]],["title/7-16",[637,73.47]],["name/7-16",[]],["text/7-16",[]],["component/7-16",[]],["title/7",[13,34.281,580,32.476]],["name/7",[572,0.752]],["text/7",[5,1.065,6,1.713,11,2.427,13,4.872,14,1.737,19,1.484,32,2.443,37,1.621,38,1.065,44,0.872,47,1.737,49,2.125,52,1.091,54,1.406,57,5.05,63,3.378,65,1.999,66,1.342,70,2.19,75,1.342,76,1.347,77,1.484,78,2.641,80,1.053,82,1.342,90,0.941,92,1.065,98,1.315,106,2.285,108,1.946,109,3.049,114,3.083,115,0.925,116,0.879,117,2.579,118,0.978,119,3.811,136,1.289,140,1.12,141,2.524,142,4.328,145,3.877,154,3.694,155,3.536,160,1.222,166,3.28,169,2.507,173,2.72,174,4.418,176,8.555,182,2.949,183,1.874,185,1.406,186,1.315,187,2.546,189,1.315,190,1.167,191,3.044,195,2.427,204,1.654,205,1.243,206,2.125,207,2.485,213,1.167,232,1.654,242,1.532,257,1.849,282,5.656,305,1.737,308,1.77,310,1.737,318,2.237,324,1.185,327,2.125,330,1.289,334,1.065,342,1.167,345,2.125,351,1.342,353,1.185,358,1.243,361,1.654,362,1.83,364,2.971,365,1.54,367,1.15,371,1.008,372,1.008,375,2.616,378,3.694,510,1.851,511,1.315,516,1.008,528,1.532,532,1.849,536,1.532,537,1.406,546,1.15,548,1.484,557,1.587,560,2.44,561,0.933,566,3.143,567,1.851,571,3.313,572,0.909,576,2.916,579,5.854,580,3.111,586,1.737,590,4.695,591,1.946,592,1.065,594,2.025,595,1.849,597,1.443,605,1.203,621,6.383,622,4.784,623,4.345,626,3.213,627,3.213,628,1.851,630,1.406,631,1.962,632,4.628,633,2.059,634,1.484,635,2.381,636,4.218,637,3.213,638,2.579,639,3.843,640,2.285,641,1.737,642,1.737,643,1.607,644,1.406,645,1.621,646,0.718,647,0.968,648,0.797,649,2.524,650,2.018,651,1.03,652,1.999,653,1.607,654,3.005,655,4.651,656,2.018,657,3.507,658,3.019,659,2.323,660,1.289,661,2.018,662,1.962,663,1.372,664,1.849,665,3.019,666,2.125,667,1.135,668,1.587,669,2.018,670,1.443,671,0.872,672,4.384,673,6.294,674,2.125,675,1.289,676,1.946,677,1.654,678,0.968,679,1.406,680,1.443,681,1.315,682,2.385,683,1.737,684,2.579,685,3.019,686,2.091,687,2.028,688,2.199,689,2.758,690,1.737,691,2.125,692,2.874,693,1.532,694,2.018,695,5.043,696,1.484,697,1.587,698,0.95,699,2.018,700,1.372,701,1.443,702,1.849,703,2.018,704,2.018,705,2.865,706,1.15,707,2.018,708,1.406,709,1.532,710,0.968,711,1.019,712,1.091,713,1.135,714,1.12,715,1.587,716,1.372,717,2.018,718,2.018,719,1.587,720,3.005,721,4.651,722,2.018,723,1.667,724,2.507,725,2.874,726,2.579,727,0.577,728,1.587,729,3.019,730,1.849,731,2.662,732,2.018,733,2.018,734,1.222,735,1.265,736,1.484,737,2.018,738,2.758,739,2.018,740,1.654,741,0.95,742,2.018,743,1.315,744,2.018,745,2.018,746,2.018,747,1.716,748,2.018,749,1.587,750,1.315,751,1.484,752,1.484,753,3.507,754,3.522,755,1.105,756,4.003,757,2.018,758,1.532,759,2.018,760,2.018,761,3.507,762,1.654,763,1.372,764,1.654,765,1.999,766,1.849,767,1.532,768,2.874,769,2.018,770,2.018,771,3.53,772,1.185,773,0.925,774,1.342,775,1.752,776,2.758,777,3.428,778,2.662,779,2.199,780,1.532,781,1.265,782,1.243,783,1.372,784,1.654,785,1.167,786,3.507,787,1.091,788,1.443,789,1.849,790,1.289,791,2.018,792,1.315,793,3.53,794,2.018,795,1.849,796,1.406,797,1.443,798,1.019,799,3.507,800,1.243,801,1.203,802,2.018,803,2.018,804,2.758,805,1.15,806,1.849,807,1.532,808,1.372,809,2.515,810,1.716,811,1.289,812,0.998,813,2.018,814,2.018,815,2.018,816,2.758,817,2.018,818,1.167,819,2.018,820,1.091,821,2.018,822,1.008,823,1.265,824,2.018,825,1.654,826,2.018,827,2.018,828,1.654,829,2.018,830,2.018,831,1.484,832,1.849,833,1.342,834,1.737,835,1.105,836,1.849,837,2.018,838,1.849,839,2.018,840,2.018,841,1.443,842,1.654,843,1.289,844,1.443,845,2.018,846,1.654,847,0.941,848,2.018,849,1.484,850,1.849,851,1.443,852,2.018,853,2.018,854,2.018,855,1.654,856,3.019,857,2.018,858,2.018,859,1.737,860,1.443,861,1.041,862,2.018,863,1.946,864,3.507,865,1.737,866,2.579,867,2.018,868,1.849,869,1.587,870,1.315,871,1.587,872,1.849,873,1.443,874,2.333,875,1.737,876,1.484,877,1.12,878,1.654,879,2.018,880,1.372,881,1.443,882,1.443]],["component/7",[57,0.43,142,0.528]],["title/8-1",[166,26.441,201,26.695,883,38.754]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[623,29.37,643,25.489,884,50.966]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[623,29.37,643,25.489,885,36.244]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8-4",[166,26.441,623,29.37,886,34.276]],["name/8-4",[]],["text/8-4",[]],["component/8-4",[]],["title/8-5",[712,30.087,771,42.226,887,33.704]],["name/8-5",[]],["text/8-5",[]],["component/8-5",[]],["title/8-6",[319,27.225,623,29.37,652,31.718]],["name/8-6",[]],["text/8-6",[]],["component/8-6",[]],["title/8-7",[623,34.681,888,38.563]],["name/8-7",[]],["text/8-7",[]],["component/8-7",[]],["title/8",[6,12.714,623,34.681]],["name/8",[572,0.752]],["text/8",[6,2.326,11,1.674,13,2.701,26,1.913,28,1.714,37,1.483,44,1.386,52,1.735,65,1.829,82,3.443,97,2.134,106,2.09,108,1.78,114,3.451,115,2.981,119,2.629,146,1.829,155,3.361,163,1.913,166,5.03,173,1.57,174,4.758,175,1.333,182,2.059,184,5.593,187,1.47,191,1.757,192,2.36,195,1.674,201,3.582,202,1.944,206,1.944,214,3.7,216,4.456,224,5.117,253,2.835,278,2.235,284,3.086,308,2.613,318,1.04,320,1.884,334,4.323,336,1.856,344,1.856,365,1.409,408,2.629,510,1.694,553,2.05,558,3.038,571,1.913,590,2.182,594,1.397,597,5.336,622,2.762,623,5.587,629,1.829,639,1.57,643,4.759,649,1.457,662,2.184,667,1.804,671,1.386,686,3.878,687,1.856,689,5.871,690,5.6,691,4.522,698,2.437,706,1.829,711,1.62,712,4.037,714,1.78,715,2.524,727,2.134,741,1.511,747,1.57,771,6.645,775,1.603,776,4.071,778,3.929,779,3.246,788,2.294,792,2.09,797,2.294,798,1.62,844,3.7,883,5.2,885,2.09,886,3.189,887,6.692,888,1.884,889,2.134,890,3.209,891,5.6,892,6.117,893,3.209,894,6.773,895,4.071,896,4.242,897,5.177,898,4.071,899,1.674,900,1.694,901,2.762,902,2.762,903,5.177,904,3.209,905,1.944,906,3.209,907,2.762,908,3.209,909,3.209,910,1.62,911,2.94,912,1.555,913,3.606,914,3.7,915,1.637,916,2.294,917,3.209,918,2.294,919,3.209,920,5.177,921,2.294,922,1.856,923,3.209,924,2.012,925,2.235,926,2.09,927,2.09,928,3.136,929,1.555,930,3.209,931,3.209,932,2.36,933,1.757,934,3.209,935,3.209,936,3.209,937,2.235,938,1.555,939,1.913,940,3.136,941,3.443,942,3.209,943,2.94,944,2.012,945,1.757,946,1.432,947,2.94,948,1.735,949,2.134,950,3.209,951,2.629,952,3.209,953,2.012,954,1.977,955,2.182,956,2.294,957,3.209,958,1.977,959,3.209,960,3.209,961,3.209,962,8.189,963,9.307,964,3.209,965,5.96,966,4.273,967,3.209,968,5.177,969,3.209,970,5.177,971,5.177]],["component/8",[57,0.43,142,0.528]],["title/9",[5,29.37,64,43.754,972,47.888]],["name/9",[572,0.752]],["text/9",[5,5.742,6,1.773,11,3.635,59,5.709,64,7.206,67,6.383,90,3.25,108,3.865,109,3.376,114,3.3,116,3.034,139,3.972,141,3.164,146,3.972,159,5.997,174,3.474,202,4.221,309,5.152,329,7.508,366,8.887,372,3.48,517,5.997,590,4.738,599,4.484,602,4.539,623,3.678,639,3.409,649,3.164,651,3.555,662,2.939,682,6.963,686,4.153,710,3.343,711,3.517,713,3.917,736,5.124,972,5.997,973,3.409,974,7.716,975,11.601,976,5.288,977,6.968,978,6.968,979,3.926,980,6.954,981,6.968,982,5.288,983,5.479,984,5.997,985,3.635,986,4.153,987,7.206,988,6.095,989,4.853,990,2.659,991,6.382,992,4.369]],["component/9",[57,0.43,142,0.528]],["title/10-1",[682,44.681,727,18.779]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[67,38.754,580,27.503,993,32.176]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[67,45.762,974,43.699]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[736,40.916,979,23.84,990,21.232]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10-5",[698,30.93,994,41.195]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["title/10",[982,49.862,995,60.183]],["name/10",[572,0.752]],["text/10",[4,4.434,5,2.719,6,1.44,13,2.688,27,3.588,28,5.645,51,4.221,57,2.629,63,2.521,64,7.52,67,7.915,69,2.36,70,2.425,78,2.448,90,2.403,92,2.719,109,2.496,114,3.145,118,2.496,142,6.358,146,2.937,161,2.979,173,2.521,174,3.625,183,2.752,192,3.789,194,5.182,200,3.071,201,2.472,225,2.6,243,2.688,309,2.897,350,3.789,351,3.426,353,3.024,366,6.866,373,2.688,374,4.583,375,2.425,511,3.356,512,3.071,523,3.024,537,3.588,560,2.262,561,3.439,584,3.426,599,2.521,649,4.605,653,2.36,654,2.786,676,2.858,682,6.503,685,4.434,698,4.111,700,5.059,710,2.472,711,3.755,727,1.472,736,8.592,743,3.356,785,2.979,874,3.426,876,3.789,880,3.504,954,4.583,972,6.403,974,4.948,976,3.91,979,2.207,985,2.688,986,3.071,990,4.459,992,3.23,993,4.302,994,3.23,996,5.152,997,5.152,998,4.434,999,3.356,1000,4.221,1001,5.152,1002,2.897,1003,5.152,1004,5.152,1005,3.91,1006,5.152,1007,5.152,1008,5.152,1009,6.096,1010,5.152,1011,3.121,1012,5.808,1013,5.471,1014,5.152,1015,3.426,1016,8.759,1017,4.051,1018,4.719,1019,4.221,1020,5.152,1021,4.752,1022,3.174,1023,3.426,1024,2.897,1025,3.588,1026,5.152,1027,3.426,1028,2.688,1029,5.152,1030,5.152]],["component/10",[57,0.43,142,0.528]],["title/11-1",[192,48.316,343,39.799]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[155,29.578,891,56.549]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11",[139,31.718,141,25.266,709,42.226]],["name/11",[572,0.752]],["text/11",[0,3.194,5,4.363,6,2.276,11,4.313,27,4.165,28,3.194,44,4.414,65,3.409,73,5.477,76,2.297,78,3.928,90,3.855,92,3.156,108,3.317,109,2.897,118,2.897,139,3.409,141,2.715,144,4.538,145,3.684,146,4.712,174,4.762,192,6.966,197,6.5,205,3.684,214,5.908,219,5.104,224,4.702,226,5.477,227,5.147,228,5.147,229,4.9,267,3.51,329,4.9,343,3.622,579,5.182,590,5.621,602,3.895,620,5.477,623,3.156,643,2.739,654,3.234,666,3.622,682,4.067,686,3.564,687,3.458,731,4.538,736,6.078,741,2.815,768,4.9,798,3.018,891,9.786,892,4.9,896,4.9,898,4.702,902,5.147,910,3.018,976,6.273,990,3.154,1031,5.98,1032,3.085,1033,8.266,1034,4.397,1035,4.274,1036,5.98,1037,3.275,1038,5.98,1039,5.98,1040,5.477,1041,4.397,1042,8.677,1043,5.147,1044,4.067,1045,5.98,1046,5.007,1047,5.98,1048,4.397]],["component/11",[57,0.43,142,0.528]],["title/12",[339,37.412]],["name/12",[572,0.752]],["text/12",[5,3.651,6,2.284,11,4.758,27,6.352,28,6.475,51,5.667,54,6.352,63,3.384,65,5.816,76,2.657,82,6.065,115,3.169,118,4.943,146,3.943,174,3.457,207,3.695,309,5.127,338,7.7,339,4.759,342,5.9,343,6.18,344,4,346,3.529,348,6.336,349,4.6,350,5.086,351,4.6,352,4.944,353,4.06,354,5.953,355,5.439,356,6.336,357,6.336,358,4.261,359,5.439,360,5.953,362,3.609,364,5.825,365,4.003,366,5.439,369,4.19,371,3.454,503,5.667,517,5.953,547,5.953,619,4.818,798,3.491,953,4.337,954,4.261,1049,6.336,1050,4.818,1051,6.917,1052,4]],["component/12",[57,0.43,142,0.528]],["title/13-1",[378,38.563,727,18.779]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[44,28.377,634,48.316]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[634,48.316,1053,30.646]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13",[141,29.836,822,32.814]],["name/13",[572,0.752]],["text/13",[5,3.586,6,1.055,13,1.786,15,1.807,24,2.598,37,2.52,41,1.786,44,1.479,63,1.675,69,2.498,83,2.946,108,1.899,109,1.659,114,3.534,119,2.805,127,1.467,139,3.108,141,4.092,174,4.813,182,2.168,187,2.498,225,2.752,243,1.786,245,1.925,253,1.875,267,2.009,346,1.747,351,3.626,369,3.302,372,1.71,378,3.988,519,2.23,524,2.958,525,2.328,528,2.598,560,1.503,567,2.878,570,2.946,577,5.879,594,1.491,598,2.805,599,2.668,605,2.041,623,2.878,625,6.092,634,4.009,648,1.352,649,2.476,654,1.851,662,1.444,676,1.899,695,2.328,705,2.109,741,2.567,743,2.23,749,2.692,754,2.782,755,1.875,765,1.952,767,2.598,782,6.045,805,3.873,835,4.242,851,2.447,863,3.769,877,3.024,880,2.328,885,2.23,902,4.692,922,3.153,940,2.074,941,3.626,948,1.851,990,1.306,993,3.153,1002,1.925,1053,5.1,1054,5.452,1055,2.878,1056,4.994,1057,5.452,1058,3.423,1059,3.423,1060,3.423,1061,3.136,1062,2.277,1063,2.384,1064,3.136,1065,3.423,1066,3.423,1067,2.692,1068,2.041,1069,3.423,1070,2.146,1071,3.423,1072,3.423,1073,2.946,1074,3.136,1075,4.856,1076,2.277,1077,3.423,1078,2.946,1079,2.805,1080,2.598,1081,2.384,1082,3.629,1083,7.747,1084,2.946,1085,2.447,1086,5.452,1087,3.359,1088,3.108,1089,3.423,1090,5.452,1091,3.423,1092,3.423,1093,5.269,1094,3.423,1095,5.452,1096,1.98,1097,2.946,1098,2.109,1099,3.423,1100,3.626,1101,5.452,1102,1.728,1103,2.805,1104,9.012,1105,3.423,1106,3.065,1107,3.482,1108,6.092,1109,3.423,1110,2.985,1111,1.659,1112,2.074,1113,4.455,1114,2.328,1115,3.423,1116,3.423,1117,3.423,1118,2.805,1119,3.418,1120,2.946,1121,2.598,1122,1.555,1123,5.342,1124,4.732,1125,8.989,1126,3.423,1127,6.179,1128,5.511,1129,7.749,1130,8.46,1131,3.423,1132,2.277,1133,5.452,1134,6.794,1135,2.517,1136,2.946,1137,2.187,1138,2.692,1139,4.994,1140,8.46,1141,2.517,1142,2.23,1143,3.423,1144,3.136]],["component/13",[57,0.43,142,0.528]],["title/14-1",[57,33.522,510,34.681]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[57,33.522,576,41.195]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14",[5,29.37,6,10.767,189,36.244]],["name/14",[572,0.752]],["text/14",[5,6.303,6,2.311,11,5.364,13,4.355,57,5.245,114,3.006,189,5.437,510,4.406,560,4.891,574,5.966,576,5.233,579,6.446,635,3.576,641,7.184,642,7.184,644,5.813,645,4.752,646,2.969,647,4.004,648,4.399,660,5.331,691,5.056,723,3.966,777,4.752,847,3.893,1145,8.346]],["component/14",[6,0.301]],["title/15",[6,9.337,57,24.618,189,31.43,510,25.469]],["name/15",[572,0.752]],["text/15",[5,5.838,6,2.14,11,4.917,57,4.808,510,4.975,560,4.137,579,5.909,641,8.111,642,8.111,644,6.564,645,4.356,646,3.352,648,3.721,691,5.709,777,4.356]],["component/15",[6,0.301]],["title/16",[6,9.337,57,24.618,189,31.43,576,30.253]],["name/16",[572,0.752]],["text/16",[5,3.761,6,2.301,11,3.717,57,4.744,99,3.558,100,3.386,101,4.006,109,3.452,114,3.951,118,3.452,127,3.053,140,3.952,160,4.316,175,2.96,182,3.698,208,5.092,222,3.452,233,3.675,240,4.845,524,3.102,544,5.407,560,3.127,576,4.467,579,4.467,580,3.522,644,4.962,645,4.298,646,3.682,647,5.461,648,4.333,653,3.264,684,7.612,691,4.316,777,3.293,788,5.093,801,5.542,912,3.452,949,4.739,953,4.467,954,4.389,979,3.984,1102,4.693,1113,3.522,1122,4.222,1146,6.879,1147,6.526,1148,5.838,1149,2.737,1150,4.12,1151,7.124,1152,4.641]],["component/16",[6,0.301]],["title/17-1",[336,37.994,337,42.798]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[723,31.222,1153,39.799]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17-3",[966,34.281,1153,39.799]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["title/17-4",[900,34.681,1154,51.666]],["name/17-4",[]],["text/17-4",[]],["component/17-4",[]],["title/17-5",[1155,65.719]],["name/17-5",[]],["text/17-5",[]],["component/17-5",[]],["title/17-6",[1156,57.332]],["name/17-6",[]],["text/17-6",[]],["component/17-6",[]],["title/17-7",[1157,43.372]],["name/17-7",[]],["text/17-7",[]],["component/17-7",[]],["title/17",[336,46.382]],["name/17",[572,0.752]],["text/17",[6,1.923,21,1.322,23,2.406,37,1.805,38,3.904,40,1.967,49,3.096,78,3.226,80,1.192,102,1.047,105,3.36,114,3.13,115,1.789,116,0.995,123,3.758,155,1.029,173,1.118,174,2.291,182,3.142,183,2.085,190,2.258,195,2.037,201,1.873,218,2.085,219,4.159,220,1.433,225,4.809,243,4.971,245,5.064,253,4.56,308,1.154,318,0.741,319,1.91,327,3.096,334,5.143,336,5.369,337,6.865,346,4.249,380,1.554,381,5.439,512,1.362,524,4.402,560,2.243,573,1.384,575,1.992,594,2.225,599,1.118,605,2.327,629,1.303,631,3.12,645,4.404,646,2.15,647,1.873,648,2.921,649,2.745,651,3.084,662,3.916,667,2.873,671,2.207,688,1.433,698,2.406,711,1.154,714,2.835,720,3.671,723,3.515,724,3.653,727,2.38,741,3.482,747,1.118,755,1.252,765,1.303,773,3.815,775,3.019,777,3.138,790,1.46,797,1.634,798,1.154,816,1.797,820,1.236,822,3.391,844,1.634,874,1.52,876,1.681,881,1.634,900,3.191,910,1.154,912,1.891,913,1.592,914,1.634,915,3.464,929,1.891,945,1.252,946,1.02,953,2.448,954,2.405,966,4.844,973,1.118,986,3.046,1011,1.384,1052,6.436,1055,3.904,1068,1.362,1106,1.285,1113,3.656,1132,1.52,1137,1.46,1153,4.112,1154,3.07,1155,7.983,1156,2.791,1157,5.373,1158,2.285,1159,2.285,1160,2.285,1161,2.285,1162,2.285,1163,2.094,1164,2.094,1165,2.094,1166,2.285,1167,2.285,1168,2.285,1169,2.285,1170,5.111,1171,2.285,1172,2.285,1173,4.019,1174,3.79,1175,1.192,1176,1.46,1177,2.094,1178,2.285,1179,2.094,1180,3.07,1181,2.285,1182,4.21,1183,5.945,1184,3.31,1185,4.729,1186,3.226,1187,3.766,1188,4.63,1189,1.873,1190,2.285,1191,1.592,1192,1.236,1193,3.904,1194,1.221,1195,1.303,1196,2.285,1197,1.408,1198,5.537,1199,2.719,1200,3.36,1201,4.019,1202,3.199,1203,1.967,1204,2.285,1205,2.285,1206,3.204,1207,4.187,1208,4.019,1209,2.405,1210,1.967,1211,2.094,1212,1.433,1213,2.285,1214,1.967,1215,1.873,1216,3.879,1217,3.576,1218,1.52,1219,4.019,1220,2.285,1221,1.734,1222,2.285,1223,5.111,1224,1.46,1225,1.433,1226,1.734,1227,2.061,1228,1.734,1229,1.734,1230,5.111,1231,1.634,1232,2.285,1233,3.904,1234,1.797,1235,1.236,1236,3.904,1237,1.873,1238,2.285,1239,1.967,1240,2.285,1241,1.52,1242,1.221,1243,1.592,1244,2.405,1245,3.904,1246,1.734,1247,1.967,1248,1.554,1249,2.285,1250,3.904,1251,2.285]],["component/17",[6,0.301]],["title/18-1",[1252,41.967,1253,41.967]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[6,12.714,318,21.295]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18-3",[1254,51.666,1255,40.474]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["title/18-4",[671,28.377,1194,35.096]],["name/18-4",[]],["text/18-4",[]],["component/18-4",[]],["title/18",[1256,35.979,1257,56.549]],["name/18",[572,0.752]],["text/18",[6,2.385,15,2.221,23,3.648,26,2.508,36,2.148,37,3.811,44,4.024,49,1.512,55,1.738,66,2.798,67,1.738,70,4.077,76,0.959,78,3.042,90,2.544,99,1.247,100,1.186,101,1.403,114,2.574,115,1.143,116,3.771,118,1.209,127,3.711,140,1.385,141,1.133,155,2.455,174,3.532,175,1.037,182,2.169,184,1.594,186,1.626,187,1.143,190,1.443,191,2.304,195,2.845,207,1.333,218,2.247,219,1.247,222,2.038,318,3.752,334,4.352,339,1.164,344,1.443,367,1.423,371,1.247,372,2.101,375,1.175,381,1.835,414,2.286,447,2.286,509,3.621,527,3.201,546,1.423,558,3.201,560,2.394,561,1.154,564,1.565,566,2.101,571,2.508,576,2.638,590,2.861,594,1.832,605,2.508,618,1.594,628,2.221,629,1.423,631,3.269,635,2.337,638,1.835,639,2.059,643,1.143,644,4.978,645,3.582,646,3.408,647,2.018,648,3.06,653,1.143,654,1.35,662,1.053,663,1.697,666,1.512,671,4.138,678,2.018,688,3.419,691,4.329,698,1.175,705,1.538,706,1.423,710,2.616,711,1.26,712,2.275,720,4.19,723,2.591,727,3.167,741,3.014,747,1.221,750,1.626,754,2.147,772,1.465,777,2.521,801,1.488,809,2.275,810,1.221,811,5.531,812,2.08,818,1.443,847,1.962,861,3.302,910,2.752,912,2.642,915,1.273,922,1.443,927,1.626,929,1.209,944,2.638,946,4.381,985,1.302,988,1.66,990,2.727,1028,1.302,1032,2.17,1041,1.835,1046,2.548,1053,1.164,1087,1.538,1102,2.123,1122,1.91,1149,3.77,1186,3.396,1188,1.186,1194,3.42,1212,1.565,1235,1.35,1241,3.627,1252,1.594,1253,1.594,1254,7.718,1255,6.285,1258,2.724,1259,3.965,1260,4.518,1261,2.365,1262,1.288,1263,2.433,1264,2.496,1265,1.626,1266,2.195,1267,1.333,1268,4.459,1269,1.835,1270,2.508,1271,1.385,1272,1.738,1273,1.488,1274,2.247,1275,2.286,1276,3.599,1277,1.594,1278,2.496,1279,3.429,1280,1.835,1281,2.304,1282,2.496,1283,1.835,1284,4.708,1285,2.496,1286,1.963,1287,2.148,1288,5.742,1289,2.548,1290,1.317,1291,1.565,1292,5.453,1293,1.488,1294,2.045,1295,2.148,1296,1.963,1297,2.045,1298,3.854,1299,1.697,1300,2.496,1301,2.286,1302,2.045,1303,2.496,1304,2.496,1305,1.784,1306,3.308,1307,2.148,1308,2.496,1309,1.465,1310,4.01,1311,4.207,1312,2.045,1313,1.738]],["component/18",[6,0.301]],["title/19-1",[777,22.303,940,29.228,1314,37.943,1315,39.535]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[529,43.699,777,30.369]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[522,39.771,1183,29.722,1316,29.031]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19-4",[522,46.964,713,36.94]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["title/19-5",[6,8.242,182,16.938,777,19.688,1055,22.483,1183,22.753]],["name/19-5",[]],["text/19-5",[]],["component/19-5",[]],["title/19-6",[727,15.903,735,34.886,1317,37.006]],["name/19-6",[]],["text/19-6",[]],["component/19-6",[]],["title/19-7",[727,15.903,899,29.031,1318,30.087]],["name/19-7",[]],["text/19-7",[]],["component/19-7",[]],["title/19-8",[773,25.489,899,29.031,1318,30.087]],["name/19-8",[]],["text/19-8",[]],["component/19-8",[]],["title/19-9",[727,15.903,899,29.031,1318,30.087]],["name/19-9",[]],["text/19-9",[]],["component/19-9",[]],["title/19-10",[566,19.04,651,19.452,899,19.892,1183,20.365,1316,19.892,1318,20.616]],["name/19-10",[]],["text/19-10",[]],["component/19-10",[]],["title/19-11",[566,32.273,645,19.688,648,16.819,1260,22.224]],["name/19-11",[]],["text/19-11",[]],["component/19-11",[]],["title/19-12",[182,19.187,727,13.791,1150,27.902,1319,33.607]],["name/19-12",[]],["text/19-12",[]],["component/19-12",[]],["title/19-13",[1174,41.195,1290,34.681]],["name/19-13",[]],["text/19-13",[]],["component/19-13",[]],["title/19-14",[727,15.903,1320,42.226,1321,39.771]],["name/19-14",[]],["text/19-14",[]],["component/19-14",[]],["title/19",[645,25.718,648,21.971,777,25.718]],["name/19",[572,0.752]],["text/19",[6,2.053,13,0.61,15,0.617,23,0.551,30,2.582,37,0.994,38,1.136,44,2.507,49,2.245,65,1.226,69,1.368,70,2.299,76,1.876,78,3.749,80,1.123,90,2.278,92,1.957,93,3.248,109,1.042,114,3.05,115,1.985,116,1.301,118,0.567,127,0.922,136,0.747,141,0.977,145,0.721,154,1.263,155,0.527,162,0.649,173,0.572,174,3.695,175,1.241,182,4.585,187,1.985,191,2.674,194,1.499,200,0.697,201,0.561,205,0.721,213,2.506,219,2.899,222,0.567,225,1.871,227,1.007,228,1.007,229,0.958,243,1.123,245,1.21,247,0.958,267,1.753,303,0.836,309,3.02,313,2.65,318,2.405,325,0.958,327,3.254,330,4.896,334,1.577,337,3.181,344,0.676,345,0.709,362,0.61,365,0.944,367,0.667,371,0.584,372,1.851,373,1.123,375,2.04,505,0.778,516,0.584,521,0.815,523,0.687,524,0.937,528,0.888,529,1.431,546,0.667,548,0.86,558,0.687,560,2.548,561,1.381,564,0.733,566,3.574,567,0.617,574,0.836,575,1.098,579,0.733,591,1.657,592,2.287,594,1.301,596,0.815,608,0.625,618,0.747,628,2.287,629,0.667,631,3.882,635,1.28,639,2.39,640,0.762,643,0.536,645,5.362,646,2.329,648,4.615,649,2.218,651,3.161,653,1.698,654,1.163,659,1.851,662,2.06,666,0.709,671,0.505,672,0.815,675,0.747,676,0.649,683,1.852,692,0.958,698,0.551,710,1.433,713,4.661,716,1.463,720,4.907,723,1.419,727,2.555,735,2.324,741,2.529,754,1.524,756,1.007,765,1.226,773,4.586,775,0.584,776,0.92,777,5.242,778,3.289,779,2.717,783,0.796,790,0.747,797,0.836,801,0.697,805,1.703,808,0.796,809,1.615,810,1.053,811,1.374,812,1.063,820,1.163,822,1.851,832,1.072,847,2.021,863,0.649,882,0.836,899,4.326,910,1.086,912,2.099,915,1.098,916,1.538,918,1.538,922,0.676,928,0.709,929,3.172,939,0.697,940,1.303,946,2.922,966,1.559,973,0.572,984,1.852,986,2.911,990,2.05,1002,2.436,1024,2.084,1037,1.178,1055,4.718,1068,1.781,1087,1.325,1102,1.871,1114,0.796,1148,1.763,1150,5.169,1153,0.709,1174,4.305,1176,0.747,1183,4.774,1184,0.641,1185,0.815,1186,2.059,1187,1.657,1188,3.111,1192,0.633,1195,1.703,1199,0.815,1227,2.287,1247,1.007,1255,1.325,1259,0.649,1260,1.123,1261,3.681,1267,1.98,1271,0.649,1279,1.779,1281,0.641,1289,0.709,1293,0.697,1302,0.958,1314,2.349,1316,3.416,1317,3.572,1318,4.907,1319,2.582,1320,0.888,1321,0.836,1322,4.428,1323,1.123,1324,2.031,1325,0.888,1326,1.123,1327,1.763,1328,1.538,1329,1.17,1330,1.17,1331,0.958,1332,1.007,1333,5.997,1334,5.635,1335,0.658,1336,2.736,1337,1.633,1338,0.676,1339,2.151,1340,1.636,1341,1.499,1342,1.17,1343,2.151,1344,0.721,1345,0.747,1346,0.958,1347,3.396,1348,0.92,1349,0.888,1350,1.17,1351,1.401,1352,2.245,1353,1.072,1354,1.873,1355,1.072,1356,0.888,1357,6.547,1358,0.92,1359,3.707,1360,2.151,1361,1.971,1362,2.349,1363,0.92,1364,1.17,1365,0.641,1366,0.641,1367,3.396,1368,1.17,1369,0.92,1370,2.151,1371,4.333,1372,0.815,1373,2.151,1374,1.17,1375,2.151,1376,1.17,1377,2.151,1378,0.687,1379,0.86,1380,0.92,1381,0.697,1382,1.538,1383,3.97,1384,1.17,1385,2.151,1386,1.17,1387,0.815,1388,0.836,1389,0.888,1390,1.072,1391,0.721,1392,1.17,1393,1.17,1394,1.226,1395,1.17,1396,1.17,1397,1.431,1398,0.86,1399,3.707,1400,1.007,1401,1.17,1402,0.762,1403,1.17,1404,1.971,1405,0.86,1406,0.958,1407,1.072,1408,1.007,1409,0.888,1410,4.12,1411,0.747,1412,1.072,1413,3.653,1414,0.958,1415,1.17,1416,2.151,1417,2.151,1418,1.692,1419,0.958,1420,1.17,1421,1.17,1422,0.815,1423,0.888,1424,2.151,1425,2.151,1426,1.007,1427,1.98,1428,2.151,1429,0.92,1430,1.17,1431,1.17,1432,1.17,1433,1.17,1434,1.17,1435,1.781,1436,1.072,1437,1.17,1438,1.463,1439,0.778,1440,1.538,1441,0.92,1442,1.17,1443,1.17,1444,2.151,1445,2.151,1446,1.17,1447,1.17,1448,1.17,1449,1.17,1450,1.17,1451,1.17,1452,1.17,1453,1.17,1454,1.17,1455,1.17,1456,1.17,1457,1.17,1458,1.17,1459,1.17,1460,1.17,1461,1.007,1462,2.151,1463,2.151,1464,2.151,1465,2.151,1466,1.17,1467,2.151,1468,2.151,1469,1.17,1470,1.17,1471,1.072,1472,2.987,1473,2.987,1474,0.762,1475,1.072,1476,1.633,1477,1.17,1478,1.072,1479,1.17,1480,0.778,1481,1.17]],["component/19",[6,0.301]],["title/20-1",[1286,51.666,1482,39.799]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[6,12.714,160,39.799]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20-3",[6,12.714,691,39.799]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["title/20-4",[6,12.714,671,28.377]],["name/20-4",[]],["text/20-4",[]],["component/20-4",[]],["title/20-5",[645,25.718,648,21.971,777,25.718]],["name/20-5",[]],["text/20-5",[]],["component/20-5",[]],["title/20-6",[182,22.126,777,25.718,1150,32.176]],["name/20-6",[]],["text/20-6",[]],["component/20-6",[]],["title/20-7",[660,41.967,777,30.369]],["name/20-7",[]],["text/20-7",[]],["component/20-7",[]],["title/20",[671,28.377,709,49.862]],["name/20",[572,0.752]],["text/20",[1,0.733,5,0.617,6,2.221,13,1.557,15,1.134,23,1.012,30,0.814,37,1.712,38,1.134,41,1.121,42,1.85,44,3.496,49,0.708,52,0.632,57,0.596,63,1.052,69,1.697,70,0.55,76,1.875,78,1.418,90,1.002,100,1.021,101,1.208,108,2.054,109,0.566,114,2.356,116,1.885,129,1.021,133,0.733,146,2.782,155,1.667,160,2.956,161,1.726,163,1.779,170,1.324,171,1.969,173,0.572,174,4.466,182,3.658,183,0.624,184,1.906,187,2.836,212,6.982,213,2.142,216,3.187,218,1.978,219,1.49,220,1.347,222,1.794,225,2.463,232,0.957,233,1.91,243,2.546,245,2.082,253,1.177,254,1.69,266,1.07,267,1.261,284,1.281,313,0.835,318,3.216,319,0.572,324,0.686,327,2.956,330,4.382,334,4.162,339,2.276,342,0.676,343,0.708,346,0.596,365,0.943,371,0.584,372,2.68,374,0.72,375,1.743,510,0.617,516,2.68,524,0.936,537,0.814,544,0.887,546,3.307,558,1.261,560,1.31,561,1.379,564,0.733,566,2.162,567,0.617,571,0.696,573,1.302,575,2.49,592,1.134,594,0.509,597,1.536,599,0.572,602,0.761,608,0.624,614,0.676,618,0.746,624,1.461,629,0.666,631,2.058,635,1.587,639,0.572,640,0.761,643,0.985,644,0.814,645,4.793,646,2.202,648,3.918,649,2.216,653,1.983,659,0.584,662,0.907,667,0.657,671,3.918,676,0.648,677,0.957,678,2.341,680,0.835,682,2.518,683,1.006,684,0.859,687,1.243,691,1.808,693,1.631,695,6.256,711,1.085,712,0.632,713,2.434,716,1.461,720,5.102,723,2.057,727,2.313,734,1.302,735,0.733,741,1.405,747,1.052,754,2.49,767,0.887,773,0.535,774,0.777,776,0.919,777,4.851,778,0.887,779,5.075,785,1.726,787,0.632,790,1.373,798,0.59,809,2.341,810,1.46,811,5.037,812,3.535,822,2.68,834,1.006,835,0.64,847,3.573,861,1.91,863,0.648,888,0.686,899,0.61,905,0.708,910,2.185,912,1.794,913,0.814,915,2.738,929,2.098,938,1.794,939,2.207,940,0.708,944,0.733,945,0.64,946,4.161,955,2.518,966,2.259,973,1.052,979,2.091,983,0.919,985,1.121,990,0.446,991,1.07,999,1.4,1000,0.957,1024,0.657,1028,0.61,1053,2.276,1055,1.134,1056,1.07,1068,0.696,1088,0.666,1113,1.831,1127,0.696,1149,2.636,1150,3.58,1152,0.761,1174,0.733,1183,1.148,1186,1.418,1188,2.55,1192,0.632,1194,1.148,1207,0.957,1208,0.919,1254,2.346,1255,4.719,1256,1.634,1258,1.073,1259,0.648,1260,1.557,1261,0.657,1266,2.259,1268,2.078,1270,1.281,1273,0.696,1274,1.148,1276,2.082,1279,1.031,1281,0.64,1290,0.617,1291,1.871,1293,0.696,1310,6.462,1312,0.957,1313,0.814,1316,0.61,1317,0.777,1318,0.632,1319,0.814,1322,0.835,1323,0.61,1327,0.957,1328,1.536,1334,2.568,1335,1.208,1337,0.887,1340,0.64,1341,0.814,1346,0.957,1347,1.969,1349,0.887,1358,1.69,1362,0.919,1365,1.634,1367,1.07,1369,2.346,1378,1.261,1379,0.859,1387,3.016,1388,2.647,1389,3.703,1406,0.957,1474,1.944,1483,1.006,1484,0.795,1485,1.168,1486,3.547,1487,2.149,1488,1.168,1489,1.168,1490,0.957,1491,0.777,1492,2.265,1493,1.168,1494,1.969,1495,2.864,1496,1.461,1497,1.168,1498,1.168,1499,1.006,1500,1.168,1501,0.835,1502,1.168,1503,1.168,1504,0.835,1505,1.07,1506,1.969,1507,0.835,1508,0.919,1509,0.957,1510,0.957,1511,1.168,1512,1.4,1513,1.168,1514,1.07,1515,1.969,1516,1.761,1517,0.835,1518,1.006,1519,0.957,1520,5.363,1521,3.882,1522,3.318,1523,1.006,1524,1.302,1525,1.006,1526,0.957,1527,0.957,1528,0.887,1529,0.957,1530,0.957,1531,1.006,1532,1.006,1533,7.235,1534,6.788,1535,1.168,1536,4.562,1537,2.912,1538,2.912,1539,2.912,1540,2.912,1541,2.912,1542,1.168,1543,3.034,1544,2.984,1545,2.346,1546,1.168,1547,2.984,1548,2.912,1549,1.168,1550,0.957,1551,0.887,1552,1.006,1553,0.887,1554,1.168,1555,0.814,1556,2.149,1557,1.85,1558,1.761,1559,1.07,1560,1.168,1561,1.168,1562,1.168,1563,1.168,1564,1.168,1565,1.168,1566,1.07,1567,1.168,1568,1.168,1569,1.168,1570,1.168,1571,1.006,1572,0.835,1573,1.85,1574,1.006,1575,1.07,1576,0.919,1577,0.761,1578,1.969,1579,0.919,1580,0.814,1581,2.733,1582,0.936,1583,1.168,1584,1.168,1585,1.168,1586,1.168,1587,0.919,1588,0.919,1589,1.168,1590,4.33,1591,1.168,1592,1.168,1593,1.168,1594,1.168,1595,1.168,1596,1.168,1597,1.168,1598,1.168,1599,0.795,1600,1.07,1601,1.168,1602,1.168,1603,1.168,1604,1.168,1605,1.168,1606,1.168,1607,2.984,1608,1.168,1609,1.168,1610,1.168,1611,1.168,1612,1.168,1613,2.149,1614,2.149,1615,2.149,1616,2.149,1617,2.149,1618,2.149,1619,2.149,1620,2.149,1621,1.168,1622,1.168,1623,1.168,1624,1.168,1625,1.168,1626,1.168,1627,1.168,1628,1.168,1629,1.168,1630,1.168,1631,1.168,1632,1.168,1633,1.168]],["component/20",[6,0.301]],["title/21",[5,29.37,6,10.767,70,26.194]],["name/21",[572,0.752]],["text/21",[5,4.525,6,1.659,70,4.036,76,4.508,80,4.473,85,6.741,99,4.282,100,4.074,101,4.82,174,3.25,219,4.282,220,5.375,222,4.153,233,4.423,336,4.957,600,4.694,645,3.963,648,3.385,777,3.963,886,5.281,899,4.473,900,4.525,1032,4.423,1149,3.293,1212,5.375,1317,5.702,1509,7.024,1582,3.733,1599,5.83,1634,6.304,1635,4.473,1636,7.47,1637,6.304]],["component/21",[6,0.301]],["title/22",[5,29.37,6,10.767,1638,55.639]],["name/22",[572,0.752]],["text/22",[6,2.194,34,5.449,100,5.007,101,4.886,233,5.436,339,4.915,618,5.551,727,3.583,861,5.436,899,4.534,900,5.562,1053,4.054,1149,3.339,1276,5.924,1281,4.759,1293,5.18,1639,6.595,1640,5.18,1641,5.026]],["component/22",[6,0.301]],["title/23-1",[727,22.924]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23-2",[318,21.295,1634,48.316]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["title/23-3",[727,15.903,966,29.031,1634,40.916]],["name/23-3",[]],["text/23-3",[]],["component/23-3",[]],["title/23-4",[727,18.779,1634,48.316]],["name/23-4",[]],["text/23-4",[]],["component/23-4",[]],["title/23-5",[127,28.152,1642,60.183]],["name/23-5",[]],["text/23-5",[]],["component/23-5",[]],["title/23-6",[1643,80.206]],["name/23-6",[]],["text/23-6",[]],["component/23-6",[]],["title/23-7",[1644,80.206]],["name/23-7",[]],["text/23-7",[]],["component/23-7",[]],["title/23-8",[1645,80.206]],["name/23-8",[]],["text/23-8",[]],["component/23-8",[]],["title/23-9",[1646,80.206]],["name/23-9",[]],["text/23-9",[]],["component/23-9",[]],["title/23",[1634,58.983]],["name/23",[572,0.752]],["text/23",[6,1.185,10,1.352,13,0.861,15,5.591,37,1.835,41,0.861,44,1.715,49,0.999,57,0.842,69,0.756,76,0.634,78,1.396,80,2.072,82,1.097,85,2.31,90,0.77,102,1.346,104,1.252,108,0.915,109,2.334,111,1.149,114,3.196,116,2.405,127,1.701,129,3.716,141,1.334,145,1.016,155,0.743,173,1.943,174,3.742,182,3.925,189,3.599,190,0.954,194,1.149,195,0.861,201,3.185,202,0.999,207,0.881,208,0.903,213,3.541,214,3.443,219,0.824,224,2.31,225,4.479,243,3.696,245,3.443,253,3.879,267,3.594,273,5.038,278,4.265,284,3.65,308,1.483,313,4.377,318,2.535,319,2.996,330,1.054,339,2.856,340,1.42,344,0.954,349,1.097,351,1.097,358,2.446,362,0.861,365,2.425,367,1.674,372,4.712,375,2.268,378,0.968,505,1.097,511,1.075,512,1.751,516,1.467,524,2.405,529,1.097,558,2.33,560,1.289,561,2.227,564,1.034,566,0.824,567,0.871,594,1.729,597,3.443,599,0.807,605,0.983,608,0.881,614,0.954,615,1.179,624,1.122,631,2.988,635,1.259,643,0.756,645,0.763,646,0.587,648,2.181,649,1.334,651,1.499,652,0.94,659,2.406,662,1.675,663,1.122,671,0.713,676,2.203,678,1.905,696,4.062,698,0.777,706,1.674,711,0.833,712,1.588,713,0.928,720,2.605,723,1.887,727,2.648,734,0.999,735,1.034,741,0.777,747,0.807,754,0.842,772,0.968,773,5.277,777,1.358,787,0.892,790,1.054,796,2.046,807,1.252,808,1.122,809,0.892,822,3.058,833,1.097,843,1.876,844,1.179,847,0.77,861,0.851,877,0.915,885,1.075,886,1.809,887,3.709,895,2.31,910,0.833,912,1.923,915,2.026,921,1.179,922,0.954,929,4.299,938,1.923,946,1.311,958,1.809,966,2.072,973,1.437,979,0.707,990,1.121,999,1.075,1002,1.651,1009,1.352,1012,4.073,1025,1.149,1028,0.861,1032,0.851,1048,1.213,1052,3.195,1053,1.37,1055,2.096,1061,1.511,1080,3.656,1102,0.833,1113,1.452,1121,1.252,1137,2.536,1153,0.999,1174,2.489,1175,2.072,1182,3.355,1183,1.569,1184,0.903,1188,1.396,1218,1.954,1227,0.871,1237,1.352,1242,0.881,1255,1.016,1260,0.861,1266,1.533,1271,4.509,1279,0.792,1287,1.42,1289,0.999,1297,1.352,1313,1.149,1316,0.861,1317,1.954,1345,1.054,1365,3.353,1391,1.016,1394,1.674,1397,4.415,1402,3.989,1405,2.92,1480,1.097,1482,0.999,1501,1.179,1504,1.179,1516,1.352,1521,1.034,1522,1.122,1580,1.149,1582,1.279,1588,1.297,1634,7.847,1642,8.128,1647,2.046,1648,5.252,1649,1.65,1650,1.352,1651,1.122,1652,1.42,1653,1.65,1654,1.998,1655,1.511,1656,1.42,1657,1.252,1658,1.511,1659,1.65,1660,1.511,1661,1.511,1662,1.297,1663,2.31,1664,4.815,1665,1.297,1666,1.511,1667,1.65,1668,2.937,1669,1.65,1670,1.213,1671,1.65,1672,3.97,1673,1.65,1674,1.65,1675,0.999,1676,6.638,1677,6.125,1678,1.65,1679,1.65,1680,1.65,1681,4.817,1682,1.65,1683,1.511,1684,1.213,1685,1.65,1686,1.65,1687,1.751,1688,1.65,1689,1.179,1690,2.046,1691,1.65,1692,1.65,1693,1.65,1694,1.65,1695,1.122,1696,4.817,1697,2.937,1698,2.937,1699,1.65,1700,1.297,1701,6.995,1702,4.344,1703,4.503,1704,6.408,1705,2.92,1706,4.815,1707,1.65,1708,4.817,1709,1.65,1710,1.65,1711,1.65,1712,2.937,1713,2.937,1714,2.937,1715,2.937,1716,2.937,1717,2.937,1718,6.607,1719,2.937,1720,1.179,1721,1.42,1722,1.65,1723,1.149,1724,1.252,1725,1.42,1726,1.352,1727,1.122,1728,1.65,1729,3.417,1730,2.31,1731,1.65,1732,1.65,1733,1.65,1734,1.511,1735,1.65,1736,1.65,1737,1.511,1738,1.65,1739,1.65,1740,1.65,1741,1.65,1742,1.65,1743,1.65,1744,1.65,1745,2.937,1746,7.82,1747,1.65,1748,1.65,1749,1.65,1750,1.65,1751,1.65,1752,1.65,1753,1.65,1754,1.65,1755,1.65,1756,1.65,1757,1.65,1758,2.691,1759,1.65,1760,2.937,1761,1.65,1762,2.691,1763,1.65,1764,2.229,1765,1.65,1766,1.65,1767,2.937,1768,1.65,1769,1.65,1770,2.1,1771,1.65,1772,2.31,1773,1.213,1774,1.511,1775,2.937,1776,1.42,1777,2.31,1778,2.229,1779,3.97,1780,2.937,1781,1.42,1782,1.075,1783,1.097,1784,0.983,1785,1.149]],["component/23",[6,0.301]],["title/24-1",[727,22.924]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24-2",[318,21.295,1786,49.862]],["name/24-2",[]],["text/24-2",[]],["component/24-2",[]],["title/24-3",[727,18.779,1786,49.862]],["name/24-3",[]],["text/24-3",[]],["component/24-3",[]],["title/24-4",[1310,48.316,1786,49.862]],["name/24-4",[]],["text/24-4",[]],["component/24-4",[]],["title/24-5",[6,9.337,82,32.092,1194,25.774,1648,26.422]],["name/24-5",[]],["text/24-5",[]],["component/24-5",[]],["title/24-6",[6,10.767,1787,34.886,1788,50.966]],["name/24-6",[]],["text/24-6",[]],["component/24-6",[]],["title/24",[1786,60.87]],["name/24",[572,0.752]],["text/24",[6,1.978,26,3.567,44,1.665,69,1.766,76,2.819,78,2.844,82,2.564,102,4.102,104,2.925,108,2.138,111,2.685,114,3.681,127,4.597,146,2.197,155,1.735,174,2.781,175,1.601,182,3.561,201,1.849,208,2.111,213,3.461,219,1.925,318,3.786,327,4.444,330,4.686,334,2.035,339,4.177,342,3.461,346,1.967,371,2.989,375,1.815,510,2.035,519,2.511,527,2.262,546,2.197,561,3.391,599,1.886,631,2.525,635,3.544,645,1.782,646,2.129,648,1.522,649,1.75,651,1.967,654,2.084,662,2.525,671,1.665,687,2.229,711,3.021,713,3.365,723,1.832,727,1.711,741,2.817,775,1.925,777,1.782,778,5.568,779,6.957,811,2.462,812,2.958,822,1.925,887,3.625,910,3.021,926,2.511,940,3.625,946,3.692,948,2.084,954,2.374,958,3.687,986,2.298,1002,2.167,1034,2.834,1055,4.366,1063,4.169,1068,2.298,1149,2.299,1183,2.059,1192,4.472,1194,2.059,1270,2.298,1279,1.849,1289,2.335,1310,4.401,1313,5.761,1345,3.823,1394,3.412,1411,6.053,1521,2.417,1572,2.755,1581,3.531,1647,2.685,1648,5.875,1665,4.706,1677,3.158,1683,3.531,1705,2.834,1706,3.031,1773,6.082,1776,3.317,1786,8.986,1787,2.417,1788,3.531,1789,2.621,1790,3.854,1791,5.151,1792,4.542,1793,3.031,1794,3.531,1795,3.317,1796,8.27,1797,3.854,1798,3.031,1799,6.277,1800,3.854,1801,3.531,1802,3.531,1803,3.854,1804,3.854,1805,3.854,1806,5.985,1807,7.337,1808,3.854,1809,3.854,1810,7.337,1811,7.337,1812,3.854,1813,3.531,1814,3.854,1815,3.317,1816,3.854,1817,3.854,1818,3.854,1819,3.031,1820,3.317,1821,7.576,1822,5.985,1823,3.854,1824,5.985,1825,3.854,1826,3.854,1827,3.854,1828,3.854]],["component/24",[6,0.301]],["title/25-1",[76,18.537,686,28.761,946,21.537,1635,25.175]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25-2",[76,18.537,946,21.537,1635,25.175,1829,24.098]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["title/25-3",[365,13.833,938,15.266,1046,19.088,1260,16.441,1635,16.441,1829,15.738,1830,25.819,1831,23.914]],["name/25-3",[]],["text/25-3",[]],["component/25-3",[]],["title/25-4",[174,14.452,938,18.47,1012,25.356,1635,19.892,1648,20.877,1829,19.04]],["name/25-4",[]],["text/25-4",[]],["component/25-4",[]],["title/25-5",[339,19.867,938,20.636,1635,22.224,1829,21.273,1832,24.631]],["name/25-5",[]],["text/25-5",[]],["component/25-5",[]],["title/25",[174,18.291,1032,24.892,1599,32.813,1635,25.175]],["name/25",[572,0.752]],["text/25",[0,2.272,6,1.927,11,0.728,13,0.728,15,2.906,18,1.144,34,1.585,37,1.602,38,0.737,44,2.788,52,1.874,57,0.712,66,0.929,70,0.657,74,1.098,76,1.331,90,1.616,97,0.929,109,0.676,111,2.962,114,3.136,115,0.64,116,1.101,118,1.679,127,1.822,129,4.305,136,0.892,140,2.359,160,2.099,162,1.403,163,1.507,165,1.202,173,0.683,174,4.138,175,1.05,182,2.989,183,0.746,187,1.587,191,0.765,195,0.728,200,0.832,201,0.67,208,0.765,209,0.892,218,3.658,221,0.909,308,0.705,309,3.85,318,2.936,319,1.237,334,2.245,339,1.616,343,0.846,344,0.807,346,1.29,352,1.807,358,0.86,362,1.319,365,1.867,371,2.124,372,1.731,373,0.728,374,0.86,375,1.19,376,1.098,380,0.949,521,0.972,522,0.998,523,0.819,524,0.608,527,1.484,560,1.521,561,0.645,564,0.875,566,1.731,573,0.846,584,0.929,592,2.245,594,2.81,596,3.43,600,0.765,614,2.004,619,1.761,628,0.737,631,2.078,635,0.598,639,0.683,643,1.158,646,3.883,648,0.998,649,1.574,651,1.29,652,2.808,653,1.158,654,0.755,662,1.462,666,0.846,670,0.998,671,1.837,674,0.846,676,1.922,678,2.363,686,5.4,698,0.657,708,0.972,710,0.67,711,0.705,714,0.774,723,3.572,727,2.785,741,2.829,747,2.41,773,2.256,801,1.507,804,1.988,809,0.755,810,1.696,811,2.717,812,2.434,818,1.462,822,0.697,841,0.998,847,1.984,849,1.027,861,0.72,863,1.403,887,0.846,894,1.027,910,0.705,912,3.488,915,0.712,929,3.318,938,4.019,944,0.875,946,3.214,956,0.998,973,1.696,974,4.293,979,1.485,985,0.728,989,0.972,990,0.533,992,0.875,1002,0.785,1012,4.293,1018,1.279,1022,1.558,1028,1.319,1032,2.541,1035,4.296,1037,0.765,1046,3.91,1050,0.972,1062,0.929,1081,0.972,1082,3.211,1106,0.785,1112,0.846,1122,4.313,1127,0.832,1149,0.536,1186,2.021,1188,3.067,1191,0.972,1192,1.367,1194,0.746,1209,0.86,1231,0.998,1242,2.631,1243,2.414,1255,1.558,1258,1.263,1259,1.403,1260,4.205,1265,1.647,1267,1.351,1270,0.832,1272,0.972,1274,0.746,1276,0.785,1277,0.892,1279,1.663,1289,0.846,1297,2.072,1305,0.998,1316,1.808,1318,4.485,1323,0.728,1345,2.717,1352,0.846,1365,1.385,1366,0.765,1379,1.027,1381,0.832,1388,1.807,1402,3.586,1411,1.615,1474,1.647,1480,0.929,1484,3.744,1510,1.144,1520,0.949,1599,3.349,1635,5.722,1648,1.898,1705,1.859,1782,2.257,1783,1.682,1799,2.63,1829,5.269,1830,5.611,1831,4.178,1832,3.476,1833,1.202,1834,3.661,1835,1.988,1836,0.909,1837,2.316,1838,10.401,1839,4.253,1840,6.973,1841,2.63,1842,0.949,1843,0.755,1844,2.072,1845,2.839,1846,1.279,1847,1.098,1848,1.06,1849,3.896,1850,1.279,1851,7.652,1852,5.505,1853,0.972,1854,1.027,1855,1.279,1856,8.058,1857,0.796,1858,0.846,1859,4.511,1860,5.913,1861,0.774,1862,1.279,1863,1.279,1864,3.174,1865,3.174,1866,1.027,1867,3.174,1868,3.174,1869,4.511,1870,1.279,1871,1.279,1872,2.839,1873,1.279,1874,2.316,1875,0.892,1876,1.027,1877,1.06,1878,0.929,1879,2.839,1880,1.144,1881,2.982,1882,1.202,1883,1.919,1884,1.396,1885,1.144,1886,1.279,1887,3.896,1888,2.725,1889,4.511,1890,1.279,1891,0.832,1892,1.396,1893,1.202,1894,2.414,1895,1.396,1896,1.396,1897,1.396,1898,1.396,1899,2.528,1900,1.279,1901,3.465,1902,2.528,1903,3.465,1904,2.528,1905,2.528,1906,2.316,1907,2.316,1908,0.949,1909,1.279,1910,3.128,1911,2.983,1912,5.544,1913,0.875,1914,0.949,1915,1.988,1916,0.972,1917,2.63,1918,1.098,1919,1.279,1920,1.279,1921,2.528,1922,2.072,1923,3.345,1924,1.396,1925,1.988,1926,2.528,1927,2.528,1928,1.279,1929,1.279]],["component/25",[6,0.301]],["title/26-1",[575,33.522,1271,36.449]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26-2",[1930,73.47]],["name/26-2",[]],["text/26-2",[]],["component/26-2",[]],["title/26-3",[1931,73.47]],["name/26-3",[]],["text/26-3",[]],["component/26-3",[]],["title/26-4",[1398,58.983]],["name/26-4",[]],["text/26-4",[]],["component/26-4",[]],["title/26-5",[587,44.198,1932,44.198,1933,33.607,1934,30.82]],["name/26-5",[]],["text/26-5",[]],["component/26-5",[]],["title/26-6",[22,55.865]],["name/26-6",[]],["text/26-6",[]],["component/26-6",[]],["title/26-7",[1935,73.47]],["name/26-7",[]],["text/26-7",[]],["component/26-7",[]],["title/26-8",[1936,73.47]],["name/26-8",[]],["text/26-8",[]],["component/26-8",[]],["title/26-9",[6,10.767,182,22.126,1055,29.37]],["name/26-9",[]],["text/26-9",[]],["component/26-9",[]],["title/26-10",[575,33.522,1937,46.964]],["name/26-10",[]],["text/26-10",[]],["component/26-10",[]],["title/26",[1317,53.346]],["name/26",[572,0.752]],["text/26",[6,1.853,22,3.465,37,0.797,38,3.322,44,1.777,49,2.492,69,0.79,70,0.812,76,0.663,78,3.447,80,1.594,102,2.883,109,1.993,114,3.171,115,1.4,116,1.33,122,4.474,127,2.132,129,2.704,133,1.081,141,1.388,169,4.067,173,2.434,174,1.559,182,4.026,184,1.102,187,1.4,191,1.673,201,0.827,202,3.014,213,0.997,218,3.637,219,0.861,225,4.321,242,3.776,243,3.785,245,3.538,253,3.446,267,1.012,284,1.821,308,1.542,313,1.233,318,2.207,319,0.844,326,1.309,327,3.014,330,5.1,334,2.171,336,0.997,349,1.147,365,2.184,366,1.356,372,1.526,375,2.342,512,2.966,516,0.861,524,2.964,526,1.173,527,1.012,540,1.916,558,1.793,560,1.806,561,0.797,564,1.081,566,0.861,567,3.322,575,5.537,591,0.957,594,0.751,599,0.844,600,1.673,605,1.028,608,3.637,631,2.872,635,1.763,638,1.268,639,1.495,645,3.147,646,1.77,648,3.018,649,1.868,651,2.903,652,0.983,653,0.79,654,3.077,662,2.099,667,0.97,668,1.356,698,0.812,711,3.436,712,1.652,713,5.074,723,3.447,727,2.184,734,1.045,735,5.52,738,1.356,740,1.413,747,1.495,772,1.012,773,4.938,775,3.623,776,1.356,778,1.309,779,1.916,787,4.133,808,4.63,833,2.032,847,0.804,849,3.025,871,1.356,887,1.851,905,1.045,915,3.211,929,0.836,933,0.944,938,1.48,944,1.081,945,0.944,946,2.54,966,5.15,973,2.434,979,2.696,986,1.821,987,1.356,1028,0.9,1032,3.246,1041,1.268,1055,4.966,1082,3.875,1096,0.997,1113,0.853,1121,1.309,1137,2.628,1153,3.812,1157,1.652,1174,5.898,1175,2.146,1176,1.102,1182,1.201,1183,3.637,1184,0.944,1187,2.282,1188,1.955,1192,1.652,1199,1.201,1206,1.081,1211,1.58,1215,1.413,1219,3.912,1231,2.94,1241,2.736,1244,1.062,1262,0.89,1271,5.117,1274,2.197,1279,1.466,1289,1.851,1290,3.003,1299,1.173,1317,5.083,1323,0.9,1324,1.173,1345,1.102,1348,3.912,1365,2.253,1382,1.233,1383,8.266,1394,0.983,1397,1.147,1398,3.659,1400,3.541,1402,2.68,1405,1.268,1407,5.212,1408,4.897,1411,2.628,1501,1.233,1504,1.233,1512,1.123,1577,1.123,1582,0.751,1588,1.356,1652,1.484,1655,1.58,1657,1.309,1663,1.356,1684,1.268,1700,1.356,1702,2.403,1705,1.268,1718,2.403,1729,3.541,1730,2.403,1734,3.768,1737,1.58,1773,4.184,1782,4.099,1791,1.484,1843,2.224,1913,1.081,1916,1.201,1930,2.799,1931,4.557,1932,3.768,1934,1.952,1935,2.799,1936,4.557,1937,6.451,1938,5.156,1939,2.184,1940,1.413,1941,1.725,1942,4.474,1943,4.776,1944,4.282,1945,1.58,1946,1.102,1947,6.236,1948,1.725,1949,3.056,1950,4.114,1951,1.725,1952,1.725,1953,1.356,1954,1.268,1955,1.484,1956,1.725,1957,1.725,1958,1.725,1959,1.725,1960,1.725,1961,1.725,1962,1.725,1963,1.725,1964,2.63,1965,4.975,1966,3.056,1967,1.725,1968,1.309,1969,4.114,1970,2.128,1971,1.725,1972,1.725,1973,1.725,1974,1.725,1975,6.293,1976,4.975,1977,1.725,1978,1.725,1979,1.725,1980,3.056,1981,1.725,1982,1.725,1983,1.725,1984,1.58,1985,1.725,1986,1.725,1987,1.725,1988,1.58,1989,1.725,1990,1.725,1991,1.725,1992,1.725,1993,1.725,1994,1.725,1995,3.541,1996,3.056,1997,1.201,1998,3.056,1999,2.799,2000,1.233,2001,1.484,2002,1.309,2003,5.69,2004,5.69,2005,1.58,2006,1.484,2007,1.413,2008,1.268,2009,1.356,2010,1.725,2011,1.725]],["component/26",[6,0.301]],["title/27",[2012,47.888,2013,55.639,2014,55.639]],["name/27",[572,0.752]],["text/27",[6,1.896,92,3.369,102,2.924,114,3.112,174,2.419,175,2.651,182,4.364,219,4.316,225,4.362,243,4.509,245,4.859,253,4.732,318,2.068,334,5.793,512,3.804,560,2.801,562,5.229,594,4.266,600,3.495,631,2.692,645,2.95,648,2.52,654,3.451,671,2.756,687,3.691,720,5.299,723,4.657,727,1.824,773,3.959,792,4.157,812,4.844,820,5.299,822,4.316,915,3.256,946,2.849,966,3.33,979,2.734,986,5.151,1034,4.693,1052,6.073,1055,3.369,1153,3.866,1182,4.445,1183,5.61,1185,4.445,1186,3.033,1187,3.54,1188,4.657,1200,7.438,1206,6.584,1255,3.931,1309,5.072,1675,3.866,1842,4.34,1916,4.445,1940,5.229,1997,4.445,2015,9.799,2016,5.846,2017,7.438,2018,5.493,2019,6.382,2020,5.846,2021,5.493,2022,6.382,2023,6.382,2024,4.693,2025,6.382]],["component/27",[6,0.301]],["title/28-1",[219,27.788,220,34.886,727,15.903]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["title/28",[44,24.031,185,38.754,646,19.792]],["name/28",[572,0.752]],["text/28",[1,1.529,5,2.83,6,1.481,11,2.797,26,3.195,28,1.302,30,1.698,37,1.127,38,2.177,41,2.152,44,1.781,62,1.622,63,4.194,76,2.422,78,1.159,90,1.924,106,3.492,107,2.233,114,3.507,115,1.89,116,1.062,139,2.351,140,1.353,173,1.193,174,4.326,182,3.873,183,2.203,185,2.873,195,1.272,201,1.17,206,3.247,219,5.287,220,7.358,225,4.115,243,3.29,245,3.545,247,1.998,250,5.776,253,2.936,308,1.231,318,0.79,319,2.018,324,1.431,336,1.41,358,4.344,365,1.07,367,2.351,378,1.431,524,3.333,527,2.421,529,1.622,560,1.07,561,1.127,566,1.218,567,1.287,573,1.477,575,1.244,579,1.529,591,1.353,599,1.193,600,2.259,607,1.698,631,1.029,645,1.907,646,0.867,648,1.629,649,1.107,662,3.439,667,2.319,674,1.477,680,7.11,695,3.646,698,1.942,700,2.805,713,1.371,720,1.318,727,2.015,741,4.203,749,1.917,750,1.588,754,1.244,763,1.658,765,2.351,767,1.85,773,1.89,777,1.127,779,3.954,782,1.502,785,1.41,790,1.557,797,1.743,798,2.706,812,2.65,822,1.218,823,1.529,843,2.635,847,1.137,859,2.098,861,1.258,881,1.743,882,1.743,910,1.231,912,1.181,914,2.948,915,4.712,927,1.588,928,1.477,929,1.181,933,1.335,938,1.181,946,2.815,958,2.541,990,0.93,993,1.41,1002,3.014,1022,1.502,1025,1.698,1037,1.335,1052,4.715,1053,2.501,1068,1.453,1100,1.622,1103,1.998,1111,1.998,1112,1.477,1113,2.039,1119,2.586,1128,1.588,1135,1.793,1142,1.588,1153,4.637,1174,1.529,1175,5.374,1177,2.233,1182,1.698,1183,3.368,1184,4.889,1188,1.96,1195,1.39,1201,3.244,1221,1.85,1225,1.529,1227,2.177,1229,1.85,1235,1.318,1237,1.998,1242,1.302,1244,2.541,1266,1.272,1271,2.974,1279,1.17,1281,2.936,1295,2.098,1299,2.805,1320,4.068,1321,3.832,1326,1.272,1335,1.371,1337,3.13,1338,1.41,1345,1.557,1354,1.529,1378,1.431,1381,1.453,1409,1.85,1435,2.459,1482,1.477,1518,2.098,1522,1.658,1641,1.41,1651,1.658,1654,1.658,1665,1.917,1670,1.793,1703,1.793,1727,1.658,1784,1.453,1785,1.698,1787,1.529,1793,1.917,1842,1.658,1843,2.899,1857,2.351,1861,1.353,1913,1.529,1916,1.698,2000,1.743,2026,7.051,2027,2.438,2028,2.233,2029,4.125,2030,2.438,2031,2.098,2032,2.438,2033,1.793,2034,4.125,2035,3.778,2036,4.125,2037,4.911,2038,1.917,2039,3.778,2040,4.125,2041,1.698,2042,1.85,2043,4.125,2044,2.438,2045,3.832,2046,3.55,2047,6.306,2048,1.85,2049,2.438,2050,2.438,2051,2.438,2052,6.306,2053,3.38,2054,2.438,2055,2.098,2056,2.438,2057,1.698,2058,2.098,2059,2.438,2060,5.361,2061,2.438,2062,1.998,2063,2.438,2064,1.557,2065,4.125,2066,4.125,2067,2.438,2068,2.438,2069,2.438,2070,2.438,2071,2.438,2072,1.658,2073,2.438,2074,2.438,2075,1.85,2076,2.438,2077,2.438,2078,2.438,2079,2.438,2080,2.438,2081,2.438,2082,2.438,2083,2.438,2084,2.438,2085,1.477,2086,5.361,2087,2.438,2088,1.85,2089,2.438,2090,2.098,2091,2.438,2092,3.244,2093,2.438,2094,2.438,2095,3.778,2096,4.125,2097,2.438,2098,1.658,2099,1.41,2100,2.233,2101,1.793,2102,1.917,2103,2.438,2104,2.438,2105,2.233,2106,2.438,2107,2.098,2108,2.438,2109,2.438,2110,2.438,2111,2.438,2112,1.998,2113,2.438,2114,2.438,2115,2.438,2116,2.438,2117,1.998,2118,2.438,2119,2.233,2120,2.438,2121,1.85]],["component/28",[6,0.301]],["title/29",[26,25.389,185,29.667,647,20.436,822,21.273,2012,36.66]],["name/29",[572,0.752]],["text/29",[6,2,26,6.161,109,4.08,174,3.192,182,3.349,184,5.379,185,5.865,187,4.735,220,5.28,318,2.729,365,3.696,561,3.892,645,3.892,646,2.995,647,4.04,648,3.325,713,4.734,777,3.892,779,7.013,790,5.379,822,4.206,910,4.25,946,4.614,958,5.187,966,4.394,1345,5.379,1665,6.622,1858,5.101,2012,7.247,2122,10.965,2123,7.713]],["component/29",[6,0.301]],["title/30-1",[979,28.152,1911,39.799]],["name/30-1",[]],["text/30-1",[]],["component/30-1",[]],["title/30-2",[628,29.37,735,34.886,1911,33.704]],["name/30-2",[]],["text/30-2",[]],["component/30-2",[]],["title/30-3",[974,32.092,979,20.674,990,18.413,1912,31.43]],["name/30-3",[]],["text/30-3",[]],["component/30-3",[]],["title/30-4",[863,30.866,974,37.006,1912,36.244]],["name/30-4",[]],["text/30-4",[]],["component/30-4",[]],["title/30-5",[979,18.25,1122,19.342,1648,23.325,1911,25.801,1912,27.745]],["name/30-5",[]],["text/30-5",[]],["component/30-5",[]],["title/30",[727,15.903,1911,33.704,2124,40.916]],["name/30",[572,0.752]],["text/30",[6,0.627,21,1.065,23,0.867,28,0.984,37,1.497,44,0.796,63,3.203,69,0.844,75,1.225,76,1.244,92,0.972,97,4.354,114,3.329,115,1.483,116,2.85,118,0.892,127,0.789,129,1.539,135,1.2,137,1.081,152,1.509,154,1.081,162,2.404,174,0.698,182,4.052,184,2.068,201,1.554,207,1.73,213,1.872,222,2.526,225,4.303,234,1.317,243,4.292,245,4.219,253,3.585,267,1.901,273,2.457,278,3.632,284,3.108,309,1.036,313,2.315,339,3.294,351,1.225,352,1.317,362,1.689,369,4.277,372,0.92,375,2.455,408,3.55,516,3.527,526,2.202,540,1.155,560,3.1,566,3.269,574,2.315,576,3.269,592,1.709,594,3.074,628,2.287,631,1.366,635,0.789,639,0.901,645,3.026,646,3.624,648,2.059,649,0.836,651,2.66,652,1.05,653,0.844,654,0.996,666,1.116,676,1.022,700,1.253,716,2.947,723,3.111,727,1.871,734,1.116,743,1.2,754,0.94,765,1.05,773,3.614,774,1.225,787,0.996,798,0.93,800,1.135,801,1.098,804,3.407,809,3.818,810,3.455,822,0.92,825,1.509,833,1.225,835,1.773,836,6.874,847,2.432,850,2.966,863,4.564,870,1.2,883,1.283,899,1.689,905,1.116,912,0.892,915,1.652,938,0.892,948,1.751,956,1.317,973,2.551,974,6.693,979,3.026,985,0.961,986,1.098,988,2.154,990,1.653,1012,4.696,1022,4.35,1063,2.255,1112,1.961,1120,2.787,1122,4.627,1142,2.109,1188,3.566,1195,1.846,1209,1.135,1224,1.176,1242,0.984,1252,2.068,1261,2.436,1262,2.235,1318,1.751,1365,1.009,1366,1.773,1402,2.109,1410,5.472,1413,1.253,1418,1.448,1427,2.314,1435,2.583,1461,2.787,1484,3.546,1510,1.509,1518,1.585,1550,2.653,1648,4.505,1670,1.354,1687,3.108,1689,1.317,1724,2.457,1727,2.202,1777,2.546,1832,2.506,1841,1.398,1847,1.448,1853,1.283,1858,1.961,1885,1.509,1891,1.93,1894,3.632,1911,6.812,1912,7.928,1915,3.407,1917,4.507,1925,5.148,1940,2.653,1997,1.283,2001,7.338,2018,1.585,2099,1.065,2125,5.359,2126,5.802,2127,6.546,2128,2.154,2129,1.842,2130,8.791,2131,4.333,2132,1.842,2133,4.272,2134,4.333,2135,5.214,2136,4.333,2137,1.842,2138,4.333,2139,4.333,2140,3.238,2141,4.333,2142,4.333,2143,4.333,2144,4.333,2145,4.333,2146,3.238,2147,2.653,2148,2.546,2149,1.842,2150,1.842,2151,1.842,2152,5.996,2153,1.842,2154,1.509,2155,3.55,2156,1.448,2157,4.776,2158,1.842,2159,1.448,2160,3.238,2161,1.842,2162,1.317,2163,1.842,2164,1.687,2165,1.509,2166,1.585,2167,3.238,2168,1.448,2169,2.653,2170,7.889,2171,6.546,2172,3.238,2173,1.842,2174,5.634,2175,1.398,2176,1.842,2177,1.398,2178,1.225,2179,1.585,2180,5.214,2181,1.842,2182,3.238,2183,1.842,2184,1.354,2185,1.398,2186,3.238,2187,1.842,2188,1.842,2189,3.238,2190,1.842,2191,1.842,2192,1.842,2193,1.842,2194,4.866,2195,2.202,2196,1.354,2197,1.842,2198,3.238,2199,1.842,2200,4.333,2201,5.939,2202,1.842,2203,3.238,2204,1.585,2205,1.687,2206,1.687,2207,1.842,2208,1.842,2209,1.842,2210,3.238,2211,1.842]],["component/30",[6,0.301]],["title/31-1",[318,18.034,820,30.087,939,33.165]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["title/31-2",[69,25.489,318,18.034,979,23.84]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["title/31",[6,10.767,318,18.034,635,23.84]],["name/31",[635,0.716]],["text/31",[6,2.106,18,1.814,23,2.786,26,3.527,28,2.029,44,1.641,62,1.472,69,1.74,70,1.788,71,1.905,75,1.472,82,1.472,92,2.005,102,1.74,109,1.84,114,2.8,115,1.74,116,0.964,127,1.628,129,1.052,133,1.388,145,2.34,162,1.228,174,4.449,182,4.397,187,1.014,200,1.319,201,1.062,208,1.212,209,1.414,225,4.142,243,4.282,245,4.614,253,4.494,284,3.527,308,2.987,318,3.817,334,4.105,339,1.032,346,3.019,353,1.299,362,3.475,365,1.668,371,1.897,373,1.155,375,1.788,378,1.299,516,1.897,524,2.576,546,2.165,560,0.972,561,1.756,575,1.938,580,4.534,592,1.168,594,2.9,599,1.083,600,2.732,602,1.442,604,1.472,610,1.905,615,1.582,617,2.028,624,2.583,631,2.105,635,5.188,646,2.919,647,1.823,649,3.025,652,1.262,671,1.641,676,2.768,678,1.823,680,2.715,681,2.474,686,1.319,687,2.197,698,1.788,710,1.823,720,3.602,723,1.052,727,1.904,772,1.299,774,1.472,775,1.106,793,1.68,798,1.917,808,1.505,809,3.2,810,1.083,811,2.426,812,3.292,818,2.197,820,2.054,822,3.884,835,1.212,847,2.327,861,1.96,910,3.925,926,2.474,929,4.154,933,2.08,939,2.264,946,3.245,948,2.054,958,2.34,979,3.115,990,1.45,1053,1.032,1055,4.695,1068,4.333,1082,1.182,1102,1.117,1110,1.212,1112,1.341,1113,2.466,1122,1.005,1149,1.459,1157,2.054,1186,4.581,1187,1.228,1231,1.582,1241,1.472,1253,1.414,1255,4.478,1259,1.228,1274,2.029,1290,1.168,1309,1.299,1323,2.603,1326,1.982,1345,1.414,1387,2.646,1388,2.715,1389,1.68,1422,1.542,1439,1.472,1508,1.741,1521,3.129,1522,3.393,1572,2.715,1580,3.475,1675,2.301,1832,2.197,1861,1.228,1909,5.42,1910,5.719,1922,4.849,2112,1.814,2194,4.088,2195,4.529,2212,2.23,2213,6.994,2214,3.319,2215,2.213,2216,1.542,2217,4.653,2218,2.213,2219,2.213,2220,2.213,2221,2.213,2222,2.213,2223,2.474,2224,1.814,2225,2.213,2226,2.213,2227,4.99,2228,8.403,2229,2.213,2230,2.213,2231,2.028,2232,2.213,2233,3.48,2234,2.213,2235,2.028,2236,1.905,2237,1.905,2238,10.685,2239,3.48,2240,3.112,2241,2.213,2242,4.295,2243,2.793,2244,1.472,2245,2.213,2246,2.213,2247,2.213,2248,3.799,2249,3.799,2250,1.905,2251,2.213,2252,5.917,2253,2.213,2254,1.814,2255,1.582,2256,2.213,2257,4.99,2258,3.799,2259,2.213,2260,2.213,2261,4.99,2262,2.213,2263,2.213]],["component/31",[6,0.301]],["title/32-1",[318,21.295,773,30.099]],["name/32-1",[]],["text/32-1",[]],["component/32-1",[]],["title/32-2",[318,21.295,1186,31.222]],["name/32-2",[]],["text/32-2",[]],["component/32-2",[]],["title/32-3",[318,21.295,929,31.831]],["name/32-3",[]],["text/32-3",[]],["component/32-3",[]],["title/32-4",[318,21.295,345,39.799]],["name/32-4",[]],["text/32-4",[]],["component/32-4",[]],["title/32-5",[958,49.41]],["name/32-5",[]],["text/32-5",[]],["component/32-5",[]],["title/32-6",[26,47.809]],["name/32-6",[]],["text/32-6",[]],["component/32-6",[]],["title/32-7",[127,34.367]],["name/32-7",[]],["text/32-7",[]],["component/32-7",[]],["title/32-8",[910,40.484]],["name/32-8",[]],["text/32-8",[]],["component/32-8",[]],["title/32-9",[]],["name/32-9",[]],["text/32-9",[]],["component/32-9",[]],["title/32-10",[599,39.246]],["name/32-10",[]],["text/32-10",[]],["component/32-10",[]],["title/32-11",[182,31.895]],["name/32-11",[]],["text/32-11",[]],["component/32-11",[]],["title/32-12",[1572,57.332]],["name/32-12",[]],["text/32-12",[]],["component/32-12",[]],["title/32-13",[1055,42.337]],["name/32-13",[]],["text/32-13",[]],["component/32-13",[]],["title/32-14",[1521,50.289]],["name/32-14",[]],["text/32-14",[]],["component/32-14",[]],["title/32-15",[1521,41.195,1522,44.681]],["name/32-15",[]],["text/32-15",[]],["component/32-15",[]],["title/32-16",[2264,57.332]],["name/32-16",[]],["text/32-16",[]],["component/32-16",[]],["title/32-17",[317,55.865]],["name/32-17",[]],["text/32-17",[]],["component/32-17",[]],["title/32-18",[632,58.983]],["name/32-18",[]],["text/32-18",[]],["component/32-18",[]],["title/32-19",[155,36.108]],["name/32-19",[]],["text/32-19",[]],["component/32-19",[]],["title/32",[6,12.714,318,21.295]],["name/32",[572,0.752]],["text/32",[6,2.221,15,1.678,23,4.022,26,1.372,27,0.877,37,1.815,38,2.973,44,2.623,52,2.124,63,0.616,65,1.312,69,0.577,70,2.418,71,1.084,72,0.804,76,0.884,90,0.587,92,0.665,102,1.799,106,0.82,108,1.277,109,1.115,114,3.076,115,0.577,116,1.991,118,1.54,123,0.926,127,3.805,136,0.804,139,2.929,141,1.444,155,2.91,160,2.379,161,1.838,164,1.032,166,2.173,167,1.603,173,0.616,174,3.167,182,4.476,183,0.673,187,0.577,191,0.689,194,0.877,195,1.201,201,0.604,205,1.418,207,1.698,213,1.331,218,4.353,220,0.789,233,0.65,242,0.955,282,1.032,308,1.604,317,5.354,318,4.012,319,4.088,332,0.99,334,1.678,343,0.763,345,3.678,346,0.642,350,0.926,358,1.418,362,1.201,365,1.01,371,0.629,375,1.849,378,0.739,521,0.877,524,1.384,537,1.603,546,0.718,548,0.926,561,2.604,566,1.588,575,0.642,576,1.993,579,1.993,580,1.138,591,0.698,594,1.71,599,1.922,600,2.813,604,0.837,631,3.979,632,5.013,635,3.735,639,1.126,643,1.456,645,0.582,646,2.641,647,1.104,648,0.497,649,1.444,651,1.622,653,1.799,662,1.341,671,3.207,676,3.958,678,2.194,687,1.331,688,0.789,692,3.748,709,0.955,710,3.271,720,4.517,723,0.598,727,2.039,741,3.619,751,1.692,754,3.299,762,1.886,772,0.739,773,4.068,775,2.566,777,0.582,787,1.245,800,1.418,805,0.718,808,0.856,809,3.686,810,2.514,812,3.919,818,1.331,820,2.124,822,3.564,831,0.926,833,5.113,838,1.153,843,1.47,844,0.9,847,4.601,849,1.692,861,2.36,888,1.866,898,0.99,899,2.049,910,2.843,912,1.54,915,4.359,929,4.779,933,2.151,939,2.341,944,0.789,945,2.505,946,3.964,951,1.032,958,0.776,966,1.201,979,2.414,990,0.48,992,2.462,995,2.912,1002,0.708,1011,0.763,1022,1.418,1024,0.708,1037,0.689,1053,3.463,1055,4.913,1075,0.9,1085,0.9,1102,1.604,1113,0.622,1114,0.856,1127,0.75,1137,2.03,1149,2.619,1157,3.046,1176,3.281,1186,3.391,1187,1.763,1188,2.677,1194,2.443,1195,2.929,1201,1.81,1209,0.776,1227,0.665,1228,1.747,1229,1.747,1241,1.531,1246,0.955,1254,0.99,1255,1.958,1258,0.629,1263,1.838,1268,2.214,1269,1.692,1271,2.179,1273,0.75,1274,0.673,1276,0.708,1279,0.604,1296,0.99,1302,1.032,1310,0.926,1313,1.603,1314,0.99,1316,3.874,1318,0.681,1323,2.386,1332,2.736,1335,2.571,1349,0.955,1352,0.763,1356,1.747,1380,3.088,1391,0.776,1422,1.603,1435,1.372,1483,1.084,1484,2.671,1491,0.837,1517,2.807,1520,3.494,1521,3.807,1566,2.108,1572,2.807,1635,0.657,1651,0.856,1675,1.394,1684,0.926,1689,0.9,1787,0.789,1836,0.82,1858,0.763,1875,1.47,1946,1.47,1954,2.338,1970,0.877,2031,1.084,2033,0.926,2042,1.747,2072,2.162,2088,0.955,2099,1.331,2119,1.153,2156,0.99,2168,1.81,2216,1.603,2223,2.071,2228,2.108,2231,1.153,2233,1.153,2236,1.084,2250,1.084,2264,1.645,2265,2.108,2266,2.108,2267,1.886,2268,2.108,2269,1.747,2270,1.259,2271,1.259,2272,3.927,2273,1.259,2274,2.301,2275,3.179,2276,3.598,2277,1.747,2278,1.153,2279,1.259,2280,1.153,2281,1.084,2282,1.153,2283,2.301,2284,1.153,2285,1.747,2286,1.259,2287,1.259,2288,1.259,2289,1.81,2290,1.259,2291,0.955,2292,1.153,2293,2.301,2294,0.9,2295,1.259,2296,3.042,2297,0.926,2298,1.084,2299,3.927,2300,4.574,2301,1.259,2302,2.301,2303,2.108,2304,2.108,2305,4.976,2306,3.598,2307,2.108,2308,1.259,2309,1.259,2310,1.259,2311,1.259,2312,0.877,2313,2.108,2314,1.259,2315,1.259,2316,1.153,2317,1.153,2318,1.153,2319,0.877,2320,1.084,2321,1.259,2322,1.259]],["component/32",[6,0.301]],["title/33-1",[318,21.295,2323,51.666]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33-2",[318,21.295,1528,49.862]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["title/33-3",[318,18.034,1914,37.838,2324,40.916]],["name/33-3",[]],["text/33-3",[]],["component/33-3",[]],["title/33-4",[93,37.006,318,18.034,777,25.718]],["name/33-4",[]],["text/33-4",[]],["component/33-4",[]],["title/33-5",[318,18.034,1027,37.006,2325,45.589]],["name/33-5",[]],["text/33-5",[]],["component/33-5",[]],["title/33-6",[318,18.034,777,25.718,790,35.539]],["name/33-6",[]],["text/33-6",[]],["component/33-6",[]],["title/33-7",[318,18.034,790,35.539,966,29.031]],["name/33-7",[]],["text/33-7",[]],["component/33-7",[]],["title/33-8",[318,21.295,1149,25.241]],["name/33-8",[]],["text/33-8",[]],["component/33-8",[]],["title/33-9",[727,18.779,2326,49.862]],["name/33-9",[]],["text/33-9",[]],["component/33-9",[]],["title/33-10",[727,18.779,2327,48.316]],["name/33-10",[]],["text/33-10",[]],["component/33-10",[]],["title/33-11",[318,21.295,2296,43.699]],["name/33-11",[]],["text/33-11",[]],["component/33-11",[]],["title/33-12",[318,21.295,2328,56.549]],["name/33-12",[]],["text/33-12",[]],["component/33-12",[]],["title/33-13",[318,21.295,2329,44.681]],["name/33-13",[]],["text/33-13",[]],["component/33-13",[]],["title/33-14",[318,18.034,1046,33.704,1149,21.375]],["name/33-14",[]],["text/33-14",[]],["component/33-14",[]],["title/33-15",[318,21.295,1149,25.241]],["name/33-15",[]],["text/33-15",[]],["component/33-15",[]],["title/33-16",[318,21.295,1635,34.281]],["name/33-16",[]],["text/33-16",[]],["component/33-16",[]],["title/33-17",[318,18.034,1635,29.031,1829,27.788]],["name/33-17",[]],["text/33-17",[]],["component/33-17",[]],["title/33-18",[318,21.295,2330,51.666]],["name/33-18",[]],["text/33-18",[]],["component/33-18",[]],["title/33-19",[318,21.295,575,33.522]],["name/33-19",[]],["text/33-19",[]],["component/33-19",[]],["title/33-20",[318,21.295,2331,56.549]],["name/33-20",[]],["text/33-20",[]],["component/33-20",[]],["title/33-21",[318,21.295,646,23.371]],["name/33-21",[]],["text/33-21",[]],["component/33-21",[]],["title/33-22",[727,15.903,929,26.956,1149,21.375]],["name/33-22",[]],["text/33-22",[]],["component/33-22",[]],["title/33-23",[646,19.792,727,15.903,929,26.956]],["name/33-23",[]],["text/33-23",[]],["component/33-23",[]],["title/33-24",[646,19.792,929,26.956,2057,38.754]],["name/33-24",[]],["text/33-24",[]],["component/33-24",[]],["title/33-25",[646,17.163,727,13.791,929,23.376,2332,35.482]],["name/33-25",[]],["text/33-25",[]],["component/33-25",[]],["title/33-26",[318,21.295,1910,48.316]],["name/33-26",[]],["text/33-26",[]],["component/33-26",[]],["title/33-27",[339,25.953,929,26.956,1261,31.282]],["name/33-27",[]],["text/33-27",[]],["component/33-27",[]],["title/33-28",[929,34.362,1832,27.902,1911,29.228]],["name/33-28",[]],["text/33-28",[]],["component/33-28",[]],["title/33-29",[318,18.034,1910,40.916,2333,45.589]],["name/33-29",[]],["text/33-29",[]],["component/33-29",[]],["title/33-30",[318,18.034,925,38.754,2334,37.006]],["name/33-30",[]],["text/33-30",[]],["component/33-30",[]],["title/33-31",[318,18.034,887,33.704,1911,33.704]],["name/33-31",[]],["text/33-31",[]],["component/33-31",[]],["title/33-32",[318,21.295,1273,39.163]],["name/33-32",[]],["text/33-32",[]],["component/33-32",[]],["title/33-33",[318,18.034,899,29.031,1273,33.165]],["name/33-33",[]],["text/33-33",[]],["component/33-33",[]],["title/33-34",[318,15.639,899,25.175,1273,28.761,2335,37.943]],["name/33-34",[]],["text/33-34",[]],["component/33-34",[]],["title/33-35",[66,37.006,318,18.034,614,32.176]],["name/33-35",[]],["text/33-35",[]],["component/33-35",[]],["title/33",[318,21.295,822,32.814]],["name/33",[822,0.834]],["text/33",[6,1.364,11,0.199,15,0.741,21,0.22,23,2.327,24,1.065,26,0.441,30,0.753,32,0.265,34,0.464,37,1.799,38,0.902,40,0.328,41,4.149,44,2.066,52,0.206,63,1.243,66,1.857,69,0.495,70,1.196,72,0.69,76,2.122,77,0.28,78,1.849,80,1.701,90,0.933,93,2.016,99,0.19,100,0.95,101,0.416,102,0.495,108,0.411,111,1.769,112,1.471,114,3.014,115,0.643,116,1.937,118,0.184,120,0.678,127,2.118,129,3.65,133,0.239,136,0.69,140,0.211,141,2.683,145,0.456,152,0.312,154,0.223,155,1.257,161,0.22,162,0.6,163,0.227,173,0.529,174,4.692,175,0.449,182,2.731,183,0.75,184,0.243,187,0.339,190,0.988,191,0.768,195,1.188,201,1.219,202,0.449,205,0.456,206,0.655,207,0.577,208,1.095,218,0.913,219,0.999,221,1.113,222,2.609,225,3.319,233,1.31,234,0.773,243,0.386,253,0.209,254,0.299,299,0.349,303,0.272,308,0.374,309,1.28,318,3.199,319,2.566,324,0.634,327,0.449,330,0.473,334,1.202,337,1.975,339,1.623,342,0.22,345,1.035,346,0.872,350,0.795,365,0.75,367,0.8,370,0.28,371,0.37,372,1.843,373,1.325,375,0.805,377,0.529,378,0.634,400,0.243,408,0.312,505,0.253,510,1.948,516,0.19,522,0.272,524,0.611,527,0.634,529,2.016,537,0.265,540,0.239,558,0.223,560,0.878,561,1.608,567,0.201,573,0.231,574,0.272,575,0.716,577,0.562,580,0.694,581,0.562,584,0.253,591,0.411,594,1.106,599,1.366,600,0.405,605,0.441,606,0.582,607,0.265,608,0.203,609,0.678,614,1.614,623,0.391,628,0.902,629,0.217,631,1.949,633,1.914,635,0.317,639,1.114,640,0.248,643,0.174,645,1.174,646,3.199,647,0.519,648,1.613,649,0.776,651,1.02,652,0.217,653,1.69,659,1.269,662,2.272,663,0.259,667,0.214,670,0.529,671,0.32,672,0.265,674,0.449,676,2.827,678,0.355,684,0.28,686,2.074,688,2.044,691,0.231,697,0.299,698,1.314,700,1.162,701,0.272,706,1.448,708,0.516,710,1.67,711,0.545,712,0.759,713,0.416,714,0.948,716,0.504,719,0.582,720,3.059,723,1.082,726,0.795,727,2.594,734,0.231,735,0.239,741,3.359,743,1.113,747,0.836,750,0.248,754,0.378,765,1.14,768,0.312,772,0.223,773,3.013,775,0.19,777,2.056,779,0.239,780,0.289,781,0.464,785,0.22,787,0.584,790,0.473,796,0.265,798,4.077,800,0.456,801,0.227,805,1.14,806,0.349,807,0.82,809,0.206,812,0.845,818,0.22,820,1.231,822,0.19,823,4.526,842,0.312,843,0.473,844,1.222,847,1.623,851,1.816,861,1.174,863,0.211,866,0.28,876,0.545,877,1.809,880,0.259,886,1.402,887,1.211,895,1.344,899,3.083,900,5.039,905,0.449,910,1.282,911,0.349,912,1.58,913,0.265,914,0.272,915,3.954,916,0.272,922,0.988,925,0.516,926,0.248,927,1.483,928,0.231,929,4.106,938,0.524,939,0.644,940,0.231,941,0.719,945,0.405,946,2.525,953,0.239,954,0.235,958,0.864,966,1.456,973,0.529,974,0.492,979,0.732,985,0.732,986,1.192,987,0.299,989,0.265,990,3.274,992,4.123,993,0.22,994,3,1000,0.312,1002,0.416,1011,0.655,1012,0.492,1015,0.492,1017,0.582,1021,1.622,1022,0.456,1023,0.253,1024,0.416,1027,2.958,1028,0.199,1032,1.032,1035,0.272,1037,0.592,1044,1.727,1046,3.262,1048,1.471,1050,0.265,1052,0.22,1053,2.155,1055,0.57,1067,1.103,1068,0.836,1073,0.328,1075,2.331,1081,0.265,1096,0.428,1098,1.232,1102,0.192,1103,0.607,1106,0.961,1107,0.243,1108,0.299,1111,2.74,1112,1.975,1113,1.125,1121,0.82,1122,2.892,1128,1.655,1132,0.253,1137,1.783,1142,1.303,1149,2.836,1150,0.22,1153,0.655,1155,0.607,1156,0.529,1157,0.759,1175,0.199,1176,0.243,1180,0.299,1183,0.396,1184,0.592,1186,0.95,1188,3.076,1194,0.396,1195,0.616,1197,0.235,1206,1.593,1209,0.456,1210,1.208,1216,0.82,1218,1.857,1221,0.562,1224,0.243,1225,2.561,1226,0.289,1227,1.948,1228,1.065,1234,0.582,1237,0.312,1242,0.396,1244,0.864,1246,2.641,1248,0.954,1253,0.243,1255,1.053,1258,1.269,1259,0.778,1260,2.321,1261,2.597,1262,1.795,1263,1.885,1265,0.704,1266,1.325,1269,0.28,1270,0.227,1273,2.199,1274,0.577,1276,1.28,1277,1.783,1279,2.893,1280,0.28,1281,0.592,1288,0.265,1289,0.231,1291,0.239,1299,0.504,1305,0.272,1310,0.28,1314,0.299,1316,2.496,1318,1.231,1319,0.265,1321,0.272,1323,0.732,1324,0.504,1325,0.562,1326,1.325,1328,1.627,1333,1.832,1334,0.637,1336,0.349,1338,1.885,1340,0.592,1341,0.265,1344,0.456,1345,0.243,1349,0.289,1352,1.211,1354,0.239,1355,0.349,1363,1.103,1365,0.405,1366,1.095,1378,0.435,1380,1.344,1381,0.441,1387,0.265,1390,0.349,1394,0.217,1402,1.483,1406,0.312,1409,0.289,1410,0.719,1413,0.259,1414,1.15,1418,0.299,1426,0.328,1427,2.182,1435,1.357,1438,3.025,1439,0.253,1476,0.289,1484,0.259,1490,0.312,1492,1.518,1495,0.223,1496,0.259,1507,0.529,1512,1.655,1516,0.607,1520,0.259,1521,0.678,1522,0.259,1524,1.379,1528,1.065,1551,0.289,1557,0.328,1558,0.312,1572,0.272,1582,1.42,1587,1.573,1599,1.727,1635,0.732,1640,0.644,1641,3.803,1648,1.906,1665,0.299,1666,0.99,1689,0.529,1690,0.265,1700,0.299,1703,0.28,1706,0.299,1718,0.299,1720,0.773,1723,0.753,1727,0.259,1770,1.222,1772,1.344,1782,1.303,1784,0.836,1792,0.562,1799,0.289,1801,0.349,1802,0.349,1829,1.843,1832,1.317,1838,2.609,1842,2.061,1843,2.756,1851,0.93,1854,0.28,1855,0.349,1856,0.637,1861,1.409,1875,0.243,1877,0.289,1878,0.253,1881,1.208,1882,0.328,1883,0.82,1890,0.349,1891,0.227,1908,0.259,1910,2.559,1911,2.898,1912,1.975,1913,0.239,1914,0.504,1917,0.562,1923,1.103,1933,0.516,1937,0.272,1946,0.896,1968,0.289,1997,0.265,2006,0.637,2007,0.312,2008,0.545,2033,0.28,2041,1.393,2045,0.529,2048,0.82,2057,2.57,2064,1.936,2072,0.259,2085,2.798,2098,0.504,2099,0.811,2101,0.795,2102,0.299,2125,0.482,2126,0.545,2128,0.933,2147,1.15,2148,0.299,2152,0.349,2154,0.607,2157,0.349,2165,0.607,2169,2.081,2174,0.328,2178,0.719,2184,0.28,2195,0.259,2196,0.28,2213,0.582,2214,0.253,2216,0.753,2244,0.253,2254,0.607,2255,0.773,2264,0.272,2280,0.349,2285,1.065,2296,0.719,2319,2.71,2320,0.93,2323,1.79,2324,0.545,2325,2.851,2326,2.8,2327,2.398,2328,0.328,2329,0.259,2330,0.299,2331,2.402,2332,1.674,2333,0.607,2334,0.719,2335,1.79,2336,1.15,2337,0.381,2338,0.381,2339,1.936,2340,0.381,2341,0.74,2342,0.381,2343,2.085,2344,2.287,2345,1.285,2346,0.545,2347,1.548,2348,0.381,2349,1.113,2350,0.93,2351,0.381,2352,0.381,2353,0.349,2354,0.299,2355,0.381,2356,0.381,2357,0.381,2358,0.381,2359,0.349,2360,0.381,2361,0.381,2362,0.381,2363,0.328,2364,0.381,2365,0.637,2366,3.176,2367,0.74,2368,0.381,2369,0.381,2370,0.299,2371,0.381,2372,0.381,2373,0.74,2374,0.381,2375,0.349,2376,0.886,2377,0.85,2378,0.349,2379,1.566,2380,0.678,2381,1.709,2382,0.381,2383,0.381,2384,0.381,2385,0.381,2386,0.349,2387,0.381,2388,0.381,2389,0.637,2390,0.678,2391,1.721,2392,0.289,2393,0.349,2394,2.557,2395,2.485,2396,0.381,2397,0.381,2398,0.381,2399,0.607,2400,0.74,2401,0.381,2402,0.678,2403,0.773,2404,0.381,2405,0.381,2406,0.381,2407,0.381,2408,0.381,2409,0.381,2410,0.74,2411,0.381,2412,0.381,2413,0.381,2414,0.74,2415,0.381,2416,0.299,2417,0.381,2418,0.381,2419,0.381,2420,0.381,2421,0.381,2422,0.381,2423,0.381,2424,0.381,2425,0.381,2426,0.93,2427,0.678,2428,0.312,2429,0.607,2430,0.349,2431,0.381,2432,0.381,2433,0.381,2434,0.381,2435,0.381,2436,0.381,2437,0.381,2438,1.566,2439,0.381,2440,2.609,2441,2.384,2442,0.381,2443,0.381,2444,0.74,2445,0.678,2446,0.381,2447,0.678,2448,0.381,2449,0.74,2450,0.381,2451,0.74,2452,0.381,2453,0.74,2454,0.381,2455,0.74,2456,0.381,2457,0.74,2458,0.381,2459,0.381,2460,3.157,2461,1.254,2462,0.328,2463,0.381,2464,0.678,2465,1.208,2466,1.639,2467,0.349,2468,0.381,2469,0.259,2470,0.349,2471,0.328,2472,0.381,2473,0.422,2474,0.349,2475,0.349,2476,1.403,2477,0.328,2478,0.248,2479,0.678,2480,0.74,2481,0.349,2482,0.28,2483,0.312,2484,0.299,2485,0.381,2486,0.896,2487,0.381,2488,0.381,2489,0.381,2490,1.285,2491,1.832,2492,0.381,2493,0.74,2494,0.678,2495,0.74,2496,0.795,2497,0.678,2498,0.74,2499,1.103,2500,0.381,2501,0.381,2502,0.381,2503,0.381,2504,0.381,2505,0.381,2506,0.381,2507,0.381,2508,0.381,2509,0.381,2510,0.381,2511,0.381,2512,0.678,2513,2.484,2514,0.328,2515,0.381,2516,0.381,2517,0.381,2518,0.381,2519,0.381,2520,0.381,2521,0.381,2522,0.562,2523,0.381,2524,0.381,2525,0.381,2526,0.381,2527,0.381,2528,0.381,2529,0.381,2530,0.381,2531,0.381,2532,0.381,2533,0.381,2534,0.381,2535,0.381,2536,0.381,2537,0.381,2538,0.381,2539,0.381,2540,0.678,2541,0.312,2542,1.081,2543,1.081,2544,0.289,2545,0.349,2546,0.265,2547,0.328,2548,0.381,2549,0.678,2550,0.381,2551,0.381,2552,0.93,2553,0.381,2554,0.381,2555,0.381,2556,0.381,2557,0.74,2558,0.381,2559,0.381,2560,0.381,2561,0.381,2562,0.381,2563,0.381,2564,0.381,2565,0.381,2566,0.328,2567,1.081,2568,0.381,2569,0.545,2570,0.637,2571,0.381,2572,0.381,2573,1.081,2574,0.381,2575,0.381,2576,0.349,2577,0.299,2578,0.381,2579,2,2580,0.74,2581,0.381,2582,0.381,2583,0.349,2584,0.381,2585,0.381,2586,0.795,2587,0.381,2588,0.381,2589,0.381,2590,0.381,2591,0.381,2592,0.381,2593,0.381,2594,0.381,2595,0.678,2596,0.74,2597,0.381,2598,0.381,2599,0.99,2600,1.639,2601,0.381,2602,0.381,2603,0.349,2604,0.381,2605,0.381,2606,0.312,2607,0.349,2608,0.381,2609,0.545,2610,0.381,2611,0.328,2612,0.312,2613,0.299,2614,0.349,2615,0.637,2616,0.637,2617,0.349,2618,0.349,2619,0.312,2620,0.381,2621,0.381,2622,0.349,2623,0.381,2624,0.74,2625,1.709,2626,0.349,2627,0.381,2628,0.328,2629,0.74,2630,0.349,2631,0.289,2632,0.678,2633,0.773,2634,0.381,2635,0.381,2636,0.381,2637,0.381,2638,0.349,2639,0.381,2640,0.381,2641,0.381,2642,0.381,2643,0.381,2644,0.381,2645,0.607,2646,0.886,2647,0.381,2648,0.381,2649,0.381,2650,0.381,2651,0.381,2652,0.381,2653,0.545,2654,0.253,2655,0.93,2656,0.328,2657,0.381,2658,0.516,2659,0.607,2660,0.381,2661,0.381,2662,0.99,2663,0.349,2664,0.349,2665,0.328,2666,0.381,2667,0.516,2668,0.381,2669,0.678,2670,0.349,2671,0.381,2672,0.272,2673,0.381,2674,0.381,2675,0.562,2676,0.381,2677,0.349,2678,0.637,2679,0.381,2680,0.349,2681,0.381,2682,0.529,2683,0.349,2684,0.349,2685,0.312,2686,1.208,2687,0.99,2688,0.381,2689,0.74,2690,0.381,2691,0.637,2692,0.381,2693,0.99,2694,0.381,2695,0.381,2696,0.381,2697,0.381,2698,1.208,2699,0.381,2700,0.678,2701,0.381,2702,0.74,2703,0.381,2704,0.381,2705,1.081,2706,0.678,2707,1.081,2708,0.381,2709,1.081,2710,0.349,2711,0.381,2712,0.381,2713,1.573,2714,0.349,2715,0.381,2716,0.678,2717,0.381,2718,0.349,2719,0.381,2720,0.349,2721,0.381,2722,0.381,2723,0.349,2724,0.381,2725,0.381,2726,0.381,2727,0.678,2728,0.381,2729,0.349,2730,0.349,2731,0.381,2732,0.381,2733,0.349,2734,0.381,2735,0.299,2736,0.381,2737,0.381,2738,0.381,2739,0.381,2740,0.381,2741,0.381,2742,0.381,2743,0.74,2744,0.381,2745,0.381,2746,0.381,2747,0.381,2748,0.381,2749,0.381,2750,0.381,2751,0.637,2752,0.381,2753,0.381,2754,0.349,2755,0.428,2756,0.381,2757,0.381,2758,0.381,2759,0.299,2760,0.381,2761,0.381,2762,0.381,2763,0.349,2764,0.349,2765,0.381,2766,0.312,2767,0.381,2768,0.231,2769,0.381,2770,0.381,2771,0.381,2772,0.381,2773,0.381,2774,0.381,2775,0.381,2776,0.99,2777,0.381,2778,0.381,2779,0.381,2780,0.381,2781,0.381,2782,0.381,2783,0.381,2784,0.381,2785,0.381,2786,0.312,2787,0.381,2788,0.74,2789,0.381,2790,0.381,2791,0.74,2792,0.381,2793,0.381,2794,0.678,2795,0.381,2796,0.381,2797,0.381,2798,0.272,2799,0.289,2800,0.381,2801,0.545,2802,0.312,2803,0.243,2804,0.381,2805,0.349,2806,1.092,2807,0.381,2808,0.381,2809,0.381,2810,0.473,2811,0.381,2812,0.381,2813,0.381,2814,0.289,2815,0.312,2816,0.289,2817,0.381,2818,0.381,2819,0.381,2820,0.381,2821,1.832,2822,2,2823,0.381,2824,0.381,2825,0.381,2826,0.381,2827,0.381,2828,0.381,2829,0.381,2830,0.381,2831,0.381,2832,0.381,2833,0.381,2834,0.381,2835,0.381,2836,0.381,2837,0.349,2838,0.312,2839,0.93,2840,0.678,2841,0.381,2842,0.381,2843,1.081,2844,1.081,2845,1.081,2846,1.081,2847,0.381,2848,1.081,2849,0.85,2850,0.886,2851,1.081,2852,1.081,2853,0.381,2854,0.381,2855,0.272,2856,0.349,2857,0.381,2858,0.381,2859,0.74,2860,1.518,2861,0.74,2862,0.74,2863,0.74,2864,0.74,2865,0.381,2866,0.381,2867,0.312,2868,0.381,2869,0.381,2870,0.381,2871,0.328,2872,0.248,2873,0.381,2874,0.381,2875,0.381]],["component/33",[6,0.301]],["title/34-1",[233,28.704,861,28.704,1276,31.282]],["name/34-1",[]],["text/34-1",[]],["component/34-1",[]],["title/34-2",[233,33.895,339,30.646]],["name/34-2",[]],["text/34-2",[]],["component/34-2",[]],["title/34-3",[100,31.222,727,18.779]],["name/34-3",[]],["text/34-3",[]],["component/34-3",[]],["title/34-4",[100,20.241,339,19.867,861,21.974,1276,23.947,1315,34.9]],["name/34-4",[]],["text/34-4",[]],["component/34-4",[]],["title/34-5",[100,31.222,339,30.646]],["name/34-5",[]],["text/34-5",[]],["component/34-5",[]],["title/34-6",[100,26.441,861,28.704,1276,31.282]],["name/34-6",[]],["text/34-6",[]],["component/34-6",[]],["title/34-7",[101,45.095]],["name/34-7",[]],["text/34-7",[]],["component/34-7",[]],["title/34-8",[99,40.058]],["name/34-8",[]],["text/34-8",[]],["component/34-8",[]],["title/34-9",[99,32.814,727,18.779]],["name/34-9",[]],["text/34-9",[]],["component/34-9",[]],["title/34-10",[99,27.788,928,33.704,1218,37.006]],["name/34-10",[]],["text/34-10",[]],["component/34-10",[]],["title/34-11",[99,24.098,114,17.376,966,25.175,1122,21.911]],["name/34-11",[]],["text/34-11",[]],["component/34-11",[]],["title/34-12",[240,54.546]],["name/34-12",[]],["text/34-12",[]],["component/34-12",[]],["title/34-13",[727,18.779,2876,53.834]],["name/34-13",[]],["text/34-13",[]],["component/34-13",[]],["title/34-14",[222,26.956,339,25.953,727,15.903]],["name/34-14",[]],["text/34-14",[]],["component/34-14",[]],["title/34-15",[635,20.674,727,13.791,1911,29.228,2124,35.482]],["name/34-15",[]],["text/34-15",[]],["component/34-15",[]],["title/34-16",[155,21.722,222,23.376,635,20.674,2124,35.482]],["name/34-16",[]],["text/34-16",[]],["component/34-16",[]],["title/34-17",[635,23.84,2124,40.916,2213,43.754]],["name/34-17",[]],["text/34-17",[]],["component/34-17",[]],["title/34-18",[1912,42.798,2871,56.549]],["name/34-18",[]],["text/34-18",[]],["component/34-18",[]],["title/34-19",[1911,33.704,2333,45.589,2389,47.888]],["name/34-19",[]],["text/34-19",[]],["component/34-19",[]],["title/34-20",[114,17.376,127,20.674,2124,35.482,2877,39.535]],["name/34-20",[]],["text/34-20",[]],["component/34-20",[]],["title/34-21",[727,18.779,2169,53.834]],["name/34-21",[]],["text/34-21",[]],["component/34-21",[]],["title/34-22",[6,7.377,618,24.351,1281,20.877,1293,22.725,1639,28.933,1640,22.725]],["name/34-22",[]],["text/34-22",[]],["component/34-22",[]],["title/34-23",[727,15.903,823,34.886,1046,33.704]],["name/34-23",[]],["text/34-23",[]],["component/34-23",[]],["title/34-24",[222,26.956,727,15.903,1640,33.165]],["name/34-24",[]],["text/34-24",[]],["component/34-24",[]],["title/34-25",[6,9.337,100,22.929,233,24.892,2878,41.528]],["name/34-25",[]],["text/34-25",[]],["component/34-25",[]],["title/34",[6,10.767,222,26.956,1261,31.282]],["name/34",[572,0.752]],["text/34",[0,1.605,1,0.957,6,2.049,15,0.622,21,0.468,23,1.414,28,1.991,30,1.063,32,0.29,37,2.013,38,1.143,41,1.283,44,3.387,52,0.226,54,0.29,57,0.213,63,1.059,66,0.277,69,0.371,70,0.381,72,0.266,75,0.538,76,2.723,78,0.881,80,1.945,81,0.342,87,0.382,90,0.195,92,0.427,93,0.277,97,1.233,99,4.056,100,3.98,101,1.689,102,1.602,106,1.41,108,0.653,109,0.571,114,2.741,115,0.992,116,1.98,117,0.307,118,0.898,123,0.307,127,2.312,129,3.175,135,0.272,137,0.691,139,0.238,140,0.653,141,0.367,143,0.342,146,0.238,154,0.475,155,1.353,157,0.328,161,0.241,162,0.231,173,1.47,174,3.947,175,1.809,182,2.613,183,0.432,186,0.527,187,1.255,189,0.272,191,1.015,195,0.218,197,0.328,200,1.941,201,1.314,205,0.94,206,0.49,207,0.432,208,0.443,209,0.517,212,5.586,218,1.605,219,0.588,220,0.261,222,4.716,225,1.881,233,4.381,234,1.091,237,0.359,238,0.696,239,0.696,240,2.962,243,1.945,245,1.383,253,0.443,260,0.342,267,0.245,273,0.614,278,0.563,284,0.482,303,0.298,308,0.408,309,1.217,318,2.963,319,0.204,324,0.475,325,0.965,334,3.79,336,0.681,337,0.272,338,0.538,339,3.349,342,0.681,343,0.49,345,0.253,346,0.601,349,0.277,352,0.578,362,1.699,364,0.266,365,0.95,367,0.238,369,0.924,371,0.588,372,2.535,373,0.796,374,0.257,375,1.533,380,0.284,385,0.277,502,0.359,512,0.249,513,0.317,516,1.501,524,0.513,525,0.284,526,0.284,537,0.563,546,0.461,560,2.498,561,1.001,566,1.081,567,1.298,573,0.253,574,1.548,575,1.105,592,2.4,594,2.21,596,0.82,598,0.342,600,1.015,605,0.482,608,0.815,614,0.241,615,0.298,618,0.266,628,0.805,631,2.624,635,0.654,636,0.317,638,0.307,639,1.059,643,0.191,645,3.185,646,2.935,647,0.388,648,2.407,649,2.518,651,0.413,652,0.238,653,1.707,654,2.015,658,1.014,659,0.762,660,0.974,662,0.782,664,0.382,665,0.359,666,0.253,668,0.328,670,0.298,671,2.458,674,0.253,675,1.184,676,0.653,677,0.342,678,0.732,681,1.208,682,1.673,687,1.072,691,1.49,695,4.056,698,0.381,702,0.741,705,0.257,706,0.238,708,0.29,710,1.039,712,0.226,714,0.231,716,3.217,720,3.153,723,1.662,725,0.342,726,0.307,727,2.637,731,0.317,734,0.253,741,2.05,743,1.208,747,0.576,752,0.866,754,0.946,755,1.015,765,1.234,772,0.691,773,0.371,774,0.277,775,0.404,777,1.505,781,0.507,784,0.342,785,0.468,787,0.437,798,0.211,800,0.257,801,0.482,804,0.636,809,2.355,810,1.931,811,4.336,812,3.503,816,0.328,818,0.468,820,0.226,822,1.081,823,2.042,831,0.595,833,0.277,841,0.298,847,2.289,861,3.008,863,0.231,866,0.307,877,0.653,882,0.298,883,0.29,885,0.272,887,2.972,889,0.277,894,0.595,899,0.615,901,0.359,910,1.241,912,0.202,914,0.298,915,0.778,921,0.578,924,1.163,926,0.272,927,0.272,928,0.49,929,2.687,932,1.809,933,0.443,939,1.291,940,0.253,945,0.835,946,3.841,948,0.226,953,0.261,954,0.257,955,1.863,973,1.059,974,1.998,979,2.103,985,0.967,986,1.941,988,0.277,989,1.291,990,2.276,992,2.731,993,1.584,994,1.163,998,0.696,1002,0.455,1011,0.253,1012,1.822,1013,0.307,1015,0.277,1017,0.328,1021,0.266,1022,1.334,1024,0.234,1027,0.538,1028,1.568,1032,0.608,1035,0.298,1040,0.382,1041,0.866,1044,0.284,1046,3.173,1048,0.307,1052,0.241,1053,0.712,1055,1.719,1062,0.277,1067,1.2,1070,0.261,1073,0.359,1076,0.277,1081,0.29,1082,0.629,1087,0.726,1096,0.468,1098,0.498,1102,0.594,1111,1.049,1112,1.49,1113,0.754,1122,4.111,1127,0.482,1128,0.527,1132,0.538,1135,0.307,1146,0.507,1147,0.382,1148,0.663,1149,3.17,1150,0.681,1156,0.298,1157,0.637,1175,0.422,1183,0.99,1184,1.015,1186,0.881,1187,0.653,1188,1.875,1192,0.226,1194,0.432,1195,0.671,1201,0.328,1206,0.507,1208,0.328,1209,0.257,1212,0.261,1215,0.342,1216,0.894,1225,0.261,1228,0.317,1242,0.815,1244,0.257,1255,3.127,1258,1.747,1259,2.305,1260,2.468,1261,3.631,1262,1.923,1263,1.584,1265,0.527,1266,2.373,1267,1.156,1271,0.231,1273,0.249,1274,0.815,1276,3.118,1277,0.752,1279,1.18,1280,0.307,1281,0.645,1283,0.866,1284,0.866,1286,1.2,1288,1.713,1289,0.253,1290,0.22,1291,0.507,1293,0.702,1294,3.405,1296,0.328,1312,1.25,1316,1.568,1318,2.355,1321,0.298,1323,1.13,1325,0.317,1328,0.842,1335,0.455,1340,0.228,1344,0.257,1345,1.571,1346,0.663,1351,0.994,1352,0.49,1362,1.2,1366,0.645,1379,0.595,1381,0.909,1387,1.508,1388,1.091,1389,0.894,1391,0.257,1394,0.461,1402,0.527,1410,1.822,1413,1.673,1427,2.108,1429,0.328,1435,0.702,1438,1.673,1440,1.091,1461,0.359,1474,0.272,1482,0.49,1486,0.965,1491,0.277,1495,1.444,1496,1.261,1501,0.298,1517,0.842,1519,0.342,1520,1.472,1521,0.957,1522,1.038,1523,0.696,1524,2.119,1526,0.342,1527,0.965,1528,0.317,1529,0.342,1530,0.342,1531,0.359,1532,0.359,1533,5.788,1534,5.338,1536,3.268,1537,1.934,1538,1.934,1539,1.934,1540,1.934,1541,1.934,1543,2.244,1545,0.636,1548,1.934,1551,0.317,1555,0.29,1574,0.359,1575,0.382,1580,1.063,1588,0.328,1599,0.55,1637,0.307,1639,1.158,1640,3.917,1656,0.696,1670,0.307,1675,0.253,1687,0.702,1695,2.215,1701,0.359,1703,1.592,1723,0.29,1727,0.55,1758,0.741,1770,0.578,1777,0.328,1782,0.994,1784,0.482,1785,0.29,1787,1.163,1792,0.894,1798,0.636,1820,0.359,1829,1.228,1831,0.614,1832,4.735,1836,0.272,1843,1.481,1848,0.317,1853,0.29,1854,0.307,1858,0.253,1872,0.342,1875,1.184,1878,0.277,1891,0.249,1894,0.29,1910,4.185,1911,4.92,1912,5.009,1913,0.261,1914,0.284,1915,0.328,1917,1.407,1920,0.382,1922,1.774,1925,0.328,1934,0.266,1939,0.298,2072,0.284,2075,0.614,2099,1.252,2125,1.208,2133,0.342,2147,0.663,2159,0.328,2165,0.663,2169,4.421,2174,0.696,2177,0.614,2178,0.277,2179,0.696,2184,0.595,2194,0.663,2195,0.801,2204,0.359,2205,0.382,2212,0.245,2213,1.934,2214,0.538,2235,0.741,2243,0.307,2296,1.822,2298,0.359,2323,2.931,2328,1.014,2329,0.55,2332,0.307,2333,1.519,2336,1.25,2346,0.307,2399,0.663,2403,0.298,2440,0.752,2460,3.81,2461,0.261,2462,0.359,2469,0.284,2478,3.082,2481,0.382,2484,0.328,2486,0.266,2499,0.328,2512,0.382,2522,1.643,2541,0.965,2544,0.317,2570,0.359,2586,1.592,2607,0.382,2619,2.015,2626,0.382,2631,0.614,2633,0.842,2654,0.783,2667,0.29,2672,0.298,2685,0.663,2713,0.926,2723,0.741,2751,1.313,2755,0.241,2759,0.926,2766,0.342,2768,0.713,2776,0.741,2786,0.342,2794,0.382,2799,0.317,2814,1.407,2816,0.317,2821,1.983,2867,0.342,2871,0.696,2872,0.994,2876,2.669,2877,1.519,2878,4.223,2879,0.636,2880,0.382,2881,0.317,2882,0.342,2883,0.741,2884,0.417,2885,0.417,2886,0.417,2887,0.417,2888,0.417,2889,0.359,2890,0.417,2891,0.317,2892,1.014,2893,0.417,2894,0.417,2895,0.417,2896,1.526,2897,0.417,2898,0.809,2899,0.417,2900,0.417,2901,0.417,2902,2.165,2903,0.417,2904,0.417,2905,0.417,2906,0.417,2907,0.417,2908,0.417,2909,0.417,2910,0.417,2911,1.526,2912,0.417,2913,0.417,2914,1.526,2915,0.417,2916,1.526,2917,0.417,2918,1.526,2919,1.526,2920,0.417,2921,0.417,2922,1.178,2923,0.417,2924,0.417,2925,0.417,2926,0.417,2927,0.382,2928,0.417,2929,0.563,2930,0.382,2931,1.458,2932,3.257,2933,0.417,2934,1.822,2935,0.382,2936,0.382,2937,0.342,2938,2.253,2939,0.417,2940,0.417,2941,0.417,2942,0.417,2943,0.417,2944,0.417,2945,0.417,2946,0.417,2947,0.417,2948,1.397,2949,0.417,2950,0.417,2951,0.417,2952,0.328,2953,0.417,2954,0.417,2955,0.417,2956,0.417,2957,0.417,2958,0.417,2959,0.417,2960,0.417,2961,0.696,2962,1.178,2963,0.417,2964,0.741,2965,0.359,2966,1.014,2967,0.417,2968,0.417,2969,1.178,2970,0.417,2971,0.741,2972,0.382,2973,0.417,2974,1.526,2975,1.526,2976,0.809,2977,0.417,2978,5.965,2979,0.809,2980,0.359,2981,0.417,2982,0.809,2983,0.809,2984,0.417,2985,0.417,2986,0.417,2987,0.417,2988,0.417,2989,0.417,2990,0.417,2991,0.417,2992,0.417,2993,0.417,2994,0.809,2995,0.417,2996,0.417,2997,0.417,2998,0.417,2999,0.417,3000,0.417,3001,0.417,3002,0.417,3003,0.417,3004,0.417,3005,0.417,3006,0.417,3007,0.417,3008,0.417,3009,0.417,3010,0.417,3011,0.417,3012,0.417,3013,0.417,3014,0.809,3015,0.417,3016,0.417,3017,0.417,3018,0.417,3019,0.417,3020,0.417,3021,0.417,3022,0.417,3023,0.382,3024,0.417,3025,0.29,3026,0.284,3027,0.342,3028,0.417,3029,0.417,3030,0.417,3031,0.741,3032,0.342,3033,0.382,3034,0.417,3035,0.382,3036,0.417,3037,0.417,3038,0.417,3039,0.636,3040,0.417,3041,0.417,3042,0.809,3043,0.663,3044,3.569,3045,0.382,3046,0.382,3047,0.417,3048,0.342,3049,0.328,3050,2.752,3051,0.359,3052,0.359,3053,1.596,3054,0.417,3055,0.417,3056,0.809,3057,0.809,3058,0.417,3059,0.741,3060,0.382,3061,0.342,3062,0.809,3063,0.809,3064,0.417,3065,0.417,3066,0.417,3067,0.809,3068,0.809,3069,0.809,3070,0.417,3071,0.417,3072,0.417,3073,0.417,3074,0.298,3075,0.317,3076,0.417,3077,0.417,3078,0.382,3079,0.417,3080,0.417,3081,0.342,3082,0.382,3083,1.178,3084,0.359,3085,0.359,3086,0.382,3087,0.417,3088,0.417,3089,2.459,3090,0.809,3091,0.663,3092,0.382,3093,0.359,3094,0.417,3095,0.809,3096,0.741,3097,0.809,3098,0.741,3099,1.178,3100,0.417,3101,0.696,3102,0.417,3103,0.417,3104,0.417,3105,0.417,3106,0.417,3107,0.417,3108,0.417,3109,0.417,3110,0.417,3111,0.417,3112,0.417,3113,0.277,3114,0.417,3115,0.741,3116,0.417,3117,0.382,3118,0.965,3119,0.359,3120,0.741,3121,0.382,3122,0.741,3123,0.417,3124,0.417,3125,3.257,3126,1.178,3127,1.178,3128,0.809,3129,0.809,3130,1.178,3131,0.417,3132,0.328,3133,0.382,3134,0.328,3135,0.809,3136,0.417,3137,0.809,3138,0.417,3139,0.417,3140,0.417,3141,0.417,3142,1.079,3143,0.359,3144,0.417,3145,0.417,3146,0.741,3147,0.417,3148,0.417,3149,0.417,3150,0.417,3151,0.417,3152,0.417,3153,0.417,3154,0.417,3155,0.809,3156,1.854,3157,0.801,3158,0.417,3159,1.178,3160,0.809,3161,0.417,3162,0.417,3163,0.417,3164,0.417,3165,0.417,3166,0.417,3167,0.417,3168,0.417,3169,0.417,3170,0.417,3171,0.417,3172,0.417,3173,0.417,3174,0.417,3175,0.417,3176,0.417,3177,0.417,3178,0.417,3179,0.417,3180,0.359,3181,1.25,3182,0.417,3183,0.342,3184,0.417,3185,0.417,3186,0.417,3187,0.29,3188,0.417,3189,0.417,3190,0.417,3191,0.417,3192,0.809,3193,0.809,3194,1.526,3195,0.595,3196,0.663,3197,0.809,3198,0.809,3199,0.809,3200,0.417,3201,1.178,3202,0.417,3203,0.417,3204,1.178,3205,0.417,3206,0.417,3207,0.417,3208,0.809,3209,0.382,3210,0.417,3211,0.417,3212,0.417,3213,0.382,3214,0.382]],["component/34",[6,0.301]],["title/35-1",[946,35.802]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["title/35",[645,22.303,648,19.053,777,22.303,1637,35.482]],["name/35",[572,0.752]],["text/35",[6,2.134,11,2.228,44,1.845,63,4.589,69,1.956,70,3.048,78,2.03,90,3.02,104,3.241,109,3.789,114,3.804,118,2.069,141,1.939,163,2.546,173,3.168,174,2.454,182,4.518,195,3.378,219,2.133,318,2.099,334,4.128,336,3.744,337,5.685,511,2.782,512,2.546,516,2.133,525,4.403,527,2.507,531,3.676,558,3.8,561,1.974,594,2.819,599,2.09,639,3.168,643,2.966,645,4.563,648,1.686,659,2.133,662,2.731,671,2.797,674,3.922,685,3.676,693,3.241,698,2.011,705,2.631,712,2.309,720,4.229,723,3.077,727,2.494,741,3.048,752,3.141,773,3.583,777,4.563,811,2.728,812,2.111,907,3.676,913,2.975,915,2.179,946,2.89,966,4.08,973,3.168,1022,2.631,1024,2.401,1027,4.306,1052,4.522,1055,4.128,1087,2.631,1102,2.156,1113,3.201,1119,2.678,1137,2.728,1150,3.744,1174,6.782,1176,2.728,1183,2.281,1188,2.03,1194,2.281,1212,2.678,1219,3.358,1227,2.254,1266,4.08,1271,2.369,1272,2.975,1279,4.187,1287,3.676,1331,3.499,1341,2.975,1351,2.782,1356,3.241,1358,5.092,1369,7.763,1378,2.507,1382,3.053,1476,3.241,1491,2.84,1496,2.904,1553,6.623,1637,3.141,1695,2.904,1727,4.403,1794,3.912,1843,4.719,1908,4.403,1913,2.678,1945,3.912,2000,3.053,2021,3.676,2042,4.914,2099,4.522,2175,3.241,2392,3.241,2441,3.358,2672,4.628,2786,3.499,2798,4.628,3215,5.931,3216,3.358,3217,4.271,3218,3.676,3219,9.646,3220,3.358,3221,3.676,3222,3.358,3223,4.271,3224,3.141,3225,3.912,3226,4.271,3227,4.271,3228,4.271,3229,4.271,3230,3.676,3231,3.912,3232,4.271,3233,4.271]],["component/35",[6,0.301]],["title/36-1",[1053,37.412]],["name/36-1",[]],["text/36-1",[]],["component/36-1",[]],["title/36-2",[646,23.371,1053,30.646]],["name/36-2",[]],["text/36-2",[]],["component/36-2",[]],["title/36-3",[727,18.779,741,30.93]],["name/36-3",[]],["text/36-3",[]],["component/36-3",[]],["title/36-4",[182,19.187,1053,22.506,2324,35.482,2377,37.943]],["name/36-4",[]],["text/36-4",[]],["component/36-4",[]],["title/36-5",[635,28.152,727,18.779]],["name/36-5",[]],["text/36-5",[]],["component/36-5",[]],["title/36-6",[1053,30.646,2613,51.666]],["name/36-6",[]],["text/36-6",[]],["component/36-6",[]],["title/36-7",[1053,30.646,2612,53.834]],["name/36-7",[]],["text/36-7",[]],["component/36-7",[]],["title/36-8",[1053,25.953,1793,43.754,3234,39.771]],["name/36-8",[]],["text/36-8",[]],["component/36-8",[]],["title/36-9",[1793,51.666,3235,60.183]],["name/36-9",[]],["text/36-9",[]],["component/36-9",[]],["title/36-10",[990,25.072,1053,30.646]],["name/36-10",[]],["text/36-10",[]],["component/36-10",[]],["title/36-11",[900,34.681,1641,37.994]],["name/36-11",[]],["text/36-11",[]],["component/36-11",[]],["title/36-12",[76,21.375,899,29.031,900,29.37]],["name/36-12",[]],["text/36-12",[]],["component/36-12",[]],["title/36",[6,12.714,646,23.371]],["name/36",[572,0.752]],["text/36",[1,1.437,6,2.196,11,0.654,13,0.654,15,1.671,24,0.951,34,0.786,37,1.059,38,0.662,41,1.652,44,3.513,49,0.759,63,1.121,70,1.491,72,0.8,76,1.216,78,0.596,90,0.585,92,0.662,93,1.524,102,0.574,104,3.459,106,0.816,108,2.529,109,1.11,114,3.434,115,0.574,116,2.23,127,3.39,136,0.8,140,0.695,141,1.438,152,1.878,160,1.388,161,0.725,162,0.695,166,0.596,167,1.596,169,0.896,173,1.121,174,4.513,175,1.316,182,3.316,187,1.793,190,0.725,195,1.196,201,1.1,205,0.772,207,0.669,208,0.686,212,3.459,218,1.224,221,1.493,222,1.11,233,1.182,309,2.2,318,3.492,319,0.613,327,0.759,334,4.293,342,1.831,344,0.725,362,2.042,365,1.718,372,2.805,374,1.412,375,2.146,377,1.638,378,0.736,510,0.662,516,1.145,523,0.736,524,0.998,548,0.922,560,1.39,561,1.464,566,1.954,567,2.965,573,0.759,575,2.613,577,1.739,580,0.619,592,1.21,594,1.704,599,0.613,600,0.686,605,0.747,606,1.802,608,2.09,618,0.8,624,1.559,629,1.306,631,2.369,632,2.878,635,2.194,640,1.493,643,1.05,645,0.579,646,2.532,647,2.457,648,0.905,649,2.07,652,0.714,653,2.346,659,1.145,662,1.336,670,0.896,671,1.69,676,3.577,678,0.601,682,0.852,686,0.747,687,0.725,693,0.951,695,5.037,698,1.079,712,0.678,720,3.275,724,0.896,727,2.656,736,0.922,741,4.014,747,0.613,754,2.326,773,1.451,774,1.524,781,0.786,782,0.772,783,0.852,787,1.239,798,1.157,807,0.951,809,1.712,810,1.549,811,3.868,812,3.519,833,0.834,847,1.825,866,0.922,873,0.896,877,2.171,888,0.736,895,1.802,899,3.548,900,4.049,905,0.759,910,1.975,912,1.11,915,2.613,918,0.896,922,0.725,928,0.759,929,0.607,938,1.11,939,0.747,945,2.143,946,4.025,948,1.239,955,0.852,979,0.982,985,1.196,989,0.873,990,2.595,992,1.985,993,1.831,1028,1.196,1053,5.553,1062,0.834,1082,0.669,1108,3.077,1111,2.208,1119,1.985,1122,1.777,1135,0.922,1141,3.766,1142,0.816,1149,2.477,1156,1.638,1175,0.654,1184,0.686,1186,1.505,1188,3.383,1195,0.714,1206,0.786,1227,0.662,1242,0.669,1248,1.559,1255,4.189,1261,0.705,1262,0.647,1263,0.725,1265,0.816,1266,1.196,1267,0.669,1272,1.596,1273,4.243,1279,1.519,1281,1.734,1293,1.887,1309,0.736,1312,1.878,1316,0.654,1323,0.654,1335,0.705,1338,1.325,1351,0.816,1354,1.437,1366,0.686,1378,0.736,1387,4.218,1388,3.258,1389,3.459,1397,2.106,1405,2.329,1413,2.661,1429,1.802,1486,1.878,1491,0.834,1495,0.736,1507,1.638,1508,0.985,1512,0.816,1519,1.027,1520,4.385,1521,1.985,1522,2.153,1523,1.079,1524,0.759,1525,1.079,1526,1.878,1527,1.027,1528,0.951,1529,1.027,1530,1.027,1531,1.079,1532,1.079,1533,3.585,1534,3.077,1536,1.802,1537,0.985,1538,0.985,1539,0.985,1540,0.985,1541,0.985,1543,1.027,1545,0.985,1548,0.985,1555,1.596,1572,1.638,1635,0.654,1641,3.502,1648,0.686,1657,0.951,1662,0.985,1704,1.027,1723,1.596,1770,1.638,1772,2.49,1782,5.431,1787,1.437,1793,3.585,1829,1.145,1842,0.852,1854,1.685,1858,0.759,1861,1.757,1876,0.922,1913,0.786,1914,3.1,1938,1.027,1946,2.5,1970,0.873,1997,0.873,2001,1.079,2024,1.685,2041,1.596,2048,0.951,2088,0.951,2107,1.079,2125,0.816,2133,1.027,2147,2.595,2156,0.985,2212,0.736,2237,1.079,2244,2.603,2264,0.896,2269,0.951,2285,2.97,2305,1.878,2312,0.873,2324,5.818,2330,3.077,2335,1.802,2339,0.8,2375,1.148,2376,2.595,2377,1.802,2379,3.585,2386,2.099,2392,0.951,2426,1.079,2513,1.027,2546,1.596,2547,1.079,2552,1.972,2595,1.148,2611,1.079,2612,5.283,2613,6.222,2654,0.834,2667,1.596,2691,1.972,2879,0.985,3025,0.873,3048,1.027,3051,1.079,3234,6.643,3235,4.175,3236,1.148,3237,1.253,3238,1.253,3239,1.253,3240,1.253,3241,1.253,3242,1.253,3243,1.253,3244,0.922,3245,1.253,3246,1.253,3247,1.253,3248,2.292,3249,1.253,3250,1.148,3251,1.253,3252,1.253,3253,1.253,3254,1.253,3255,1.253,3256,1.253,3257,1.253,3258,1.253,3259,1.253,3260,1.253,3261,1.253,3262,1.148,3263,1.148,3264,1.253,3265,1.148,3266,3.166,3267,4.558,3268,1.253,3269,5.121,3270,1.253,3271,1.027,3272,3.166,3273,1.253,3274,1.079,3275,1.148,3276,1.253,3277,1.253,3278,1.253,3279,1.253,3280,1.253,3281,1.253,3282,1.253,3283,2.292,3284,0.896,3285,1.027,3286,1.253,3287,1.253,3288,1.253,3289,1.027,3290,1.148,3291,1.253,3292,1.253,3293,1.253,3294,1.253,3295,1.148,3296,1.253,3297,1.253,3298,2.099,3299,1.878,3300,2.292,3301,2.292,3302,2.292,3303,2.292,3304,2.292,3305,2.099,3306,2.099,3307,2.292,3308,2.292,3309,2.292,3310,2.292,3311,2.292,3312,1.253,3313,1.148,3314,0.852,3315,1.253,3316,2.292,3317,1.253,3318,1.253,3319,2.292,3320,1.253,3321,1.253,3322,1.253,3323,1.253,3324,1.253,3325,1.253,3326,1.253,3327,1.253]],["component/36",[6,0.301]],["title/37-1",[1149,21.375,1257,47.888,1582,24.226]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[3328,69.033]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37-3",[318,21.295,1582,28.607]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["title/37-4",[318,18.034,1266,29.031,1582,24.226]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["title/37-5",[727,22.924]],["name/37-5",[]],["text/37-5",[]],["component/37-5",[]],["title/37-6",[1582,28.607,3329,56.549]],["name/37-6",[]],["text/37-6",[]],["component/37-6",[]],["title/37-7",[318,15.639,886,29.724,1149,18.537,1582,21.008]],["name/37-7",[]],["text/37-7",[]],["component/37-7",[]],["title/37-8",[706,37.454,886,40.474]],["name/37-8",[]],["text/37-8",[]],["component/37-8",[]],["title/37-9",[727,22.924]],["name/37-9",[]],["text/37-9",[]],["component/37-9",[]],["title/37-10",[886,49.41]],["name/37-10",[]],["text/37-10",[]],["component/37-10",[]],["title/37-11",[727,22.924]],["name/37-11",[]],["text/37-11",[]],["component/37-11",[]],["title/37-12",[182,15.16,318,12.357,912,18.47,1149,14.646,1344,23.485,1582,16.599]],["name/37-12",[]],["text/37-12",[]],["component/37-12",[]],["title/37-13",[727,22.924]],["name/37-13",[]],["text/37-13",[]],["component/37-13",[]],["title/37-14",[318,13.805,1149,16.363,1344,26.239,1397,28.329,1582,18.545]],["name/37-14",[]],["text/37-14",[]],["component/37-14",[]],["title/37-15",[727,22.924]],["name/37-15",[]],["text/37-15",[]],["component/37-15",[]],["title/37-16",[318,13.805,1149,16.363,1344,26.239,1582,18.545,3330,36.66]],["name/37-16",[]],["text/37-16",[]],["component/37-16",[]],["title/37-17",[727,22.924]],["name/37-17",[]],["text/37-17",[]],["component/37-17",[]],["title/37-18",[318,13.805,1149,16.363,1344,26.239,1582,18.545,3331,31.323]],["name/37-18",[]],["text/37-18",[]],["component/37-18",[]],["title/37-19",[318,15.639,1582,21.008,1829,24.098,3331,35.482]],["name/37-19",[]],["text/37-19",[]],["component/37-19",[]],["title/37-20",[727,22.924]],["name/37-20",[]],["text/37-20",[]],["component/37-20",[]],["title/37-21",[318,15.639,1720,34.49,1829,24.098,3331,35.482]],["name/37-21",[]],["text/37-21",[]],["component/37-21",[]],["title/37-22",[318,15.639,553,30.82,1582,21.008,3331,35.482]],["name/37-22",[]],["text/37-22",[]],["component/37-22",[]],["title/37-23",[727,22.924]],["name/37-23",[]],["text/37-23",[]],["component/37-23",[]],["title/37-24",[318,15.639,553,30.82,1720,34.49,3331,35.482]],["name/37-24",[]],["text/37-24",[]],["component/37-24",[]],["title/37-25",[6,8.242,675,27.206,676,23.629,1582,18.545,3332,39.016]],["name/37-25",[]],["text/37-25",[]],["component/37-25",[]],["title/37-26",[318,13.805,1149,16.363,1344,26.239,1582,18.545,3333,33.495]],["name/37-26",[]],["text/37-26",[]],["component/37-26",[]],["title/37-27",[1636,39.771,1829,27.788,3333,43.754]],["name/37-27",[]],["text/37-27",[]],["component/37-27",[]],["title/37-28",[727,22.924]],["name/37-28",[]],["text/37-28",[]],["component/37-28",[]],["title/37-29",[553,35.539,1636,39.771,3333,43.754]],["name/37-29",[]],["text/37-29",[]],["component/37-29",[]],["title/37-30",[727,22.924]],["name/37-30",[]],["text/37-30",[]],["component/37-30",[]],["title/37-31",[318,11.183,1149,13.255,1344,21.255,1582,15.023,3334,26.185,3335,28.271,3336,28.271]],["name/37-31",[]],["text/37-31",[]],["component/37-31",[]],["title/37-32",[3337,55.865]],["name/37-32",[]],["text/37-32",[]],["component/37-32",[]],["title/37-33",[0,35.096,3338,60.183]],["name/37-33",[]],["text/37-33",[]],["component/37-33",[]],["title/37-34",[6,8.242,643,19.513,1663,33.495,3334,32.325,3339,36.66]],["name/37-34",[]],["text/37-34",[]],["component/37-34",[]],["title/37-35",[6,8.242,643,19.513,1663,33.495,1939,30.446,3334,32.325]],["name/37-35",[]],["text/37-35",[]],["component/37-35",[]],["title/37-36",[572,21.722,727,13.791,877,26.767,1582,21.008]],["name/37-36",[]],["text/37-36",[]],["component/37-36",[]],["title/37-37",[0,29.722,3338,50.966,3340,50.966]],["name/37-37",[]],["text/37-37",[]],["component/37-37",[]],["title/37-38",[318,13.805,946,19.012,3334,32.325,3335,34.9,3336,34.9]],["name/37-38",[]],["text/37-38",[]],["component/37-38",[]],["title/37-39",[727,22.924]],["name/37-39",[]],["text/37-39",[]],["component/37-39",[]],["title/37-40",[318,10.213,877,17.481,886,19.412,1149,12.106,1344,19.412,1582,22.21,3341,27.121]],["name/37-40",[]],["text/37-40",[]],["component/37-40",[]],["title/37-41",[3342,69.033]],["name/37-41",[]],["text/37-41",[]],["component/37-41",[]],["title/37-42",[727,22.924]],["name/37-42",[]],["text/37-42",[]],["component/37-42",[]],["title/37-43",[1582,28.607,3343,53.834]],["name/37-43",[]],["text/37-43",[]],["component/37-43",[]],["title/37-44",[76,21.375,1582,24.226,3187,38.754]],["name/37-44",[]],["text/37-44",[]],["component/37-44",[]],["title/37-45",[1281,26.422,1293,28.761,1636,34.49,3344,39.535]],["name/37-45",[]],["text/37-45",[]],["component/37-45",[]],["title/37-46",[1102,21.499,1281,23.325,1293,25.389,1636,30.446,3344,34.9]],["name/37-46",[]],["text/37-46",[]],["component/37-46",[]],["title/37-47",[373,22.224,877,23.629,878,34.9,1582,18.545,3345,36.66]],["name/37-47",[]],["text/37-47",[]],["component/37-47",[]],["title/37",[1032,28.704,1149,21.375,1582,24.226]],["name/37",[572,0.752]],["text/37",[0,1.003,2,0.295,5,1.156,6,1.663,13,0.623,15,0.433,21,1.439,23,0.386,24,0.321,28,0.226,32,1.307,37,2.032,38,2.215,39,0.387,41,1.718,42,0.364,44,0.515,49,1.327,55,0.831,57,0.418,58,0.387,63,1.072,65,1.418,66,0.281,67,0.571,69,0.194,70,0.386,76,0.842,78,1.316,80,0.806,85,1.957,86,0.346,90,3.236,92,0.815,102,1.004,106,1.223,109,1.712,114,3.864,115,1.508,116,1.083,118,0.397,127,1.708,129,2.181,133,3.769,135,0.275,137,1.46,140,0.455,145,3.445,146,0.467,155,0.845,157,0.333,160,1.994,161,0.245,163,1.651,173,0.584,174,0.83,175,0.91,182,2.946,183,0.637,184,1.769,187,0.194,190,0.69,191,1.663,200,0.252,201,0.203,202,0.256,206,1.137,207,2.906,208,0.449,209,0.524,213,0.69,217,0.387,219,1.094,220,0.265,225,0.947,232,0.346,242,0.321,243,0.221,253,0.232,278,0.295,284,0.252,308,0.947,309,0.869,312,0.387,318,2.556,319,2.807,320,0.481,324,0.481,327,0.497,329,1.795,334,1.987,339,0.382,343,0.497,345,0.256,346,0.609,354,0.364,358,0.952,362,0.221,364,0.27,365,0.186,367,0.241,370,2.037,371,0.596,372,1.991,375,0.727,376,2.178,377,0.586,378,2.694,380,0.288,400,0.27,502,0.706,505,0.281,510,0.815,511,0.275,512,2.376,519,0.275,521,0.295,523,0.907,524,1.639,525,0.288,526,0.811,527,0.907,529,0.281,530,0.346,533,0.364,537,0.571,553,2.103,558,0.248,560,1.551,561,0.868,564,0.969,566,1.094,571,0.489,572,0.537,573,0.723,576,0.969,580,3.429,581,2.498,591,0.857,592,0.63,594,2.369,599,2.423,600,0.232,602,0.534,605,0.489,607,0.571,608,0.226,619,0.295,628,1.866,629,0.467,631,1.05,632,1.611,639,0.756,640,3.916,643,1.508,646,1.633,648,0.61,649,1.905,651,2.244,652,0.68,653,0.708,654,0.229,659,0.211,662,3.263,663,0.811,665,0.364,666,0.497,667,0.671,670,0.302,671,1.312,674,2.281,675,1.769,676,0.662,678,2.683,679,0.831,681,1.223,686,1.119,687,0.245,688,0.265,691,0.723,696,0.311,698,3.875,701,0.302,706,2.146,708,0.295,710,1.051,711,0.78,712,0.229,713,2.472,719,0.645,720,2.269,723,2.353,726,1.611,727,2.092,728,0.333,735,0.969,738,0.645,741,4.672,747,1.072,750,0.275,754,0.958,758,0.321,765,0.241,773,3.579,775,2.558,777,0.868,784,2.489,785,0.245,787,2.155,789,0.387,798,1.662,800,2.709,805,0.241,808,1.051,809,1.345,812,0.209,816,0.645,820,0.229,822,0.211,828,0.346,842,2.27,843,0.27,847,0.197,849,1.38,855,0.346,856,2.141,859,0.364,863,0.455,871,0.333,874,1.842,877,2.649,878,0.978,881,0.586,886,5.456,887,0.497,899,0.979,905,1.327,910,0.78,912,1.061,915,3.823,921,0.302,924,0.265,926,0.275,927,0.275,929,4.049,933,0.449,937,0.295,938,2.313,939,0.252,941,2.02,944,1.737,945,1.517,946,2.852,949,0.545,953,0.265,954,0.26,956,0.302,966,0.979,973,0.584,979,2.331,980,0.905,983,0.938,985,0.428,988,0.281,990,2.568,993,0.474,999,1.006,1002,0.461,1005,0.321,1009,0.346,1011,0.256,1015,1.457,1023,0.545,1024,0.461,1028,1.298,1032,1.567,1034,1.38,1035,0.302,1037,0.232,1041,0.311,1044,2.99,1049,0.387,1050,0.295,1052,2.961,1053,0.557,1055,0.433,1075,0.302,1078,0.364,1079,0.346,1080,0.321,1081,0.831,1082,2.823,1087,1.871,1096,0.893,1100,0.794,1102,1.106,1106,0.869,1107,2.546,1111,1.595,1113,0.928,1122,0.372,1132,0.281,1137,0.27,1139,0.751,1149,1.064,1152,0.275,1153,1.84,1154,0.333,1157,0.835,1173,0.333,1174,0.265,1175,1.718,1180,2.589,1183,3.139,1184,2.513,1187,0.235,1188,0.567,1191,0.295,1194,1.003,1195,0.467,1206,0.265,1210,0.364,1212,0.514,1214,0.364,1218,1.027,1219,0.333,1221,1.172,1225,0.265,1227,2.952,1231,2.526,1241,0.281,1242,1.888,1244,0.26,1248,1.051,1253,0.762,1258,0.211,1260,0.623,1263,0.474,1265,0.275,1266,0.428,1274,0.226,1277,0.27,1279,1.579,1280,0.311,1281,1.517,1283,0.311,1293,0.711,1294,0.346,1301,0.387,1309,0.248,1313,0.295,1316,1.585,1318,1.643,1319,0.295,1322,1.104,1324,2.239,1327,2.27,1331,0.346,1335,0.238,1337,0.905,1338,2.543,1340,0.232,1344,3.155,1346,0.346,1349,0.622,1354,2.216,1365,5.334,1366,0.449,1378,1.626,1381,0.489,1382,0.302,1394,0.241,1397,0.794,1398,1.38,1404,0.387,1405,1.38,1406,0.346,1435,0.252,1474,0.534,1482,0.256,1491,0.281,1499,0.364,1501,0.586,1507,0.586,1514,0.387,1517,0.853,1520,0.288,1521,0.265,1524,0.256,1553,0.321,1555,0.295,1577,1.006,1582,5.351,1588,0.645,1636,3.66,1637,0.311,1647,0.571,1648,0.653,1651,0.288,1657,0.321,1661,0.387,1662,2.178,1664,0.333,1670,0.311,1675,1.327,1687,2.107,1690,0.295,1702,3.134,1703,1.611,1704,3.085,1705,0.603,1720,1.778,1721,0.706,1723,0.295,1724,5.986,1778,0.905,1783,0.281,1784,0.489,1785,1.076,1787,0.265,1789,1.692,1798,0.333,1799,0.321,1829,3.067,1843,0.645,1852,0.751,1857,1.249,1859,0.751,1861,0.662,1866,0.311,1876,0.311,1877,0.622,1880,1.538,1883,0.622,1891,0.252,1913,1.177,1916,0.571,1937,0.853,1939,0.586,1942,0.333,1946,0.27,1953,4.397,1954,0.311,1970,1.733,1984,0.751,1995,0.364,1997,0.295,2007,0.346,2008,0.311,2041,0.571,2046,0.364,2085,0.723,2088,0.905,2090,2.384,2098,1.49,2099,0.893,2112,0.672,2121,0.321,2125,0.275,2155,0.346,2156,1.723,2162,0.302,2175,0.321,2184,0.603,2195,0.288,2196,3.766,2216,0.571,2223,0.275,2250,1.615,2285,0.321,2297,0.311,2312,0.571,2353,2.537,2354,0.645,2365,0.706,2366,0.364,2380,0.387,2395,0.524,2440,0.27,2441,0.938,2461,0.265,2469,0.288,2483,0.346,2566,0.364,2577,0.938,2600,2.697,2606,0.346,2628,0.364,2631,3.623,2646,0.672,2655,0.364,2656,0.706,2658,2.116,2672,0.302,2675,0.321,2682,1.342,2735,0.333,2814,0.321,2849,3.893,2881,1.888,2891,0.321,2937,0.346,3091,1.266,3113,0.281,3118,2.039,3180,0.364,3187,0.831,3216,0.333,3220,0.645,3222,3.609,3230,0.364,3234,0.586,3313,0.387,3314,0.288,3328,0.364,3329,6.591,3330,2.614,3331,5.51,3332,0.751,3333,5.205,3334,1.888,3335,0.978,3336,2.039,3337,0.831,3340,0.751,3341,0.364,3342,0.364,3343,0.978,3344,1.266,3345,0.706,3346,0.751,3347,0.423,3348,3.038,3349,0.423,3350,0.423,3351,0.423,3352,0.978,3353,1.886,3354,0.751,3355,1.538,3356,0.311,3357,2.896,3358,0.751,3359,4.458,3360,0.423,3361,1.027,3362,1.193,3363,0.423,3364,2.389,3365,0.387,3366,1.193,3367,4.984,3368,0.364,3369,1.719,3370,0.423,3371,0.82,3372,1.545,3373,0.364,3374,1.093,3375,0.423,3376,0.672,3377,2.537,3378,0.423,3379,0.82,3380,0.751,3381,0.82,3382,0.423,3383,0.387,3384,0.423,3385,1.193,3386,0.423,3387,0.423,3388,0.423,3389,0.364,3390,0.423,3391,0.333,3392,0.387,3393,0.751,3394,1.49,3395,0.387,3396,0.423,3397,0.387,3398,5.959,3399,0.364,3400,0.423,3401,0.423,3402,0.346,3403,1.415,3404,0.423,3405,0.603,3406,0.423,3407,0.423,3408,0.82,3409,0.387,3410,0.423,3411,2.782,3412,0.387,3413,0.333,3414,0.387,3415,0.423,3416,0.423,3417,0.364,3418,0.387,3419,0.302,3420,3.292,3421,0.82,3422,0.423,3423,0.423,3424,0.853,3425,0.706,3426,0.346,3427,0.82,3428,0.82,3429,2.453,3430,4.112,3431,0.423,3432,0.82,3433,1.193,3434,0.751,3435,0.82,3436,1.415,3437,0.622,3438,0.423,3439,0.82,3440,0.82,3441,0.387,3442,2.782,3443,0.706,3444,0.387,3445,0.751,3446,0.387,3447,0.387,3448,0.387,3449,0.387,3450,0.387,3451,0.387,3452,0.423,3453,0.423,3454,0.423,3455,2.77,3456,2.537,3457,2.77,3458,4.373,3459,2.178,3460,2.77,3461,4.951,3462,4.204,3463,2.77,3464,0.423,3465,0.82,3466,0.423,3467,0.423,3468,0.423,3469,0.423,3470,0.387,3471,0.423,3472,0.751,3473,0.387,3474,0.364,3475,1.093,3476,0.423,3477,0.423,3478,0.387,3479,0.387,3480,0.387,3481,0.423,3482,0.387,3483,0.82,3484,0.82,3485,0.346,3486,0.387,3487,0.387,3488,1.093,3489,0.706,3490,0.423,3491,0.751,3492,0.423,3493,0.387,3494,0.423,3495,0.423,3496,0.387,3497,0.423,3498,0.751,3499,0.423,3500,0.387,3501,0.423,3502,0.423,3503,0.387,3504,0.423,3505,0.387,3506,0.423,3507,0.751,3508,0.423,3509,0.423,3510,0.387,3511,0.423,3512,1.33,3513,2.191,3514,0.423,3515,0.82,3516,0.423,3517,0.387,3518,0.423,3519,0.423,3520,0.423,3521,0.423,3522,0.423,3523,0.423,3524,1.193,3525,0.423,3526,0.423,3527,0.423,3528,0.423,3529,0.82,3530,0.423,3531,0.82,3532,0.82,3533,0.423,3534,0.423,3535,0.82,3536,0.423,3537,0.423,3538,0.387,3539,0.423,3540,0.82,3541,0.751,3542,0.82,3543,0.82,3544,0.82,3545,0.82,3546,0.423,3547,0.82,3548,0.82,3549,0.423,3550,0.423,3551,0.423,3552,0.423,3553,0.364,3554,0.346,3555,0.387,3556,0.423,3557,0.423,3558,0.423,3559,0.423,3560,0.423,3561,0.82,3562,0.423,3563,0.82,3564,0.423,3565,0.82,3566,0.82,3567,0.423,3568,0.423,3569,0.423,3570,0.423,3571,0.387,3572,1.093,3573,0.751,3574,0.387,3575,0.387,3576,0.387,3577,0.387,3578,0.645,3579,0.751,3580,0.387,3581,0.387,3582,0.82,3583,0.423,3584,0.423,3585,0.387,3586,0.423,3587,0.364,3588,0.423,3589,0.387,3590,0.387,3591,0.423,3592,0.387,3593,0.423,3594,0.423,3595,0.751,3596,0.423,3597,0.387,3598,0.423,3599,0.423,3600,0.387,3601,0.423,3602,0.423,3603,0.387,3604,0.423,3605,0.423,3606,0.423,3607,0.387,3608,0.423,3609,1.615,3610,0.387,3611,0.423,3612,0.423,3613,0.423,3614,0.387,3615,0.423,3616,0.387,3617,0.423,3618,0.423,3619,0.423,3620,1.027,3621,1.093,3622,0.387,3623,0.423,3624,0.387,3625,0.423,3626,0.706,3627,0.82,3628,0.387,3629,0.423,3630,0.423,3631,0.423,3632,0.423,3633,0.423,3634,0.387,3635,0.423,3636,0.364,3637,0.423]],["component/37",[6,0.301]],["title/38-1",[727,18.779,1255,40.474]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["title/38-2",[318,21.295,946,29.327]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["title/38-3",[318,21.295,928,39.799]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["title/38-4",[182,22.126,1345,35.539,1521,34.886]],["name/38-4",[]],["text/38-4",[]],["component/38-4",[]],["title/38-5",[318,15.639,754,24.618,809,26.092,946,21.537]],["name/38-5",[]],["text/38-5",[]],["component/38-5",[]],["title/38-6",[318,21.295,1002,36.94]],["name/38-6",[]],["text/38-6",[]],["component/38-6",[]],["title/38-7",[218,25.774,318,15.639,319,23.61,635,20.674]],["name/38-7",[]],["text/38-7",[]],["component/38-7",[]],["title/38-8",[727,18.779,1306,51.666]],["name/38-8",[]],["text/38-8",[]],["component/38-8",[]],["title/38-9",[218,25.774,754,24.618,809,26.092,1306,37.943]],["name/38-9",[]],["text/38-9",[]],["component/38-9",[]],["title/38-10",[6,12.714,671,28.377]],["name/38-10",[]],["text/38-10",[]],["component/38-10",[]],["title/38-11",[524,24.226,646,19.792,1316,29.031]],["name/38-11",[]],["text/38-11",[]],["component/38-11",[]],["title/38-12",[6,10.767,1186,26.441,1268,38.754]],["name/38-12",[]],["text/38-12",[]],["component/38-12",[]],["title/38-13",[6,12.714,1340,35.979]],["name/38-13",[]],["text/38-13",[]],["component/38-13",[]],["title/38-14",[6,10.767,1340,30.469,1829,27.788]],["name/38-14",[]],["text/38-14",[]],["component/38-14",[]],["title/38-15",[671,24.031,1053,25.953,1194,29.722]],["name/38-15",[]],["text/38-15",[]],["component/38-15",[]],["title/38-16",[324,38.563,375,30.93]],["name/38-16",[]],["text/38-16",[]],["component/38-16",[]],["title/38",[6,10.767,671,24.031,1194,29.722]],["name/38",[572,0.752]],["text/38",[1,0.335,5,0.282,6,2.193,15,0.282,23,3.147,26,1.593,28,1.019,32,0.372,37,1.817,38,1.41,44,3.823,49,0.622,56,0.438,62,0.683,63,2.515,69,0.245,70,0.699,72,0.341,75,0.355,76,0.205,78,0.705,80,1.394,84,0.489,90,1.246,92,0.282,97,0.683,102,0.245,108,0.296,109,0.498,114,3.315,115,0.471,116,0.646,117,0.756,118,0.259,127,1.561,135,0.348,139,1.313,140,0.296,141,0.467,144,0.405,145,0.914,146,0.586,155,1.641,160,2.844,162,1.059,163,0.612,166,1.27,167,0.372,173,1.634,174,4.391,175,0.793,182,4.306,183,1.612,187,0.874,190,1.104,191,0.813,192,1.403,194,1.604,195,0.279,201,1.282,206,0.622,207,0.549,212,1.448,218,5.32,225,0.963,233,0.276,243,0.774,245,1.073,253,0.563,254,0.42,267,0.603,273,0.78,278,0.716,284,0.612,308,0.519,313,0.382,317,3.27,318,3.618,319,4.089,320,0.603,324,0.603,334,4.706,337,0.348,338,0.683,339,0.249,342,0.309,344,0.309,345,1.619,349,0.355,362,1.202,364,0.341,365,0.838,367,0.305,370,0.393,371,0.267,372,1.335,375,0.699,510,0.282,511,0.348,512,0.318,513,0.405,516,0.741,519,0.348,523,0.314,524,3.672,525,0.363,526,0.363,527,0.314,537,0.716,540,0.335,558,0.603,560,1.6,561,1.544,562,0.438,566,0.953,567,0.282,571,0.612,575,1.539,576,1.892,580,0.508,591,0.57,592,0.282,594,1.163,597,0.382,599,0.261,600,1.261,602,0.669,604,0.683,605,0.318,608,0.549,614,0.309,615,0.382,619,0.372,624,0.699,629,0.586,631,2.255,632,1.091,635,1.561,638,0.393,639,1.476,643,3.403,644,0.372,645,0.475,646,2.973,647,1.886,648,0.406,649,1.517,651,1.363,652,0.846,653,1.224,654,0.556,659,0.741,662,1.537,671,4.456,676,0.823,678,0.493,681,1.741,682,0.363,686,0.612,687,0.309,692,1.564,693,0.405,698,0.699,705,0.329,706,0.305,710,1.886,712,3.286,713,1.696,714,0.296,720,4.186,723,1.434,724,0.382,725,0.438,726,0.756,727,2.453,731,0.405,735,0.931,741,2.318,743,0.348,747,1.127,754,3.898,755,0.293,762,0.842,773,0.471,775,0.741,777,0.247,780,0.405,781,0.644,785,0.309,787,0.289,798,0.519,800,0.633,801,0.318,805,1.523,809,5.282,810,0.726,811,5.066,812,3.671,818,0.594,820,1.246,822,0.741,833,0.355,834,0.884,843,0.341,847,3.181,851,0.382,856,0.46,861,0.53,870,0.348,885,1.243,888,0.314,894,0.756,901,0.46,910,2.485,912,1.904,915,1.859,922,0.309,928,0.899,929,4.225,933,1.045,939,0.612,941,0.683,945,1.261,946,3.62,947,0.489,948,0.556,949,0.683,951,1.887,953,1.197,954,1.176,955,1.298,956,0.382,958,0.633,973,0.503,979,2.803,985,1.202,987,0.808,988,1.532,992,0.335,999,0.669,1002,1.073,1017,0.808,1022,0.329,1028,1.202,1037,0.293,1041,1.091,1053,3.301,1055,3.669,1062,0.683,1075,0.382,1076,0.355,1087,0.633,1102,1.523,1112,0.622,1114,1.566,1119,2.094,1122,0.867,1128,0.669,1137,1.471,1138,0.42,1141,0.393,1142,1.965,1149,2.129,1153,1.156,1157,1.445,1175,0.279,1186,1.27,1188,4.044,1194,3.155,1195,1.313,1216,0.78,1224,1.471,1227,1.924,1228,0.405,1229,0.405,1235,0.556,1241,0.683,1242,0.285,1244,1.176,1252,2.845,1254,0.808,1255,3.033,1256,0.293,1258,1.15,1259,0.296,1260,1.202,1262,0.53,1263,0.594,1266,2.324,1268,0.716,1269,0.393,1271,0.57,1273,0.885,1274,1.23,1276,0.578,1279,1.447,1281,0.563,1289,0.324,1290,0.282,1296,0.42,1305,0.734,1306,3.503,1309,1.12,1313,2.538,1316,4.55,1318,0.803,1323,0.536,1338,0.858,1340,3.942,1341,0.716,1344,0.914,1345,0.656,1348,0.42,1349,0.78,1363,1.501,1365,0.293,1366,0.563,1372,0.716,1378,0.603,1380,0.808,1382,0.382,1387,1.329,1388,1.061,1389,1.448,1391,0.329,1394,0.305,1397,1.269,1402,0.967,1405,1.091,1409,0.405,1419,0.842,1427,0.285,1438,0.363,1471,0.489,1474,0.348,1476,0.405,1482,0.324,1490,0.842,1491,2.007,1495,2.139,1505,0.941,1506,3.06,1507,0.382,1508,0.42,1512,0.348,1515,3.847,1516,3.847,1517,0.734,1519,2.472,1520,3.348,1521,3.703,1522,1.817,1525,0.46,1526,0.438,1527,0.842,1528,1.126,1529,0.438,1530,0.438,1533,1.501,1534,1.167,1536,0.808,1537,6.087,1538,0.42,1539,0.808,1540,1.167,1541,1.167,1543,0.438,1545,0.42,1548,0.42,1557,0.46,1558,0.438,1572,1.061,1576,0.808,1577,0.348,1600,0.941,1675,0.622,1684,0.393,1687,0.318,1695,0.363,1730,0.808,1772,0.808,1778,0.78,1782,0.348,1787,0.335,1789,1.298,1829,1.507,1841,0.78,1853,0.716,1854,0.393,1858,1.156,1866,0.393,1875,0.948,1888,0.42,1891,0.612,1894,0.372,1908,0.363,1916,0.372,1940,0.842,1943,0.405,1954,3.78,1968,0.405,2000,0.382,2007,0.438,2009,0.808,2016,1.36,2024,1.403,2045,0.734,2048,1.748,2055,0.884,2072,4.449,2088,2.535,2098,0.699,2099,2.107,2105,0.489,2107,0.46,2154,4.212,2165,0.842,2168,0.42,2178,0.355,2196,0.393,2212,0.314,2223,0.348,2236,0.884,2237,0.46,2255,0.382,2264,2.809,2265,1.748,2266,0.489,2267,2.472,2268,0.941,2276,0.489,2278,1.36,2284,0.489,2285,0.405,2291,0.405,2294,0.382,2303,0.489,2304,0.489,2305,3.22,2306,0.941,2307,0.489,2313,0.489,2316,0.489,2318,0.489,2319,0.372,2320,0.46,2324,0.756,2335,0.808,2359,1.36,2376,0.438,2428,0.438,2461,0.335,2478,0.348,2484,0.42,2522,0.78,2576,0.489,2577,0.808,2611,1.277,2614,0.489,2669,0.489,2670,0.489,2672,2.157,2675,0.78,2680,0.489,2682,3.184,2889,0.46,2891,0.405,2892,0.884,2929,0.372,2934,0.355,3025,0.716,3026,0.363,3048,0.438,3049,1.811,3209,0.941,3234,1.364,3275,0.489,3285,0.842,3299,0.438,3337,0.372,3368,0.46,3380,0.489,3391,0.808,3430,0.756,3474,1.643,3485,0.438,3638,0.884,3639,0.534,3640,3.34,3641,0.534,3642,1.027,3643,0.46,3644,0.534,3645,1.027,3646,0.534,3647,1.277,3648,1.027,3649,0.534,3650,0.534,3651,0.534,3652,0.489,3653,0.534,3654,0.534,3655,0.534,3656,0.534,3657,1.027,3658,0.534,3659,1.484,3660,0.534,3661,1.027,3662,1.908,3663,1.908,3664,0.534,3665,0.534,3666,0.534,3667,0.534,3668,0.534,3669,0.534,3670,0.534,3671,0.489,3672,0.534,3673,0.534,3674,0.438,3675,0.534,3676,0.489,3677,0.534,3678,0.534,3679,1.484,3680,0.534,3681,0.534,3682,0.534,3683,0.534,3684,0.534,3685,0.534,3686,0.534,3687,0.534,3688,0.534,3689,0.534,3690,0.534,3691,0.534,3692,0.534,3693,0.534,3694,0.534,3695,0.534,3696,0.534,3697,0.534,3698,1.027,3699,0.534,3700,0.534,3701,1.027,3702,0.534,3703,0.438,3704,0.534,3705,1.36,3706,0.534,3707,4.839,3708,2.303,3709,1.501,3710,0.534,3711,0.534,3712,1.484,3713,0.534,3714,1.484,3715,6.594,3716,0.534,3717,1.027,3718,1.027,3719,1.027,3720,1.027,3721,0.534,3722,0.534,3723,2.303,3724,1.484,3725,1.027,3726,1.027,3727,1.027,3728,1.027,3729,1.027,3730,1.027,3731,1.027,3732,1.027,3733,2.672,3734,1.027,3735,0.534,3736,2.303,3737,0.534,3738,0.534,3739,1.027,3740,0.941,3741,1.027,3742,1.027,3743,3.93,3744,1.484,3745,0.534,3746,0.534,3747,1.027,3748,1.484,3749,1.027,3750,0.534,3751,0.534,3752,0.534,3753,2.448,3754,0.534,3755,0.534,3756,0.534,3757,0.534,3758,0.534,3759,0.534,3760,1.167,3761,0.534,3762,1.027,3763,0.534,3764,0.46,3765,0.534,3766,0.534,3767,0.534,3768,0.534,3769,0.534,3770,0.534,3771,0.534,3772,0.534,3773,0.489,3774,1.748,3775,0.534,3776,0.534,3777,0.534,3778,1.027,3779,2.303,3780,3.34,3781,1.484,3782,0.534,3783,0.534,3784,0.534,3785,0.534,3786,0.534,3787,0.534,3788,0.489,3789,0.534,3790,0.489,3791,1.027,3792,0.534,3793,0.489,3794,0.941,3795,0.534,3796,0.534,3797,0.534,3798,0.534,3799,0.534,3800,0.534,3801,0.393,3802,1.027,3803,0.941,3804,0.534,3805,0.534,3806,0.534,3807,2.303,3808,1.908,3809,0.534,3810,0.534,3811,0.534,3812,0.534,3813,0.42,3814,0.534,3815,0.534,3816,1.027,3817,1.027,3818,0.534,3819,1.027,3820,0.941,3821,0.534,3822,0.534,3823,0.534,3824,0.534,3825,0.534,3826,0.534,3827,0.534]],["component/38",[6,0.301]],["title/39-1",[317,38.754,660,35.539,727,15.903]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["title/39",[6,9.337,114,17.376,317,33.607,671,20.84]],["name/39",[317,0.633,671,0.393]],["text/39",[6,2.106,37,2.373,44,2.218,52,1.718,72,2.029,74,2.498,92,4.301,109,1.539,114,2.934,115,1.455,116,1.383,129,1.51,135,2.069,140,1.762,154,1.865,167,2.213,174,2.813,182,4.027,183,1.697,194,3.576,200,1.894,208,1.74,218,4.9,219,1.587,315,2.91,317,8.557,318,4.085,319,5.165,334,5.346,342,1.837,345,1.924,351,2.113,359,5.082,371,2.564,375,3.494,516,2.564,521,2.213,524,4.157,540,1.992,561,2.373,566,1.587,594,2.814,604,2.113,631,3.869,635,2.769,639,1.555,643,4.518,645,1.468,648,1.254,649,1.443,653,1.455,662,1.34,671,3.962,698,1.496,723,1.51,727,2.121,747,1.555,754,4.157,773,3.732,785,1.837,805,1.811,809,4.406,810,1.555,811,3.28,812,4.719,847,4.453,880,2.16,883,2.213,905,5.556,910,4.112,933,2.812,939,1.894,946,2.292,951,7.515,958,1.957,979,1.361,1002,4.173,1011,1.924,1024,1.786,1028,2.679,1052,1.837,1102,1.604,1176,2.029,1188,2.44,1194,1.697,1195,2.927,1227,2.71,1267,2.743,1269,2.336,1271,2.849,1279,1.524,1281,2.812,1309,3.014,1316,5.75,1317,2.113,1323,1.658,1356,3.897,1365,1.74,1397,4.298,1398,4.752,1521,3.219,1555,2.213,1580,2.213,1729,2.734,1875,3.28,1916,2.213,1947,2.91,1999,2.91,2072,3.492,2099,3.737,2223,2.069,2264,2.271,2305,6.081,2816,2.411,2929,2.213,3285,2.603,3314,2.16,3652,4.703,3753,2.91,3828,5.135,3829,5.135,3830,3.177,3831,3.177,3832,3.177,3833,3.177,3834,3.177,3835,5.135,3836,2.603,3837,8.147,3838,2.336,3839,2.91,3840,2.498]],["component/39",[6,0.301]],["title/40-1",[1402,42.798,1700,51.666]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["title/40",[6,12.714,652,37.454]],["name/40",[572,0.752]],["text/40",[6,1.86,15,2.749,44,3.238,114,3.461,115,2.386,127,2.232,139,2.969,141,2.365,170,3.208,173,2.549,174,3.33,182,4.05,195,2.718,201,2.499,208,4.106,225,4.851,243,3.912,245,4.216,253,4.106,308,3.785,324,3.057,339,2.429,516,2.601,524,2.268,560,2.286,576,3.266,594,2.268,631,4.054,652,2.969,653,3.435,662,2.197,678,2.499,715,5.896,727,2.747,773,2.386,805,2.969,810,2.549,851,3.723,861,4.958,937,3.628,938,2.523,948,2.816,1027,5.843,1055,3.958,1063,3.628,1188,3.563,1261,2.928,1276,5.403,1323,2.718,1365,4.811,1391,3.208,1394,4.274,1397,4.987,1398,3.83,1400,4.483,1402,8.11,1648,4.811,1700,9.306,1705,5.514,1706,6.909,1783,3.464,1789,3.542,1798,5.896,1861,4.16,1875,3.327,1911,4.542,1913,3.266,1922,6.144,1923,4.096,2041,3.628,2128,4.987,2156,4.096,2735,4.096,2763,4.771,2764,6.868,3541,4.771,3638,4.483,3707,4.268,3841,4.771,3842,7.498,3843,6.454,3844,8.786,3845,5.208,3846,6.454,3847,5.208,3848,4.771,3849,5.208,3850,5.208,3851,5.208,3852,5.208]],["component/40",[6,0.301]],["title/41-1",[646,23.371,2064,41.967]],["name/41-1",[]],["text/41-1",[]],["component/41-1",[]],["title/41-2",[646,19.792,2064,35.539,3853,50.966]],["name/41-2",[]],["text/41-2",[]],["component/41-2",[]],["title/41-3",[372,27.788,985,29.031,1273,33.165]],["name/41-3",[]],["text/41-3",[]],["component/41-3",[]],["title/41-4",[631,27.715,2064,41.967]],["name/41-4",[]],["text/41-4",[]],["component/41-4",[]],["title/41-5",[946,24.836,1053,25.953,1119,34.886]],["name/41-5",[]],["text/41-5",[]],["component/41-5",[]],["title/41-6",[6,9.337,618,30.82,1281,26.422,1293,28.761]],["name/41-6",[]],["text/41-6",[]],["component/41-6",[]],["title/41-7",[698,20.052,946,19.012,1053,19.867,1119,26.706,3113,28.329]],["name/41-7",[]],["text/41-7",[]],["component/41-7",[]],["title/41-8",[946,21.537,1053,22.506,1119,30.253,2028,44.198]],["name/41-8",[]],["text/41-8",[]],["component/41-8",[]],["title/41-9",[1119,41.195,1829,32.814]],["name/41-9",[]],["text/41-9",[]],["component/41-9",[]],["title/41-10",[34,41.195,1326,34.281]],["name/41-10",[]],["text/41-10",[]],["component/41-10",[]],["title/41-11",[2801,58.983]],["name/41-11",[]],["text/41-11",[]],["component/41-11",[]],["title/41",[34,50.289]],["name/41",[572,0.752]],["text/41",[5,0.505,6,1.999,11,0.499,13,0.932,21,0.553,28,3.576,34,3.199,41,1.31,44,1.827,52,0.517,63,0.874,70,0.45,78,0.455,80,0.932,83,0.824,90,1.735,92,0.505,93,0.636,100,0.455,102,0.818,108,0.531,109,0.865,114,2.583,115,1.444,116,1.841,118,0.464,127,0.765,129,2.424,133,1.12,135,1.163,137,0.562,141,0.811,145,0.589,154,1.474,162,1.393,163,1.878,173,0.468,174,4.89,175,1.309,182,0.71,183,2.259,190,2.151,195,1.31,200,0.57,202,0.58,205,0.589,207,0.511,212,3.557,213,0.553,218,2.926,222,0.865,225,1.268,233,1.296,243,0.499,245,1.004,247,0.784,253,0.978,267,1.048,273,1.355,278,1.244,284,1.065,308,0.483,309,1.412,318,2.083,319,1.82,320,0.562,324,1.474,334,0.943,336,0.553,338,0.636,339,0.833,345,1.082,346,0.911,353,0.562,362,0.932,365,1.856,372,3.21,373,0.932,374,1.1,375,0.841,510,2.474,511,0.623,516,0.892,520,0.824,522,0.684,523,0.562,524,0.417,525,1.215,546,0.545,555,0.784,556,0.666,558,0.562,559,0.784,560,0.784,561,1.72,566,0.478,567,2.892,571,0.57,575,0.488,577,2.392,580,0.473,583,0.824,591,0.531,594,1.372,599,0.468,602,0.623,604,1.188,607,0.666,618,0.611,624,2.143,631,1.059,633,0.562,635,0.765,639,1.82,643,1.151,644,0.666,645,1.161,646,3.416,648,0.992,649,1.14,652,0.545,653,1.151,659,0.478,662,0.753,667,1.772,671,2.891,676,0.531,678,1.205,679,0.666,682,0.651,687,0.553,695,0.651,698,1.751,706,0.545,710,0.857,711,0.483,712,0.517,713,1.004,714,1.393,719,0.752,720,0.966,727,1.984,741,0.841,747,2.069,754,2.158,755,0.524,765,0.545,772,0.562,773,1.937,775,1.858,777,0.442,787,0.517,788,0.684,792,0.623,796,0.666,800,1.1,805,1.018,809,2.759,810,0.874,811,1.141,812,0.883,818,0.553,833,2.813,843,1.141,847,1.973,861,0.494,863,0.531,866,1.847,870,0.623,874,0.636,889,0.636,894,0.704,899,0.932,900,4.005,912,1.217,915,0.488,922,1.033,925,2.195,928,1.521,929,0.464,933,1.375,937,0.666,938,1.217,939,0.57,946,3.818,948,1.358,955,0.651,956,0.684,958,0.589,973,0.874,979,0.41,985,1.644,990,1.203,992,0.6,994,0.6,1011,0.58,1015,0.636,1024,0.538,1028,0.499,1032,1.626,1035,0.684,1044,0.651,1050,0.666,1052,1.452,1053,4.163,1055,0.943,1067,0.752,1068,4.634,1070,0.6,1074,0.876,1098,0.589,1102,0.483,1106,1.412,1108,1.975,1110,0.524,1119,5.968,1121,1.355,1122,0.435,1127,0.57,1132,0.636,1135,0.704,1137,0.611,1138,1.975,1141,3.447,1142,1.163,1149,0.965,1153,0.58,1175,0.932,1184,0.524,1186,3.181,1187,0.991,1188,0.849,1199,0.666,1212,0.6,1218,1.67,1221,1.906,1225,0.6,1226,0.726,1227,1.663,1235,1.358,1242,0.954,1243,1.244,1252,0.611,1255,1.547,1258,1.858,1259,0.531,1260,1.644,1261,1.004,1262,0.921,1266,0.499,1267,1.342,1272,0.666,1273,1.065,1275,0.876,1279,0.857,1280,1.313,1281,2.037,1289,1.082,1290,0.505,1291,0.6,1293,1.065,1299,1.215,1302,0.784,1318,0.517,1323,0.932,1326,0.932,1335,0.538,1340,0.524,1341,0.666,1344,0.589,1352,0.58,1354,0.6,1372,0.666,1381,0.57,1387,0.666,1388,0.684,1394,1.432,1484,1.215,1495,1.474,1496,1.708,1533,3.686,1534,1.404,1536,1.404,1537,5.459,1538,0.752,1539,0.752,1540,1.404,1541,1.404,1545,1.975,1548,1.404,1553,0.726,1635,3.202,1641,2.95,1650,1.463,1654,0.651,1675,0.58,1687,1.065,1776,0.824,1789,1.215,1829,3.789,1832,0.553,1835,1.404,1836,0.623,1840,2.582,1842,0.651,1843,1.704,1844,1.463,1845,1.463,1854,0.704,1857,1.018,1861,2.064,1875,2.376,1914,1.215,1918,0.752,2024,1.313,2048,0.726,2055,0.824,2064,5.281,2072,2.53,2075,1.355,2085,1.082,2100,2.3,2125,1.163,2155,0.784,2177,1.355,2195,0.651,2196,2.736,2204,1.537,2243,0.704,2244,3.393,2264,1.277,2289,0.752,2291,0.726,2294,1.277,2298,0.824,2312,0.666,2326,1.355,2327,1.313,2334,5.17,2343,0.876,2377,0.752,2416,2.478,2469,0.651,2473,2.121,2474,0.876,2484,0.752,2499,1.404,2544,0.726,2546,0.666,2586,0.704,2653,0.704,2658,1.244,2677,0.876,2678,2.162,2755,0.553,2798,0.684,2801,1.313,2802,0.784,2803,0.611,2806,0.611,2814,0.726,2840,0.876,2850,0.784,2855,0.684,2856,0.876,2860,0.726,2889,0.824,2892,0.824,2971,0.876,2972,0.876,3183,0.784,3187,0.666,3216,1.975,3218,2.162,3234,1.795,3244,2.317,3262,0.876,3285,0.784,3314,1.215,3405,0.704,3413,0.752,3429,0.623,3434,0.876,3554,0.784,3671,0.876,3674,0.784,3705,1.636,3707,5.266,3709,1.404,3715,0.876,3740,1.636,3813,0.752,3853,0.876,3854,0.824,3855,0.957,3856,1.786,3857,0.957,3858,0.876,3859,0.957,3860,0.876,3861,1.537,3862,2.712,3863,0.957,3864,0.876,3865,0.784,3866,1.786,3867,0.876,3868,0.957,3869,0.957,3870,0.957,3871,1.786,3872,1.786,3873,2.511,3874,3.72,3875,1.537,3876,0.957,3877,2.511,3878,0.957,3879,1.786,3880,0.957,3881,1.786,3882,1.786,3883,2.511,3884,0.957,3885,0.957,3886,0.957,3887,0.957,3888,0.957,3889,0.957,3890,1.786,3891,0.957,3892,9.519,3893,9.519,3894,0.957,3895,0.957,3896,0.957,3897,0.957,3898,0.957,3899,0.957,3900,0.957,3901,0.957,3902,0.957,3903,0.957,3904,0.957,3905,0.957,3906,0.957,3907,0.957,3908,0.957,3909,0.957,3910,0.957,3911,0.957,3912,0.957,3913,0.957,3914,0.957,3915,0.957,3916,0.957,3917,0.957,3918,0.957,3919,0.957,3920,0.957,3921,0.957,3922,0.957,3923,0.957,3924,0.957,3925,0.957,3926,1.786,3927,0.957,3928,0.957,3929,4.229,3930,0.957,3931,0.957,3932,0.957,3933,0.957,3934,0.957,3935,0.957,3936,0.957,3937,0.957,3938,0.957,3939,0.957,3940,0.957,3941,0.957,3942,0.957,3943,0.957,3944,0.957,3945,0.957,3946,0.957,3947,0.957,3948,1.786,3949,1.786,3950,0.957,3951,0.957,3952,0.957,3953,0.957,3954,0.957,3955,0.957,3956,0.957,3957,0.957,3958,0.957,3959,0.957,3960,0.957,3961,0.957,3962,0.957,3963,0.957,3964,0.957,3965,1.786,3966,1.786,3967,1.786,3968,1.786,3969,1.786,3970,5.822,3971,1.786,3972,1.786,3973,1.786,3974,1.786,3975,1.786,3976,1.786,3977,1.786,3978,1.786,3979,1.786,3980,1.786,3981,0.957,3982,0.957,3983,0.876,3984,0.752,3985,0.876,3986,0.876,3987,0.957,3988,0.957,3989,0.957,3990,0.957,3991,0.957,3992,0.957,3993,0.957,3994,0.957,3995,0.876,3996,0.957,3997,0.957,3998,2.3,3999,0.957,4000,0.957,4001,0.957,4002,1.636,4003,0.824,4004,1.786,4005,0.957,4006,0.957,4007,1.786,4008,0.824,4009,0.957,4010,1.786,4011,0.957,4012,3.151,4013,1.636,4014,0.957,4015,0.957,4016,0.957,4017,1.786,4018,0.957,4019,0.957,4020,0.957,4021,0.957,4022,0.726,4023,0.876,4024,0.876]],["component/41",[6,0.301]],["title/42-1",[6,10.767,1055,29.37,1689,39.771]],["name/42-1",[]],["text/42-1",[]],["component/42-1",[]],["title/42-2",[727,22.924]],["name/42-2",[]],["text/42-2",[]],["component/42-2",[]],["title/42-3",[2009,63.073]],["name/42-3",[]],["text/42-3",[]],["component/42-3",[]],["title/42-4",[69,36.744]],["name/42-4",[]],["text/42-4",[]],["component/42-4",[]],["title/42-5",[1113,39.646]],["name/42-5",[]],["text/42-5",[]],["component/42-5",[]],["title/42-6",[]],["name/42-6",[]],["text/42-6",[]],["component/42-6",[]],["title/42-7",[662,33.834]],["name/42-7",[]],["text/42-7",[]],["component/42-7",[]],["title/42-8",[735,41.195,1857,37.454]],["name/42-8",[]],["text/42-8",[]],["component/42-8",[]],["title/42-9",[1675,48.585]],["name/42-9",[]],["text/42-9",[]],["component/42-9",[]],["title/42-10",[1670,48.316,2075,49.862]],["name/42-10",[]],["text/42-10",[]],["component/42-10",[]],["title/42-11",[1944,69.033]],["name/42-11",[]],["text/42-11",[]],["component/42-11",[]],["title/42-12",[929,38.858]],["name/42-12",[]],["text/42-12",[]],["component/42-12",[]],["title/42-13",[4025,73.47]],["name/42-13",[]],["text/42-13",[]],["component/42-13",[]],["title/42-14",[1943,60.87]],["name/42-14",[]],["text/42-14",[]],["component/42-14",[]],["title/42-15",[787,35.529,4026,60.183]],["name/42-15",[]],["text/42-15",[]],["component/42-15",[]],["title/42-16",[1937,57.332]],["name/42-16",[]],["text/42-16",[]],["component/42-16",[]],["title/42",[6,12.714,1055,34.681]],["name/42",[572,0.752]],["text/42",[6,1.985,13,2.305,23,2.079,38,3.185,44,3.72,59,1.547,69,3.481,75,1.255,76,0.725,80,2.768,102,3.043,104,1.433,105,1.625,114,3.197,116,0.822,118,0.915,136,2.113,139,1.076,141,2.409,154,1.108,155,1.988,174,2.713,175,2.204,182,1.316,194,1.315,201,0.906,218,1.008,243,0.985,254,5.223,318,2.319,336,1.092,346,4.758,349,1.255,358,1.163,362,1.726,365,2.649,369,2.675,371,1.652,375,1.558,378,3.114,505,3.529,510,1.746,519,1.23,524,4.563,560,1.452,571,1.125,579,2.769,592,2.331,599,1.619,600,1.034,608,1.008,614,1.092,631,3.745,635,0.809,639,0.924,645,2.042,646,2.546,648,1.744,649,3.911,653,1.516,654,2.869,662,0.796,666,1.143,676,2.45,678,0.906,688,2.769,713,2.983,726,3.901,727,1.516,735,1.184,741,3.577,747,1.619,755,3.304,772,1.108,773,4.175,775,2.206,777,0.873,782,1.163,787,4.928,808,1.284,810,2.161,818,1.092,820,1.021,835,2.419,847,1.543,849,1.388,883,3.076,912,3.467,915,5.347,929,4.518,933,1.034,938,2.14,939,1.125,940,3.214,941,2.201,945,3.637,973,1.619,979,4.078,984,1.625,986,1.125,999,4.949,1011,2.004,1034,1.388,1037,1.034,1052,6.468,1055,4.81,1080,4.026,1082,4.868,1084,2.848,1085,2.365,1088,1.076,1102,0.953,1106,1.061,1113,3.537,1149,0.725,1175,1.726,1176,4.242,1179,1.729,1183,2.359,1185,1.315,1186,1.572,1187,1.047,1188,5.189,1192,1.789,1195,2.518,1199,1.315,1202,6.226,1235,3.591,1244,1.163,1246,3.352,1258,1.652,1260,1.726,1267,1.008,1274,1.767,1277,1.206,1279,4.259,1291,2.769,1316,0.985,1318,1.021,1322,1.349,1323,0.985,1328,3.157,1335,1.86,1338,1.092,1365,1.812,1394,1.076,1422,1.315,1423,1.433,1426,4.566,1480,1.255,1504,1.349,1512,1.23,1573,1.625,1675,2.004,1689,1.349,1730,3.473,1764,1.433,1783,4.013,1784,1.972,1785,3.695,1787,1.184,1792,3.352,1815,1.625,1848,1.433,1853,1.315,1857,1.886,1861,3.97,1883,2.511,1891,1.125,1894,1.315,1937,6.514,1942,1.484,1954,5.263,1955,1.625,2009,3.473,2042,8.968,2075,1.433,2117,1.547,2125,2.877,2168,1.484,2184,1.388,2212,1.108,2223,1.23,2224,2.711,2255,1.349,2269,1.433,2281,1.625,2545,1.729,2566,3.801,2631,1.433,2675,2.511,2685,3.619,2952,3.473,3113,3.529,3187,3.076,3389,1.625,3419,1.349,3555,1.729,3703,1.547,3838,1.388,3840,3.473,4026,3.031,4027,1.888,4028,1.888,4029,1.433,4030,1.888,4031,1.888,4032,1.888,4033,1.888,4034,1.349,4035,1.729,4036,4.417,4037,4.046,4038,5.193,4039,3.309,4040,1.729,4041,1.888,4042,1.888,4043,1.888,4044,1.888,4045,1.888,4046,1.729,4047,1.349,4048,1.888,4049,1.888,4050,1.888,4051,1.888,4052,1.888,4053,1.729,4054,5.305,4055,1.729,4056,1.888,4057,1.888,4058,3.309,4059,1.625,4060,1.888,4061,1.888,4062,1.888,4063,1.888,4064,1.888,4065,1.888,4066,1.888,4067,1.888,4068,1.888,4069,1.729,4070,1.888,4071,1.888,4072,1.888,4073,1.888,4074,1.888,4075,1.729]],["component/42",[6,0.301]],["title/43-1",[6,10.767,1186,26.441,3356,40.916]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[6,10.767,1186,26.441,1258,27.788]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43-3",[4076,73.47]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["title/43-4",[4077,69.033]],["name/43-4",[]],["text/43-4",[]],["component/43-4",[]],["title/43-5",[4078,73.47]],["name/43-5",[]],["text/43-5",[]],["component/43-5",[]],["title/43",[6,10.767,1186,26.441,1256,30.469]],["name/43",[1654,1.136]],["text/43",[6,1.502,19,1.099,34,0.937,37,0.691,44,2.23,69,3.803,70,1.265,76,0.574,80,2.694,102,3.803,109,2.787,114,2.416,115,0.684,116,0.65,118,0.724,127,0.64,129,0.71,141,0.678,146,0.852,154,6.364,163,2.668,169,1.068,174,4.727,175,0.621,182,1.069,187,0.684,197,3.52,200,0.89,202,0.905,205,0.92,208,5.75,209,0.954,218,0.798,225,1.357,345,0.905,365,1.18,367,0.852,369,3.128,370,1.099,373,0.779,378,0.877,467,1.368,510,1.419,523,0.877,524,3.614,540,2.807,567,0.789,592,0.789,594,0.65,607,1.041,608,0.798,624,2.492,631,1.134,639,0.731,643,0.684,645,0.691,646,3.179,647,2.148,648,3.177,649,1.664,653,2.051,654,1.453,662,0.63,667,0.84,671,4.464,674,1.628,675,0.954,698,2.107,705,0.92,710,0.717,723,4.41,731,1.134,747,2.19,774,1.788,775,4.908,782,3.544,787,2.421,796,1.041,798,0.754,801,1.602,810,1.793,812,3.095,835,3.674,847,0.697,855,5.819,873,5.077,874,0.994,877,0.829,900,0.789,905,0.905,921,1.068,922,0.864,924,2.297,938,0.724,944,2.297,945,0.818,949,1.788,953,0.937,954,0.92,973,1.793,979,3.557,985,0.779,990,0.57,1002,4.797,1011,1.628,1032,3.844,1037,0.818,1053,0.697,1082,3.584,1088,4.732,1093,3.912,1102,0.754,1107,2.859,1110,4.081,1113,1.811,1122,2.033,1124,1.041,1148,1.224,1149,1.407,1157,1.981,1183,0.798,1186,5.501,1192,1.453,1227,0.789,1241,2.437,1252,0.954,1256,0.818,1258,3.878,1266,0.779,1267,1.436,1273,0.89,1274,0.798,1290,4.381,1305,1.921,1323,0.779,1326,0.779,1328,1.068,1335,0.84,1338,2.986,1340,4.788,1341,2.552,1354,3.238,1394,0.852,1411,2.859,1439,0.994,1484,1.016,1599,5.068,1635,2.694,1639,2.78,1641,0.864,1651,1.016,1654,7.029,1726,1.224,1784,0.89,1834,2.313,1835,1.175,1836,0.973,1840,3.002,1858,2.219,1914,1.828,1946,0.954,1964,4.444,2005,2.462,2064,2.34,2098,2.492,2128,3.826,2212,4.557,2244,6.612,2255,6.388,2291,2.04,2332,6.429,2334,2.437,2354,2.114,2416,5.86,2478,0.973,2569,1.099,2654,0.994,2659,1.224,2672,1.068,2855,1.068,2860,1.134,3026,3.512,3113,2.977,3356,6.572,3394,5.28,3862,1.286,3983,4.73,4003,4.951,4022,2.78,4046,3.356,4076,4.1,4077,3.153,4078,2.462,4079,1.175,4080,1.286,4081,1.387,4082,1.494,4083,1.494,4084,1.494,4085,1.494,4086,8.009,4087,1.494,4088,2.688,4089,1.494,4090,5.164,4091,5.164,4092,2.688,4093,2.688,4094,3.664,4095,3.664,4096,3.664,4097,2.688,4098,3.664,4099,3.664,4100,3.664,4101,3.664,4102,3.664,4103,1.494,4104,1.494,4105,1.494,4106,1.494,4107,1.494,4108,1.368,4109,1.494,4110,3.153,4111,1.494,4112,1.134,4113,1.368,4114,1.494,4115,1.494,4116,2.688,4117,1.494,4118,5.164,4119,1.494,4120,1.494,4121,2.688,4122,2.688,4123,2.688,4124,2.688,4125,1.494,4126,1.494,4127,1.494,4128,1.494,4129,1.494,4130,2.688,4131,1.717,4132,1.494,4133,2.462,4134,1.368]],["component/43",[6,0.301]],["title/44-1",[6,10.767,2473,31.718,4135,45.589]],["name/44-1",[]],["text/44-1",[]],["component/44-1",[]],["title/44-2",[6,9.337,129,22.929,2473,27.506,2768,29.228]],["name/44-2",[]],["text/44-2",[]],["component/44-2",[]],["title/44-3",[6,10.767,2473,31.718,2768,33.704]],["name/44-3",[]],["text/44-3",[]],["component/44-3",[]],["title/44-4",[6,10.767,129,26.441,2473,31.718]],["name/44-4",[]],["text/44-4",[]],["component/44-4",[]],["title/44-5",[6,10.767,2473,31.718,4136,50.966]],["name/44-5",[]],["text/44-5",[]],["component/44-5",[]],["title/44-6",[6,8.242,1259,23.629,2473,24.281,2478,27.745,4137,31.323]],["name/44-6",[]],["text/44-6",[]],["component/44-6",[]],["title/44-7",[4138,63.073]],["name/44-7",[]],["text/44-7",[]],["component/44-7",[]],["title/44-8",[4139,65.719]],["name/44-8",[]],["text/44-8",[]],["component/44-8",[]],["title/44-9",[4140,69.033]],["name/44-9",[]],["text/44-9",[]],["component/44-9",[]],["title/44",[6,10.767,1256,30.469,2473,31.718]],["name/44",[3709,1.314]],["text/44",[0,1.16,2,0.823,6,1.392,19,0.455,20,0.506,21,0.683,23,0.556,37,1.727,41,1.361,44,1.301,52,0.639,62,1.444,63,0.302,69,0.995,70,0.291,76,0.237,78,1.032,80,2.278,81,0.968,90,0.551,92,0.896,93,0.411,99,1.692,100,1.032,101,0.348,102,3.474,109,0.572,114,2.686,115,1.712,116,2.631,117,0.455,118,0.572,127,0.93,129,4.418,133,2.737,137,2.563,139,2.489,140,0.343,141,0.986,146,0.352,161,4.313,162,1.447,163,0.704,173,1.063,174,4.724,175,1.552,182,0.675,187,0.778,191,1.189,195,0.886,200,0.704,205,1.046,207,0.631,208,0.338,209,1.666,222,2.115,225,1.886,233,2.095,243,1.768,245,0.664,253,0.647,308,0.312,320,0.363,324,0.363,343,0.374,344,0.357,346,2.873,353,2.193,355,1.335,362,0.617,365,2.042,369,2.817,371,1.085,372,0.848,373,1.361,375,0.556,400,0.755,505,1.735,510,0.896,516,1.303,524,1.901,527,0.694,529,0.411,540,0.388,546,0.968,548,0.455,556,0.431,560,0.953,561,1.206,566,1.692,567,1.146,575,0.866,576,1.064,580,4.362,591,0.942,592,1.377,594,0.945,596,0.431,597,2.154,599,0.831,600,0.93,604,0.411,605,0.368,607,0.431,608,0.631,614,0.357,628,0.326,629,0.352,630,0.431,631,2.912,633,3.546,636,0.469,639,1.063,640,1.963,643,0.283,646,2.003,647,1.949,648,1.604,649,0.771,653,1.552,654,1.832,659,1.085,660,0.395,662,1.1,666,0.374,667,0.664,671,1.463,672,0.431,674,1.58,675,0.755,678,5.177,687,2.689,688,0.388,696,0.455,698,1.228,701,0.845,705,2.865,706,0.352,710,2.803,711,0.312,712,0.334,714,3.912,723,0.562,727,0.177,734,0.716,743,0.403,747,1.988,750,0.403,755,4.748,763,0.804,764,0.506,773,0.283,775,2.181,782,2.302,785,0.683,787,0.334,793,0.469,796,0.823,798,1.521,800,0.381,801,0.368,805,0.968,810,2.136,812,0.584,818,0.683,835,4.28,841,0.442,847,1.405,863,0.343,870,1.106,875,0.532,877,0.343,881,0.442,882,0.845,889,1.735,900,1.59,912,1.052,916,0.845,922,1.508,924,5.385,926,0.77,933,2.046,937,0.431,940,1.028,944,0.741,948,0.639,973,1.828,979,1.452,982,0.469,985,0.617,989,0.823,990,0.829,992,1.064,993,0.683,994,1.362,1002,0.348,1011,0.716,1021,2.595,1023,0.786,1024,0.348,1025,1.182,1028,1.133,1032,0.61,1037,2.831,1041,0.455,1062,1.129,1063,0.431,1070,0.388,1076,1.735,1082,3.008,1087,1.338,1088,4.1,1093,2.541,1096,3.256,1098,0.381,1100,0.411,1102,0.596,1107,0.395,1110,3.083,1111,1.46,1113,3.918,1114,0.42,1122,2.455,1123,0.486,1124,1.182,1127,2.602,1128,1.106,1144,0.566,1146,4.128,1149,0.652,1157,0.639,1175,1.572,1183,1.16,1184,0.338,1186,1.032,1191,0.431,1192,0.334,1197,4.594,1212,1.362,1224,1.084,1227,1.146,1229,0.469,1235,2.196,1242,0.33,1243,0.431,1244,0.728,1252,0.395,1256,0.647,1258,0.309,1259,1.879,1260,0.617,1261,0.348,1262,0.61,1266,0.323,1267,1.609,1269,0.455,1270,0.704,1271,1.879,1272,1.512,1277,1.084,1279,0.567,1290,3.385,1291,0.388,1299,1.477,1318,0.639,1323,1.133,1324,0.804,1338,1.508,1340,1.189,1351,1.963,1352,1.315,1365,0.647,1366,0.338,1372,0.431,1378,0.363,1381,0.368,1394,0.674,1410,0.411,1411,1.666,1422,0.431,1435,2.421,1438,1.477,1439,0.411,1440,0.442,1441,0.486,1474,1.106,1476,0.469,1504,0.845,1507,0.442,1512,0.77,1524,2.052,1577,0.403,1641,0.357,1648,0.338,1654,0.804,1656,0.532,1675,0.374,1687,0.368,1784,2.227,1785,0.431,1787,0.388,1815,0.532,1832,0.982,1835,0.929,1843,1.629,1848,0.469,1853,0.431,1857,0.352,1861,1.447,1875,0.755,1891,3.715,1894,4.069,1908,0.804,1934,0.755,1946,1.666,1970,0.431,2000,0.845,2033,0.455,2041,3.922,2045,0.845,2085,1.315,2098,0.42,2101,1.918,2126,1.248,2128,2.004,2133,0.506,2178,2.004,2212,2.193,2216,1.512,2282,0.566,2291,0.469,2326,0.469,2334,0.411,2339,5.13,2347,3.677,2349,0.403,2370,1.708,2440,0.755,2460,5.432,2461,1.889,2466,2.469,2470,0.566,2473,3.082,2478,1.106,2496,4.296,2569,0.869,2586,0.455,2628,0.532,2645,0.968,2653,1.248,2654,0.411,2682,1.552,2768,4.181,2803,2.971,2806,4.409,2810,2.164,2814,0.469,2837,0.566,2855,0.442,2860,0.469,2872,0.77,2879,3.657,2881,0.469,2934,0.786,2952,0.486,3025,2.603,3032,0.506,3039,0.486,3043,0.506,3074,0.442,3075,0.469,3093,1.017,3132,0.486,3134,1.335,3181,0.968,3284,0.845,3339,1.017,3356,2.216,3391,0.486,3399,1.017,3402,0.506,3413,4.751,3424,0.442,3429,0.77,3437,0.469,3538,2.389,3554,0.506,3647,2.593,3760,1.708,3801,1.248,3838,0.455,3840,0.486,3858,1.082,3862,0.532,3864,0.566,3984,3.657,3998,0.566,4029,0.897,4040,0.566,4047,1.552,4080,0.532,4081,0.319,4131,2.789,4135,3.811,4136,3.103,4137,1.597,4138,4.594,4139,6.404,4140,2.245,4141,1.555,4142,1.182,4143,0.618,4144,4.45,4145,0.618,4146,1.869,4147,0.618,4148,0.618,4149,1.182,4150,0.618,4151,0.566,4152,1.182,4153,0.618,4154,0.618,4155,0.618,4156,1.461,4157,0.618,4158,0.618,4159,0.618,4160,0.566,4161,1.082,4162,1.082,4163,0.532,4164,0.618,4165,1.182,4166,1.182,4167,1.082,4168,0.618,4169,0.618,4170,2.609,4171,0.618,4172,0.618,4173,0.618,4174,1.182,4175,1.461,4176,2.245,4177,0.618,4178,0.618,4179,2.776,4180,0.532,4181,1.017,4182,2.593,4183,2.245,4184,0.455,4185,3.388,4186,0.486,4187,0.486,4188,0.506,4189,0.618,4190,0.618,4191,0.618,4192,1.182,4193,0.618,4194,0.618,4195,0.618,4196,2.916,4197,0.618,4198,0.618,4199,0.618,4200,0.618,4201,0.403,4202,0.618,4203,1.182,4204,1.552,4205,1.017,4206,1.082,4207,1.335,4208,1.182,4209,2.609,4210,2.369,4211,1.182,4212,1.697,4213,1.182,4214,0.618,4215,4.846,4216,0.618,4217,0.618,4218,2.245,4219,1.989,4220,1.082,4221,1.288,4222,1.869,4223,0.618,4224,1.182,4225,0.618,4226,0.618,4227,0.618,4228,0.566,4229,1.461,4230,0.566,4231,0.532,4232,1.869,4233,1.461,4234,0.566,4235,1.182,4236,1.182,4237,1.182,4238,1.182,4239,0.486,4240,0.618,4241,0.532,4242,0.618,4243,0.618,4244,0.566,4245,0.566,4246,0.618,4247,0.869,4248,1.182,4249,1.697,4250,6.934,4251,2.369,4252,0.618,4253,0.618,4254,0.618,4255,0.618,4256,1.697,4257,0.566,4258,1.182,4259,0.566,4260,0.618,4261,1.697,4262,0.618,4263,1.182,4264,2.171,4265,1.697,4266,1.697,4267,1.989,4268,2.916,4269,1.697,4270,1.182,4271,0.618,4272,1.182,4273,2.593,4274,1.082,4275,1.082,4276,0.618,4277,0.618,4278,0.532,4279,0.618,4280,1.817,4281,0.618,4282,0.618,4283,0.618,4284,0.618,4285,0.618,4286,0.486,4287,0.618,4288,3.013,4289,0.618,4290,0.618,4291,0.968,4292,1.082,4293,1.082,4294,0.618,4295,0.618,4296,1.182,4297,0.618,4298,1.697,4299,0.618,4300,0.968,4301,0.566,4302,0.618,4303,1.182,4304,1.182,4305,0.618,4306,0.618,4307,0.455,4308,0.618,4309,0.618,4310,0.618,4311,2.76,4312,2.593,4313,2.469,4314,1.182,4315,0.869,4316,1.182,4317,0.618,4318,1.082,4319,0.618,4320,0.618,4321,0.618,4322,0.618,4323,0.618,4324,0.618,4325,1.182,4326,0.566,4327,0.618,4328,1.182,4329,0.618,4330,0.618,4331,0.618,4332,0.897,4333,0.618,4334,0.618,4335,0.566,4336,0.618,4337,0.618,4338,0.618,4339,0.618,4340,0.486,4341,0.532,4342,0.618,4343,0.618,4344,1.182,4345,0.618]],["component/44",[6,0.301]],["title/45-1",[76,21.375,946,24.836,1635,29.031]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["title/45-2",[938,23.376,946,21.537,1635,25.175,1829,24.098]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["title/45-3",[938,23.376,1012,32.092,1635,25.175,1829,24.098]],["name/45-3",[]],["text/45-3",[]],["component/45-3",[]],["title/45-4",[339,19.867,938,20.636,1635,22.224,1829,21.273,1832,24.631]],["name/45-4",[]],["text/45-4",[]],["component/45-4",[]],["title/45-5",[365,13.833,938,15.266,1046,19.088,1260,16.441,1635,16.441,1829,15.738,1830,25.819,1831,23.914]],["name/45-5",[]],["text/45-5",[]],["component/45-5",[]],["title/45-6",[6,10.767,336,32.176,1635,29.031]],["name/45-6",[]],["text/45-6",[]],["component/45-6",[]],["title/45-7",[4346,73.47]],["name/45-7",[]],["text/45-7",[]],["component/45-7",[]],["title/45-8",[4347,73.47]],["name/45-8",[]],["text/45-8",[]],["component/45-8",[]],["title/45-9",[4348,73.47]],["name/45-9",[]],["text/45-9",[]],["component/45-9",[]],["title/45-10",[773,36.744]],["name/45-10",[]],["text/45-10",[]],["component/45-10",[]],["title/45",[6,10.767,76,21.375,1635,29.031]],["name/45",[1635,0.872]],["text/45",[0,2.216,6,1.6,11,0.576,13,0.576,15,1.867,34,0.692,35,0.734,37,1.313,38,1.076,41,0.576,44,1.227,49,0.668,52,1.102,57,0.563,62,0.734,69,4.071,70,0.519,76,1.801,78,0.524,80,1.482,92,0.582,97,0.734,102,1.302,108,0.612,111,2.464,114,3.096,115,1.621,118,0.987,127,2.214,129,3.75,140,1.131,154,1.196,155,0.918,160,1.721,162,0.612,166,0.524,170,0.68,174,4.625,175,1.18,182,2.225,183,0.589,187,0.505,190,1.179,191,1.556,200,1.215,201,1.697,202,0.668,208,3.802,218,1.089,293,1.754,309,4.649,319,0.54,336,5.138,337,3.645,339,0.951,344,0.638,346,2.855,349,0.734,352,1.457,355,0.867,365,2.92,369,2.143,371,1.419,372,0.551,376,0.867,380,0.75,510,3.158,516,0.551,519,0.719,523,0.647,524,3.674,556,0.768,560,0.895,561,0.942,564,0.692,566,1.018,567,1.5,573,1.235,575,0.563,580,0.545,592,2.189,594,1.806,596,1.979,608,2.216,614,1.179,628,0.582,631,2.361,634,1.499,635,2.008,639,0.997,643,1.302,646,3.586,648,0.805,649,1.606,651,1.805,653,1.302,662,1.492,670,0.789,671,0.88,676,1.576,678,0.978,681,0.719,686,3.08,688,0.692,695,1.386,698,0.96,705,0.68,708,0.768,710,0.529,711,1.434,714,0.612,723,1.681,724,2.965,727,2.06,729,0.949,741,2.206,747,1.39,750,0.719,751,0.811,754,0.563,755,3.276,762,0.904,763,0.75,767,0.837,773,2.901,775,0.551,781,1.781,783,1.386,785,1.179,787,1.913,796,1.979,798,0.557,801,0.658,804,1.603,809,0.597,810,1.731,812,1.749,818,1.179,822,2.072,835,3.276,846,0.904,847,0.515,861,0.569,863,0.612,868,1.01,883,1.42,899,0.576,912,2.503,915,3.394,918,0.789,929,2.503,938,3.493,939,1.693,946,2.67,958,2.887,973,0.997,974,2.759,979,1.516,985,0.576,990,0.421,1002,1.597,1005,0.837,1012,2.759,1019,0.904,1022,1.256,1024,1.146,1025,1.979,1028,1.063,1032,1.466,1035,4.276,1046,2.143,1050,0.768,1052,3.662,1068,2.109,1076,2.759,1081,0.768,1082,2.504,1084,1.754,1085,2.031,1087,1.256,1088,2.017,1096,2.399,1102,1.029,1110,1.556,1113,1.007,1114,2.821,1122,3.274,1127,0.658,1175,1.482,1186,3.299,1188,1.971,1191,0.768,1192,2.794,1194,0.589,1209,0.68,1227,0.582,1235,0.597,1239,1.754,1242,1.518,1247,1.754,1248,0.75,1256,0.604,1258,1.767,1259,0.612,1260,4.117,1265,0.719,1266,0.576,1267,0.589,1270,0.658,1274,1.089,1276,0.62,1277,1.302,1279,1.99,1290,0.582,1305,0.789,1306,0.867,1309,1.196,1318,3.235,1351,0.719,1354,1.278,1365,1.116,1366,0.604,1372,0.768,1381,0.658,1394,1.162,1402,1.328,1411,0.705,1413,2.406,1422,2.889,1435,1.693,1439,0.734,1474,0.719,1480,0.734,1482,3.624,1484,2.406,1495,0.647,1510,1.67,1599,1.932,1634,0.811,1635,5.572,1648,1.116,1654,4.307,1701,1.754,1782,2.702,1783,1.356,1829,4.13,1830,4.902,1831,3.148,1832,2.988,1834,4.034,1836,3.053,1838,9.689,1840,5.189,1843,1.913,1844,0.904,1845,2.899,1846,1.01,1847,0.867,1848,0.837,1849,2.602,1851,5.45,1856,6.792,1857,1.62,1860,5.801,1861,1.576,1862,1.01,1863,1.01,1864,3.24,1865,3.24,1866,0.811,1867,3.24,1868,3.24,1869,5.48,1870,1.01,1871,1.01,1872,2.899,1873,1.01,1874,1.01,1876,0.811,1877,0.837,1878,0.734,1879,2.328,1881,0.949,1882,0.949,1883,2.156,1885,0.904,1886,1.01,1887,1.867,1888,0.867,1889,1.01,1906,1.01,1907,2.602,1911,0.668,1912,3.365,1913,0.692,1914,2.406,1915,1.603,1917,2.156,1918,1.603,1919,3.799,1925,0.867,1928,1.867,1929,1.01,1943,1.547,1964,0.949,2148,0.867,2159,0.867,2168,0.867,2212,1.196,2214,2.759,2243,0.811,2244,2.759,2294,0.789,2430,1.01,2447,1.01,2461,0.692,2469,0.75,2799,2.156,2872,0.719,2934,0.734,3218,3.57,3244,0.811,3314,1.386,3419,1.457,3429,1.328,3430,0.811,3836,1.67,3843,0.949,4022,0.837,4055,1.01,4077,0.949,4081,1.466,4131,1.815,4133,7.407,4134,1.01,4196,4.034,4239,0.867,4326,1.01,4346,3.24,4347,1.867,4348,1.867,4349,1.103,4350,1.103,4351,1.103,4352,1.103,4353,4.148,4354,3.538,4355,1.103,4356,7.681,4357,1.103,4358,1.01,4359,3.538,4360,2.841,4361,2.841,4362,2.841,4363,2.841,4364,2.841,4365,2.841,4366,2.089,4367,1.103,4368,1.103,4369,1.103,4370,1.103,4371,2.841,4372,1.103,4373,2.038,4374,2.038,4375,2.841,4376,1.103,4377,1.01,4378,1.103,4379,0.949,4380,0.904,4381,2.038,4382,1.103,4383,1.103,4384,1.103,4385,1.103,4386,2.038,4387,1.103,4388,1.103,4389,1.103,4390,1.103,4391,1.103,4392,1.103,4393,1.103,4394,1.103,4395,0.949,4396,2.038,4397,1.103,4398,1.103,4399,1.103,4400,1.103,4401,1.103,4402,1.01,4403,2.038,4404,1.103,4405,1.103,4406,1.103,4407,1.103,4408,1.103,4409,5.166,4410,1.103,4411,1.103,4412,2.038,4413,1.103,4414,1.103,4415,2.038,4416,2.038,4417,2.038,4418,1.103,4419,1.103,4420,1.103,4421,1.103,4422,1.103,4423,1.103,4424,1.103,4425,1.103,4426,1.103,4427,1.103,4428,1.01,4429,1.103,4430,1.103,4431,1.103,4432,1.103]],["component/45",[6,0.301]],["title/46",[6,12.714,1258,32.814]],["name/46",[1258,0.834]],["text/46",[6,1.748,23,3.209,41,3.557,78,4.292,90,4.213,114,3.253,115,3.123,174,3.424,175,2.832,187,3.123,195,3.557,222,3.303,540,5.663,584,4.534,592,3.599,614,3.942,631,2.876,643,3.123,646,3.603,648,2.692,653,3.123,671,2.944,710,3.271,798,3.441,810,4.42,847,4.213,873,4.873,900,5.347,948,4.885,1011,4.13,1075,4.873,1110,5.906,1122,4.102,1186,5.8,1256,3.733,1258,5.965,1266,3.557,1289,4.13,1340,3.733,1366,3.733,1411,4.355,1641,5.858,1832,3.942,1933,4.748,2244,4.534,2294,4.873,2334,6.738,3082,6.245,3394,4.636,4131,4.355,4433,5.868,4434,6.817,4435,6.817,4436,6.817,4437,6.817,4438,6.817,4439,6.817]],["component/46",[6,0.301]],["title/47-1",[712,35.529,2121,49.862]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["title/47-2",[948,35.529,1197,40.474]],["name/47-2",[]],["text/47-2",[]],["component/47-2",[]],["title/47-3",[712,30.087,948,30.087,1197,34.276]],["name/47-3",[]],["text/47-3",[]],["component/47-3",[]],["title/47-4",[712,30.087,948,30.087,1197,34.276]],["name/47-4",[]],["text/47-4",[]],["component/47-4",[]],["title/47-5",[712,30.087,2121,42.226,4440,47.888]],["name/47-5",[]],["text/47-5",[]],["component/47-5",[]],["title/47-6",[900,34.681,1641,37.994]],["name/47-6",[]],["text/47-6",[]],["component/47-6",[]],["title/47-7",[900,29.37,1641,32.176,1933,38.754]],["name/47-7",[]],["text/47-7",[]],["component/47-7",[]],["title/47-8",[727,18.779,2277,49.862]],["name/47-8",[]],["text/47-8",[]],["component/47-8",[]],["title/47-9",[899,34.281,900,34.681]],["name/47-9",[]],["text/47-9",[]],["component/47-9",[]],["title/47",[6,10.767,900,29.37,1256,30.469]],["name/47",[900,0.882]],["text/47",[6,1.449,28,0.806,37,2.911,41,2.352,44,2.913,55,1.05,66,1.003,69,2.651,70,2.447,72,2.358,76,1.418,80,0.787,82,1.003,86,2.221,92,0.796,93,3.849,100,1.288,102,3.573,108,1.504,109,1.313,111,2.572,114,3.294,115,1.691,116,2.263,118,1.313,122,2.132,127,0.646,129,0.717,135,1.766,141,1.677,155,0.679,163,1.616,174,1.709,175,1.126,187,2.651,191,2.022,195,1.414,200,0.899,201,1.301,209,0.963,218,0.806,219,0.753,222,2.518,225,2.623,233,0.778,243,3.286,245,2.076,308,0.761,319,0.738,320,0.885,338,1.003,340,2.333,342,0.872,344,1.568,350,3.822,362,0.787,365,0.662,367,0.86,371,1.354,373,1.414,381,1.109,510,2.38,512,0.899,513,1.145,523,1.591,527,2.167,528,2.057,536,1.145,540,1.7,554,1.381,555,1.236,560,0.662,561,0.697,566,2.89,575,1.383,580,1.825,581,1.145,584,2.998,590,1.026,591,1.504,594,1.18,599,0.738,600,0.826,602,0.982,606,9.205,610,1.298,614,1.568,628,0.796,629,0.86,631,3.011,633,4.892,643,4.399,646,2.965,648,2.052,651,0.769,653,1.691,662,0.636,667,4.013,668,1.186,670,1.938,674,0.914,678,1.771,679,1.05,698,2.447,706,1.545,708,1.05,710,1.301,711,0.761,712,5.034,713,0.848,727,1.289,741,2.122,747,1.326,754,2.3,755,1.484,763,1.843,765,0.86,771,1.145,773,1.691,780,1.145,781,0.946,798,4.323,805,0.86,809,0.816,810,2.206,812,1.825,818,0.872,831,1.109,844,1.078,847,1.722,860,1.078,863,0.837,870,0.982,874,1.003,876,1.109,877,2.048,884,1.381,886,3.202,895,2.132,899,4.069,900,6.451,910,1.368,912,3.267,914,1.938,915,3.82,922,0.872,924,0.946,927,1.766,928,0.914,932,2.715,933,0.826,938,0.731,944,0.946,945,0.826,946,1.21,948,6.046,979,0.646,980,1.145,982,4.78,990,2.724,1002,0.848,1009,1.236,1023,2.998,1024,0.848,1028,1.414,1037,1.484,1044,1.026,1050,1.05,1082,0.806,1087,3.202,1098,0.929,1100,1.803,1106,1.524,1107,1.731,1110,1.484,1113,1.34,1122,0.685,1127,0.899,1146,0.946,1149,1.418,1156,1.078,1157,1.466,1186,1.755,1187,0.837,1188,1.288,1192,1.466,1195,0.86,1197,6.269,1199,1.05,1206,0.946,1218,1.803,1224,1.731,1225,0.946,1235,0.816,1242,1.972,1243,3.14,1253,0.963,1256,2.022,1259,1.504,1265,0.982,1267,2.408,1270,0.899,1271,1.504,1273,0.899,1279,0.724,1280,1.109,1281,3.449,1283,1.109,1293,0.899,1299,1.026,1307,1.298,1323,1.414,1340,2.022,1351,1.766,1352,1.642,1356,1.145,1365,0.826,1366,0.826,1372,1.05,1378,0.885,1381,3.45,1391,0.929,1414,1.236,1435,1.616,1480,1.003,1496,5.304,1507,1.078,1587,1.186,1641,3.9,1651,1.026,1690,1.05,1770,1.938,1772,2.132,1795,1.298,1836,0.982,1837,1.381,1843,0.816,1877,1.145,1878,2.998,1933,4.387,1968,1.145,2045,2.639,2085,3.506,2098,1.026,2099,5.628,2121,2.802,2216,1.888,2277,6.806,2297,1.109,2324,2.715,2327,1.993,2334,1.003,2335,3.545,2349,1.766,2350,3.88,2363,1.298,2366,1.298,2466,2.221,2469,1.026,2473,1.545,2496,2.715,2499,4.551,2586,1.993,2631,1.145,2654,3.457,2658,1.888,2665,2.333,2713,1.186,2803,0.963,2810,0.963,2815,1.236,2838,1.236,2839,1.298,2849,2.132,2881,1.145,2934,1.803,3039,1.186,3053,1.298,3085,1.298,3093,1.298,3132,1.186,3183,2.221,3221,1.298,3231,1.381,3265,1.381,3405,1.109,3424,1.078,3426,1.236,3437,1.145,3616,1.381,3774,1.381,3861,1.298,3865,1.236,3875,1.298,3995,1.381,4002,1.381,4053,1.381,4179,6.39,4239,2.132,4247,4.256,4278,1.298,4440,1.298,4441,1.508,4442,2.711,4443,1.508,4444,1.381,4445,1.508,4446,1.508,4447,2.711,4448,3.382,4449,1.381,4450,1.508,4451,1.381,4452,2.711,4453,1.381,4454,2.711,4455,2.132,4456,1.508,4457,1.508,4458,4.508,4459,1.508,4460,1.508,4461,1.508,4462,2.711,4463,1.508,4464,1.508,4465,1.508,4466,1.508,4467,1.508,4468,1.508,4469,2.711,4470,1.381,4471,1.508,4472,1.508,4473,1.298,4474,2.333,4475,1.508,4476,1.381,4477,1.508,4478,1.508,4479,1.508,4480,1.508,4481,1.381,4482,2.711,4483,2.711,4484,1.508,4485,1.236,4486,1.508,4487,4.508,4488,1.508,4489,1.508,4490,4.508,4491,3.692,4492,1.508,4493,1.508,4494,1.508,4495,1.381,4496,1.508]],["component/47",[6,0.301]],["title/48-1",[4081,33.895,4497,49.862]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["title/48-2",[671,28.377,4081,33.895]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["title/48-3",[1340,35.979,4081,33.895]],["name/48-3",[]],["text/48-3",[]],["component/48-3",[]],["title/48-4",[1256,35.979,4081,33.895]],["name/48-4",[]],["text/48-4",[]],["component/48-4",[]],["title/48-5",[129,26.441,1641,32.176,4081,28.704]],["name/48-5",[]],["text/48-5",[]],["component/48-5",[]],["title/48-6",[710,26.695,990,21.232,4081,28.704]],["name/48-6",[]],["text/48-6",[]],["component/48-6",[]],["title/48-7",[175,23.116,324,32.657,4081,28.704]],["name/48-7",[]],["text/48-7",[]],["component/48-7",[]],["title/48-8",[175,23.116,633,32.657,4081,28.704]],["name/48-8",[]],["text/48-8",[]],["component/48-8",[]],["title/48-9",[175,20.046,633,28.32,1037,26.422,4081,24.892]],["name/48-9",[]],["text/48-9",[]],["component/48-9",[]],["title/48-10",[373,29.031,659,27.788,990,21.232]],["name/48-10",[]],["text/48-10",[]],["component/48-10",[]],["title/48-11",[373,29.031,659,27.788,1111,26.956]],["name/48-11",[]],["text/48-11",[]],["component/48-11",[]],["title/48-12",[990,25.072,2755,37.994]],["name/48-12",[]],["text/48-12",[]],["component/48-12",[]],["title/48-13",[727,18.779,4081,33.895]],["name/48-13",[]],["text/48-13",[]],["component/48-13",[]],["title/48-14",[727,15.903,1832,32.176,4081,28.704]],["name/48-14",[]],["text/48-14",[]],["component/48-14",[]],["title/48-15",[4081,33.895,4498,56.549]],["name/48-15",[]],["text/48-15",[]],["component/48-15",[]],["title/48-16",[727,13.791,1832,27.902,1923,37.943,4081,24.892]],["name/48-16",[]],["text/48-16",[]],["component/48-16",[]],["title/48-17",[727,12.174,1122,19.342,1832,24.631,1912,27.745,4081,21.974]],["name/48-17",[]],["text/48-17",[]],["component/48-17",[]],["title/48-18",[76,21.375,2395,35.539,4081,28.704]],["name/48-18",[]],["text/48-18",[]],["component/48-18",[]],["title/48-19",[1248,37.838,1577,36.244,2395,35.539]],["name/48-19",[]],["text/48-19",[]],["component/48-19",[]],["title/48-20",[76,21.375,1648,30.469,4081,28.704]],["name/48-20",[]],["text/48-20",[]],["component/48-20",[]],["title/48-21",[76,18.537,1648,26.422,4081,24.892,4499,44.198]],["name/48-21",[]],["text/48-21",[]],["component/48-21",[]],["title/48-22",[76,21.375,1640,33.165,4081,28.704]],["name/48-22",[]],["text/48-22",[]],["component/48-22",[]],["title/48-23",[76,21.375,1640,33.165,4500,50.966]],["name/48-23",[]],["text/48-23",[]],["component/48-23",[]],["title/48-24",[76,18.537,1149,18.537,1640,28.761,1648,26.422]],["name/48-24",[]],["text/48-24",[]],["component/48-24",[]],["title/48-25",[1647,38.754,2755,32.176,4081,28.704]],["name/48-25",[]],["text/48-25",[]],["component/48-25",[]],["title/48-26",[233,33.895,2755,37.994]],["name/48-26",[]],["text/48-26",[]],["component/48-26",[]],["title/48-27",[100,31.222,2755,37.994]],["name/48-27",[]],["text/48-27",[]],["component/48-27",[]],["title/48-28",[101,36.94,2755,37.994]],["name/48-28",[]],["text/48-28",[]],["component/48-28",[]],["title/48-29",[240,44.681,2755,37.994]],["name/48-29",[]],["text/48-29",[]],["component/48-29",[]],["title/48-30",[1,41.195,2755,37.994]],["name/48-30",[]],["text/48-30",[]],["component/48-30",[]],["title/48",[1122,29.836,1149,25.241]],["name/48",[1149,0.642]],["text/48",[0,2.105,1,1.596,2,0.881,6,0.656,15,0.513,21,0.893,23,0.973,26,1.232,28,0.519,30,0.462,35,0.226,37,2.189,38,0.668,41,0.346,44,0.42,52,0.979,55,0.677,62,0.646,63,0.166,69,4.225,70,0.312,72,0.424,75,0.226,76,2.688,78,1.209,80,2.145,92,0.513,97,0.441,100,3.166,101,3.423,102,2.478,106,0.222,108,2.545,109,1.446,114,3.321,115,0.947,116,1.559,118,0.613,127,2.37,129,3.568,133,0.609,135,0.432,136,0.217,137,0.57,139,0.554,141,1.449,146,0.194,155,2.543,157,0.268,160,0.402,161,1.195,162,0.368,163,0.579,166,0.162,170,0.21,174,4.665,175,1.906,182,0.264,183,0.519,185,0.237,186,0.633,187,1.166,191,0.846,197,0.268,200,0.579,201,0.992,202,0.766,205,0.409,206,0.588,207,1.234,209,0.62,221,0.222,222,3.465,225,0.49,233,2.914,234,0.694,240,2.305,243,0.507,245,0.191,253,0.363,267,0.39,284,0.921,308,1.166,309,0.373,318,0.11,319,0.325,320,0.2,324,0.39,326,0.258,332,0.268,339,0.159,343,0.588,344,0.197,346,1.827,349,0.226,351,0.226,358,0.409,361,0.279,362,0.806,364,1.906,365,1.947,367,0.378,369,0.206,371,2.437,372,0.905,373,1.557,374,0.409,375,0.312,377,0.474,380,0.231,385,2.122,400,1.157,505,0.841,508,0.504,510,0.18,513,0.258,516,0.485,521,0.237,523,0.742,524,1.79,526,0.86,527,1.213,536,0.504,540,0.609,546,0.554,557,0.268,560,1.805,561,1.655,566,3.371,567,3.101,573,0.206,574,0.243,575,1.523,576,0.213,580,0.625,581,0.504,591,1.146,592,1.343,594,0.9,599,0.475,600,0.532,602,0.222,608,0.825,614,0.731,615,0.474,619,0.237,623,0.18,625,0.522,628,1.091,629,0.721,631,2.612,633,3.175,635,0.776,639,0.886,640,0.633,645,0.585,646,3.231,647,0.163,648,2.854,649,1.942,651,2.998,653,2.17,654,0.359,659,4.024,660,0.62,662,1.346,666,0.206,667,1.018,671,0.782,672,0.677,674,0.206,675,0.424,676,3,678,1.626,679,0.237,681,0.222,687,0.197,688,0.213,691,0.402,696,1.136,697,0.994,698,1.304,700,0.451,701,0.243,705,0.409,706,1.578,710,2.921,711,0.638,712,0.835,713,0.191,714,2.372,716,1.571,723,0.462,725,0.279,727,2.044,729,0.293,740,4.222,741,1.685,743,0.222,747,1.752,751,0.25,754,0.339,755,2.342,758,1.375,763,0.231,765,0.194,771,0.504,772,0.57,773,1.553,775,1.968,780,0.258,781,0.416,782,0.409,783,0.661,785,1.336,787,0.359,792,0.222,797,0.474,798,1.711,801,0.203,805,0.721,807,0.258,810,1.561,812,1.142,818,0.197,820,0.184,823,1.871,825,0.279,828,0.279,831,0.25,835,0.992,841,0.243,842,0.279,843,0.217,847,1.918,861,1.313,863,0.189,870,0.432,871,0.268,874,0.441,876,0.93,880,0.231,883,0.462,885,0.222,886,0.21,887,0.402,888,0.39,889,0.441,894,0.488,900,2.919,905,0.766,910,0.49,912,0.471,914,1.104,915,1.298,918,0.474,922,1.336,924,1.871,926,0.222,927,0.432,928,1.097,932,0.488,933,0.363,938,0.613,940,0.402,941,0.226,944,0.416,945,1.856,946,0.809,948,0.525,949,0.226,953,0.416,954,0.779,973,1.561,974,0.646,979,1.367,985,0.346,986,1.232,987,0.994,988,0.646,990,3.984,994,0.416,1000,0.544,1002,1.018,1005,0.258,1011,0.206,1012,0.441,1013,0.714,1015,0.441,1019,0.279,1021,0.62,1022,2.918,1023,0.441,1024,0.191,1025,0.237,1027,2.95,1028,2.231,1032,0.652,1034,0.25,1037,0.992,1046,1.097,1048,0.25,1050,0.237,1063,0.881,1070,0.416,1076,0.441,1079,0.279,1081,0.462,1082,1.594,1087,0.21,1088,1.317,1093,0.451,1096,0.731,1098,0.21,1100,0.441,1102,0.49,1103,0.279,1106,0.373,1107,0.986,1110,2.429,1111,4.531,1112,2.387,1113,1.369,1114,0.661,1118,0.279,1122,3.907,1124,0.237,1125,0.608,1127,0.921,1128,0.432,1135,0.25,1142,0.222,1146,0.968,1149,3.447,1157,1.118,1175,0.346,1176,0.62,1182,0.237,1184,0.186,1186,0.462,1187,0.539,1188,2.251,1189,0.279,1191,0.462,1192,0.184,1194,0.519,1195,0.378,1197,0.951,1203,0.571,1206,0.213,1209,0.409,1212,1.136,1218,0.646,1224,1.157,1227,1.22,1229,0.504,1231,0.243,1234,0.268,1235,0.979,1242,1.234,1243,0.881,1248,0.661,1252,0.424,1253,0.424,1258,2.054,1259,0.539,1260,1.328,1261,0.546,1262,3.031,1263,2.473,1265,0.824,1266,0.346,1267,1.704,1270,1.08,1271,0.189,1272,0.462,1274,0.519,1276,1.431,1277,0.62,1279,1.973,1281,0.363,1283,0.25,1284,0.714,1286,0.268,1288,1.61,1290,1.091,1291,0.213,1307,0.293,1309,0.39,1316,0.66,1318,2.561,1321,0.243,1323,0.66,1324,0.231,1325,0.504,1335,0.711,1340,1.265,1352,0.935,1354,0.213,1363,0.522,1365,1.132,1366,0.532,1378,0.2,1381,1.651,1382,0.243,1391,0.409,1394,0.194,1402,0.633,1410,2.95,1411,0.62,1413,0.231,1418,0.268,1419,1.036,1422,0.677,1427,0.968,1435,0.579,1438,1.571,1440,2.691,1441,0.268,1474,0.432,1480,0.226,1491,0.646,1495,0.2,1501,0.243,1512,0.222,1524,0.206,1571,1.088,1576,0.268,1577,0.432,1582,0.423,1587,0.994,1639,0.258,1640,4.123,1641,2.177,1647,0.237,1648,3.498,1650,0.279,1651,0.231,1652,0.293,1654,0.451,1675,0.206,1677,0.279,1687,0.203,1690,0.237,1705,0.488,1706,2.177,1718,0.268,1723,0.677,1724,0.96,1726,0.279,1727,0.451,1764,0.504,1781,0.293,1784,0.921,1785,0.237,1789,1.731,1792,1.172,1799,0.737,1820,0.293,1829,0.331,1831,0.258,1832,2.473,1835,0.268,1841,0.258,1843,1.497,1854,0.488,1858,0.206,1861,1.005,1866,0.25,1875,0.217,1876,0.25,1878,0.441,1885,0.796,1888,0.522,1891,0.754,1900,0.312,1908,1.232,1911,0.206,1912,2.208,1913,0.213,1915,0.268,1917,0.737,1923,0.268,1933,0.677,1939,0.243,1946,0.986,1970,0.237,1997,0.237,2000,0.474,2041,0.237,2092,0.522,2095,0.312,2101,0.25,2102,0.268,2117,0.544,2125,0.222,2126,0.93,2128,0.226,2148,0.764,2154,0.544,2159,0.268,2166,0.293,2177,0.258,2178,0.226,2184,0.25,2195,0.231,2212,0.2,2214,1.027,2216,0.462,2223,0.432,2269,1.375,2289,0.268,2296,1.693,2297,0.25,2312,0.237,2319,1.61,2323,2.509,2329,1.232,2332,0.25,2336,2.445,2339,1.476,2345,0.312,2346,1.699,2347,1.883,2349,1.18,2395,4.14,2440,0.808,2460,1.906,2461,2.001,2473,1.578,2478,1.804,2484,0.268,2486,1.157,2496,0.488,2522,1.754,2546,2.361,2549,0.608,2552,0.293,2569,1.871,2583,0.312,2603,1.659,2606,0.544,2619,0.279,2633,1.104,2645,0.279,2654,0.841,2658,1.076,2667,0.462,2682,0.243,2698,0.571,2700,0.312,2713,0.268,2755,4.752,2766,1.036,2803,1.625,2805,0.608,2806,0.986,2810,2.833,2872,1.18,2876,0.544,2881,2.421,2882,0.544,2891,0.258,2929,0.237,2931,2.347,2934,0.226,2952,0.268,2961,0.293,2964,0.608,2965,0.293,3027,0.279,3043,0.279,3044,0.796,3048,0.279,3050,0.312,3059,0.312,3074,1.477,3101,0.293,3134,0.268,3157,0.86,3183,0.279,3195,0.25,3224,0.488,3244,0.25,3250,0.312,3271,0.279,3284,0.243,3299,0.279,3305,0.608,3306,0.608,3314,0.661,3337,0.462,3343,0.279,3394,0.451,3399,0.293,3405,0.25,3417,0.293,3424,0.243,3429,0.432,3430,0.25,3437,0.258,3459,0.268,3512,0.293,3578,1.625,3636,0.571,3676,0.312,3801,0.25,3813,0.522,3838,0.714,3841,1.158,3843,0.293,3861,1.088,4022,0.504,4029,0.258,4037,0.312,4047,0.474,4069,0.312,4079,2.665,4080,1.989,4081,4.758,4131,0.808,4137,0.488,4138,1.214,4139,1.036,4187,2.509,4188,1.693,4210,0.522,4221,0.737,4239,0.268,4245,0.312,4247,0.714,4250,3.299,4268,0.293,4273,0.836,4278,0.293,4280,0.462,4286,0.764,4291,0.279,4301,0.312,4311,0.312,4313,0.279,4315,0.25,4332,0.504,4377,0.312,4428,0.312,4444,1.158,4448,0.312,4453,0.608,4455,0.268,4470,0.312,4473,1.088,4474,0.293,4497,0.258,4498,1.329,4499,0.608,4500,0.312,4501,0.608,4502,0.608,4503,0.34,4504,0.34,4505,0.34,4506,0.34,4507,0.34,4508,2.331,4509,0.34,4510,0.34,4511,0.664,4512,0.312,4513,0.312,4514,0.312,4515,0.34,4516,0.664,4517,1.265,4518,1.265,4519,1.544,4520,0.971,4521,0.34,4522,0.34,4523,2.067,4524,0.34,4525,0.737,4526,0.34,4527,0.34,4528,0.34,4529,0.34,4530,0.34,4531,0.34,4532,0.971,4533,0.34,4534,0.312,4535,0.34,4536,0.34,4537,0.664,4538,0.664,4539,0.34,4540,0.664,4541,0.34,4542,0.608,4543,0.34,4544,0.34,4545,0.664,4546,0.89,4547,0.34,4548,0.664,4549,5.28,4550,0.34,4551,0.34,4552,0.34,4553,0.971,4554,0.34,4555,0.34,4556,0.664,4557,0.664,4558,0.664,4559,0.664,4560,0.34,4561,0.34,4562,0.34,4563,0.971,4564,0.34,4565,0.34,4566,0.312,4567,0.34,4568,0.34,4569,0.34,4570,0.34,4571,0.34,4572,0.34,4573,1.811,4574,0.34,4575,0.293,4576,0.89,4577,0.34,4578,0.34,4579,1.265,4580,0.34,4581,0.34,4582,0.34,4583,0.608,4584,0.293,4585,0.664,4586,0.571,4587,2.067,4588,1.544,4589,0.34,4590,0.34,4591,0.34,4592,0.34,4593,0.34,4594,0.34,4595,0.34,4596,0.34,4597,0.34,4598,0.34,4599,0.34,4600,0.34,4601,0.34,4602,0.664,4603,0.34,4604,0.34,4605,0.34,4606,0.34,4607,0.34,4608,0.34,4609,0.664,4610,0.34,4611,0.664,4612,0.34,4613,1.811,4614,0.34,4615,0.34,4616,0.34,4617,0.34,4618,0.34,4619,0.34,4620,0.571,4621,0.34,4622,0.34,4623,0.34,4624,0.34,4625,0.34,4626,0.34,4627,1.811,4628,0.664,4629,0.34,4630,0.34,4631,0.664,4632,0.312,4633,0.34,4634,0.34,4635,0.34,4636,0.34,4637,0.312,4638,0.34,4639,1.265,4640,0.89,4641,0.34,4642,0.34,4643,0.34,4644,0.89,4645,0.34,4646,0.34,4647,0.34,4648,0.34,4649,0.664,4650,0.34,4651,0.34,4652,0.664,4653,0.34,4654,0.34,4655,0.34,4656,0.34,4657,0.34,4658,0.34,4659,0.664,4660,0.34,4661,0.971,4662,0.34,4663,0.34,4664,0.293,4665,0.34,4666,0.34,4667,0.34,4668,0.34,4669,0.971,4670,0.971,4671,0.34,4672,1.811,4673,0.34,4674,0.664,4675,0.34,4676,0.34,4677,0.34,4678,0.34,4679,0.34,4680,0.34,4681,0.34,4682,0.664,4683,0.34,4684,0.664,4685,0.34,4686,0.34,4687,2.067,4688,0.34,4689,0.34,4690,0.34,4691,0.34,4692,2.311,4693,0.34,4694,0.34,4695,0.34,4696,0.34,4697,0.34,4698,0.34,4699,0.34,4700,0.34,4701,0.971,4702,1.265,4703,0.34,4704,0.664,4705,0.34,4706,0.312,4707,0.34,4708,0.34,4709,0.293,4710,0.312,4711,0.34,4712,0.34,4713,0.34,4714,0.34,4715,0.34,4716,0.34,4717,0.34,4718,1.544,4719,0.34,4720,0.34,4721,0.312,4722,1.544,4723,0.664,4724,0.608,4725,0.664,4726,2.311,4727,0.971,4728,0.664,4729,0.89,4730,3.764,4731,0.34,4732,0.89,4733,0.34,4734,0.34,4735,0.89,4736,0.664,4737,1.088,4738,0.312,4739,0.293,4740,0.34,4741,0.312,4742,0.664,4743,0.312,4744,0.34,4745,0.34,4746,0.608,4747,0.34,4748,0.34,4749,0.34,4750,0.34,4751,0.34,4752,0.664,4753,0.34,4754,0.312,4755,0.34,4756,0.34,4757,0.34,4758,0.312,4759,0.34,4760,0.312,4761,0.34,4762,0.312,4763,3.081,4764,0.312,4765,0.34,4766,0.34,4767,0.664,4768,0.34,4769,0.293,4770,0.34,4771,0.34,4772,0.312,4773,0.312,4774,0.312,4775,1.158,4776,0.608,4777,0.312,4778,0.608,4779,0.312,4780,0.312,4781,0.34,4782,0.34,4783,0.971,4784,0.971,4785,0.34,4786,0.836,4787,0.34,4788,0.34,4789,0.34,4790,0.34,4791,0.34,4792,0.34,4793,0.34,4794,0.34,4795,0.664,4796,0.664,4797,0.664,4798,0.34,4799,0.34,4800,0.34,4801,0.34,4802,0.34,4803,0.34,4804,0.34,4805,0.34,4806,0.34,4807,0.34,4808,0.312,4809,0.971,4810,0.664,4811,0.34,4812,0.34,4813,0.34,4814,0.34,4815,0.34,4816,0.34,4817,0.34,4818,0.312,4819,0.34,4820,0.312,4821,0.971,4822,0.34,4823,0.34,4824,1.265,4825,0.664,4826,0.34,4827,0.34,4828,0.34,4829,0.34,4830,0.34,4831,0.312,4832,0.971,4833,0.34,4834,0.34,4835,0.34,4836,0.971,4837,0.608,4838,0.664,4839,0.34,4840,0.664,4841,0.312,4842,0.34,4843,0.34,4844,0.34,4845,0.34,4846,1.544,4847,0.34,4848,0.34,4849,0.34,4850,0.664,4851,0.34,4852,0.608,4853,0.664,4854,0.971,4855,0.971,4856,0.971,4857,0.664,4858,0.34,4859,0.34,4860,0.34,4861,0.34,4862,0.664,4863,0.34,4864,0.34,4865,0.34,4866,0.34,4867,0.34,4868,0.34,4869,0.34,4870,0.34,4871,0.34,4872,0.312,4873,0.34,4874,0.34,4875,0.34,4876,0.34,4877,0.34,4878,0.34,4879,0.34,4880,0.664,4881,0.312,4882,0.34,4883,0.312,4884,0.312,4885,0.608,4886,0.34,4887,0.34,4888,2.067,4889,3.389,4890,0.34,4891,0.34,4892,0.664,4893,0.34,4894,0.34,4895,0.971,4896,0.664,4897,0.34,4898,2.545,4899,2.545,4900,0.34,4901,0.34,4902,0.664,4903,0.34,4904,0.608,4905,0.34,4906,0.34,4907,0.34,4908,0.34,4909,0.34,4910,0.34,4911,0.34,4912,0.34,4913,1.811,4914,0.664,4915,0.34,4916,0.312,4917,0.34,4918,0.34,4919,0.34,4920,0.34,4921,0.34,4922,0.312,4923,0.34,4924,1.811,4925,0.34,4926,0.34,4927,0.34,4928,0.34,4929,0.34,4930,0.34,4931,0.34,4932,0.34,4933,0.34,4934,0.34,4935,0.664]],["component/48",[6,0.301]],["title/49-1",[72,41.967,4187,51.666]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["title/49-2",[100,26.441,860,39.771,1242,29.722]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["title/49-3",[129,31.222,646,23.371]],["name/49-3",[]],["text/49-3",[]],["component/49-3",[]],["title/49-4",[727,18.779,1582,28.607]],["name/49-4",[]],["text/49-4",[]],["component/49-4",[]],["title/49-5",[990,25.072,1262,33.895]],["name/49-5",[]],["text/49-5",[]],["component/49-5",[]],["title/49-6",[1111,31.831,1427,35.096]],["name/49-6",[]],["text/49-6",[]],["component/49-6",[]],["title/49-7",[990,21.232,1111,26.956,4201,36.244]],["name/49-7",[]],["text/49-7",[]],["component/49-7",[]],["title/49-8",[100,26.441,1427,29.722,4936,43.754]],["name/49-8",[]],["text/49-8",[]],["component/49-8",[]],["title/49",[100,26.441,647,26.695,1122,25.266]],["name/49",[2296,1.111]],["text/49",[0,0.509,1,0.598,6,0.484,15,0.939,19,1.308,21,0.551,23,0.838,35,0.634,37,1.452,38,0.939,41,0.497,52,3.468,63,0.466,69,3.972,70,0.838,76,0.961,78,0.846,80,0.497,90,0.445,100,4.12,102,2.503,109,0.462,114,2.406,115,1.146,116,3.21,127,0.762,129,3.771,137,0.559,141,0.433,161,1.447,162,0.987,166,0.453,170,1.096,173,0.466,174,4.748,175,2.114,182,0.379,187,1.439,191,0.522,201,0.854,207,0.509,221,0.621,222,1.212,308,0.898,309,1,319,0.466,320,1.044,343,0.577,346,2.788,352,0.681,353,1.469,365,0.418,372,0.889,373,2.2,374,1.096,375,0.838,385,1.183,400,1.137,508,2.384,512,0.568,516,0.889,519,0.621,523,0.559,524,0.775,560,0.781,561,1.452,567,1.658,575,2.151,578,0.82,580,0.471,584,1.183,590,1.702,591,0.987,594,1.368,599,0.871,628,0.939,629,1.014,631,2.305,633,2.475,639,1.225,646,3.17,647,2.023,648,3.424,649,1.136,651,0.908,653,1.146,654,0.515,659,3.46,660,0.609,662,0.402,663,0.648,667,1,671,1.081,675,0.609,678,0.457,687,0.551,698,0.449,706,0.543,711,0.481,714,2.057,723,1.189,724,3.014,727,1.562,734,1.903,741,0.449,747,1.225,755,2.786,758,1.35,765,1.014,773,0.437,775,0.889,783,0.648,792,3.045,798,1.263,801,0.568,805,1.791,810,1.815,820,0.515,823,5.514,835,2.992,847,1.167,860,6.286,861,1.291,863,0.529,873,1.272,877,5.784,880,0.648,881,0.681,888,0.559,889,0.634,916,0.681,924,0.598,925,0.664,928,0.577,933,1.72,938,0.462,945,0.974,973,1.815,979,0.762,985,0.928,990,3.206,993,2.145,994,6.472,998,1.531,999,0.621,1021,2.369,1024,0.536,1027,1.183,1028,1.306,1032,0.492,1053,0.445,1070,1.116,1082,2.919,1088,2.404,1096,2.942,1098,0.587,1100,0.634,1102,0.481,1106,1,1107,0.609,1110,2.992,1111,3.924,1112,3.082,1113,2.515,1122,3.678,1127,0.568,1132,2.467,1149,1.796,1152,0.621,1157,0.515,1175,0.928,1184,0.974,1187,0.987,1188,0.453,1189,0.781,1191,0.664,1194,0.509,1197,4.542,1209,1.542,1212,0.598,1225,0.598,1226,1.35,1227,1.321,1235,1.698,1242,4.697,1252,0.609,1258,1.852,1259,0.529,1260,1.935,1261,0.536,1262,4.859,1263,2.145,1267,1.981,1270,0.568,1274,0.509,1276,1.407,1279,2.023,1290,3.232,1291,1.969,1309,0.559,1338,3.16,1340,2.031,1365,0.522,1378,0.559,1391,0.587,1394,1.791,1427,4.145,1492,6.481,1495,1.044,1580,0.664,1582,4.176,1640,0.568,1641,0.551,1647,0.664,1648,0.522,1687,1.872,1690,0.664,1770,1.272,1783,0.634,1784,1.061,1833,1.531,1842,0.648,1843,1.353,1857,1.014,1858,0.577,1861,0.987,1878,0.634,1891,0.568,1908,0.648,1933,1.743,1946,1.137,2085,1.516,2092,0.749,2162,0.681,2178,0.634,2185,0.723,2195,0.648,2214,0.634,2217,0.749,2223,0.621,2240,0.781,2296,0.634,2339,2.985,2346,1.308,2347,4.868,2349,0.621,2395,0.609,2403,1.272,2440,1.137,2460,5.763,2461,1.569,2478,2.046,2482,1.308,2486,6.884,2546,1.239,2609,1.84,2633,0.681,2755,1.029,2759,0.749,2803,1.598,2806,2.985,2810,3.71,2816,0.723,2855,0.681,2872,1.63,2929,0.664,2966,0.82,2980,4.998,3026,1.21,3081,6.041,3113,0.634,3157,0.648,3195,1.84,3284,1.789,3364,0.749,3394,1.21,3419,0.681,3424,1.272,3760,0.749,3801,2.727,4008,0.82,4034,0.681,4047,0.681,4079,0.749,4131,2.369,4184,0.701,4187,5.629,4201,2.747,4204,1.272,4207,1.399,4221,0.723,4250,1.743,4251,0.749,4280,4.986,4291,0.781,4300,0.781,4307,1.308,4312,0.82,4313,0.781,4315,1.308,4332,0.723,4340,0.749,4455,0.749,4586,0.82,4709,0.82,4936,6.369,4937,0.781,4938,0.82,4939,0.953,4940,0.953,4941,1.779,4942,0.953,4943,0.953,4944,0.873,4945,0.781,4946,3.397,4947,1.531,4948,1.63,4949,1.63,4950,1.63,4951,2.292,4952,0.873,4953,0.873,4954,2.154,4955,1.63,4956,2.916,4957,3.862,4958,3.192,4959,2.877,4960,3.141,4961,4.379,4962,2.877,4963,0.953,4964,0.953,4965,0.873,4966,0.873,4967,0.781,4968,0.953,4969,0.953,4970,0.953,4971,0.749,4972,2.574,4973,2.574,4974,1.458,4975,0.873,4976,2.051,4977,0.82,4978,1.779,4979,1.63,4980,1.63,4981,3.455,4982,1.63,4983,4.217,4984,1.779,4985,5.963,4986,0.873,4987,0.82,4988,0.873,4989,1.63,4990,2.877,4991,1.63,4992,0.873,4993,0.723,4994,1.63,4995,0.873,4996,1.63,4997,0.873,4998,0.873,4999,0.873,5000,0.953,5001,0.873,5002,0.781,5003,0.873,5004,0.873,5005,3.039,5006,0.82,5007,1.779,5008,2.292,5009,1.779,5010,0.781,5011,0.873,5012,2.292,5013,0.873,5014,0.953,5015,5.017,5016,1.779,5017,5.005,5018,2.574,5019,2.292,5020,3.039,5021,2.292,5022,0.873,5023,2.154,5024,1.63,5025,0.873,5026,0.873,5027,0.873,5028,0.873,5029,0.873,5030,0.82,5031,0.873,5032,0.873,5033,0.953,5034,0.953,5035,0.873,5036,0.873,5037,1.779,5038,0.953,5039,1.779,5040,1.779,5041,1.63,5042,0.873,5043,0.82,5044,0.873,5045,0.953,5046,0.953,5047,0.953,5048,0.953,5049,0.953,5050,0.953,5051,0.953,5052,0.953]],["component/49",[6,0.301]],["title/50-1",[72,41.967,4188,53.834]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["title/50-2",[129,31.222,646,23.371]],["name/50-2",[]],["text/50-2",[]],["component/50-2",[]],["title/50-3",[727,18.779,1582,28.607]],["name/50-3",[]],["text/50-3",[]],["component/50-3",[]],["title/50-4",[990,25.072,1262,33.895]],["name/50-4",[]],["text/50-4",[]],["component/50-4",[]],["title/50-5",[1111,31.831,1427,35.096]],["name/50-5",[]],["text/50-5",[]],["component/50-5",[]],["title/50-6",[990,21.232,1111,26.956,4201,36.244]],["name/50-6",[]],["text/50-6",[]],["component/50-6",[]],["title/50",[101,31.282,647,26.695,1122,25.266]],["name/50",[2329,1.136]],["text/50",[0,0.962,1,1.13,6,0.824,15,1.676,23,1.495,35,1.198,37,1.468,38,0.951,52,3.166,63,0.882,69,4.639,70,1.495,74,1.417,76,1.636,80,0.94,90,0.84,101,5.544,102,1.455,114,2.811,115,1.455,116,2.549,127,0.772,129,4.358,137,1.864,141,0.818,146,1.027,162,0.999,166,0.856,170,1.956,173,0.882,174,4.751,175,2.432,187,0.825,207,0.962,221,1.174,222,2.063,308,0.909,309,1.013,319,0.882,320,1.057,346,3.559,353,1.057,365,0.791,374,1.956,375,1.495,385,2.112,400,2.028,512,1.074,516,0.9,524,1.383,561,0.833,567,2.71,584,1.198,594,1.383,599,1.554,628,1.676,629,1.81,631,2.165,633,3.013,639,0.882,646,3.507,647,3.1,648,3.082,649,1.442,651,0.919,653,1.951,659,3.706,662,1.34,663,1.225,667,1.785,671,1.839,678,0.864,698,0.848,710,0.864,714,2.848,723,1.509,724,3.669,727,2.231,741,0.848,755,0.987,765,1.81,773,0.825,775,1.586,792,1.174,798,0.909,805,1.81,810,2.084,812,0.891,820,0.974,823,6.269,835,2.811,841,1.288,847,0.84,873,2.27,877,3.87,880,1.225,881,1.288,888,1.057,889,1.198,924,1.991,933,0.987,938,0.873,973,2.865,979,1.361,985,0.94,990,3.705,994,6.674,1021,3.279,1024,1.013,1027,2.112,1028,1.657,1032,0.929,1070,1.991,1088,2.427,1096,1.836,1098,1.11,1106,1.013,1107,2.028,1110,3.538,1111,4.338,1112,3.913,1113,2.537,1122,4.066,1124,1.255,1127,1.074,1149,2.68,1152,1.174,1157,0.974,1175,1.657,1184,1.739,1187,1.762,1194,0.962,1197,1.11,1209,2.623,1227,2.248,1235,0.974,1252,1.151,1258,0.9,1259,0.999,1260,0.94,1262,4.619,1263,2.462,1266,0.94,1267,2.275,1270,1.074,1274,0.962,1279,1.524,1290,3.091,1309,1.057,1338,1.042,1340,2.332,1378,1.864,1394,2.427,1427,3.451,1495,1.864,1582,4.079,1641,1.042,1647,1.255,1648,0.987,1687,1.893,1784,1.074,1833,1.551,1842,1.225,1843,1.717,1857,1.81,1858,1.091,1861,1.762,1878,2.832,2085,1.924,2162,1.288,2185,1.367,2214,1.198,2217,1.417,2223,1.174,2329,1.225,2339,2.028,2349,1.174,2395,1.151,2403,1.288,2440,1.151,2460,1.151,2461,1.991,2482,2.335,2486,6.904,2546,2.212,2609,1.325,2633,1.288,2755,2.462,2810,2.028,2929,1.255,3023,4.702,3026,2.16,3074,2.27,3075,1.367,3113,1.198,3157,1.225,3284,3.044,3394,2.16,3419,1.288,3760,1.417,3801,3.775,4034,1.288,4047,1.288,4112,1.367,4131,3.279,4184,1.325,4188,6.92,4201,3.344,4204,2.27,4207,1.417,4250,2.966,4251,1.417,4280,5.674,4312,1.551,4313,1.476,4763,2.733,4904,1.65,4937,1.476,4938,1.551,4944,1.65,4945,1.476,4955,1.65,4956,4.037,4957,4.702,4958,4.418,4959,3.901,4962,3.901,4965,1.65,4966,1.65,4967,1.476,4971,1.417,4972,2.602,4973,4.206,4974,2.602,4975,1.65,4976,2.602,4977,1.551,4980,2.909,4981,4.797,4982,2.909,4986,1.65,4987,1.551,4988,1.65,4989,2.909,4990,2.909,4991,2.909,4992,1.65,4993,1.367,4994,1.65,4995,1.65,4996,1.65,4997,1.65,4998,1.65,4999,1.65,5001,1.65,5002,1.476,5004,1.65,5005,3.489,5006,1.551,5008,1.65,5010,1.476,5011,1.65,5015,2.602,5018,1.476,5020,1.476,5053,1.65,5054,1.802,5055,1.802,5056,1.802,5057,1.802,5058,1.802,5059,1.802,5060,5.133,5061,6.976,5062,3.176,5063,3.176,5064,2.909,5065,5.133,5066,7.42,5067,3.176,5068,1.802,5069,1.802,5070,1.802,5071,1.65,5072,1.802,5073,1.802,5074,1.65,5075,1.802,5076,1.802,5077,1.802]],["component/50",[6,0.301]],["title/51",[647,31.523,1122,29.836]],["name/51",[572,0.752]],["text/51",[5,3.324,6,1.657,65,3.59,99,4.86,100,4.963,101,5.872,118,3.051,127,2.698,175,2.616,187,2.885,195,3.286,208,4.69,209,4.022,222,3.051,233,4.418,240,4.282,319,3.081,353,5.027,365,2.764,385,7.265,400,4.022,567,5.948,580,3.113,591,4.751,592,3.324,594,3.729,608,3.364,619,4.386,631,4.406,633,3.696,635,2.698,646,2.24,647,5.628,648,4.313,653,2.885,675,4.022,684,4.631,727,1.8,810,3.081,926,4.102,953,3.948,954,3.879,985,3.286,990,3.714,1037,3.448,1046,3.814,1110,3.448,1122,5.556,1146,3.948,1149,4.012,1152,4.102,1256,3.448,1279,3.021,1427,5.198,1640,3.754,2473,3.59,2803,4.022,2876,5.16,3044,5.16,3061,5.16,4210,4.952,5078,4.952]],["component/51",[6,0.301]],["title/52-1",[2755,37.994,3025,45.762]],["name/52-1",[]],["text/52-1",[]],["component/52-1",[]],["title/52-2",[76,21.375,1410,37.006,1440,39.771]],["name/52-2",[]],["text/52-2",[]],["component/52-2",[]],["title/52-3",[76,25.241,706,37.454]],["name/52-3",[]],["text/52-3",[]],["component/52-3",[]],["title/52-4",[222,31.831,3025,45.762]],["name/52-4",[]],["text/52-4",[]],["component/52-4",[]],["title/52",[1256,35.979,2473,37.454]],["name/52",[3709,0.715,5079,0.833]],["text/52",[0,3.358,6,1.149,23,0.513,33,0.998,37,0.503,41,0.568,44,0.87,52,1.894,63,1.713,69,4.275,72,0.696,76,1.784,78,0.518,90,0.508,92,1.063,100,0.518,101,1.58,102,2.88,114,3.081,115,0.499,116,2.022,123,0.801,127,2.378,129,4.266,137,1.182,141,0.495,146,0.621,155,1.576,173,0.986,174,4.795,175,1.455,183,0.582,187,0.499,190,0.63,191,1.103,207,0.582,213,0.63,218,0.582,222,3.896,225,0.55,233,1.039,284,0.649,303,1.44,309,1.58,320,0.639,332,0.857,339,0.508,343,1.22,344,0.63,346,1.434,350,0.801,353,2.055,362,1.051,365,1.234,367,0.621,369,2.121,371,0.544,372,0.544,373,3.098,374,0.671,375,0.513,385,4.764,400,3.272,510,1.483,516,1.006,519,0.71,522,0.779,523,0.639,524,1.789,525,0.741,527,2.055,529,0.724,530,0.892,546,1.602,560,2.039,564,0.683,566,1.403,567,4.515,580,2.031,594,0.474,599,0.533,600,1.103,605,0.649,608,1.076,614,0.63,619,0.759,623,1.063,630,0.759,631,2.504,633,2.726,635,0.863,639,1.713,640,0.71,643,0.499,645,0.503,646,2.861,647,1.971,648,1.834,649,0.915,651,1.787,653,1.604,660,0.696,662,1.477,671,0.87,678,2.458,696,0.801,698,2.187,700,1.37,705,1.241,706,2.648,710,1.68,711,0.55,714,1.118,727,1.971,741,2.412,743,0.71,747,0.986,752,0.801,754,4.365,755,2.544,772,1.182,774,1.34,775,2.052,781,0.683,782,1.731,785,1.165,798,2.074,805,0.621,810,2.273,818,0.63,835,3.922,846,0.892,847,1.916,861,1.039,863,0.604,889,1.34,900,1.848,907,0.937,912,0.528,918,2.009,924,3.212,938,0.976,939,0.649,945,0.596,948,1.089,979,3.175,990,1.072,999,2.676,1021,3.272,1023,0.724,1028,0.568,1032,0.562,1037,1.918,1063,1.957,1070,0.683,1076,2.732,1080,0.827,1081,0.759,1088,3.931,1096,1.165,1100,0.724,1106,1.133,1110,2.544,1122,4.076,1123,1.584,1128,1.312,1146,3.212,1149,1.08,1152,0.71,1157,0.589,1175,1.466,1183,3.528,1184,1.539,1186,3.139,1187,1.118,1188,1.664,1192,0.589,1195,0.621,1197,3.873,1209,1.241,1224,0.696,1227,1.063,1235,0.589,1248,0.741,1253,1.287,1256,0.596,1258,1.006,1259,3.488,1260,3.098,1262,0.562,1266,2.144,1267,0.582,1271,1.943,1273,1.201,1276,1.133,1277,0.696,1290,3.318,1291,0.683,1309,1.649,1318,2.222,1323,0.568,1335,1.969,1338,3.433,1366,2.25,1379,0.801,1381,3.539,1394,1.602,1409,0.827,1410,4.181,1411,1.287,1412,1.845,1427,1.501,1438,5.593,1440,4.494,1480,0.724,1641,2.025,1650,0.892,1687,0.649,1695,1.37,1724,1.529,1730,0.857,1764,0.827,1773,0.801,1778,1.529,1784,1.201,1785,1.403,1832,1.625,1836,0.71,1843,2.222,1853,1.403,1857,2.342,1861,2.577,1883,0.827,1891,1.201,1893,0.937,1934,3.546,1988,0.998,2008,0.801,2033,0.801,2085,2.121,2125,0.71,2128,1.869,2212,2.055,2214,1.34,2269,0.827,2277,2.657,2327,2.575,2332,2.575,2339,1.287,2347,2.794,2349,1.312,2429,0.892,2440,2.237,2460,4.575,2462,0.937,2473,1.602,2475,0.998,2478,3.337,2606,0.892,2653,2.067,2755,5.766,2768,4.177,2806,2.624,2838,1.651,2872,1.312,2879,1.584,2931,0.857,2934,1.869,3025,4.135,3026,1.37,3043,0.892,3052,0.937,3074,2.937,3075,1.529,3085,0.937,3098,0.998,3157,0.741,3187,0.759,3195,1.481,3196,2.869,3389,0.937,3413,5.423,3419,0.779,3425,0.937,3836,1.651,4079,7.9,4131,2.237,4135,1.651,4144,2.419,4151,2.574,4156,2.419,4161,5.438,4162,0.998,4175,3.014,4176,2.419,4179,4.864,4180,2.419,4181,2.419,4182,3.014,4183,3.014,4184,1.481,4204,1.44,4205,1.734,4206,1.845,4230,1.845,4231,1.734,4280,2.439,4315,1.481,4332,0.827,4395,1.734,4451,0.998,4501,0.998,4502,0.998,4737,0.937,4741,0.998,4754,1.845,4758,0.998,4760,0.998,4762,0.998,4763,1.734,4764,0.998,4885,1.845,4956,2.21,5023,1.734,5080,1.089,5081,1.089,5082,1.089,5083,3.502,5084,1.089,5085,1.089,5086,2.21,5087,1.089,5088,1.089,5089,1.089,5090,1.089,5091,1.089,5092,1.089,5093,4.645,5094,1.089,5095,2.014,5096,2.014,5097,2.81,5098,1.089,5099,1.089,5100,1.089,5101,1.089,5102,1.089,5103,2.014,5104,1.089,5105,1.089,5106,1.089,5107,1.089,5108,1.089,5109,1.089,5110,1.089,5111,2.014,5112,1.089,5113,0.892,5114,1.089,5115,1.089,5116,1.089,5117,1.089,5118,1.089,5119,2.81,5120,2.81,5121,2.014,5122,2.81,5123,1.089,5124,3.502,5125,4.645,5126,2.81,5127,1.089,5128,2.81,5129,2.81,5130,2.81,5131,2.81,5132,0.998,5133,2.014,5134,1.089,5135,3.502,5136,4.108,5137,3.502,5138,3.502,5139,2.014,5140,2.014,5141,2.014,5142,2.014,5143,2.014,5144,2.014,5145,2.81,5146,2.014,5147,2.81,5148,2.014,5149,2.014,5150,2.014,5151,2.014,5152,2.014,5153,2.014,5154,2.014,5155,1.845,5156,2.014,5157,1.089,5158,1.089,5159,2.574,5160,1.089,5161,1.089]],["component/52",[6,0.301]],["title/53-1",[671,28.377,4186,51.666]],["name/53-1",[]],["text/53-1",[]],["component/53-1",[]],["title/53-2",[1340,35.979,4186,51.666]],["name/53-2",[]],["text/53-2",[]],["component/53-2",[]],["title/53-3",[129,26.441,1318,30.087,1829,27.788]],["name/53-3",[]],["text/53-3",[]],["component/53-3",[]],["title/53-4",[114,23.661,233,33.895]],["name/53-4",[]],["text/53-4",[]],["component/53-4",[]],["title/53-5",[100,31.222,114,23.661]],["name/53-5",[]],["text/53-5",[]],["component/53-5",[]],["title/53-6",[635,20.674,990,18.413,1149,18.537,1524,29.228]],["name/53-6",[]],["text/53-6",[]],["component/53-6",[]],["title/53-7",[1111,23.376,1149,18.537,1524,29.228,2392,36.618]],["name/53-7",[]],["text/53-7",[]],["component/53-7",[]],["title/53-8",[6,10.767,99,27.788,1256,30.469]],["name/53-8",[]],["text/53-8",[]],["component/53-8",[]],["title/53-9",[99,32.814,2768,39.799]],["name/53-9",[]],["text/53-9",[]],["component/53-9",[]],["title/53-10",[99,27.788,1110,30.469,2810,35.539]],["name/53-10",[]],["text/53-10",[]],["component/53-10",[]],["title/53-11",[1258,32.814,2768,39.799]],["name/53-11",[]],["text/53-11",[]],["component/53-11",[]],["title/53-12",[678,26.695,993,32.176,2486,35.539]],["name/53-12",[]],["text/53-12",[]],["component/53-12",[]],["title/53-13",[336,37.994,2768,39.799]],["name/53-13",[]],["text/53-13",[]],["component/53-13",[]],["title/53-14",[678,26.695,993,32.176,2486,35.539]],["name/53-14",[]],["text/53-14",[]],["component/53-14",[]],["title/53-15",[99,32.814,1582,28.607]],["name/53-15",[]],["text/53-15",[]],["component/53-15",[]],["title/53-16",[727,18.779,1582,28.607]],["name/53-16",[]],["text/53-16",[]],["component/53-16",[]],["title/53-17",[877,36.449,1262,33.895]],["name/53-17",[]],["text/53-17",[]],["component/53-17",[]],["title/53-18",[175,23.116,1262,28.704,2486,35.539]],["name/53-18",[]],["text/53-18",[]],["component/53-18",[]],["title/53-19",[1262,33.895,5162,60.183]],["name/53-19",[]],["text/53-19",[]],["component/53-19",[]],["title/53-20",[1021,41.967,1582,28.607]],["name/53-20",[]],["text/53-20",[]],["component/53-20",[]],["title/53",[99,32.814,1122,29.836]],["name/53",[99,0.834]],["text/53",[0,3.022,1,0.746,6,0.85,21,0.688,23,0.293,34,0.746,35,0.414,37,1.401,38,0.902,41,0.621,52,2.033,62,0.792,63,0.305,69,3.429,76,0.657,78,1.441,80,1.582,81,0.51,90,0.291,92,0.329,99,5.592,100,2.884,102,2.868,108,0.66,109,0.828,114,3.131,115,2.011,116,3.017,118,0.577,127,0.733,129,3.673,133,0.391,135,0.406,136,0.398,137,1.78,141,1.855,155,0.28,160,0.377,161,0.688,166,0.296,169,0.445,170,0.384,173,1.285,174,4.733,175,2.814,182,0.68,183,0.333,186,0.406,187,0.285,190,0.36,195,0.325,200,1.019,201,0.82,202,1.324,206,0.377,207,0.333,208,0.652,209,2.401,221,1.975,222,1.469,225,1.53,233,1.564,234,0.851,237,0.536,238,0.536,239,0.536,243,1.37,245,1.916,253,0.936,260,0.51,267,0.366,278,0.829,284,1.019,308,1.72,317,0.434,318,0.554,319,0.837,320,0.366,324,0.699,336,2.539,342,0.989,344,0.36,345,1.036,346,3.536,353,1.78,360,2.26,362,1.141,365,0.273,369,2.659,372,0.311,373,0.621,374,0.384,375,0.56,380,0.424,509,0.536,510,1.984,511,0.406,516,0.311,519,0.406,524,2.879,527,0.366,546,0.679,555,0.51,556,1.191,560,1.331,561,0.55,566,2.04,575,1.116,580,0.588,591,1.457,592,0.902,594,2.153,596,0.434,599,0.583,602,0.406,605,0.371,608,0.333,614,1.264,628,1.154,631,2.386,633,3.562,635,1.461,636,0.903,639,1.285,646,2.663,648,1.952,649,1.377,651,1.116,653,1.722,654,0.337,659,0.595,662,0.502,663,0.424,666,0.377,667,0.669,671,1.623,675,0.398,678,1.803,681,0.406,686,0.71,698,1.236,701,1.563,705,0.733,706,0.975,710,0.82,714,3.844,715,0.49,723,0.812,727,2.064,734,0.721,741,0.56,747,0.583,750,0.406,755,2.707,763,0.424,765,0.355,773,0.285,775,2.193,781,0.746,782,0.733,783,1.487,785,0.688,787,1.42,793,2.301,798,0.601,800,1.618,805,0.355,810,0.837,812,0.308,818,1.264,820,0.337,822,0.595,823,0.746,833,0.414,835,5.036,847,1.225,861,2.55,865,1.025,869,0.49,870,1.71,874,0.414,877,3.668,888,0.366,889,2.267,899,0.621,900,2.468,905,1.036,910,0.314,915,0.872,916,0.445,918,0.851,922,0.688,924,2.137,932,0.458,933,1.197,937,0.829,938,0.577,944,0.746,945,1.197,949,0.414,953,0.746,954,0.733,973,0.837,979,1.299,985,1.141,986,0.71,989,1.829,990,1.675,993,5.639,994,4.986,1011,0.377,1013,0.875,1015,0.414,1019,0.51,1021,3.749,1023,1.454,1024,0.35,1025,0.434,1028,1.37,1032,0.321,1037,2.237,1046,0.377,1052,0.36,1062,0.414,1068,0.371,1070,0.746,1075,3.138,1076,1.137,1082,0.333,1085,0.445,1087,0.733,1088,4.707,1093,1.163,1096,0.989,1098,0.733,1102,0.863,1106,0.961,1107,0.76,1110,5.439,1111,1.651,1112,0.721,1113,0.845,1122,3.002,1124,0.829,1127,1.807,1128,1.975,1132,0.792,1136,0.536,1142,0.406,1146,1.371,1149,2.173,1157,1.182,1175,1.779,1184,0.936,1186,0.296,1187,0.948,1188,1.248,1192,0.644,1194,0.636,1199,0.434,1209,1.347,1212,0.391,1224,0.76,1225,1.371,1227,0.329,1231,0.445,1235,1.843,1242,1.403,1243,0.434,1252,0.398,1253,0.398,1256,0.341,1258,1.092,1259,0.948,1262,4.486,1263,2.174,1265,0.406,1267,1.168,1272,0.829,1274,1.403,1279,1.049,1281,0.652,1284,2.764,1288,1.191,1290,3.736,1299,1.163,1309,0.366,1316,0.621,1323,0.892,1324,0.424,1326,0.621,1335,0.669,1338,0.989,1340,1.438,1352,0.721,1365,0.652,1378,2.206,1381,2.032,1391,0.384,1427,4.556,1484,1.163,1491,0.792,1495,0.366,1517,0.445,1524,2.659,1550,0.975,1553,2.853,1576,0.936,1577,0.406,1582,4.109,1637,0.458,1640,0.71,1641,0.36,1648,0.341,1662,0.49,1687,1.019,1723,0.434,1784,1.019,1789,0.81,1829,2.825,1836,0.406,1843,1.64,1861,1.682,1879,0.51,1891,0.371,1908,0.424,1918,0.49,1939,0.445,1954,0.458,2033,0.458,2062,0.51,2085,1.324,2101,0.875,2102,0.49,2117,0.51,2128,1.137,2178,0.414,2212,0.366,2223,1.71,2224,0.51,2292,1.091,2294,0.445,2297,0.458,2319,0.434,2339,2.987,2346,1.931,2347,2.318,2349,0.406,2363,0.536,2392,1.659,2395,1.092,2403,1.222,2428,0.51,2440,1.092,2460,3.614,2461,1.072,2465,1.025,2473,0.355,2478,1.424,2482,0.458,2486,2.609,2490,1.566,2494,0.571,2569,0.458,2570,0.536,2654,0.792,2658,0.829,2667,0.829,2675,0.473,2682,0.445,2755,1.264,2768,5.166,2803,2.401,2806,4.113,2810,5.448,2850,0.51,2855,0.851,2883,2.777,2929,0.434,2934,1.454,2937,0.51,3025,0.829,3026,0.81,3027,0.51,3032,1.792,3033,0.571,3081,0.975,3113,0.414,3132,2.065,3142,0.571,3157,1.163,3187,0.434,3216,1.344,3271,0.975,3289,0.51,3314,0.424,3356,0.458,3402,0.51,3414,0.571,3424,0.445,3429,1.71,3459,0.49,3554,0.51,3578,0.49,3643,0.536,3703,0.51,3846,0.536,3984,0.49,4022,1.993,4029,0.473,4047,0.445,4079,1.344,4081,3.652,4131,2.177,4137,2.23,4184,0.458,4186,6.416,4187,2.065,4201,0.406,4204,4.044,4207,0.936,4210,0.936,4215,2.61,4218,1.025,4222,0.536,4232,0.536,4233,0.536,4250,2.374,4251,0.49,4280,2.112,4286,2.065,4307,0.458,4315,1.931,4332,2.301,4402,0.571,4455,0.49,4485,0.51,4512,0.571,4513,1.091,4514,0.571,4534,1.091,4620,0.536,4706,1.566,4721,0.571,4724,0.571,4729,0.571,4732,0.571,4746,1.091,4769,0.536,4837,0.571,4852,0.571,4872,4.021,4884,1.566,4961,1.882,5006,1.882,5113,0.975,5155,1.091,5162,1.091,5163,0.571,5164,0.623,5165,1.191,5166,2.626,5167,0.623,5168,0.623,5169,2.186,5170,0.623,5171,1.091,5172,5.657,5173,1.71,5174,2.626,5175,2.626,5176,1.191,5177,1.091,5178,1.191,5179,1.191,5180,1.191,5181,0.623,5182,0.623,5183,0.623,5184,1.191,5185,0.623,5186,0.623,5187,1.71,5188,0.623,5189,0.571,5190,0.623,5191,1.71,5192,0.571,5193,1.091,5194,1.091,5195,0.623,5196,1.191,5197,0.623,5198,2.186,5199,1.472,5200,0.623,5201,0.623,5202,1.191,5203,1.191,5204,4.39,5205,0.623,5206,1.191,5207,0.623,5208,3.032,5209,3.032,5210,2.186,5211,0.623,5212,1.191,5213,3.759,5214,1.191,5215,0.536,5216,0.623,5217,5.433,5218,2.626,5219,0.623,5220,0.623,5221,1.71,5222,1.191,5223,2.186,5224,1.091,5225,1.191,5226,1.191,5227,0.623,5228,3.759,5229,1.191,5230,1.191,5231,1.191,5232,1.191,5233,1.025,5234,1.191,5235,0.623,5236,3.032,5237,1.191,5238,0.623,5239,0.623,5240,1.191,5241,0.623,5242,0.623,5243,1.191,5244,0.623,5245,0.623,5246,0.623,5247,0.623,5248,0.623,5249,0.623,5250,0.623,5251,0.623,5252,0.623,5253,0.623,5254,0.623,5255,0.623,5256,0.623,5257,0.623,5258,0.623,5259,0.571,5260,0.623,5261,0.623,5262,1.191,5263,0.623,5264,0.623,5265,0.623,5266,1.71,5267,0.623,5268,0.623,5269,0.623,5270,1.71,5271,1.191,5272,0.623,5273,0.623,5274,0.623,5275,0.623,5276,0.623,5277,0.623,5278,0.623,5279,0.623,5280,0.623,5281,0.536,5282,0.623,5283,0.623,5284,0.623,5285,0.623,5286,0.623,5287,1.191,5288,0.623,5289,0.623,5290,1.191,5291,1.191,5292,0.623,5293,0.623,5294,0.623,5295,0.623,5296,1.091,5297,0.623,5298,0.623,5299,0.623,5300,0.623,5301,0.623,5302,0.623,5303,0.623,5304,0.623,5305,0.623,5306,0.623,5307,0.623,5308,0.623,5309,0.623,5310,0.623]],["component/53",[6,0.301]],["title/54-1",[727,22.924]],["name/54-1",[]],["text/54-1",[]],["component/54-1",[]],["title/54-2",[623,29.37,1496,37.838,5311,47.888]],["name/54-2",[]],["text/54-2",[]],["component/54-2",[]],["title/54-3",[220,30.253,1150,27.902,5311,41.528,5312,39.535]],["name/54-3",[]],["text/54-3",[]],["component/54-3",[]],["title/54",[6,9.337,98,31.43,166,22.929,5313,39.535]],["name/54",[6,0.092,98,0.31,166,0.226,5313,0.39]],["text/54",[6,1.83,11,1.475,18,2.316,21,1.635,23,2.197,26,1.685,41,1.475,44,2.575,49,1.712,63,4.888,65,2.661,80,1.475,97,3.104,98,7.067,114,2.97,115,1.295,116,2.032,118,1.369,127,2,128,2.589,139,2.661,141,1.284,154,1.659,155,3.116,161,1.635,166,4.747,170,3.672,173,1.383,174,2.26,182,4.134,183,2.493,187,1.295,190,1.635,201,2.239,204,2.316,205,1.741,219,3.826,220,6.518,327,1.712,330,2.981,334,4.044,337,3.883,370,2.079,516,1.412,524,3.335,558,3.499,573,1.712,575,3.042,579,1.772,594,2.032,597,2.021,599,1.383,614,1.635,623,1.492,631,2.515,639,1.383,643,1.295,649,3.143,651,1.442,662,1.969,667,1.589,674,4.192,679,1.969,680,6.238,681,1.841,688,4.803,689,2.223,700,1.922,705,1.741,710,2.239,713,1.589,720,2.524,723,2.833,727,2.357,741,5.265,754,2.381,775,1.412,779,5.72,820,1.529,910,3.493,912,1.369,915,5.598,938,1.369,966,3.11,976,6.924,1063,1.969,1068,2.782,1085,2.021,1150,6.274,1153,3.611,1174,6.264,1175,4.304,1182,3.251,1184,2.556,1195,1.611,1202,2.316,1206,4.339,1216,2.145,1235,2.524,1243,1.969,1246,3.542,1268,3.251,1270,2.782,1271,2.589,1277,1.806,1279,1.356,1309,1.659,1310,2.079,1316,1.475,1319,3.251,1323,1.475,1352,1.712,1369,6.024,1435,1.685,1482,2.827,1495,3.499,1496,3.174,1504,2.021,1579,4.688,1651,3.174,1675,4.64,1795,2.433,1843,1.529,1858,1.712,1861,2.589,1913,2.926,1939,3.336,2017,4.017,2021,2.433,2035,2.589,2038,4.688,2062,5.671,2112,2.316,2254,4.885,2267,2.316,2312,1.969,2469,1.922,2735,2.223,3220,3.67,3222,2.223,3337,1.969,3430,2.079,3674,2.316,3839,2.589,5311,2.433,5312,6.277,5313,8.779,5314,5.131,5315,4.667,5316,2.827,5317,2.589,5318,2.589,5319,2.827,5320,2.589,5321,2.827,5322,2.589,5323,4.275,5324,2.827,5325,2.827,5326,2.589,5327,4.667,5328,2.827,5329,2.589,5330,2.827,5331,2.827,5332,2.827,5333,2.589,5334,2.589,5335,2.827,5336,2.827,5337,2.827,5338,2.827,5339,2.827,5340,2.827,5341,4.275,5342,2.827,5343,2.827,5344,2.827,5345,4.667,5346,4.667,5347,2.827,5348,2.589,5349,2.589,5350,5.461,5351,5.461,5352,2.827,5353,4.667,5354,2.589,5355,2.827,5356,4.667,5357,4.667,5358,2.827]],["component/54",[6,0.301]],["title/55-1",[6,9.337,114,17.376,166,22.929,553,30.82]],["name/55-1",[]],["text/55-1",[]],["component/55-1",[]],["title/55-2",[524,24.226,979,23.84,5359,45.589]],["name/55-2",[]],["text/55-2",[]],["component/55-2",[]],["title/55-3",[913,38.754,979,23.84,5360,43.754]],["name/55-3",[]],["text/55-3",[]],["component/55-3",[]],["title/55-4",[553,30.82,623,25.469,643,22.104,5359,39.535]],["name/55-4",[]],["text/55-4",[]],["component/55-4",[]],["title/55-5",[6,8.242,11,22.224,166,20.241,822,21.273,966,22.224]],["name/55-5",[]],["text/55-5",[]],["component/55-5",[]],["title/55-6",[219,32.814,979,28.152]],["name/55-6",[]],["text/55-6",[]],["component/55-6",[]],["title/55-7",[913,38.754,979,23.84,5360,43.754]],["name/55-7",[]],["text/55-7",[]],["component/55-7",[]],["title/55-8",[623,25.469,643,22.104,645,22.303,648,19.053]],["name/55-8",[]],["text/55-8",[]],["component/55-8",[]],["title/55-9",[182,22.126,623,29.37,1150,32.176]],["name/55-9",[]],["text/55-9",[]],["component/55-9",[]],["title/55",[114,23.661,166,31.222]],["name/55",[6,0.121,166,0.297,5359,0.512]],["text/55",[1,1.891,6,2.107,11,2.568,13,1.573,15,1.592,44,1.302,54,2.1,65,5.812,69,1.381,98,6.097,102,1.381,103,4.033,106,1.964,114,3.967,127,1.292,166,5.426,167,2.1,170,3.032,173,1.475,174,4.387,175,1.253,182,3.85,183,2.629,185,2.1,187,1.381,201,1.447,202,1.827,213,1.744,219,3.114,267,1.77,295,2.595,319,1.475,327,1.827,330,1.926,334,1.592,338,2.006,364,1.926,365,1.324,367,2.806,371,1.506,372,1.506,375,1.42,511,1.964,516,2.458,524,2.715,544,2.288,546,1.719,557,2.371,561,2.275,562,2.471,571,1.797,579,3.086,589,2.595,594,2.143,604,2.006,613,2.595,615,2.155,623,3.799,624,4.241,630,2.1,631,1.272,634,2.217,643,3.297,645,3.665,646,2.56,648,3.131,649,3.601,652,3.555,653,1.381,659,4.249,662,1.272,680,3.518,689,4.904,690,2.595,693,3.735,698,1.42,711,1.522,712,1.631,713,1.695,716,2.051,720,3.372,727,1.782,734,1.827,773,2.255,777,2.275,779,1.891,782,1.858,788,2.155,795,2.762,800,1.858,809,3.372,812,1.49,822,2.458,835,3.941,847,1.407,863,5.77,870,1.964,885,1.964,887,1.827,910,2.484,913,2.1,922,1.744,940,2.981,948,1.631,955,2.051,965,4.508,966,3.755,973,2.408,979,3.645,990,2.38,1032,3.217,1068,3.717,1082,1.611,1088,3.555,1093,4.241,1102,1.522,1111,2.384,1150,4.162,1253,1.926,1266,1.573,1268,2.1,1271,3.992,1358,2.371,1362,2.371,1381,1.797,1482,1.827,1486,6.497,1495,4.224,1555,2.1,1579,2.371,1684,2.217,1819,2.371,1997,2.1,2009,2.371,2053,2.471,2128,2.006,2212,2.889,2264,2.155,2880,2.762,2882,4.033,3244,2.217,3553,2.595,3860,6.592,4034,6.081,4146,4.236,4247,2.217,4366,2.217,4993,5.461,5078,3.87,5233,5.367,5314,2.595,5359,6.497,5360,2.371,5361,2.762,5362,3.015,5363,2.762,5364,3.015,5365,4.922,5366,3.015,5367,6.236,5368,4.922,5369,3.015,5370,7.196,5371,4.508,5372,4.922,5373,4.922,5374,4.922,5375,3.015,5376,3.015,5377,3.015,5378,3.015,5379,3.015,5380,4.508,5381,3.015,5382,4.922,5383,3.015,5384,4.922,5385,3.015,5386,2.762,5387,2.762,5388,3.015,5389,6.592,5390,4.922,5391,4.922,5392,4.922,5393,2.762,5394,3.015,5395,3.015,5396,4.922,5397,3.015,5398,4.508,5399,3.015,5400,3.015,5401,3.015,5402,3.015,5403,3.015,5404,3.015,5405,3.015,5406,3.015,5407,3.015,5408,2.371,5409,3.015]],["component/55",[6,0.301]],["title/56-1",[643,30.099,711,33.162]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["title/56-2",[76,25.241,569,53.834]],["name/56-2",[]],["text/56-2",[]],["component/56-2",[]],["title/56-3",[777,30.369,2099,37.994]],["name/56-3",[]],["text/56-3",[]],["component/56-3",[]],["title/56-4",[553,51.231]],["name/56-4",[]],["text/56-4",[]],["component/56-4",[]],["title/56-5",[2072,54.546]],["name/56-5",[]],["text/56-5",[]],["component/56-5",[]],["title/56-6",[6,12.714,184,41.967]],["name/56-6",[]],["text/56-6",[]],["component/56-6",[]],["title/56-7",[727,18.779,1366,35.979]],["name/56-7",[]],["text/56-7",[]],["component/56-7",[]],["title/56-8",[723,20.241,966,22.224,1153,39.142,1315,34.9]],["name/56-8",[]],["text/56-8",[]],["component/56-8",[]],["title/56-9",[5408,63.073]],["name/56-9",[]],["text/56-9",[]],["component/56-9",[]],["title/56-10",[727,22.924]],["name/56-10",[]],["text/56-10",[]],["component/56-10",[]],["title/56-11",[1150,37.994,5408,51.666]],["name/56-11",[]],["text/56-11",[]],["component/56-11",[]],["title/56-12",[727,22.924]],["name/56-12",[]],["text/56-12",[]],["component/56-12",[]],["title/56-13",[5410,69.033]],["name/56-13",[]],["text/56-13",[]],["component/56-13",[]],["title/56-14",[727,22.924]],["name/56-14",[]],["text/56-14",[]],["component/56-14",[]],["title/56-15",[1150,37.994,5410,56.549]],["name/56-15",[]],["text/56-15",[]],["component/56-15",[]],["title/56-16",[727,22.924]],["name/56-16",[]],["text/56-16",[]],["component/56-16",[]],["title/56-17",[5411,73.47]],["name/56-17",[]],["text/56-17",[]],["component/56-17",[]],["title/56-18",[727,22.924]],["name/56-18",[]],["text/56-18",[]],["component/56-18",[]],["title/56-19",[645,25.718,1055,29.37,5412,50.966]],["name/56-19",[]],["text/56-19",[]],["component/56-19",[]],["title/56-20",[727,22.924]],["name/56-20",[]],["text/56-20",[]],["component/56-20",[]],["title/56-21",[114,20.038,1150,32.176,5312,45.589]],["name/56-21",[]],["text/56-21",[]],["component/56-21",[]],["title/56-22",[98,36.244,166,26.441,1150,32.176]],["name/56-22",[]],["text/56-22",[]],["component/56-22",[]],["title/56-23",[98,31.43,166,22.929,1102,24.354,1150,27.902]],["name/56-23",[]],["text/56-23",[]],["component/56-23",[]],["title/56-24",[339,25.953,662,23.471,727,15.903]],["name/56-24",[]],["text/56-24",[]],["component/56-24",[]],["title/56-25",[114,15.339,154,25,628,22.483,720,23.033,966,22.224]],["name/56-25",[]],["text/56-25",[]],["component/56-25",[]],["title/56-26",[37,22.303,116,21.008,643,22.104,966,25.175]],["name/56-26",[]],["text/56-26",[]],["component/56-26",[]],["title/56-27",[5408,63.073]],["name/56-27",[]],["text/56-27",[]],["component/56-27",[]],["title/56-28",[662,23.471,912,26.956,929,26.956]],["name/56-28",[]],["text/56-28",[]],["component/56-28",[]],["title/56-29",[912,23.376,929,23.376,1188,22.929,5360,37.943]],["name/56-29",[]],["text/56-29",[]],["component/56-29",[]],["title/56-30",[182,19.187,912,23.376,929,23.376,1188,22.929]],["name/56-30",[]],["text/56-30",[]],["component/56-30",[]],["title/56",[6,9.337,98,31.43,114,17.376,166,22.929]],["name/56",[6,0.121,98,0.407,166,0.297]],["text/56",[1,0.303,2,0.942,6,2.151,10,0.396,11,0.705,13,1.903,15,0.255,23,1.588,28,0.258,30,1.47,32,0.65,37,1.805,38,2.061,41,0.91,44,0.209,49,2.209,63,1.785,65,3.447,69,0.427,70,0.636,75,0.321,76,0.358,78,1.167,80,0.252,82,1.404,90,2.889,92,1.296,97,0.62,98,6.122,102,0.427,109,2.123,114,3.835,115,0.967,116,1.7,118,0.845,122,1.063,127,1.322,129,0.23,133,0.585,137,0.284,139,0.994,140,0.268,141,0.424,146,0.275,154,0.284,155,0.218,160,0.565,166,4.487,170,2.079,173,1.36,174,2.348,175,1.02,182,3.99,183,2.217,184,1.569,186,0.315,187,1.789,189,0.315,190,1.221,191,0.511,192,0.355,195,0.252,200,0.288,202,0.565,205,0.298,206,1.488,208,0.265,213,1.784,218,1.312,219,1.541,220,1.324,225,0.471,243,0.252,253,0.265,265,0.443,308,2.628,309,0.272,318,1,319,3.465,320,0.547,326,1.602,327,1.684,330,1.114,334,4.056,336,1.608,337,4.462,339,0.225,342,0.539,344,0.782,345,0.565,346,0.69,361,0.396,362,0.487,364,0.309,365,0.594,367,2.498,371,0.675,372,1.821,373,0.252,375,0.227,377,0.345,378,0.547,381,0.686,511,0.315,512,1.04,521,0.337,523,1.024,524,2.347,525,0.634,526,0.329,527,1.239,529,0.321,540,0.303,546,0.532,552,0.443,553,0.596,558,4.021,560,1.355,561,2.491,564,0.585,569,5.978,571,0.288,573,0.565,575,3.085,579,0.848,580,0.461,589,1.164,591,0.268,592,0.714,594,1.7,599,1.651,600,1.345,605,1.464,608,0.932,614,0.279,623,3.191,625,0.734,628,0.492,629,0.275,631,2.785,635,1.052,638,0.355,639,0.456,643,3.782,645,2.723,646,0.62,648,0.191,649,1.115,651,1.253,652,0.275,653,0.221,659,0.675,662,3.513,666,0.293,667,0.272,671,2.328,674,0.819,678,1.178,680,3.585,681,0.315,686,0.288,687,1.608,688,1.54,689,1.931,691,0.293,698,1.954,708,0.65,710,2.498,711,2.095,712,2.603,713,0.76,720,2.815,723,2.474,727,2.758,728,1.063,734,0.565,735,0.585,741,4.485,747,0.456,754,2.75,767,1.026,771,0.367,772,1.024,773,2.206,774,0.321,775,1.821,777,3.052,779,2.887,781,0.585,787,1.825,788,0.667,790,0.309,792,0.315,796,0.65,798,1.703,800,0.298,808,0.329,809,3.269,812,1.668,818,1.221,820,1.328,822,1.685,825,1.73,843,0.309,847,0.631,851,0.667,869,0.38,871,0.734,876,0.355,882,0.667,885,0.315,887,3.838,899,0.487,905,2.655,910,2.974,912,2.855,913,1.215,915,2.236,922,0.539,927,0.315,928,0.565,929,3.376,933,0.74,937,1.47,940,1.488,946,0.604,948,0.261,949,0.321,955,2.98,958,0.298,966,5.667,973,1.651,976,0.708,979,0.207,980,0.708,985,0.252,986,2.174,990,0.806,993,0.782,1002,0.524,1013,0.355,1022,0.575,1023,0.321,1027,2.052,1028,0.487,1032,0.249,1034,2.044,1035,0.345,1037,0.74,1044,0.919,1048,0.686,1052,2.4,1053,0.813,1055,2.748,1068,0.288,1070,0.848,1082,0.722,1085,1.987,1102,0.244,1106,0.981,1112,0.293,1113,0.239,1128,1.6,1129,1.934,1137,0.596,1141,0.355,1142,2.544,1149,0.519,1150,5.21,1152,2.198,1153,4.541,1154,1.063,1156,0.667,1157,1.142,1163,0.854,1164,0.443,1165,0.443,1173,0.38,1174,4.574,1175,1.761,1176,1.971,1180,0.38,1182,1.711,1183,3.384,1184,1.69,1185,0.337,1186,0.443,1187,0.75,1188,2.561,1192,0.731,1198,2.25,1199,0.65,1200,1.817,1202,0.764,1206,3.883,1208,1.931,1212,0.303,1216,1.602,1217,1.934,1219,0.734,1224,0.596,1225,1.093,1227,1.296,1231,2.607,1234,0.38,1235,1.328,1239,2.114,1242,1.128,1244,3.903,1246,0.367,1258,1.389,1260,1.761,1261,1.897,1266,1.61,1268,0.942,1270,0.556,1271,0.517,1272,0.337,1273,0.288,1274,0.498,1279,1.178,1289,0.565,1290,1.468,1291,0.585,1296,0.38,1313,1.47,1314,2.653,1315,0.764,1316,3.961,1317,0.62,1318,0.261,1322,1.509,1323,1.281,1326,0.252,1328,0.667,1332,1.501,1335,0.76,1337,1.026,1338,0.782,1340,3.544,1341,0.942,1348,0.734,1351,0.608,1352,1.279,1353,5.538,1358,0.38,1362,0.38,1365,0.265,1366,0.265,1369,0.734,1378,0.547,1382,0.345,1408,1.164,1423,0.367,1427,0.498,1429,0.38,1435,0.556,1439,0.899,1478,0.443,1480,0.321,1483,2.114,1490,0.396,1491,1.633,1492,0.708,1495,1.98,1496,1.186,1501,0.667,1509,0.396,1512,0.315,1524,0.293,1551,0.367,1555,1.711,1558,0.396,1559,0.443,1576,0.38,1577,0.608,1579,2.186,1599,0.329,1651,0.634,1664,0.38,1675,0.565,1677,1.429,1684,0.355,1687,0.556,1689,0.667,1695,0.329,1778,0.367,1782,1.375,1783,0.321,1787,1.324,1789,0.329,1821,0.854,1843,4.424,1848,0.367,1857,0.532,1858,1.488,1861,0.967,1880,0.396,1894,0.942,1913,0.848,1914,1.436,1916,2.72,1937,1.247,1938,0.396,1943,1.602,1944,1.501,1953,0.734,1954,1.553,1968,1.026,2000,1.987,2002,1.324,2017,1.817,2018,0.416,2020,0.443,2024,1.553,2038,0.38,2039,2.25,2042,4.09,2045,0.966,2046,0.416,2053,0.396,2062,1.73,2072,4.112,2075,1.026,2085,0.293,2088,0.367,2092,0.734,2099,2.534,2101,1.553,2125,1.375,2148,0.734,2162,1.247,2175,0.708,2224,0.396,2255,0.966,2267,1.73,2312,1.936,2330,0.734,2344,0.396,2365,0.416,2389,0.416,2416,0.734,2429,0.396,2441,0.734,2461,1.743,2465,1.164,2469,0.329,2577,0.38,2586,0.355,2613,0.38,2616,0.416,2667,0.65,2672,0.667,2675,0.367,2682,2.607,2735,0.38,2798,0.667,2850,0.396,2891,1.324,3086,0.854,3091,0.396,3219,1.164,3220,2.427,3222,2.868,3224,0.355,3263,0.443,3274,0.416,3356,1.553,3369,0.443,3374,0.443,3376,0.764,3394,0.634,3403,1.597,3405,0.355,3426,0.764,3430,0.686,3489,1.817,3638,0.416,3703,0.396,3773,0.443,3788,0.443,3794,0.854,3813,0.734,3846,1.164,4025,1.597,4059,0.416,4108,0.854,4112,0.367,4137,0.994,4160,0.443,4239,0.38,4241,3.139,4300,0.396,4525,0.367,5030,1.164,5078,2.186,5312,2.012,5314,2.656,5317,0.443,5318,0.854,5320,0.443,5322,1.238,5323,0.443,5329,1.597,5333,1.597,5334,1.597,5341,0.443,5348,1.238,5349,0.443,5350,0.443,5351,2.827,5354,0.854,5360,3.071,5361,0.443,5363,0.443,5389,2.827,5393,0.443,5398,0.854,5408,4.507,5410,3.572,5411,0.854,5412,0.443,5413,0.483,5414,0.443,5415,0.483,5416,0.483,5417,0.933,5418,0.443,5419,0.483,5420,0.483,5421,0.483,5422,0.483,5423,0.483,5424,0.483,5425,0.483,5426,0.933,5427,0.483,5428,0.483,5429,2.111,5430,0.933,5431,0.483,5432,3.647,5433,0.483,5434,0.483,5435,0.443,5436,2.456,5437,0.483,5438,0.933,5439,0.483,5440,0.483,5441,0.933,5442,0.483,5443,0.854,5444,1.352,5445,0.483,5446,0.483,5447,0.483,5448,0.483,5449,0.483,5450,0.483,5451,0.483,5452,0.933,5453,0.483,5454,0.483,5455,0.483,5456,0.443,5457,0.933,5458,0.483,5459,0.483,5460,0.483,5461,0.443,5462,0.483,5463,0.483,5464,0.443,5465,0.483,5466,0.933,5467,0.483,5468,1.352,5469,0.933,5470,2.111,5471,2.111,5472,2.111,5473,2.111,5474,2.111,5475,0.933,5476,1.352,5477,0.933,5478,2.111,5479,2.111,5480,1.744,5481,0.483,5482,0.483,5483,0.933,5484,0.933,5485,0.933,5486,2.111,5487,2.111,5488,2.111,5489,3.341,5490,2.111,5491,2.111,5492,0.933,5493,0.933,5494,0.933,5495,1.352,5496,1.352,5497,0.483,5498,0.483,5499,0.483,5500,0.483,5501,0.483,5502,0.483,5503,0.483,5504,0.483,5505,0.483,5506,0.483,5507,1.352,5508,0.483,5509,0.483,5510,0.483,5511,2.78,5512,1.352,5513,0.933,5514,0.933,5515,0.483,5516,0.483,5517,0.483,5518,0.483,5519,0.483,5520,0.483,5521,0.483,5522,0.483,5523,0.483,5524,0.483,5525,0.933,5526,0.483,5527,0.483,5528,0.483,5529,0.933,5530,0.483,5531,0.443,5532,0.483,5533,0.933,5534,1.352,5535,2.78,5536,0.933,5537,2.111,5538,1.352,5539,0.483,5540,0.933,5541,0.483,5542,0.483,5543,0.483,5544,0.483,5545,0.483,5546,0.483,5547,0.483,5548,0.483,5549,0.483,5550,0.933,5551,0.483,5552,0.483,5553,0.443,5554,0.483,5555,0.483,5556,0.483,5557,0.483,5558,0.483,5559,0.483,5560,0.483,5561,0.483,5562,0.483,5563,0.483,5564,0.483]],["component/56",[6,0.301]],["title/57-1",[44,20.84,90,22.506,155,21.722,201,23.15]],["name/57-1",[]],["text/57-1",[]],["component/57-1",[]],["title/57-2",[90,25.953,166,26.441,888,32.657]],["name/57-2",[]],["text/57-2",[]],["component/57-2",[]],["title/57-3",[90,25.953,524,24.226,5565,55.639]],["name/57-3",[]],["text/57-3",[]],["component/57-3",[]],["title/57-4",[6,9.337,219,24.098,1326,25.175,5566,36.618]],["name/57-4",[]],["text/57-4",[]],["component/57-4",[]],["title/57-5",[175,23.116,990,21.232,1326,29.031]],["name/57-5",[]],["text/57-5",[]],["component/57-5",[]],["title/57-6",[175,20.046,659,24.098,990,18.413,1326,25.175]],["name/57-6",[]],["text/57-6",[]],["component/57-6",[]],["title/57-7",[175,23.116,1111,26.956,1326,29.031]],["name/57-7",[]],["text/57-7",[]],["component/57-7",[]],["title/57-8",[175,20.046,659,24.098,1111,23.376,1326,25.175]],["name/57-8",[]],["text/57-8",[]],["component/57-8",[]],["title/57-9",[90,30.646,175,27.296]],["name/57-9",[]],["text/57-9",[]],["component/57-9",[]],["title/57-10",[4081,41.378]],["name/57-10",[]],["text/57-10",[]],["component/57-10",[]],["title/57-11",[99,40.058]],["name/57-11",[]],["text/57-11",[]],["component/57-11",[]],["title/57",[6,12.504,892,34.9,896,34.9,5566,32.325]],["name/57",[189,0.592,214,0.65]],["text/57",[6,1.932,23,0.825,28,0.501,41,0.489,44,0.756,67,1.22,69,1.677,80,0.489,90,0.817,93,2.77,98,2.018,99,3.846,102,0.802,106,0.61,114,1.812,116,2.19,133,3.389,137,0.55,141,2.753,145,0.577,155,0.422,161,0.542,162,0.52,166,1.472,173,0.857,174,4.876,175,3.272,186,0.61,187,1.13,189,3.277,214,3.596,219,3.028,220,1.098,221,4.623,222,0.849,224,0.737,267,1.028,308,1.563,311,2.259,320,0.55,324,0.55,327,2.522,336,1.013,346,2.125,355,0.737,362,0.489,367,0.534,372,2.08,375,1.723,377,1.252,505,0.623,516,1.231,524,1.594,558,1.028,561,0.433,566,0.468,580,4.124,599,0.458,608,0.501,623,0.495,625,0.737,629,0.534,633,1.447,640,2.018,643,0.429,645,0.433,646,2.802,648,1.223,659,5.048,662,1.544,678,3.176,686,1.846,709,6.722,710,1.998,714,4.779,736,0.689,747,0.458,754,0.478,755,4.403,756,0.806,763,0.637,765,0.534,772,0.55,773,1.677,782,4.078,785,0.542,787,0.947,790,5.418,793,0.711,823,2.611,835,4.004,847,2.154,865,1.507,877,0.52,885,0.61,892,2.02,896,2.02,905,0.568,915,2.933,921,0.67,924,3.801,926,0.61,941,1.165,945,0.513,948,1.333,949,0.623,963,1.604,966,0.914,973,2.038,976,0.711,979,0.401,990,3.833,993,0.542,1013,3.062,1037,1.35,1052,1.013,1076,2.434,1082,1.655,1088,0.534,1093,4.501,1096,3.126,1107,0.599,1111,5.055,1113,1.219,1122,3.652,1124,0.653,1146,1.098,1149,1.774,1175,4.018,1183,1.955,1184,0.513,1188,0.445,1192,1.979,1194,0.501,1227,0.924,1260,1.287,1262,0.904,1263,0.542,1274,0.501,1284,0.689,1290,3.625,1295,0.806,1316,1.616,1317,1.165,1322,0.67,1326,3.454,1335,0.527,1340,0.513,1351,0.61,1354,1.546,1366,3.625,1378,0.55,1427,0.501,1512,1.141,1524,0.568,1582,1.349,1640,1.47,1720,0.67,1723,1.22,1725,0.806,1786,1.329,1787,6.259,1789,1.191,1819,0.737,1829,0.875,1843,1.333,1857,0.998,1861,4.056,1879,0.768,1938,1.435,1942,0.737,2053,0.768,2098,0.637,2122,1.604,2123,0.858,2212,1.028,2296,2.434,2329,2.489,2339,2.95,2395,2.95,2438,1.604,2496,1.288,2522,1.329,2609,5.05,2622,0.858,2633,1.252,2658,1.22,2667,1.717,2755,1.791,2803,0.599,2806,6.632,2810,1.575,3027,0.768,3061,1.435,3074,2.214,3219,1.507,3429,4.623,3456,0.858,3838,3.062,3840,1.377,3848,0.858,3854,0.806,4029,0.711,4034,0.67,4081,0.483,4137,1.288,4138,0.737,4139,0.768,4186,0.737,4201,0.61,4247,2.691,4250,4.222,4267,0.858,4268,0.806,4273,0.806,4274,0.858,4280,1.22,4286,1.939,4293,0.858,4307,3.062,4318,2.837,4335,0.858,4340,3.275,4341,2.666,4525,0.711,4575,0.806,4664,0.806,4786,0.806,4936,0.737,4972,2.02,4973,0.768,4974,0.768,4993,2.351,5177,0.858,5199,0.806,5215,0.806,5313,1.435,5567,1.751,5568,1.751,5569,3.66,5570,3.66,5571,1.751,5572,3.66,5573,3.66,5574,1.751,5575,7.876,5576,7.312,5577,3.097,5578,3.097,5579,1.604,5580,0.937,5581,0.937,5582,5.553,5583,4.619,5584,4.619,5585,0.937,5586,1.751,5587,0.937,5588,0.937,5589,2.466,5590,1.751,5591,0.937,5592,0.937,5593,0.937,5594,0.937,5595,0.937,5596,0.937,5597,0.937,5598,0.937,5599,0.937,5600,0.937,5601,0.937,5602,0.937,5603,0.937,5604,0.937,5605,1.507,5606,5.697,5607,0.937,5608,0.858,5609,0.937,5610,0.937,5611,0.937,5612,0.937,5613,0.937,5614,0.937,5615,0.937,5616,0.937,5617,0.937,5618,0.937,5619,0.937,5620,0.937,5621,0.937,5622,0.937,5623,0.806,5624,0.806,5625,0.937,5626,0.937,5627,0.858,5628,0.937,5629,0.937,5630,0.937,5631,0.937,5632,0.937,5633,0.858,5634,1.751,5635,0.937,5636,0.937,5637,0.937,5638,0.858,5639,0.937,5640,0.937,5641,0.937,5642,0.937,5643,0.937,5644,0.858,5645,0.937,5646,0.858,5647,0.858,5648,0.937,5649,0.937,5650,0.858,5651,0.858,5652,1.751,5653,0.937,5654,0.937,5655,0.937,5656,0.937,5657,0.937,5658,0.937,5659,0.937,5660,0.937,5661,0.937,5662,0.937,5663,0.937,5664,0.806,5665,0.937,5666,0.937,5667,0.937,5668,0.937,5669,0.937,5670,0.937,5671,0.937,5672,0.937,5673,0.937,5674,0.937,5675,0.937,5676,0.937,5677,0.937,5678,0.937,5679,0.937,5680,0.937,5681,0.937,5682,0.937,5683,0.937,5684,0.937,5685,0.937,5686,0.937,5687,0.937,5688,0.937,5689,0.937,5690,0.937,5691,0.937,5692,0.937,5693,0.937,5694,1.751,5695,2.837,5696,0.937,5697,1.751,5698,0.937,5699,0.937,5700,0.937,5701,0.937,5702,0.937,5703,0.937,5704,0.937,5705,0.937,5706,0.937,5707,1.751,5708,0.937,5709,0.937,5710,3.584,5711,0.937,5712,0.937,5713,0.937,5714,0.937,5715,0.937,5716,0.937,5717,0.937,5718,0.937,5719,0.937,5720,0.937,5721,1.604,5722,0.858,5723,0.858,5724,0.937,5725,0.937,5726,0.937,5727,0.937,5728,0.937,5729,0.937,5730,0.937,5731,0.937,5732,0.937,5733,0.937,5734,0.937,5735,0.937,5736,0.858,5737,0.937,5738,0.858,5739,0.858,5740,0.937,5741,0.937,5742,0.858,5743,0.937,5744,0.937,5745,0.937,5746,0.937,5747,1.751,5748,1.751,5749,0.937,5750,0.937,5751,0.937,5752,0.937,5753,0.937,5754,0.937,5755,0.937,5756,0.937,5757,0.937,5758,0.937,5759,0.937,5760,1.751,5761,0.806,5762,0.937,5763,1.751,5764,1.751,5765,2.837,5766,2.259,5767,0.937,5768,0.937,5769,0.937,5770,1.604,5771,1.751,5772,0.858,5773,0.937,5774,0.937,5775,0.937,5776,0.937,5777,0.937,5778,0.937,5779,0.937,5780,0.937,5781,0.937,5782,0.937,5783,0.937,5784,0.937,5785,0.937,5786,0.937,5787,0.937,5788,0.937,5789,0.937,5790,0.937,5791,0.937,5792,0.937,5793,0.768]],["component/57",[6,0.301]],["title/58-1",[44,20.84,90,22.506,155,21.722,201,23.15]],["name/58-1",[]],["text/58-1",[]],["component/58-1",[]],["title/58-2",[57,28.389,99,27.788,5566,42.226]],["name/58-2",[]],["text/58-2",[]],["component/58-2",[]],["title/58-3",[90,25.953,166,26.441,888,32.657]],["name/58-3",[]],["text/58-3",[]],["component/58-3",[]],["title/58-4",[90,25.953,524,24.226,773,25.489]],["name/58-4",[]],["text/58-4",[]],["component/58-4",[]],["title/58-5",[141,29.836,631,27.715]],["name/58-5",[]],["text/58-5",[]],["component/58-5",[]],["title/58",[6,12.504,898,33.495,1043,36.66,5566,32.325]],["name/58",[213,0.526,5794,0.909]],["text/58",[6,2.347,23,2.688,35,3.798,44,3.457,69,3.667,90,4.672,99,4.616,166,2.713,174,4.679,175,3.325,201,2.739,214,4.081,267,3.351,325,6.558,524,4.024,646,3.563,674,3.459,755,4.383,773,2.616,835,5.987,888,3.351,898,8.294,910,2.882,1043,9.078,1068,3.403,1082,4.276,1088,4.563,1122,4.549,1290,5.287,1366,3.127,1773,5.886,2024,5.886,2206,7.332,2212,4.698,3553,4.914,5189,5.23,5566,6.074,5582,10.495,5795,5.71,5796,8.004,5797,5.71,5798,5.71,5799,5.71,5800,5.71,5801,5.71,5802,5.71,5803,5.71,5804,5.71,5805,5.71,5806,5.71,5807,5.71,5808,5.71,5809,5.71,5810,5.71,5811,8.004,5812,5.71,5813,5.71,5814,8.004,5815,5.23,5816,5.71,5817,5.71,5818,8.004,5819,8.004,5820,5.71,5821,5.71,5822,5.71,5823,5.71,5824,5.71]],["component/58",[6,0.301]],["title/59-1",[1149,21.375,2057,38.754,2099,32.176]],["name/59-1",[]],["text/59-1",[]],["component/59-1",[]],["title/59-2",[1263,32.176,2057,38.754,2099,32.176]],["name/59-2",[]],["text/59-2",[]],["component/59-2",[]],["title/59-3",[2057,38.754,2099,32.176,2395,35.539]],["name/59-3",[]],["text/59-3",[]],["component/59-3",[]],["title/59",[646,19.792,2057,38.754,2099,32.176]],["name/59",[2057,1.164]],["text/59",[6,1.84,21,3.282,38,4.465,63,2.157,69,3.652,70,1.242,72,1.685,76,2.833,77,1.94,78,3.788,92,3.5,102,3.038,114,2.388,115,3.038,117,4.174,127,1.888,140,1.464,145,1.625,155,1.984,164,2.162,174,4.249,175,3.312,182,1.049,183,1.409,190,3.282,191,1.445,194,5.137,201,4.254,219,3.683,233,2.928,234,8.387,235,2.417,236,2.417,252,2.417,256,2.417,259,2.417,293,2.271,297,2.417,298,2.417,303,1.886,304,2.417,305,3.793,310,2.271,319,2.777,332,2.075,346,4.067,358,1.625,373,1.376,380,3.86,522,1.886,524,2.471,558,1.548,560,3.499,566,1.318,575,2.249,600,1.445,604,2.931,629,1.504,631,3.741,635,2.432,646,0.938,648,1.042,653,3.038,662,3.111,679,1.838,698,2.075,710,1.266,711,1.332,714,1.464,716,1.794,727,1.26,728,2.075,741,2.672,747,2.157,750,1.718,764,4.651,766,2.417,773,2.6,777,3.065,797,1.886,805,1.504,820,1.427,822,2.201,823,2.763,843,4.235,869,2.075,870,1.718,912,1.278,922,2.549,932,3.241,933,1.445,973,2.157,979,2.432,990,1.682,1022,1.625,1037,1.445,1044,1.794,1111,1.278,1135,1.94,1137,3.626,1149,3.407,1157,1.427,1188,2.094,1203,2.271,1244,1.625,1263,5.777,1267,1.409,1279,4.685,1288,1.838,1289,1.598,1316,5.213,1352,1.598,1354,4.157,1361,4.037,1366,3.108,1381,1.573,1409,2.002,1436,2.417,1512,3.697,1524,1.598,1695,1.794,1792,2.002,1798,2.075,1843,4.31,1847,2.075,1891,1.573,1970,1.838,2037,2.417,2038,3.466,2057,6.802,2099,5.777,2102,3.466,2395,4.235,2513,4.651,2653,1.94,2683,2.417,2684,2.417,2685,2.162,2686,8.77,2687,2.417,2691,2.271,2693,2.417,2698,2.271,2706,5.199,2710,2.417,2714,2.417,2716,4.037,2718,2.417,2720,2.417,2727,4.037,2729,2.417,2730,2.417,2733,2.417,2815,5.433,3146,2.417,3271,2.162,3485,2.162,4433,2.271,4576,2.417,4584,2.271,4818,2.417,5192,2.417,5281,2.271,5825,5.676,5826,2.638,5827,2.638,5828,2.638,5829,2.638,5830,2.638,5831,2.638,5832,2.638,5833,2.638,5834,2.638,5835,2.638,5836,2.638,5837,2.638,5838,2.638,5839,5.676,5840,9.996,5841,2.638,5842,2.638,5843,2.638,5844,2.638,5845,2.638,5846,4.407,5847,4.407,5848,2.638,5849,2.638,5850,2.638,5851,2.638,5852,2.638,5853,2.638,5854,7.375,5855,2.638,5856,2.638,5857,2.638,5858,8.123,5859,2.638,5860,4.407,5861,2.638,5862,2.417,5863,2.638,5864,2.638,5865,2.638,5866,2.638,5867,2.638,5868,2.638,5869,4.407,5870,2.638,5871,2.638,5872,2.638,5873,2.638,5874,2.638,5875,2.638,5876,4.407,5877,2.638,5878,2.638,5879,2.638]],["component/59",[6,0.301]],["title/60",[240,37.838,646,19.792,647,26.695]],["name/60",[240,1.136]],["text/60",[672,7.131]],["component/60",[6,0.301]],["title/61-1",[710,31.523,990,25.072]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["title/61-2",[710,26.695,990,21.232,1110,30.469]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["title/61-3",[990,25.072,1053,30.646]],["name/61-3",[]],["text/61-3",[]],["component/61-3",[]],["title/61-4",[635,28.152,990,25.072]],["name/61-4",[]],["text/61-4",[]],["component/61-4",[]],["title/61-5",[2514,69.033]],["name/61-5",[]],["text/61-5",[]],["component/61-5",[]],["title/61-6",[5880,73.47]],["name/61-6",[]],["text/61-6",[]],["component/61-6",[]],["title/61-7",[5881,73.47]],["name/61-7",[]],["text/61-7",[]],["component/61-7",[]],["title/61-8",[5882,73.47]],["name/61-8",[]],["text/61-8",[]],["component/61-8",[]],["title/61-9",[5883,73.47]],["name/61-9",[]],["text/61-9",[]],["component/61-9",[]],["title/61-10",[646,23.371,1261,36.94]],["name/61-10",[]],["text/61-10",[]],["component/61-10",[]],["title/61-11",[2326,60.87]],["name/61-11",[]],["text/61-11",[]],["component/61-11",[]],["title/61-12",[2327,58.983]],["name/61-12",[]],["text/61-12",[]],["component/61-12",[]],["title/61-13",[628,34.681,1261,36.94]],["name/61-13",[]],["text/61-13",[]],["component/61-13",[]],["title/61-14",[222,31.831,727,18.779]],["name/61-14",[]],["text/61-14",[]],["component/61-14",[]],["title/61-15",[233,28.704,861,28.704,1276,31.282]],["name/61-15",[]],["text/61-15",[]],["component/61-15",[]],["title/61-16",[233,28.704,1149,21.375,2872,36.244]],["name/61-16",[]],["text/61-16",[]],["component/61-16",[]],["title/61-17",[100,26.441,861,28.704,1276,31.282]],["name/61-17",[]],["text/61-17",[]],["component/61-17",[]],["title/61-18",[100,31.222,2872,42.798]],["name/61-18",[]],["text/61-18",[]],["component/61-18",[]],["title/61-19",[101,45.095]],["name/61-19",[]],["text/61-19",[]],["component/61-19",[]],["title/61-20",[114,17.376,127,20.674,2124,35.482,2877,39.535]],["name/61-20",[]],["text/61-20",[]],["component/61-20",[]],["title/61-21",[6,9.337,618,30.82,1281,26.422,1293,28.761]],["name/61-21",[]],["text/61-21",[]],["component/61-21",[]],["title/61-22",[646,23.371,1326,34.281]],["name/61-22",[]],["text/61-22",[]],["component/61-22",[]],["title/61-23",[6,12.714,1326,34.281]],["name/61-23",[]],["text/61-23",[]],["component/61-23",[]],["title/61-24",[1423,60.87]],["name/61-24",[]],["text/61-24",[]],["component/61-24",[]],["title/61-25",[5884,69.033]],["name/61-25",[]],["text/61-25",[]],["component/61-25",[]],["title/61-26",[174,18.291,659,24.098,940,29.228,2867,39.535]],["name/61-26",[]],["text/61-26",[]],["component/61-26",[]],["title/61-27",[5885,73.47]],["name/61-27",[]],["text/61-27",[]],["component/61-27",[]],["title/61-28",[2615,69.033]],["name/61-28",[]],["text/61-28",[]],["component/61-28",[]],["title/61-29",[5886,73.47]],["name/61-29",[]],["text/61-29",[]],["component/61-29",[]],["title/61-30",[5887,73.47]],["name/61-30",[]],["text/61-30",[]],["component/61-30",[]],["title/61-31",[2242,69.033]],["name/61-31",[]],["text/61-31",[]],["component/61-31",[]],["title/61-32",[5888,73.47]],["name/61-32",[]],["text/61-32",[]],["component/61-32",[]],["title/61-33",[174,16.146,1149,24.825,2633,30.446,5889,39.016]],["name/61-33",[]],["text/61-33",[]],["component/61-33",[]],["title/61-34",[2391,69.033]],["name/61-34",[]],["text/61-34",[]],["component/61-34",[]],["title/61-35",[2801,58.983]],["name/61-35",[]],["text/61-35",[]],["component/61-35",[]],["title/61-36",[5890,73.47]],["name/61-36",[]],["text/61-36",[]],["component/61-36",[]],["title/61-37",[175,23.116,219,27.788,1326,29.031]],["name/61-37",[]],["text/61-37",[]],["component/61-37",[]],["title/61-38",[5891,65.719]],["name/61-38",[]],["text/61-38",[]],["component/61-38",[]],["title/61-39",[1185,55.865]],["name/61-39",[]],["text/61-39",[]],["component/61-39",[]],["title/61-40",[174,16.146,219,21.273,659,21.273,940,25.801,5892,39.016]],["name/61-40",[]],["text/61-40",[]],["component/61-40",[]],["title/61-41",[102,30.099,1326,34.281]],["name/61-41",[]],["text/61-41",[]],["component/61-41",[]],["title/61-42",[1326,29.031,4034,39.771,4993,42.226]],["name/61-42",[]],["text/61-42",[]],["component/61-42",[]],["title/61-43",[1326,34.281,4525,49.862]],["name/61-43",[]],["text/61-43",[]],["component/61-43",[]],["title/61-44",[114,23.661,990,25.072]],["name/61-44",[]],["text/61-44",[]],["component/61-44",[]],["title/61-45",[659,27.788,678,26.695,990,21.232]],["name/61-45",[]],["text/61-45",[]],["component/61-45",[]],["title/61-46",[990,25.072,1258,32.814]],["name/61-46",[]],["text/61-46",[]],["component/61-46",[]],["title/61-47",[114,23.661,1111,31.831]],["name/61-47",[]],["text/61-47",[]],["component/61-47",[]],["title/61-48",[580,27.503,659,27.788,1111,26.956]],["name/61-48",[]],["text/61-48",[]],["component/61-48",[]],["title/61-49",[1111,26.956,1262,28.704,5893,50.966]],["name/61-49",[]],["text/61-49",[]],["component/61-49",[]],["title/61-50",[76,21.375,1149,21.375,1582,24.226]],["name/61-50",[]],["text/61-50",[]],["component/61-50",[]],["title/61-51",[339,22.506,646,17.163,648,19.053,1149,18.537]],["name/61-51",[]],["text/61-51",[]],["component/61-51",[]],["title/61-52",[580,23.85,646,17.163,648,19.053,1149,18.537]],["name/61-52",[]],["text/61-52",[]],["component/61-52",[]],["title/61-53",[1111,26.956,1262,28.704,5894,50.966]],["name/61-53",[]],["text/61-53",[]],["component/61-53",[]],["title/61-54",[2,45.762,508,49.862]],["name/61-54",[]],["text/61-54",[]],["component/61-54",[]],["title/61-55",[710,31.523,5895,60.183]],["name/61-55",[]],["text/61-55",[]],["component/61-55",[]],["title/61",[646,19.792,647,26.695,1149,21.375]],["name/61",[1149,0.642]],["text/61",[0,0.952,1,0.649,2,0.83,6,1.442,10,0.151,11,0.19,15,1.086,19,0.396,20,0.298,21,0.41,23,0.772,24,0.14,28,0.098,30,1.143,32,0.375,34,0.444,35,0.793,36,0.159,37,1.504,38,0.629,41,0.702,44,0.515,49,0.112,51,0.298,52,0.197,55,0.493,62,0.994,63,0.428,66,0.358,67,1.143,69,4.343,70,1.376,75,0.123,76,1.813,78,1.597,80,1.525,86,0.151,90,0.33,92,0.374,97,0.358,99,0.436,100,2.167,101,2.061,102,2.43,103,0.151,106,0.237,108,0.202,109,0.501,111,0.128,112,0.159,113,0.61,114,2.93,115,1.811,116,1.839,117,0.136,118,0.578,122,0.145,127,1.883,129,1.965,133,0.228,135,0.351,136,0.118,137,0.316,139,0.105,140,0.393,141,1.709,143,0.151,145,0.114,146,0.105,155,0.673,157,0.145,160,0.429,162,1.066,163,0.891,165,0.159,166,0.492,167,0.128,169,2.089,170,0.734,173,1.071,174,4.617,175,2.488,182,1.644,183,0.194,184,0.118,185,0.609,186,0.12,187,0.546,190,0.21,191,0.478,195,0.702,200,0.321,201,1.402,202,0.22,205,1.098,206,0.326,207,0.467,208,0.567,209,0.452,213,0.21,218,0.194,219,2.508,221,1.752,222,2.666,225,1.85,233,2.178,234,0.625,243,1.073,245,0.104,267,0.214,284,0.217,303,0.132,308,0.522,309,0.84,318,0.174,319,0.178,320,0.214,324,0.513,326,0.538,327,0.529,330,0.558,334,0.192,338,0.123,339,1.755,342,0.311,343,0.529,344,0.107,345,1.08,346,2.487,349,0.123,351,0.123,352,0.26,353,0.513,358,0.114,362,0.856,364,0.232,365,1.333,367,0.59,369,0.429,371,1.221,372,2.109,373,2.503,374,0.114,375,0.633,377,0.26,381,0.268,385,0.242,400,0.232,505,0.123,508,1.021,510,0.284,512,0.11,513,0.276,516,0.182,519,0.351,520,0.313,521,0.253,523,0.513,524,2.962,525,0.247,527,0.416,528,0.276,529,0.994,530,0.151,536,0.538,540,0.228,544,0.14,546,1.173,547,0.159,556,0.128,558,0.108,560,0.903,561,1.739,564,0.116,566,1.516,567,1.156,571,0.11,573,0.627,574,0.385,575,0.91,579,0.116,580,2.844,581,0.14,583,0.159,584,0.123,590,0.125,591,1.141,592,1.291,594,1.222,596,0.128,598,0.151,599,1.374,600,0.101,604,0.123,606,0.286,607,0.128,608,1.436,614,0.864,615,0.132,618,0.232,623,0.097,624,1.747,628,0.629,631,2.791,633,1.972,635,1.394,636,0.14,639,0.94,640,0.461,643,0.247,644,0.253,645,3.265,646,3.626,647,1.05,648,3.224,649,1.709,651,1.247,652,0.404,653,1.811,654,0.197,659,3.485,660,0.558,662,1.781,663,0.125,666,0.429,667,1.231,668,0.145,671,0.946,672,0.128,674,0.722,675,0.452,676,0.485,677,1.344,678,1.984,679,0.253,684,0.396,686,0.617,687,0.107,688,0.116,691,0.326,695,0.247,696,0.877,697,0.423,698,1.532,700,0.366,701,0.385,705,0.436,706,0.852,708,0.128,709,0.409,710,3.151,711,0.97,712,0.197,714,3.644,715,0.145,716,0.366,720,1.112,723,1.389,727,2.333,734,0.326,741,0.968,743,0.12,747,1.374,749,0.145,750,0.12,751,0.136,752,0.136,754,0.186,755,3.543,764,0.298,765,0.498,772,0.7,773,0.324,774,0.581,775,1.73,777,1.243,779,0.116,780,0.409,781,0.338,782,0.436,783,0.704,785,0.864,787,0.473,788,0.132,790,0.344,792,0.237,793,0.14,798,1.532,800,0.332,801,0.11,805,0.404,810,1.841,812,1.812,816,0.145,818,0.41,820,0.291,822,0.747,823,3.928,831,0.268,835,1.897,841,0.132,843,0.452,844,0.74,846,0.151,847,2.089,851,0.132,860,0.132,861,1.061,863,0.299,866,0.136,869,0.145,870,0.12,872,0.169,874,0.358,875,0.159,877,1.286,882,0.132,883,0.493,886,0.436,888,0.513,889,0.123,894,0.136,899,0.856,900,1.602,905,0.22,910,0.754,912,0.724,914,0.852,915,0.528,918,0.74,921,0.132,922,1.189,924,3.056,925,0.609,926,0.237,927,0.876,929,0.089,932,0.396,933,1.199,937,0.253,938,1.915,939,1.063,940,2.16,941,0.471,943,0.169,944,0.747,945,0.567,946,0.082,948,0.728,953,0.116,955,0.247,956,0.132,966,0.096,973,1.43,979,2.439,980,0.409,982,0.276,985,0.622,986,1.063,988,0.123,989,0.721,990,4.036,992,1.903,993,0.311,994,0.116,999,1.34,1002,1.578,1011,0.22,1012,0.581,1015,0.242,1016,0.169,1017,0.286,1021,0.118,1023,0.123,1024,0.756,1025,0.128,1027,2.093,1028,0.54,1032,0.694,1037,0.976,1044,0.247,1046,1.326,1048,0.268,1050,0.375,1052,0.599,1053,1.14,1062,0.358,1067,0.145,1068,0.422,1070,1.205,1075,0.385,1076,0.994,1080,0.663,1082,1.958,1087,0.638,1088,0.767,1093,0.811,1096,0.505,1097,0.159,1098,0.224,1100,0.471,1102,0.522,1106,1.002,1107,0.761,1110,2.164,1111,4.66,1112,1.556,1113,1.27,1114,0.125,1118,0.151,1121,0.14,1122,2.469,1123,0.145,1124,0.375,1127,0.891,1128,0.461,1132,0.123,1136,0.159,1138,0.145,1141,0.268,1142,0.461,1146,0.548,1149,3.306,1150,0.778,1152,0.351,1156,0.132,1157,0.808,1173,0.145,1174,0.444,1175,2.62,1176,0.558,1183,3.074,1184,0.567,1185,1.143,1186,1.389,1187,0.299,1188,0.567,1192,0.291,1194,0.194,1195,0.307,1197,0.436,1206,0.228,1207,0.298,1209,0.224,1212,0.649,1218,0.123,1224,0.452,1225,0.444,1227,0.866,1228,0.276,1235,2.137,1241,0.793,1242,0.098,1243,0.253,1244,0.538,1248,0.247,1252,0.118,1253,0.232,1256,0.388,1258,2.318,1259,0.102,1260,2.293,1261,3.947,1262,2.267,1263,2.062,1265,0.876,1266,0.456,1267,1.795,1268,0.128,1270,0.217,1271,0.485,1273,0.321,1274,0.288,1276,1.156,1277,0.118,1279,1.759,1280,0.136,1281,1.953,1283,0.268,1284,0.136,1286,0.145,1288,0.128,1289,0.112,1290,1.774,1291,0.116,1293,0.978,1294,0.58,1297,0.298,1298,0.333,1299,0.366,1305,0.26,1309,0.607,1316,1.807,1318,1.389,1319,0.128,1320,0.276,1322,0.625,1323,1.34,1324,0.247,1325,0.276,1326,4.49,1328,0.26,1331,0.441,1335,0.756,1338,0.41,1340,0.101,1344,0.114,1351,0.461,1352,0.905,1354,0.116,1363,0.286,1365,0.388,1366,1.052,1372,0.128,1378,0.877,1379,0.136,1380,0.557,1381,1.145,1391,0.638,1394,0.404,1397,0.471,1410,2.019,1411,0.232,1413,0.915,1414,0.58,1418,0.423,1419,0.151,1422,0.493,1423,3.271,1427,1.169,1429,0.145,1435,0.711,1438,1.909,1439,3.436,1440,1.068,1441,0.814,1474,0.461,1475,0.333,1476,0.14,1480,0.242,1482,0.326,1484,0.247,1491,0.358,1494,0.333,1495,0.7,1496,0.247,1504,0.385,1509,0.151,1512,0.237,1517,0.385,1520,0.125,1524,0.815,1550,0.151,1551,0.785,1552,0.159,1555,0.128,1571,0.159,1573,0.159,1574,0.313,1577,0.351,1579,0.145,1580,0.128,1582,1.322,1587,0.145,1599,0.247,1635,0.096,1636,0.132,1637,0.521,1639,1.245,1640,2.243,1641,0.311,1647,0.128,1648,0.478,1654,0.247,1658,0.333,1660,0.169,1664,0.145,1675,0.429,1684,0.136,1687,0.521,1690,0.128,1695,0.247,1702,0.423,1703,0.136,1718,0.937,1720,0.852,1723,0.609,1725,0.463,1726,0.441,1727,0.125,1762,0.169,1764,0.409,1770,0.132,1777,0.145,1781,0.61,1782,0.569,1783,0.242,1784,1.382,1787,0.116,1789,0.811,1791,0.313,1819,0.286,1829,0.819,1832,2.442,1836,0.974,1842,0.482,1843,2.422,1847,0.286,1857,0.105,1858,0.429,1861,1.141,1866,0.521,1875,0.232,1876,0.136,1877,0.14,1878,0.123,1888,0.286,1891,0.217,1893,0.313,1894,0.253,1910,0.521,1911,0.815,1912,0.461,1918,0.145,1925,0.286,1933,0.493,1934,2.465,1946,0.661,1955,0.159,1968,0.409,1970,0.128,1997,0.721,2000,0.506,2006,0.159,2008,0.136,2031,0.313,2033,0.136,2041,0.375,2045,0.132,2048,0.276,2058,0.159,2072,0.125,2085,2.036,2099,0.311,2101,0.268,2124,0.268,2125,0.351,2126,0.877,2128,0.895,2155,0.151,2159,0.423,2162,0.132,2175,0.14,2177,0.14,2178,1.708,2179,0.752,2194,0.151,2196,0.136,2212,2.209,2213,0.145,2214,1.542,2216,0.493,2223,0.12,2239,0.169,2240,0.58,2242,1.654,2243,0.136,2244,2.629,2255,1.373,2269,0.276,2277,0.409,2281,0.159,2289,0.557,2291,0.14,2294,0.132,2296,0.242,2297,0.136,2312,0.493,2317,0.169,2319,0.128,2323,1.923,2324,0.268,2325,2.3,2326,1.561,2327,1.61,2329,0.125,2330,0.557,2331,1.412,2332,0.136,2334,0.123,2336,0.716,2339,0.859,2344,0.441,2346,0.268,2349,0.569,2350,0.313,2354,0.423,2370,0.286,2377,0.687,2378,0.169,2390,1.092,2391,2.416,2392,1.245,2393,0.169,2394,0.8,2395,1.048,2399,0.151,2402,0.493,2403,0.26,2416,0.937,2426,0.159,2428,0.441,2429,0.151,2440,1.939,2445,0.333,2460,1.481,2461,0.649,2464,0.169,2466,0.151,2467,0.169,2471,0.159,2473,0.207,2477,0.159,2478,1.904,2479,0.333,2486,0.232,2491,0.169,2496,0.268,2497,0.169,2499,0.687,2513,0.441,2514,0.752,2522,0.905,2540,0.169,2541,0.58,2544,0.276,2546,2.036,2547,0.313,2569,0.989,2599,0.169,2600,0.151,2609,0.136,2615,1.654,2617,0.169,2618,0.169,2619,0.441,2630,0.169,2631,0.14,2632,0.333,2633,1.274,2638,0.333,2645,0.151,2646,0.151,2653,1.099,2654,0.688,2658,0.721,2659,0.151,2662,0.169,2663,0.333,2664,0.169,2665,0.159,2667,0.493,2686,0.159,2713,0.145,2751,0.313,2755,0.21,2759,0.145,2766,0.716,2768,0.112,2786,0.151,2799,2.041,2801,1.099,2802,0.151,2803,0.859,2806,5.083,2810,0.452,2815,0.298,2816,0.14,2838,0.441,2839,0.159,2849,0.145,2855,0.132,2860,0.14,2867,1.225,2872,0.569,2877,1.344,2878,0.313,2882,0.298,2930,0.169,2931,0.687,2934,1.708,2935,0.169,2936,0.169,2938,0.493,2948,0.649,2952,0.814,2961,0.313,2965,0.313,3025,0.375,3026,0.125,3031,1.503,3032,0.298,3035,0.169,3039,0.286,3049,0.145,3051,0.313,3053,1.026,3060,0.169,3074,0.962,3075,0.905,3078,0.169,3084,0.159,3092,0.169,3096,0.169,3101,0.159,3113,0.123,3117,0.169,3118,0.151,3119,0.61,3120,0.333,3121,0.169,3122,0.333,3132,0.286,3134,0.145,3143,0.313,3157,0.482,3181,0.151,3187,0.253,3195,0.268,3196,0.848,3213,0.169,3224,0.136,3225,0.169,3234,0.26,3236,0.169,3244,0.396,3284,0.132,3289,0.441,3290,0.169,3295,0.333,3298,0.169,3299,0.151,3314,0.247,3355,0.716,3364,0.286,3368,0.159,3376,0.58,3391,0.687,3392,0.169,3402,0.151,3405,0.136,3409,0.169,3424,0.132,3426,0.151,3429,1.752,3437,0.409,3443,0.159,3459,0.557,3578,0.814,3587,0.159,3609,0.159,3634,0.333,3647,0.313,3707,0.151,3760,0.145,3764,0.159,3793,0.169,3801,0.136,3803,0.169,3813,0.286,3836,0.298,3854,1.884,3865,0.441,3875,0.313,3984,0.286,3985,0.169,3986,0.649,4003,0.313,4022,1.76,4023,0.493,4029,0.14,4034,0.625,4035,0.169,4038,0.159,4047,0.26,4059,0.159,4075,0.169,4081,0.278,4110,0.159,4112,0.14,4113,0.333,4131,0.761,4135,0.298,4138,0.814,4140,0.891,4141,0.169,4144,0.159,4146,0.159,4156,0.313,4163,1.026,4167,0.169,4196,0.159,4204,0.132,4207,0.145,4210,0.145,4220,0.493,4221,0.276,4241,0.159,4244,0.169,4247,0.521,4250,0.493,4251,0.687,4257,0.169,4259,0.169,4280,0.83,4286,0.286,4307,0.136,4315,0.136,4332,0.14,4340,0.557,4341,0.313,4358,0.333,4366,3.04,4379,1.158,4380,1.102,4433,0.159,4449,0.169,4473,0.159,4474,0.159,4476,0.169,4485,0.151,4495,0.169,4497,0.14,4498,0.752,4508,0.169,4525,1.353,4546,0.169,4549,0.169,4566,0.169,4575,0.159,4583,0.169,4584,0.159,4620,0.61,4632,0.169,4640,0.169,4644,0.649,4664,0.159,4710,0.169,4735,0.169,4737,0.891,4738,0.169,4739,2.211,4743,0.169,4772,0.169,4773,0.169,4774,0.169,4775,0.8,4776,0.333,4777,0.169,4778,0.333,4779,0.169,4780,0.169,4786,0.752,4808,0.333,4820,0.333,4831,0.169,4841,0.169,4881,0.169,4883,0.169,4922,0.333,4938,0.159,4954,0.159,4972,0.441,4973,0.151,4974,0.151,4987,0.159,4993,0.663,5043,0.61,5078,0.145,5086,1.058,5113,0.151,5171,0.169,5215,0.159,5224,0.169,5233,0.313,5281,0.159,5296,0.8,5326,0.169,5371,0.333,5387,0.493,5418,0.169,5435,0.333,5579,0.649,5605,1.026,5606,1.996,5608,0.169,5623,0.313,5624,0.463,5627,0.169,5633,0.333,5638,0.169,5644,0.333,5646,0.333,5647,0.333,5650,1.092,5651,0.169,5695,0.333,5710,0.61,5721,0.493,5722,0.169,5723,0.333,5736,0.333,5738,0.169,5739,0.333,5742,0.169,5761,0.891,5765,0.333,5766,0.169,5770,0.169,5772,0.169,5840,3.534,5858,0.169,5880,0.948,5881,0.649,5882,1.092,5883,2.24,5884,4.259,5885,2.882,5886,0.649,5887,1.232,5888,1.503,5889,0.948,5890,1.232,5891,2.003,5892,0.8,5893,1.76,5894,0.333,5895,0.948,5896,0.364,5897,0.184,5898,0.184,5899,0.184,5900,0.184,5901,0.364,5902,0.184,5903,3.481,5904,3.314,5905,0.184,5906,0.184,5907,0.184,5908,1.092,5909,0.364,5910,0.184,5911,0.538,5912,0.364,5913,0.184,5914,0.184,5915,0.364,5916,0.184,5917,0.184,5918,0.184,5919,0.184,5920,0.184,5921,0.184,5922,0.184,5923,0.184,5924,0.184,5925,0.184,5926,0.184,5927,0.184,5928,0.184,5929,0.364,5930,0.184,5931,0.364,5932,0.364,5933,0.538,5934,0.184,5935,1.035,5936,0.184,5937,0.649,5938,0.8,5939,0.364,5940,0.364,5941,0.184,5942,0.184,5943,0.708,5944,0.364,5945,0.184,5946,0.184,5947,0.169,5948,0.169,5949,0.184,5950,0.184,5951,0.184,5952,0.184,5953,0.948,5954,0.364,5955,0.364,5956,0.333,5957,0.333,5958,1.035,5959,0.493,5960,0.493,5961,1.035,5962,0.493,5963,0.493,5964,0.538,5965,0.184,5966,0.184,5967,0.184,5968,0.874,5969,0.184,5970,0.184,5971,0.184,5972,0.184,5973,0.184,5974,0.184,5975,0.184,5976,0.184,5977,0.184,5978,0.184,5979,0.184,5980,0.184,5981,0.184,5982,0.184,5983,0.184,5984,0.184,5985,0.184,5986,0.184,5987,0.184,5988,0.364,5989,0.364,5990,0.184,5991,0.184,5992,0.184,5993,0.184,5994,0.184,5995,0.184,5996,0.184,5997,0.184,5998,0.184,5999,0.184,6000,0.184,6001,0.184,6002,0.184,6003,0.184,6004,0.333,6005,1.345,6006,0.538,6007,2.189,6008,1.192,6009,0.708,6010,0.364,6011,0.333,6012,0.184,6013,0.184,6014,0.184,6015,0.184,6016,0.184,6017,0.184,6018,0.184,6019,0.184,6020,0.184,6021,0.184,6022,0.184,6023,0.184,6024,0.184,6025,0.184,6026,0.538,6027,0.184,6028,0.184,6029,0.184,6030,0.184,6031,0.184,6032,0.184,6033,0.184,6034,0.184,6035,0.184,6036,0.184,6037,0.184,6038,0.364,6039,0.364,6040,0.184,6041,0.364,6042,0.364,6043,0.364,6044,1.192,6045,0.708,6046,0.184,6047,0.364,6048,0.184,6049,0.364,6050,0.364,6051,0.364,6052,1.64,6053,0.184,6054,0.538,6055,0.184,6056,0.184,6057,0.184,6058,0.169,6059,0.874,6060,0.708,6061,2.689,6062,0.874,6063,0.184,6064,0.184,6065,0.538,6066,0.538,6067,0.184,6068,0.184,6069,0.184,6070,0.184,6071,1.783,6072,0.874,6073,0.493,6074,0.364,6075,0.874,6076,1.035,6077,0.184,6078,0.364,6079,0.364,6080,0.184,6081,0.184,6082,0.364,6083,0.184,6084,0.184,6085,0.364,6086,0.364,6087,0.184,6088,0.184,6089,0.184,6090,0.184,6091,0.169,6092,0.364,6093,0.184,6094,0.184,6095,0.184,6096,0.364,6097,0.184,6098,0.184,6099,0.184,6100,0.184,6101,0.184,6102,0.184,6103,0.184,6104,0.184,6105,0.184,6106,0.184,6107,0.184,6108,0.184,6109,0.184,6110,0.184,6111,0.184,6112,0.184,6113,0.184,6114,0.364,6115,0.184,6116,0.184,6117,0.184,6118,0.184,6119,0.184,6120,0.184,6121,0.184,6122,0.184,6123,0.184,6124,0.184,6125,0.184,6126,0.169,6127,0.184,6128,0.184,6129,0.184,6130,0.184,6131,0.184,6132,0.364,6133,0.364,6134,0.184,6135,0.184,6136,0.184,6137,0.184,6138,0.184,6139,0.184,6140,0.184,6141,0.538,6142,0.184,6143,0.184,6144,0.184,6145,0.184,6146,0.184,6147,0.364,6148,0.184,6149,0.184,6150,0.184,6151,0.184,6152,0.184,6153,0.184,6154,0.333,6155,0.708,6156,0.184,6157,0.184,6158,0.184,6159,0.184,6160,0.184,6161,0.184,6162,0.184,6163,0.364,6164,0.184,6165,0.184,6166,0.184,6167,0.184,6168,0.184,6169,0.538,6170,0.538,6171,0.538,6172,0.538,6173,0.184,6174,0.184,6175,0.364,6176,0.184,6177,0.184,6178,0.184,6179,0.184,6180,0.184,6181,0.184,6182,0.184,6183,0.364,6184,0.364,6185,0.538,6186,0.184,6187,0.184,6188,0.184,6189,0.184,6190,0.184,6191,0.184,6192,0.184,6193,0.184,6194,0.184,6195,0.169,6196,0.184,6197,0.184,6198,0.184,6199,0.184,6200,0.184,6201,0.184,6202,0.184,6203,0.184,6204,0.184,6205,0.184,6206,0.184,6207,0.184,6208,0.184,6209,0.184,6210,0.184,6211,0.184,6212,0.538,6213,0.184,6214,0.184,6215,0.184,6216,0.184,6217,0.184,6218,1.345,6219,0.364,6220,0.538,6221,0.184,6222,0.169,6223,0.184,6224,0.184,6225,0.184,6226,0.184,6227,0.184,6228,0.184,6229,0.184,6230,0.184,6231,0.184,6232,0.364,6233,0.184,6234,0.364,6235,0.184,6236,0.184,6237,0.184,6238,0.184,6239,0.184,6240,0.184,6241,0.184,6242,0.184,6243,0.538,6244,0.184,6245,0.184,6246,0.364,6247,0.708,6248,0.184,6249,0.184,6250,0.184,6251,0.184,6252,0.184,6253,0.708,6254,0.184,6255,0.184,6256,0.184,6257,0.184,6258,0.184,6259,0.184,6260,0.184,6261,0.184,6262,0.364,6263,0.184,6264,0.364,6265,0.184,6266,0.184,6267,0.364,6268,0.184,6269,0.184,6270,0.184,6271,0.184,6272,0.184,6273,0.493,6274,0.184,6275,0.184,6276,0.874,6277,0.184,6278,0.364,6279,0.184,6280,0.184,6281,0.184,6282,0.184,6283,0.184,6284,0.538,6285,0.184,6286,0.364,6287,0.184,6288,0.184,6289,0.184,6290,0.364,6291,0.184,6292,0.184,6293,0.184,6294,0.184,6295,0.708,6296,0.184,6297,0.184,6298,0.184,6299,0.184,6300,0.184,6301,0.364,6302,0.364,6303,0.708,6304,0.184,6305,0.364,6306,0.184,6307,0.184,6308,0.184,6309,0.184,6310,0.184,6311,0.364,6312,0.184,6313,0.538,6314,0.538,6315,0.538,6316,0.538,6317,0.538,6318,0.538,6319,0.184,6320,0.184,6321,0.364,6322,0.184,6323,0.184,6324,0.184,6325,0.184,6326,0.184,6327,0.184,6328,0.184,6329,0.184,6330,0.184,6331,0.184,6332,0.364,6333,0.538,6334,0.184,6335,0.184,6336,0.184,6337,0.184,6338,0.184,6339,0.184,6340,0.184,6341,0.364,6342,0.184,6343,0.184,6344,0.184,6345,0.184,6346,0.184,6347,0.184,6348,0.184,6349,0.364,6350,0.184,6351,0.184,6352,0.184,6353,0.184,6354,0.184,6355,0.184,6356,0.184,6357,0.184,6358,0.184,6359,0.159,6360,0.184,6361,0.184,6362,0.184,6363,0.184,6364,0.184,6365,0.184,6366,0.184,6367,0.184,6368,0.364,6369,0.364,6370,0.364,6371,0.184,6372,0.184,6373,0.184,6374,0.184,6375,0.364,6376,0.184,6377,0.184,6378,0.184,6379,0.184,6380,0.184,6381,0.184,6382,0.184,6383,0.708,6384,0.184,6385,0.184,6386,0.169,6387,0.184,6388,0.184,6389,0.184,6390,0.184,6391,0.184,6392,0.184,6393,0.184,6394,0.169,6395,0.538,6396,0.184,6397,0.364,6398,0.184,6399,0.364,6400,0.184,6401,0.184,6402,0.184,6403,0.184,6404,0.184,6405,0.538,6406,0.184,6407,0.184,6408,0.184,6409,0.184]],["component/61",[6,0.301]],["title/62-1",[4497,60.87]],["name/62-1",[]],["text/62-1",[]],["component/62-1",[]],["title/62-2",[100,26.441,860,39.771,1242,29.722]],["name/62-2",[]],["text/62-2",[]],["component/62-2",[]],["title/62-3",[646,23.371,1482,39.799]],["name/62-3",[]],["text/62-3",[]],["component/62-3",[]],["title/62-4",[990,25.072,1427,35.096]],["name/62-4",[]],["text/62-4",[]],["component/62-4",[]],["title/62-5",[1111,31.831,1262,33.895]],["name/62-5",[]],["text/62-5",[]],["component/62-5",[]],["title/62-6",[990,25.072,4201,42.798]],["name/62-6",[]],["text/62-6",[]],["component/62-6",[]],["title/62-7",[100,26.441,575,28.389,4936,43.754]],["name/62-7",[]],["text/62-7",[]],["component/62-7",[]],["title/62",[100,26.441,646,19.792,647,26.695]],["name/62",[2296,1.111]],["text/62",[6,0.213,19,0.809,21,0.636,23,0.518,35,0.732,37,1.311,38,1.074,41,1.061,52,2.53,63,1.387,69,4.238,70,0.518,76,1.798,78,0.967,100,4.219,102,3.176,114,1.685,115,1.299,116,2.892,127,1.215,129,2.655,137,0.646,141,0.5,161,1.176,162,0.611,166,0.523,170,0.678,174,4.776,175,0.457,182,0.438,186,0.717,187,0.932,191,0.603,195,0.574,201,0.976,206,0.667,221,2.3,222,1.374,225,0.556,308,1.431,319,0.995,320,0.646,342,0.636,343,0.667,346,2.387,353,1.664,359,0.865,365,0.893,369,1.232,371,1.016,372,1.416,373,2.691,374,0.678,375,0.518,385,2.349,400,1.299,508,2.68,516,1.016,519,0.717,560,0.483,561,1.311,567,2.47,575,1.038,578,0.947,580,0.544,584,0.732,590,1.928,591,1.128,594,0.886,628,1.074,630,1.417,631,2.52,635,0.871,639,1.387,646,3.469,647,2.245,648,3.607,649,0.5,651,1.038,653,0.932,654,0.595,659,4.035,662,2.52,671,0.878,675,0.703,678,0.528,687,0.636,698,0.518,706,0.627,711,0.556,714,1.128,723,0.967,727,0.581,730,1.008,734,2.139,741,0.518,747,1.387,755,4.703,758,1.544,765,0.627,775,0.55,783,0.748,792,2.3,798,1.782,801,0.656,805,0.627,810,1.387,812,0.544,820,0.595,823,4.515,835,3.638,847,0.949,860,6.613,863,0.611,873,0.787,877,5.835,888,0.646,916,0.787,925,1.417,928,0.667,933,1.114,938,0.985,945,0.603,946,0.908,973,0.995,979,1.513,985,1.061,988,0.732,990,3.97,992,2.934,993,2.394,994,6.169,999,0.717,1005,0.835,1015,0.732,1021,0.703,1028,0.574,1032,0.568,1053,0.513,1062,0.732,1070,0.69,1082,2.985,1088,2.667,1096,4.01,1098,0.678,1102,0.556,1106,1.144,1110,4.523,1111,4.301,1112,3.125,1113,2.047,1122,3.669,1127,0.656,1132,2.754,1149,2.552,1152,0.717,1175,2.16,1184,1.114,1187,0.611,1189,0.902,1191,0.767,1192,0.595,1197,4.856,1225,0.69,1226,1.544,1235,1.909,1242,4.942,1258,1.016,1261,1.144,1262,4.712,1263,0.636,1267,1.515,1274,0.588,1279,1.694,1290,4.05,1309,1.194,1323,0.574,1326,0.574,1335,0.619,1338,3.455,1340,0.603,1365,0.603,1391,0.678,1427,4.211,1435,1.212,1439,1.886,1492,6.932,1495,0.646,1580,0.767,1582,3.805,1640,0.656,1687,0.656,1690,0.767,1770,1.454,1841,0.835,1857,2.013,1878,0.732,1891,0.656,1908,0.748,1933,1.975,1934,0.703,1946,1.299,1953,0.865,2002,0.835,2085,1.232,2162,0.787,2178,0.732,2185,0.835,2195,0.748,2217,0.865,2240,0.902,2296,1.886,2297,0.809,2319,0.767,2339,2.989,2347,4.897,2349,1.325,2403,0.787,2440,1.299,2460,6.048,2461,0.69,2478,1.325,2482,0.809,2486,6.337,2546,1.417,2609,0.809,2803,1.811,2806,2.989,2810,3.569,2816,0.835,2855,0.787,2929,0.767,2966,0.947,2980,5.443,3026,1.383,3081,6.459,3113,0.732,3157,1.928,3195,2.085,3337,0.767,3364,0.865,3394,1.383,3419,0.787,3424,1.454,3429,0.717,4008,0.947,4131,1.299,4184,0.809,4201,1.847,4221,0.835,4250,0.767,4291,0.902,4300,0.902,4307,1.496,4315,0.809,4366,0.809,4455,0.865,4586,0.947,4709,0.947,4936,4.056,4937,0.902,4945,0.902,4946,3.793,4947,1.751,4948,1.863,4949,1.863,4950,1.863,4951,2.597,4952,1.008,4953,1.008,4954,2.44,4956,0.865,4967,0.902,4971,0.865,4976,4.227,4977,0.947,4979,2.597,4981,3.393,4985,6.953,5002,0.902,5003,1.008,5005,2.323,5010,1.666,5012,1.863,5013,1.008,5015,5.443,5017,5.472,5018,2.893,5019,1.863,5020,3.393,5021,2.597,5022,1.008,5023,2.44,5024,1.863,5025,1.008,5026,1.008,5027,1.008,5028,1.008,5029,1.008,5030,0.947,5031,1.008,5032,1.008,5035,1.008,5036,1.008,5041,1.008,5042,1.863,5043,0.947,5044,1.863,5132,1.008,5664,1.751,5903,0.947,5904,0.902,6359,2.44,6410,1.101,6411,1.101,6412,8.43,6413,5.118,6414,2.835,6415,1.101,6416,1.101,6417,1.101,6418,1.008,6419,1.008,6420,1.008,6421,1.008,6422,1.008,6423,1.863,6424,1.101,6425,4.141,6426,3.793,6427,1.101,6428,2.597,6429,1.863,6430,1.008,6431,1.863,6432,1.008,6433,2.034,6434,2.034,6435,1.008,6436,1.008,6437,1.008,6438,1.008,6439,1.863,6440,1.008,6441,1.008,6442,1.101,6443,1.101,6444,2.835,6445,1.101,6446,1.101,6447,2.835,6448,1.101,6449,1.101,6450,1.101,6451,1.101,6452,2.835,6453,1.101,6454,1.101,6455,1.101,6456,1.101,6457,1.101,6458,1.101,6459,1.101,6460,2.034,6461,1.101,6462,1.101,6463,1.101,6464,1.101,6465,1.101,6466,1.101]],["component/62",[6,0.301]],["title/63-1",[4497,60.87]],["name/63-1",[]],["text/63-1",[]],["component/63-1",[]],["title/63-2",[646,23.371,1482,39.799]],["name/63-2",[]],["text/63-2",[]],["component/63-2",[]],["title/63-3",[990,25.072,1427,35.096]],["name/63-3",[]],["text/63-3",[]],["component/63-3",[]],["title/63-4",[1111,31.831,1262,33.895]],["name/63-4",[]],["text/63-4",[]],["component/63-4",[]],["title/63-5",[990,25.072,4201,42.798]],["name/63-5",[]],["text/63-5",[]],["component/63-5",[]],["title/63",[101,31.282,646,19.792,647,26.695]],["name/63",[2329,1.136]],["text/63",[6,0.365,23,0.887,35,1.253,37,0.871,38,0.994,52,1.786,63,2.158,69,4.697,70,0.887,74,1.481,76,1.694,101,5.764,102,2.761,114,2.17,115,1.513,116,1.438,127,1.415,129,3.397,137,3.11,141,0.855,162,1.045,166,0.895,170,1.161,174,4.821,186,1.227,187,2.02,195,0.983,221,3.451,222,2.137,308,1.667,319,1.616,339,0.879,342,1.089,346,1.685,359,1.481,365,0.827,369,1.141,371,1.65,373,2.301,374,1.161,375,0.887,385,3.524,400,2.11,516,0.941,560,0.827,561,0.871,567,3.502,592,0.994,594,1.438,628,1.743,630,2.3,631,2.235,635,1.415,639,0.922,646,3.762,647,3.183,648,3.398,649,0.855,651,0.961,653,1.513,659,4.43,662,2.798,671,1.427,678,1.585,698,0.887,714,1.045,723,1.57,727,1.514,755,4.857,765,1.074,775,0.941,792,1.227,798,1.667,810,1.616,812,0.931,820,1.019,823,5.709,835,4.157,841,1.347,873,1.347,877,4.774,888,1.106,927,1.227,938,1.6,973,1.616,979,2.27,985,0.983,990,4.329,992,3.778,994,6.501,1005,1.43,1015,1.253,1032,0.972,1053,0.879,1062,1.253,1070,1.181,1082,1.006,1087,2.035,1088,3.02,1096,3.485,1098,1.161,1106,1.059,1110,4.987,1111,4.907,1112,3.209,1113,2.619,1122,3.774,1127,1.123,1149,3.306,1152,1.227,1175,1.723,1184,1.032,1187,1.045,1192,1.019,1197,3.264,1209,1.161,1235,1.019,1258,0.941,1261,2.479,1262,4.114,1263,1.089,1266,0.983,1267,1.006,1274,1.006,1290,4.209,1309,1.939,1323,0.983,1326,0.983,1335,1.059,1338,1.91,1427,2.83,1435,1.969,1492,1.43,1495,1.106,1582,3.472,1857,2.514,1878,2.933,1934,1.203,2002,1.43,2085,1.141,2162,1.347,2185,1.43,2214,2.197,2217,1.481,2319,1.312,2329,2.999,2339,2.11,2347,4.511,2349,1.227,2440,1.203,2460,2.11,2482,2.429,2486,6.075,2546,2.3,2609,1.385,2755,1.089,2799,2.507,2810,3.384,2929,1.312,3026,2.246,3074,4.307,3075,1.43,3113,1.253,3157,2.999,3337,1.312,3394,2.246,3419,1.347,4112,1.43,4131,1.203,4163,2.843,4184,1.385,4201,3.451,4204,1.347,4250,1.312,4366,1.385,4379,1.621,4380,1.544,4916,3.025,4937,1.544,4945,1.544,4956,1.481,4967,1.544,4971,1.481,4976,4.937,4981,4.341,4985,1.621,5002,1.544,5005,2.706,5010,1.544,5015,5.435,5018,2.706,5020,2.706,5053,1.726,5064,1.726,5071,3.025,5074,3.025,5664,2.843,5904,1.544,5959,1.726,5960,1.726,5962,1.726,5963,1.726,6359,1.621,6413,6.953,6418,1.726,6419,1.726,6420,1.726,6421,1.726,6422,1.726,6423,1.726,6426,4.853,6428,3.025,6429,1.726,6430,1.726,6431,1.726,6432,1.726,6435,1.726,6436,1.726,6437,1.726,6438,1.726,6439,3.025,6440,1.726,6441,1.726,6467,1.884,6468,1.884,6469,9.846,6470,1.884,6471,3.303,6472,1.884,6473,1.884,6474,8.606,6475,5.298,6476,1.884,6477,3.303,6478,1.884,6479,1.884,6480,1.884,6481,3.303,6482,3.303,6483,1.884,6484,1.884,6485,1.884]],["component/63",[6,0.301]],["title/64",[646,23.371,647,31.523]],["name/64",[572,0.752]],["text/64",[5,4.095,6,2.145,63,3.796,65,3.114,76,3.985,99,4.906,100,4.668,101,5.522,114,2.794,118,2.647,127,3.324,155,2.46,208,2.992,222,3.759,233,2.818,303,3.905,353,4.554,365,4.312,373,4.048,385,6.9,400,3.49,524,2.379,560,4.312,567,5.689,580,3.835,591,3.031,594,2.379,608,2.918,631,3.806,635,2.341,646,4.206,647,5.53,648,4.256,658,4.702,671,2.36,684,4.018,710,2.621,727,1.561,747,2.673,772,3.207,810,2.673,820,2.954,861,2.818,945,4.249,953,3.425,954,3.366,985,2.851,990,2.961,994,4.865,1046,3.309,1122,2.481,1146,5.657,1149,4.428,1252,3.49,1256,2.992,1259,4.304,1276,3.072,1279,2.621,1427,2.918,1582,3.378,1640,4.625,1695,3.715,1836,3.559,2473,3.114,2486,4.956,2768,3.309,2872,3.559,3044,4.476,3045,5.004,3046,5.004,3049,4.296,3061,4.476,3224,4.018,3417,4.702,3643,4.702,5078,7.095,5086,4.296]],["component/64",[6,0.301]],["title/65-1",[129,26.441,979,23.84,1934,35.539]],["name/65-1",[]],["text/65-1",[]],["component/65-1",[]],["title/65-2",[1934,41.967,2934,43.699]],["name/65-2",[]],["text/65-2",[]],["component/65-2",[]],["title/65-3",[365,18.698,526,28.966,1934,27.206,2460,27.206,2798,30.446]],["name/65-3",[]],["text/65-3",[]],["component/65-3",[]],["title/65-4",[580,27.503,635,23.84,1934,35.539]],["name/65-4",[]],["text/65-4",[]],["component/65-4",[]],["title/65",[646,19.792,1256,30.469,2473,31.718]],["name/65",[3709,0.715,5079,0.833]],["text/65",[0,0.747,6,1.395,21,0.809,23,2.006,37,1.969,41,1.811,44,0.604,49,0.848,55,1.765,62,2.309,63,2.945,66,1.685,69,4.518,76,2.483,78,2.344,102,3.302,109,0.678,114,2.327,115,1.161,116,2.148,127,2.579,129,4.577,135,0.911,137,0.821,140,1.405,155,1.141,162,1.405,167,0.975,169,1.811,173,1.699,174,4.706,175,3.126,182,0.556,186,0.911,187,0.641,207,0.747,222,4.539,225,1.279,233,4.162,240,0.952,243,1.322,308,0.706,344,0.809,346,0.714,353,2.038,362,2.223,365,1.112,368,2.321,369,2.581,371,1.265,373,1.322,516,0.699,524,2.148,546,1.444,560,0.614,561,1.171,566,1.265,580,2.438,591,0.776,592,2.91,594,2.814,596,1.765,608,0.747,618,0.894,623,0.739,631,3.403,633,2.038,635,1.487,646,3.381,647,2.367,648,2.846,649,1.576,651,2.813,653,1.161,659,1.265,662,1.069,667,0.787,676,0.776,678,3.101,705,2.139,710,2.888,714,2.363,727,2.435,734,0.848,738,1.1,747,0.685,750,0.911,751,1.029,755,2.333,758,1.062,763,1.723,772,0.821,775,1.734,777,0.647,781,0.877,785,1.465,787,1.37,810,0.685,835,3.296,847,1.619,861,2.198,863,0.776,885,0.911,889,1.685,912,0.678,922,1.465,924,0.877,937,0.975,941,0.931,948,0.757,973,2.085,979,4.178,989,0.975,990,2.871,992,0.877,1013,1.029,1021,0.894,1024,2.395,1025,0.975,1028,1.811,1032,0.722,1037,1.901,1063,0.975,1076,0.931,1082,0.747,1088,2.812,1093,0.952,1096,1.465,1106,0.787,1110,0.766,1111,2.064,1113,2.975,1124,0.975,1146,2.177,1149,3.544,1152,2.261,1157,0.757,1175,1.322,1176,0.894,1183,1.353,1186,1.65,1188,1.65,1192,1.37,1209,2.624,1212,0.877,1227,0.739,1235,1.877,1241,0.931,1244,1.561,1253,1.618,1256,1.387,1258,3.006,1259,3.058,1260,3.578,1261,4.23,1263,0.809,1266,0.73,1267,2.276,1271,1.405,1274,0.747,1276,2.395,1277,0.894,1279,1.215,1281,1.387,1290,3.177,1291,0.877,1293,1.51,1316,0.73,1324,2.361,1338,1.465,1352,0.848,1366,1.901,1372,0.975,1379,1.863,1410,3.667,1413,0.952,1427,1.353,1435,1.51,1438,5.927,1439,5.918,1440,3.941,1441,4.335,1480,0.931,1524,3.646,1640,2.069,1695,0.952,1764,1.062,1773,1.863,1777,1.1,1784,0.834,1832,5.146,1843,2.667,1853,0.975,1857,1.444,1858,1.535,1872,1.146,1875,1.618,1891,1.51,1894,0.975,1934,6.743,1946,0.894,2002,1.062,2085,1.535,2098,0.952,2128,2.309,2164,1.282,2166,1.204,2195,1.723,2212,2.895,2214,1.685,2339,0.894,2347,3.355,2460,6.489,2473,2.812,2483,4.042,2496,1.029,2541,1.146,2544,1.062,2653,4.054,2667,0.975,2759,1.1,2768,3.339,2798,4.62,2799,3.233,2803,2.721,2806,3.521,2860,1.923,2872,3.591,2927,3.902,2931,1.1,2934,4.298,3143,2.988,3181,1.146,3195,1.029,3196,1.146,3284,1,3314,0.952,3413,3.35,3429,0.911,3636,1.204,3801,2.553,3984,2.73,4034,1,4131,0.894,4137,1.029,4175,2.181,4176,2.181,4179,2.844,4180,1.204,4181,1.204,4182,2.988,4183,2.988,4204,1,4205,1.204,4215,2.988,4218,1.204,4219,1.282,4221,1.062,4222,1.204,4228,1.282,4229,2.181,4231,1.204,4232,1.204,4233,1.204,4234,1.282,4280,0.975,4366,3.133,4380,2.076,4739,6.476,5086,1.992,5159,4.518,5903,2.988,5904,3.491,5908,2.321,5937,5.513,5938,2.321,5947,1.282,5948,1.282,5953,1.282,5956,1.282,5957,1.282,6004,4.518,6011,1.282,6486,1.399,6487,2.533,6488,2.533,6489,2.533,6490,2.533,6491,6.857,6492,1.399,6493,2.533,6494,2.533,6495,1.399,6496,1.399,6497,1.399,6498,1.399,6499,2.533,6500,1.399,6501,1.399,6502,4.933,6503,5.513,6504,2.533,6505,1.399,6506,1.399,6507,2.533,6508,1.399,6509,1.399,6510,1.399,6511,1.399,6512,2.533,6513,1.399,6514,1.399,6515,1.399,6516,1.399,6517,1.399,6518,1.399,6519,2.533,6520,1.399,6521,1.399,6522,3.472,6523,1.399,6524,1.399,6525,1.399,6526,1.399]],["component/65",[6,0.301]],["title/66-1",[1256,35.979,1582,28.607]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["title/66-2",[3352,65.719]],["name/66-2",[]],["text/66-2",[]],["component/66-2",[]],["title/66-3",[3373,69.033]],["name/66-3",[]],["text/66-3",[]],["component/66-3",[]],["title/66-4",[3353,69.033]],["name/66-4",[]],["text/66-4",[]],["component/66-4",[]],["title/66-5",[102,25.489,635,23.84,3352,45.589]],["name/66-5",[]],["text/66-5",[]],["component/66-5",[]],["title/66-6",[3355,65.719]],["name/66-6",[]],["text/66-6",[]],["component/66-6",[]],["title/66-7",[2370,63.073]],["name/66-7",[]],["text/66-7",[]],["component/66-7",[]],["title/66-8",[3357,65.719]],["name/66-8",[]],["text/66-8",[]],["component/66-8",[]],["title/66-9",[3620,69.033]],["name/66-9",[]],["text/66-9",[]],["component/66-9",[]],["title/66-10",[3626,69.033]],["name/66-10",[]],["text/66-10",[]],["component/66-10",[]],["title/66-11",[102,25.489,635,23.84,3357,45.589]],["name/66-11",[]],["text/66-11",[]],["component/66-11",[]],["title/66-12",[886,40.474,6527,65.701]],["name/66-12",[]],["text/66-12",[]],["component/66-12",[]],["title/66-13",[3359,65.719]],["name/66-13",[]],["text/66-13",[]],["component/66-13",[]],["title/66-14",[635,28.152,3359,53.834]],["name/66-14",[]],["text/66-14",[]],["component/66-14",[]],["title/66-15",[6528,73.47]],["name/66-15",[]],["text/66-15",[]],["component/66-15",[]],["title/66-16",[6529,73.47]],["name/66-16",[]],["text/66-16",[]],["component/66-16",[]],["title/66-17",[6530,73.47]],["name/66-17",[]],["text/66-17",[]],["component/66-17",[]],["title/66-18",[6531,73.47]],["name/66-18",[]],["text/66-18",[]],["component/66-18",[]],["title/66-19",[6532,73.47]],["name/66-19",[]],["text/66-19",[]],["component/66-19",[]],["title/66-20",[6533,73.47]],["name/66-20",[]],["text/66-20",[]],["component/66-20",[]],["title/66-21",[6534,73.47]],["name/66-21",[]],["text/66-21",[]],["component/66-21",[]],["title/66-22",[6535,73.47]],["name/66-22",[]],["text/66-22",[]],["component/66-22",[]],["title/66-23",[6536,73.47]],["name/66-23",[]],["text/66-23",[]],["component/66-23",[]],["title/66-24",[3337,55.865]],["name/66-24",[]],["text/66-24",[]],["component/66-24",[]],["title/66-25",[727,22.924]],["name/66-25",[]],["text/66-25",[]],["component/66-25",[]],["title/66-26",[3361,69.033]],["name/66-26",[]],["text/66-26",[]],["component/66-26",[]],["title/66",[1032,28.704,1149,21.375,1582,24.226]],["name/66",[1582,0.727]],["text/66",[0,0.202,2,0.264,6,1.116,13,1.918,15,0.389,21,0.808,32,1.762,35,0.252,37,2.723,38,2.246,41,1.808,54,0.264,63,0.683,65,1.585,69,3.748,70,0.347,76,1.634,77,0.279,78,1.321,79,0.347,80,0.198,85,0.579,90,1.898,92,0.2,93,1.682,102,2.257,109,0.824,114,3.614,115,0.779,116,1.509,118,0.357,127,2.111,129,0.808,133,3.535,137,0.432,140,0.21,141,1.148,145,1.396,155,0.171,162,0.944,163,1.936,173,0.974,174,3.319,175,0.827,182,1.378,183,0.574,184,0.471,187,0.493,190,0.426,191,2.013,195,0.729,201,0.353,202,0.651,204,0.604,206,0.651,207,0.909,208,0.207,213,1.311,219,2.88,225,0.543,242,0.559,253,0.207,284,0.226,308,1.277,318,0.123,319,1.897,320,0.222,326,0.287,337,0.48,338,0.929,339,0.344,342,0.808,343,0.446,344,0.426,346,2.942,351,0.252,358,0.663,362,1.32,364,0.242,365,0.874,367,1.442,370,2.992,371,0.537,372,2.032,373,0.561,375,0.506,376,0.579,378,4.412,505,0.715,510,0.389,511,0.247,512,2.066,516,1.508,523,0.631,524,1.314,526,0.501,527,0.631,531,0.634,533,0.326,548,1.464,550,0.347,553,0.892,556,0.264,558,0.222,559,0.31,560,1.425,561,2.779,564,0.237,566,1.388,571,0.226,572,0.766,573,0.446,580,1.374,588,2.076,591,1.104,592,0.898,594,2.004,599,1.238,600,0.589,605,1.014,607,0.749,608,0.746,613,0.326,619,0.749,628,1.467,629,0.216,630,1.387,631,1.716,635,0.971,638,0.279,639,0.974,640,2.258,643,1.159,646,2.775,647,0.182,648,0.425,649,1.262,651,2.261,652,0.613,653,0.493,654,0.205,662,3.106,663,0.95,666,0.446,667,0.213,671,1.674,674,1.829,678,0.516,679,0.513,681,1.108,686,1.351,688,0.237,691,0.229,697,1.098,698,3.823,700,0.258,701,0.998,706,1.135,710,0.182,711,1.403,713,3.63,719,0.298,720,0.398,723,1.077,724,0.998,726,1.251,727,2.542,731,0.816,735,0.237,738,2.186,740,0.31,741,3.851,743,0.247,747,0.974,749,0.298,750,0.247,752,0.279,755,0.765,763,1.541,765,0.796,768,1.631,773,3.574,774,0.252,775,2.46,777,1.048,782,0.233,783,0.258,784,3.176,785,0.219,787,1.874,792,0.701,796,0.749,797,1.62,798,1.639,800,1.712,801,0.226,807,0.816,808,0.95,812,1.492,820,1.368,822,0.189,828,2.072,831,0.542,835,1.09,843,1.448,847,0.344,849,2.044,855,1.631,863,1.403,866,0.542,870,0.247,874,0.49,877,2.978,878,0.881,880,1.354,881,0.271,885,0.247,886,4.764,887,0.229,899,1.183,905,0.846,910,0.191,912,0.357,915,2.171,921,0.527,926,0.247,927,1.647,928,0.229,929,0.521,933,0.765,938,1.462,941,2.445,944,2.43,945,0.932,946,1.129,948,0.398,949,0.49,956,0.527,958,0.233,966,1.183,973,1.109,979,3.343,980,0.816,983,0.579,986,0.439,988,0.252,990,2.101,993,0.219,999,0.48,1011,0.446,1015,1.682,1022,1.558,1023,0.252,1024,0.785,1028,0.729,1032,0.878,1037,2.781,1042,0.347,1044,1.157,1046,0.229,1052,2.46,1053,0.502,1055,0.2,1064,0.347,1070,0.237,1078,0.326,1079,0.31,1081,0.264,1082,1.735,1085,0.271,1087,2.836,1088,0.42,1096,0.808,1098,0.233,1100,0.252,1102,0.543,1106,0.414,1107,2.074,1110,0.589,1111,1.462,1113,1.713,1114,2.053,1118,0.31,1122,0.488,1132,2.445,1137,1.087,1138,0.298,1142,0.247,1146,0.237,1149,0.413,1153,0.229,1154,0.298,1157,0.582,1173,0.846,1174,1.586,1175,1.45,1176,0.242,1180,1.338,1182,0.973,1183,4.944,1184,0.589,1185,2.262,1186,0.35,1187,1.257,1188,0.511,1191,0.264,1192,0.398,1194,2.272,1195,0.613,1197,0.233,1206,0.237,1214,0.326,1218,0.252,1221,0.816,1224,0.471,1225,0.876,1226,0.816,1227,2.339,1235,0.582,1241,0.252,1242,1.485,1244,0.454,1248,0.95,1253,0.687,1257,0.326,1258,0.537,1260,0.384,1262,0.195,1266,0.888,1267,0.202,1269,0.279,1270,0.439,1271,0.21,1274,0.394,1279,0.816,1281,2.862,1283,1.667,1289,0.229,1290,0.2,1293,1.508,1299,0.258,1309,0.432,1313,0.264,1316,1.808,1317,0.252,1318,1.756,1319,0.264,1320,1.919,1321,0.527,1322,1.216,1323,0.561,1324,1.89,1326,0.384,1327,0.881,1335,0.414,1337,2.942,1338,0.808,1341,0.264,1344,5.336,1348,0.846,1351,1.966,1352,0.229,1354,0.674,1356,0.287,1365,4.235,1366,0.403,1372,1.579,1378,0.222,1381,1.351,1382,0.769,1391,0.233,1394,0.216,1397,0.49,1398,0.791,1405,0.279,1410,0.252,1411,0.892,1422,0.264,1474,0.247,1482,0.229,1499,0.634,1501,0.998,1504,0.271,1507,0.998,1517,0.769,1552,2.983,1553,0.559,1555,0.264,1577,0.701,1580,0.264,1582,5.14,1635,0.384,1636,4.38,1647,0.264,1648,0.403,1651,1.72,1654,3.454,1657,0.287,1662,1.782,1663,0.846,1664,0.298,1670,0.279,1675,0.229,1687,3.282,1690,0.749,1702,3.485,1703,1.667,1704,3.176,1720,0.527,1721,0.634,1724,5.972,1727,0.501,1773,2.22,1774,0.347,1778,2.789,1783,0.49,1784,1.351,1785,1.579,1787,0.237,1799,0.287,1829,1.731,1836,0.247,1843,2.489,1850,0.347,1853,0.749,1857,0.796,1861,0.597,1866,0.279,1880,0.604,1891,0.439,1908,0.258,1913,0.462,1916,0.264,1937,0.769,1939,0.527,1942,0.298,1943,0.287,1946,0.471,1953,0.579,1970,2.56,1995,1.714,2008,0.542,2038,0.298,2041,0.264,2042,1.919,2045,2.627,2058,2.177,2085,0.446,2090,1.951,2092,0.298,2098,0.731,2099,0.984,2121,0.559,2125,0.701,2184,0.279,2185,0.287,2196,4.147,2212,0.631,2216,0.264,2223,0.91,2243,0.279,2312,0.513,2319,0.513,2325,0.604,2334,0.252,2349,1.297,2354,0.579,2370,0.579,2395,3.147,2403,0.271,2427,0.347,2440,0.471,2441,0.298,2461,0.876,2471,0.326,2477,0.326,2483,0.31,2577,0.846,2586,0.279,2600,3.486,2646,0.604,2654,0.252,2655,0.326,2656,1.951,2658,0.513,2672,0.998,2682,0.271,2754,0.347,2798,0.998,2814,0.287,2849,2.554,2891,0.287,2937,0.31,3049,0.298,3052,0.326,3084,0.326,3091,2.072,3118,0.31,3119,0.326,3157,0.258,3180,0.326,3187,0.264,3214,0.347,3216,0.298,3220,0.298,3221,0.326,3222,0.579,3224,0.791,3230,0.634,3274,0.634,3329,4.739,3330,0.926,3331,3.948,3333,0.298,3334,1.72,3335,0.604,3336,2.473,3337,0.973,3339,0.634,3341,2.598,3342,0.326,3343,0.31,3344,2.072,3345,0.326,3346,0.347,3352,1.857,3353,1.951,3354,0.347,3355,5.021,3356,2.044,3357,4.399,3358,0.985,3359,4.925,3361,1.464,3364,1.782,3365,0.347,3367,4.216,3373,2.392,3376,0.31,3377,2.765,3383,0.347,3393,0.675,3394,1.89,3395,0.347,3397,0.347,3398,3.551,3405,0.542,3411,3.175,3412,2.317,3418,0.347,3425,0.326,3429,0.48,3430,0.279,3436,0.675,3437,0.816,3441,0.347,3442,3.551,3443,0.926,3444,0.347,3445,0.985,3446,0.347,3447,0.347,3448,0.347,3449,0.347,3450,0.347,3451,0.347,3458,2.317,3459,0.298,3462,1.824,3470,0.347,3472,1.279,3473,0.347,3474,0.634,3475,0.985,3478,0.347,3479,0.347,3480,0.675,3482,1.824,3485,0.31,3486,0.347,3487,0.347,3488,0.347,3489,0.634,3491,0.347,3493,0.675,3496,0.675,3498,0.985,3500,0.675,3503,0.675,3505,0.675,3507,1.279,3510,0.675,3512,2.392,3517,0.347,3571,0.347,3572,0.675,3573,0.347,3574,0.347,3575,0.347,3576,0.347,3577,0.347,3578,0.846,3579,0.675,3580,0.347,3581,0.347,3585,1.558,3587,0.326,3589,0.347,3590,0.347,3592,0.347,3595,0.985,3597,0.347,3600,0.675,3603,0.347,3607,0.347,3609,2.177,3610,6.885,3614,0.347,3620,4.24,3621,0.347,3622,1.279,3624,0.985,3626,3.164,3628,0.347,3674,1.631,3764,0.326,3790,0.347,3838,0.791,3865,0.31,3867,0.985,4038,1.202,4047,0.271,4112,0.287,4201,0.247,4229,0.326,4247,0.279,4292,0.347,4395,0.326,4440,0.634,4481,0.347,4485,0.604,4769,1.202,4947,0.326,4958,0.326,4971,0.579,5086,0.846,5414,0.347,5443,0.675,5456,0.347,5461,0.347,5464,0.675,5489,0.675,5531,0.347,5553,0.347,5566,0.287,5884,0.634,5891,0.31,6058,1.824,6073,0.347,6126,0.347,6154,0.675,6195,0.347,6222,0.347,6273,0.347,6394,0.347,6528,0.985,6529,2.076,6530,3.551,6531,1.558,6532,1.558,6533,0.985,6534,1.824,6535,4.06,6536,2.076,6537,0.379,6538,0.379,6539,0.379,6540,5.369,6541,3.247,6542,0.379,6543,0.379,6544,0.379,6545,0.379,6546,0.379,6547,0.379,6548,0.737,6549,0.379,6550,0.737,6551,0.737,6552,0.379,6553,0.379,6554,0.737,6555,0.379,6556,0.379,6557,0.379,6558,0.379,6559,0.379,6560,0.379,6561,0.379,6562,0.379,6563,0.379,6564,0.379,6565,0.379,6566,0.379,6567,0.379,6568,0.379,6569,0.379,6570,0.379,6571,1.075,6572,0.379,6573,0.379,6574,1.397,6575,0.379,6576,0.379,6577,0.379,6578,0.379,6579,0.379,6580,0.379,6581,0.379,6582,1.397,6583,0.379,6584,0.379,6585,0.379,6586,0.379,6587,0.737,6588,0.379,6589,0.379,6590,0.737,6591,0.379,6592,0.379,6593,0.379,6594,0.737,6595,0.379,6596,0.379,6597,0.379,6598,0.379,6599,0.379,6600,0.379,6601,0.379,6602,0.379,6603,0.379,6604,0.379,6605,0.379,6606,0.379,6607,0.379,6608,0.379,6609,0.379,6610,0.379,6611,0.379,6612,0.379,6613,0.379,6614,0.379,6615,0.379,6616,2.266,6617,1.075,6618,1.397,6619,0.379,6620,0.379,6621,0.379,6622,0.379,6623,0.379,6624,0.737,6625,0.737,6626,0.379,6627,0.379,6628,0.379,6629,0.379,6630,0.379,6631,0.379,6632,0.379,6633,0.379,6634,3.676,6635,0.737,6636,1.701,6637,0.379,6638,0.379,6639,0.379,6640,1.397,6641,1.075,6642,1.397,6643,1.397,6644,1.701,6645,0.379,6646,1.701,6647,0.737,6648,0.737,6649,0.737,6650,0.379,6651,0.379,6652,0.379,6653,0.379,6654,0.379,6655,0.379,6656,0.379,6657,0.379,6658,0.379,6659,0.379,6660,0.379,6661,4.069,6662,0.737,6663,0.737,6664,0.379,6665,2.266,6666,1.991,6667,1.991,6668,2.266,6669,1.991,6670,5.506,6671,1.991,6672,0.379,6673,0.379,6674,0.379,6675,0.379,6676,0.379,6677,0.379,6678,0.379,6679,0.379,6680,0.379,6681,0.379,6682,0.379,6683,0.379,6684,2.529,6685,0.379,6686,0.379,6687,0.379,6688,1.075,6689,0.737,6690,1.075,6691,1.075,6692,1.075,6693,0.737,6694,0.379,6695,0.379,6696,0.379,6697,0.379,6698,0.379,6699,0.379,6700,0.379,6701,0.379,6702,0.379,6703,0.379,6704,0.379,6705,0.379,6706,0.379,6707,0.379,6708,0.379,6709,0.379,6710,0.379,6711,0.379,6712,0.379,6713,0.379,6714,0.379,6715,0.379,6716,0.379,6717,0.379,6718,0.379,6719,0.379,6720,0.379,6721,0.379,6722,0.379,6723,0.379,6724,0.379,6725,0.379,6726,0.379,6727,0.379,6728,0.737,6729,0.379,6730,0.379,6731,0.379,6732,0.379,6733,0.379,6734,0.379,6735,0.379,6736,0.379,6737,0.379,6738,0.379,6739,0.379,6740,0.379,6741,0.379,6742,0.379,6743,0.737,6744,0.737,6745,0.737,6746,1.075,6747,0.737,6748,0.379,6749,1.991,6750,0.379,6751,0.379,6752,0.379,6753,0.379,6754,0.379,6755,0.737,6756,0.379,6757,0.737,6758,0.379,6759,0.379,6760,0.379,6761,0.379,6762,0.379,6763,0.379,6764,0.379,6765,0.737,6766,0.379,6767,0.379,6768,0.379,6769,0.379,6770,0.379,6771,0.379,6772,0.379,6773,0.379,6774,0.379,6775,0.737,6776,0.737,6777,0.379,6778,0.379,6779,0.379,6780,0.379,6781,0.379,6782,0.737,6783,0.737,6784,0.379,6785,0.737,6786,0.737,6787,0.737,6788,0.737,6789,0.737,6790,0.379,6791,0.379,6792,0.379,6793,0.379,6794,0.379,6795,0.737,6796,0.379,6797,0.379,6798,0.379,6799,0.379,6800,0.379,6801,0.379,6802,0.379,6803,0.379,6804,0.737,6805,0.379,6806,0.379,6807,0.379,6808,0.379,6809,0.379,6810,1.701,6811,0.379,6812,0.379,6813,0.379,6814,0.379,6815,0.379,6816,0.379,6817,0.379,6818,0.379,6819,0.379,6820,0.379,6821,0.379,6822,0.379,6823,0.379,6824,0.379,6825,0.379,6826,0.379,6827,0.379,6828,0.379,6829,0.379,6830,0.379,6831,0.379,6832,0.379,6833,0.379,6834,0.379,6835,0.379,6836,0.737,6837,0.379,6838,0.379,6839,0.379,6840,0.379,6841,0.379,6842,0.379,6843,0.379,6844,1.075,6845,0.379,6846,0.379,6847,0.379]],["component/66",[6,0.301]],["title/67-1",[102,25.489,175,23.116,822,27.788]],["name/67-1",[]],["text/67-1",[]],["component/67-1",[]],["title/67-2",[662,23.471,711,28.084,6848,50.966]],["name/67-2",[]],["text/67-2",[]],["component/67-2",[]],["title/67-3",[727,18.779,2768,39.799]],["name/67-3",[]],["text/67-3",[]],["component/67-3",[]],["title/67-4",[99,32.814,1288,45.762]],["name/67-4",[]],["text/67-4",[]],["component/67-4",[]],["title/67-5",[660,35.539,727,15.903,6849,50.966]],["name/67-5",[]],["text/67-5",[]],["component/67-5",[]],["title/67-6",[6,10.767,102,25.489,175,23.116]],["name/67-6",[]],["text/67-6",[]],["component/67-6",[]],["title/67-7",[662,23.471,711,28.084,5793,45.589]],["name/67-7",[]],["text/67-7",[]],["component/67-7",[]],["title/67-8",[114,17.376,1482,29.228,3840,37.943,6850,44.198]],["name/67-8",[]],["text/67-8",[]],["component/67-8",[]],["title/67-9",[114,17.376,1482,29.228,3838,35.482,5793,39.535]],["name/67-9",[]],["text/67-9",[]],["component/67-9",[]],["title/67-10",[99,32.814,2768,39.799]],["name/67-10",[]],["text/67-10",[]],["component/67-10",[]],["title/67-11",[635,23.84,1857,31.718,6851,50.966]],["name/67-11",[]],["text/67-11",[]],["component/67-11",[]],["title/67",[99,32.814,646,23.371]],["name/67",[99,0.834]],["text/67",[0,0.937,6,1.878,23,0.442,28,0.502,37,0.811,41,1.619,55,0.654,62,0.624,65,0.535,69,3.949,70,1.963,76,0.361,78,2.884,80,2.413,92,1.935,99,5.887,102,3.445,108,0.973,109,1.503,114,3.495,115,1.421,116,2.769,118,0.455,123,0.69,127,2.601,129,0.446,136,0.6,140,0.973,141,2.1,155,0.423,161,0.543,162,1.721,163,1.046,166,1.474,170,1.522,173,1.209,174,4.593,175,4.201,182,0.373,187,0.43,209,0.6,213,2.12,219,2.703,222,2.622,225,0.886,243,0.916,245,0.987,253,0.961,260,0.769,267,0.551,277,0.86,282,0.769,284,1.046,295,0.808,309,0.987,313,1.254,318,1.006,319,0.459,327,4.969,330,4.538,334,0.496,336,2.675,339,1.447,342,1.015,345,1.063,349,1.167,362,0.49,365,1.084,367,0.535,371,1.831,372,1.831,373,0.916,375,1.163,381,0.69,512,1.849,524,2.769,546,1.408,560,0.77,561,0.434,566,0.876,573,1.063,580,2.061,584,0.624,592,0.926,594,3.274,599,1.209,600,0.514,602,1.143,608,0.502,623,0.926,628,0.496,629,1.408,630,0.654,631,2.56,635,1.329,639,0.459,643,0.43,645,3.86,646,3.425,648,3.736,649,1.894,653,1.132,654,0.508,660,2.954,662,2.682,666,1.063,671,3.161,678,0.45,680,1.254,681,1.609,691,1.879,710,0.842,711,3.209,720,1.336,723,2.198,727,2.5,728,1.942,734,1.063,741,1.963,747,0.859,754,0.479,755,2.964,772,0.551,773,1.679,775,2.703,777,2.138,779,1.1,782,0.578,785,1.428,800,0.578,810,1.794,812,0.464,818,0.543,822,3.309,833,2.063,835,1.353,847,2.684,851,1.254,860,0.671,861,0.484,882,0.671,887,0.569,888,2.956,905,1.879,910,2.542,916,0.671,933,1.353,938,0.85,945,2.007,966,0.49,973,1.209,979,3.638,982,0.713,986,3.43,988,0.624,990,3.466,993,0.543,999,0.612,1022,0.578,1024,0.528,1028,0.916,1052,1.428,1062,0.624,1068,0.56,1082,0.502,1088,0.535,1093,1.193,1096,1.428,1097,0.808,1098,0.578,1100,1.167,1102,0.474,1106,0.528,1110,0.961,1111,2.02,1113,1.221,1114,2.836,1122,0.797,1123,1.38,1127,1.046,1128,1.609,1146,1.1,1149,2.443,1155,0.769,1157,0.508,1174,1.945,1175,2.413,1183,3.242,1185,2.905,1186,0.834,1187,0.521,1188,1.742,1192,1.336,1194,0.937,1195,2.871,1201,1.38,1206,1.1,1207,0.769,1208,1.942,1215,1.438,1218,0.624,1224,0.6,1225,0.589,1227,0.496,1234,1.38,1235,1.678,1242,0.937,1244,0.578,1256,0.961,1258,2.083,1259,0.521,1260,2.413,1263,4.559,1265,1.143,1266,2.628,1267,0.502,1270,1.046,1271,0.973,1274,0.937,1279,2.001,1284,0.69,1288,6.005,1289,1.496,1290,0.926,1291,2.615,1316,4.843,1319,0.654,1320,1.332,1321,1.254,1325,0.713,1326,2.176,1335,2.061,1351,1.143,1365,0.961,1366,0.961,1391,0.578,1411,1.982,1413,0.638,1423,5.392,1427,0.502,1438,0.638,1439,2.774,1474,0.612,1482,1.879,1495,1.45,1508,0.738,1520,2.11,1522,3.145,1524,2.526,1551,0.713,1577,0.612,1578,2.263,1582,0.409,1648,0.514,1687,0.56,1689,1.766,1727,0.638,1783,2.063,1784,0.56,1813,3.358,1819,1.38,1829,0.469,1841,0.713,1842,0.638,1843,1.336,1857,4.172,1858,0.569,1861,1.721,1875,0.6,1876,0.69,2002,0.713,2008,0.69,2126,0.69,2178,0.624,2212,1.03,2255,0.671,2289,1.38,2344,0.769,2346,1.816,2347,0.638,2399,2.024,2469,0.638,2569,1.29,2616,1.51,2654,0.624,2659,0.769,2768,5.563,2806,2.664,2810,1.982,2879,0.738,2881,0.713,3039,0.738,3115,0.86,3133,0.86,3134,0.738,3215,0.86,3224,1.816,3284,0.671,3289,0.769,3328,0.808,3391,1.38,3429,1.143,3820,0.86,4110,0.808,4275,0.86,4307,1.29,4340,0.738,4366,3.067,4525,4.367,4542,2.263,4637,0.86,4961,0.808,5113,0.769,5163,1.607,5193,0.86,5194,0.86,5199,0.808,5259,0.86,5380,0.86,5386,4.237,5605,0.808,5606,0.808,5623,1.51,5624,0.808,5710,0.808,5761,1.51,5793,6.315,5815,2.263,5862,0.86,5891,5.632,6091,2.842,6386,2.263,6848,7.06,6849,7.515,6850,6.297,6851,0.86,6852,5.412,6853,0.939,6854,0.939,6855,0.939,6856,3.666,6857,0.939,6858,0.939,6859,2.47,6860,1.755,6861,2.47,6862,1.755,6863,0.939,6864,0.939,6865,3.102,6866,0.939,6867,0.939,6868,0.939,6869,0.939,6870,1.755,6871,1.755,6872,1.755,6873,1.755,6874,5.755,6875,1.755,6876,0.939,6877,0.939,6878,0.939,6879,4.17,6880,0.939,6881,0.939,6882,0.939,6883,0.939,6884,0.939,6885,0.939,6886,2.47,6887,2.47,6888,1.755,6889,0.939,6890,0.939,6891,0.939,6892,1.755,6893,2.47,6894,2.47,6895,1.755,6896,0.939,6897,0.939,6898,0.939,6899,0.939,6900,0.939,6901,1.755,6902,0.939,6903,0.939,6904,0.939,6905,0.939,6906,0.939,6907,0.939,6908,0.939,6909,1.755,6910,1.755,6911,0.939,6912,2.47,6913,4.625,6914,0.939,6915,0.939,6916,0.939,6917,0.939,6918,0.939,6919,0.939,6920,0.939,6921,0.939,6922,0.939,6923,0.939,6924,0.939,6925,0.939,6926,0.939,6927,0.939]],["component/67",[6,0.301]],["title/68",[1186,26.441,2064,35.539,2244,37.006]],["name/68",[1186,0.432,2064,0.581]],["text/68",[6,1.56,44,3.482,108,4.473,114,2.904,116,3.511,154,4.732,174,3.056,175,3.35,342,4.663,365,4.815,646,3.902,653,3.694,775,5.737,810,4.924,946,3.599,955,5.483,985,5.25,1122,3.661,1186,5.213,1235,5.441,1242,4.307,1635,5.723,1844,6.606,1845,6.606,1914,5.483,2064,7.007,2244,6.693,2277,6.119,2294,5.763,2678,6.94,4081,4.16,4086,9.217,6928,8.063]],["component/68",[6,0.301]],["title/69",[1119,41.195,1829,32.814]],["name/69",[1119,1.048]],["text/69",[6,2.018,44,4.503,116,3.149,129,3.437,141,3.285,174,2.742,207,3.864,218,3.864,222,3.504,319,3.539,362,3.774,364,5.998,365,4.122,375,3.405,378,6.12,524,3.149,553,4.62,556,5.038,586,6.225,594,3.149,604,4.811,631,3.961,643,3.314,648,4.358,652,4.123,754,3.69,809,5.078,946,4.654,983,5.688,1053,3.374,1110,5.142,1119,7.666,1157,3.911,1192,3.911,1199,5.038,1260,3.774,1270,4.311,1316,3.774,1318,3.911,1427,3.864,1829,5.208,2177,5.489,2243,5.319,2482,5.319,2544,5.489,3314,4.919,4013,8.602,6929,7.233,6930,7.233,6931,7.233,6932,7.233]],["component/69",[6,0.301]],["title/70",[6,12.714,34,41.195]],["name/70",[572,0.752]],["text/70",[672,7.092,4497,7.728]],["component/70",[6,0.301]],["title/71-1",[6,10.767,1782,36.244,3234,39.771]],["name/71-1",[]],["text/71-1",[]],["component/71-1",[]],["title/71",[1053,37.412]],["name/71",[1053,0.779]],["text/71",[6,2.354,11,2.59,37,2.294,44,3.127,70,2.337,90,2.315,100,2.359,102,3.317,114,3.384,116,2.161,127,3.102,136,3.17,144,3.767,174,3.562,175,3.008,182,3.973,318,2.347,364,3.17,378,2.913,524,4.807,536,3.767,551,4.546,556,5.043,560,3.178,567,5.274,571,4.316,580,2.453,592,2.62,594,3.153,631,3.054,643,2.274,646,1.765,647,2.381,648,1.96,660,3.17,662,3.054,678,3.474,695,3.375,727,2.982,741,2.337,751,3.65,752,3.65,754,2.532,781,3.112,788,3.548,798,2.505,809,2.684,880,3.375,887,3.006,888,2.913,912,4.141,929,3.508,946,3.816,949,3.301,973,2.429,1053,5.567,1102,2.505,1106,2.79,1113,2.453,1119,6.753,1120,4.272,1122,3.288,1141,3.65,1195,2.829,1266,2.59,1267,2.651,1290,2.62,1305,3.548,1316,5.443,1345,3.17,1354,3.112,1387,6.545,1391,3.057,1657,3.767,1782,7.192,2024,3.65,2175,3.767,2285,3.767,2376,4.067,2469,3.375,2612,5.933,2613,5.694,3234,8.287,3244,3.65,6933,7.241,6934,4.963,6935,4.963,6936,4.963,6937,4.963,6938,4.963,6939,4.963]],["component/71",[6,0.301]],["title/72",[2801,58.983]],["name/72",[925,0.633,2334,0.605]],["text/72",[6,1.528,21,4.566,34,4.95,41,5.182,127,3.383,141,4.51,175,4.126,183,4.217,190,4.566,308,3.985,320,4.634,324,4.634,510,4.167,571,4.706,577,5.992,633,5.829,671,3.41,714,6.027,899,4.119,900,5.242,925,5.499,990,3.79,1108,6.209,1186,4.719,1235,4.269,1323,4.119,1326,5.182,1335,4.439,2064,7.282,2126,5.806,2244,6.605,2254,6.469,2334,5.251,2798,5.643,2801,7.303,2802,6.469,2803,5.043,2806,6.343,4024,9.097]],["component/72",[6,0.301]],["title/73",[218,29.722,900,29.37,2064,35.539]],["name/73",[900,0.48,2064,0.581]],["text/73",[672,7.131]],["component/73",[6,0.301]]],"invertedIndex":[["",{"_index":174,"title":{"25":{},"25-4":{},"61-26":{},"61-33":{},"61-40":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"68":{},"69":{},"71":{}},"component":{}}],["0",{"_index":1338,"title":{},"name":{},"text":{"19":{},"28":{},"33":{},"36":{},"37":{},"38":{},"42":{},"43":{},"44":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{}},"component":{}}],["0.0.0.0",{"_index":3448,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["0.1",{"_index":5391,"title":{},"name":{},"text":{"55":{}},"component":{}}],["00",{"_index":2978,"title":{},"name":{},"text":{"34":{}},"component":{}}],["0000",{"_index":3302,"title":{},"name":{},"text":{"36":{}},"component":{}}],["0001",{"_index":5309,"title":{},"name":{},"text":{"53":{}},"component":{}}],["00805f499d93",{"_index":2081,"title":{},"name":{},"text":{"28":{}},"component":{}}],["00af",{"_index":5310,"title":{},"name":{},"text":{"53":{}},"component":{}}],["01",{"_index":2983,"title":{},"name":{},"text":{"34":{}},"component":{}}],["0123456789abcdef",{"_index":5185,"title":{},"name":{},"text":{"53":{}},"component":{}}],["02",{"_index":2981,"title":{},"name":{},"text":{"34":{}},"component":{}}],["03",{"_index":2979,"title":{},"name":{},"text":{"34":{}},"component":{}}],["04",{"_index":702,"title":{},"name":{},"text":{"7":{},"34":{}},"component":{}}],["0400",{"_index":2593,"title":{},"name":{},"text":{"33":{}},"component":{}}],["044e",{"_index":2078,"title":{},"name":{},"text":{"28":{}},"component":{}}],["04t21:16:57.980z",{"_index":1538,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["04t21:38:35.371542343z",{"_index":3992,"title":{},"name":{},"text":{"41":{}},"component":{}}],["05",{"_index":1534,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["05:00",{"_index":704,"title":{},"name":{},"text":{"7":{}},"component":{}}],["05t07:38:35.366747708+10:00",{"_index":3960,"title":{},"name":{},"text":{"41":{}},"component":{}}],["05t07:38:35.366943598+10:00",{"_index":3961,"title":{},"name":{},"text":{"41":{}},"component":{}}],["05t07:38:35.371542343+10:00",{"_index":3994,"title":{},"name":{},"text":{"41":{}},"component":{}}],["06",{"_index":1533,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["07",{"_index":2996,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:06.594:info",{"_index":1535,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:06.614:info",{"_index":1542,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:06.624:info",{"_index":1546,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:07.539:info",{"_index":1561,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:07.550:info",{"_index":1562,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:07.557:info",{"_index":1564,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:08.546:info",{"_index":1567,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:08.567:info",{"_index":1568,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:08.578:info",{"_index":1569,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.579:warn",{"_index":1591,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.609:info",{"_index":1596,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.617:info",{"_index":1597,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.619:info",{"_index":1603,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.677:info",{"_index":1608,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.684:info",{"_index":1611,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.691:info",{"_index":1621,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.692:info",{"_index":1623,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.696:info",{"_index":1626,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:10.702:info",{"_index":1628,"title":{},"name":{},"text":{"20":{}},"component":{}}],["07:38:12.309:info",{"_index":2885,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:12.322:info",{"_index":2886,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:12.328:info",{"_index":2888,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:14.742:warn",{"_index":2910,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:15.158:info",{"_index":2912,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:15.183:info",{"_index":2913,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:15.228:info",{"_index":2920,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:15.236:info",{"_index":2923,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:16.609:warn",{"_index":2941,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:16.893:info",{"_index":2942,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:16.911:info",{"_index":2943,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:16.940:info",{"_index":2946,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:16.943:info",{"_index":2949,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:18.243:info",{"_index":2954,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:18.263:info",{"_index":2955,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:18.274:info",{"_index":2958,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:19.601:warn",{"_index":3006,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:19.867:info",{"_index":3007,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:19.884:info",{"_index":3008,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:19.913:info",{"_index":3011,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:19.925:info",{"_index":3014,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:19.928:info",{"_index":3020,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:22.161:info",{"_index":3162,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:22.174:info",{"_index":3163,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:22.181:info",{"_index":3165,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:24.237:warn",{"_index":3169,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:24.486:info",{"_index":3170,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:24.502:info",{"_index":3171,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:24.529:info",{"_index":3174,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:24.533:info",{"_index":3176,"title":{},"name":{},"text":{"34":{}},"component":{}}],["07:38:26.095:info",{"_index":3320,"title":{},"name":{},"text":{"36":{}},"component":{}}],["07:38:26.212:info",{"_index":3322,"title":{},"name":{},"text":{"36":{}},"component":{}}],["07:38:26.229:info",{"_index":3323,"title":{},"name":{},"text":{"36":{}},"component":{}}],["07:38:26.239:info",{"_index":3325,"title":{},"name":{},"text":{"36":{}},"component":{}}],["07:38:33.614:info",{"_index":3783,"title":{},"name":{},"text":{"38":{}},"component":{}}],["07:38:33.631:info",{"_index":3784,"title":{},"name":{},"text":{"38":{}},"component":{}}],["07:38:33.641:info",{"_index":3786,"title":{},"name":{},"text":{"38":{}},"component":{}}],["07:38:36.730:info",{"_index":4018,"title":{},"name":{},"text":{"41":{}},"component":{}}],["07:38:36.753:info",{"_index":4019,"title":{},"name":{},"text":{"41":{}},"component":{}}],["09",{"_index":2993,"title":{},"name":{},"text":{"34":{}},"component":{}}],["09t13:06:10",{"_index":703,"title":{},"name":{},"text":{"7":{}},"component":{}}],["0@6b8a4568",{"_index":3882,"title":{},"name":{},"text":{"41":{}},"component":{}}],["0_0_0_0",{"_index":1617,"title":{},"name":{},"text":{"20":{}},"component":{}}],["0a",{"_index":2975,"title":{},"name":{},"text":{"34":{}},"component":{}}],["0d",{"_index":2974,"title":{},"name":{},"text":{"34":{}},"component":{}}],["0l",{"_index":6137,"title":{},"name":{},"text":{"61":{}},"component":{}}],["0s",{"_index":1602,"title":{},"name":{},"text":{"20":{}},"component":{}}],["0xcafe",{"_index":5747,"title":{},"name":{},"text":{"57":{}},"component":{}}],["1",{"_index":225,"title":{},"name":{},"text":{"2":{},"10":{},"13":{},"17":{},"19":{},"20":{},"23":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"43":{},"44":{},"47":{},"48":{},"52":{},"53":{},"56":{},"61":{},"62":{},"65":{},"66":{},"67":{}},"component":{}}],["1.0",{"_index":301,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1.0d",{"_index":4061,"title":{},"name":{},"text":{"42":{}},"component":{}}],["1.1",{"_index":295,"title":{},"name":{},"text":{"2":{},"55":{},"67":{}},"component":{}}],["1.2",{"_index":287,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1.4",{"_index":281,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1.5",{"_index":275,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1.6",{"_index":270,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1.6u19",{"_index":471,"title":{},"name":{},"text":{"3":{}},"component":{}}],["1.7",{"_index":258,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1.78.1.jar",{"_index":2902,"title":{},"name":{},"text":{"34":{}},"component":{}}],["1.8",{"_index":250,"title":{},"name":{},"text":{"2":{},"28":{}},"component":{}}],["1.x",{"_index":3268,"title":{},"name":{},"text":{"36":{}},"component":{}}],["1/p/$2",{"_index":6117,"title":{},"name":{},"text":{"61":{}},"component":{}}],["10",{"_index":213,"title":{},"name":{"58":{}},"text":{"2":{},"5":{},"7":{},"19":{},"20":{},"23":{},"24":{},"26":{},"30":{},"32":{},"37":{},"41":{},"52":{},"55":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["10.0",{"_index":2322,"title":{},"name":{},"text":{"32":{}},"component":{}}],["10.0.0",{"_index":447,"title":{},"name":{},"text":{"3":{},"18":{}},"component":{}}],["10.0.0.2",{"_index":1434,"title":{},"name":{},"text":{"19":{}},"component":{}}],["10.0.0.alpha0",{"_index":435,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.0.beta2",{"_index":441,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.0.beta3",{"_index":454,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.1",{"_index":414,"title":{},"name":{},"text":{"3":{},"18":{}},"component":{}}],["10.0.10",{"_index":403,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.13",{"_index":396,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.14",{"_index":391,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.2",{"_index":424,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.21",{"_index":179,"title":{},"name":{},"text":{"2":{}},"component":{}}],["10.0.3",{"_index":427,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.5",{"_index":415,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.6",{"_index":419,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.9",{"_index":401,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.0.x",{"_index":898,"title":{"58":{}},"name":{},"text":{"8":{},"11":{},"32":{},"58":{}},"component":{}}],["10.013",{"_index":387,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10.1",{"_index":6407,"title":{},"name":{},"text":{"61":{}},"component":{}}],["10/19/2020",{"_index":456,"title":{},"name":{},"text":{"3":{}},"component":{}}],["100",{"_index":508,"title":{"61-54":{}},"name":{},"text":{"4":{},"48":{},"49":{},"61":{},"62":{}},"component":{}}],["1000",{"_index":3587,"title":{},"name":{},"text":{"37":{},"61":{},"66":{}},"component":{}}],["10000m",{"_index":3191,"title":{},"name":{},"text":{"34":{}},"component":{}}],["101",{"_index":5171,"title":{},"name":{},"text":{"53":{},"61":{}},"component":{}}],["102",{"_index":5895,"title":{"61-55":{}},"name":{},"text":{"61":{}},"component":{}}],["1024",{"_index":2346,"title":{},"name":{},"text":{"33":{},"34":{},"48":{},"49":{},"53":{},"61":{},"67":{}},"component":{}}],["1024l",{"_index":5743,"title":{},"name":{},"text":{"57":{}},"component":{}}],["103",{"_index":6369,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1048576",{"_index":6882,"title":{},"name":{},"text":{"67":{}},"component":{}}],["1099",{"_index":1869,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["1099:localhost:1099",{"_index":1886,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["11",{"_index":214,"title":{},"name":{"57":{}},"text":{"2":{},"5":{},"8":{},"11":{},"23":{},"57":{},"58":{}},"component":{}}],["11.0.0",{"_index":448,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.0.alpha0",{"_index":436,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.0.beta2",{"_index":442,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.0.beta3",{"_index":455,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.1",{"_index":416,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.10",{"_index":404,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.13",{"_index":388,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.14",{"_index":392,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.2",{"_index":425,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.21",{"_index":177,"title":{},"name":{},"text":{"2":{}},"component":{}}],["11.0.3",{"_index":428,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.5",{"_index":417,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.6",{"_index":420,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.9",{"_index":402,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11.0.x",{"_index":896,"title":{"57":{}},"name":{},"text":{"8":{},"11":{},"57":{}},"component":{}}],["11/10/9",{"_index":198,"title":{},"name":{},"text":{"2":{}},"component":{}}],["11/17/2020",{"_index":449,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11/18/2005",{"_index":497,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11/22/2006",{"_index":487,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11/3/2007",{"_index":485,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11/5/2007",{"_index":480,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11/5/2009",{"_index":469,"title":{},"name":{},"text":{"3":{}},"component":{}}],["1100",{"_index":1873,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["11211",{"_index":3614,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["1141m",{"_index":2925,"title":{},"name":{},"text":{"34":{}},"component":{}}],["11d1",{"_index":2079,"title":{},"name":{},"text":{"28":{}},"component":{}}],["12",{"_index":189,"title":{"14":{},"15":{},"16":{}},"name":{"57":{}},"text":{"2":{},"5":{},"7":{},"14":{},"23":{},"34":{},"56":{},"57":{}},"component":{}}],["12.0.0.alpha3",{"_index":389,"title":{},"name":{},"text":{"3":{}},"component":{}}],["12.0.0.beta0",{"_index":393,"title":{},"name":{},"text":{"3":{}},"component":{}}],["12.0.10",{"_index":170,"title":{},"name":{},"text":{"2":{},"20":{},"40":{},"45":{},"48":{},"49":{},"50":{},"53":{},"54":{},"55":{},"56":{},"61":{},"62":{},"63":{},"67":{}},"component":{}}],["12.0.11",{"_index":1537,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["12.0.x",{"_index":892,"title":{"57":{}},"name":{},"text":{"8":{},"11":{},"57":{}},"component":{}}],["12/22/2007",{"_index":474,"title":{},"name":{},"text":{"3":{}},"component":{}}],["12/29/2011",{"_index":464,"title":{},"name":{},"text":{"3":{}},"component":{}}],["12/org/eclipse/jetty/server/abstractconnector.html#setname(java.lang.str",{"_index":1443,"title":{},"name":{},"text":{"19":{}},"component":{}}],["120",{"_index":4947,"title":{},"name":{},"text":{"49":{},"62":{},"66":{}},"component":{}}],["123",{"_index":1001,"title":{},"name":{},"text":{"10":{}},"component":{}}],["127.0.0.1",{"_index":2165,"title":{},"name":{},"text":{"30":{},"33":{},"34":{},"38":{}},"component":{}}],["127.0.0.1:8282",{"_index":3202,"title":{},"name":{},"text":{"34":{}},"component":{}}],["127.0.1.1",{"_index":2543,"title":{},"name":{},"text":{"33":{}},"component":{}}],["128",{"_index":6256,"title":{},"name":{},"text":{"61":{}},"component":{}}],["13",{"_index":1758,"title":{},"name":{},"text":{"23":{},"34":{}},"component":{}}],["14",{"_index":1760,"title":{},"name":{},"text":{"23":{}},"component":{}}],["15",{"_index":1762,"title":{},"name":{},"text":{"23":{},"61":{}},"component":{}}],["1599558193150",{"_index":3450,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["1599558193150__test_0.0.0.0_node0ek3vx7x2y1e7pmi3z00uqj1k0",{"_index":3451,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["16",{"_index":1764,"title":{},"name":{},"text":{"23":{},"42":{},"48":{},"52":{},"61":{},"65":{}},"component":{}}],["17",{"_index":224,"title":{},"name":{},"text":{"2":{},"8":{},"11":{},"23":{},"57":{}},"component":{}}],["1738",{"_index":5849,"title":{},"name":{},"text":{"59":{}},"component":{}}],["18",{"_index":1767,"title":{},"name":{},"text":{"23":{}},"component":{}}],["18/sep/2011:19:18:28",{"_index":2592,"title":{},"name":{},"text":{"33":{}},"component":{}}],["1808",{"_index":5851,"title":{},"name":{},"text":{"59":{}},"component":{}}],["19",{"_index":895,"title":{},"name":{},"text":{"8":{},"23":{},"33":{},"36":{},"47":{}},"component":{}}],["192.168.0.100",{"_index":3300,"title":{},"name":{},"text":{"36":{}},"component":{}}],["192.168.0.13",{"_index":1481,"title":{},"name":{},"text":{"19":{}},"component":{}}],["1928",{"_index":4858,"title":{},"name":{},"text":{"48":{}},"component":{}}],["1945",{"_index":304,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["1994",{"_index":5848,"title":{},"name":{},"text":{"59":{}},"component":{}}],["1995",{"_index":305,"title":{},"name":{},"text":{"2":{},"7":{},"59":{}},"component":{}}],["1996",{"_index":5829,"title":{},"name":{},"text":{"59":{}},"component":{}}],["1997",{"_index":5830,"title":{},"name":{},"text":{"59":{}},"component":{}}],["1998",{"_index":298,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["1999",{"_index":293,"title":{},"name":{},"text":{"2":{},"45":{},"59":{}},"component":{}}],["1d",{"_index":2991,"title":{},"name":{},"text":{"34":{}},"component":{}}],["1e",{"_index":2982,"title":{},"name":{},"text":{"34":{}},"component":{}}],["1kb",{"_index":6134,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1st",{"_index":211,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1xx",{"_index":5894,"title":{"61-53":{}},"name":{},"text":{"61":{}},"component":{}}],["2",{"_index":243,"title":{},"name":{},"text":{"2":{},"10":{},"13":{},"17":{},"19":{},"20":{},"23":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"47":{},"48":{},"53":{},"56":{},"61":{},"65":{},"67":{}},"component":{}}],["2)(3",{"_index":1708,"title":{},"name":{},"text":{"23":{}},"component":{}}],["2.0",{"_index":282,"title":{},"name":{},"text":{"2":{},"7":{},"32":{},"67":{}},"component":{}}],["2.0.12",{"_index":3701,"title":{},"name":{},"text":{"38":{}},"component":{}}],["2.0.12.jar",{"_index":3705,"title":{},"name":{},"text":{"38":{},"41":{}},"component":{}}],["2.0.12.jar:/path/to/jetty.home/lib/logging/jetti",{"_index":3722,"title":{},"name":{},"text":{"38":{}},"component":{}}],["2.0.txt",{"_index":2321,"title":{},"name":{},"text":{"32":{}},"component":{}}],["2.1",{"_index":277,"title":{},"name":{},"text":{"2":{},"67":{}},"component":{}}],["2.1.0",{"_index":6853,"title":{},"name":{},"text":{"67":{}},"component":{}}],["2.2",{"_index":271,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2.3",{"_index":230,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2.36.72.144:21216",{"_index":3151,"title":{},"name":{},"text":{"34":{}},"component":{}}],["2.4",{"_index":288,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2.5",{"_index":276,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2/26/2021",{"_index":443,"title":{},"name":{},"text":{"3":{}},"component":{}}],["20",{"_index":1770,"title":{},"name":{},"text":{"23":{},"33":{},"34":{},"36":{},"47":{},"49":{},"61":{},"62":{}},"component":{}}],["200",{"_index":2667,"title":{},"name":{},"text":{"33":{},"34":{},"36":{},"48":{},"53":{},"56":{},"57":{},"61":{},"65":{}},"component":{}}],["2000",{"_index":299,"title":{},"name":{},"text":{"2":{},"33":{}},"component":{}}],["2001",{"_index":290,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2002",{"_index":294,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2003",{"_index":285,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2005",{"_index":5853,"title":{},"name":{},"text":{"59":{}},"component":{}}],["2006",{"_index":279,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["2007",{"_index":475,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2008",{"_index":274,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2009",{"_index":268,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["2010",{"_index":280,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2011",{"_index":465,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2013",{"_index":264,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2014",{"_index":256,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["2015",{"_index":252,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["2016",{"_index":249,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2018",{"_index":257,"title":{},"name":{},"text":{"2":{},"7":{}},"component":{}}],["2020",{"_index":246,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["2020_01_31",{"_index":3296,"title":{},"name":{},"text":{"36":{}},"component":{}}],["2021",{"_index":410,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2022",{"_index":398,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2023",{"_index":223,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["2024",{"_index":212,"title":{},"name":{},"text":{"2":{},"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["204",{"_index":5763,"title":{},"name":{},"text":{"57":{}},"component":{}}],["2047",{"_index":405,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2048",{"_index":408,"title":{},"name":{},"text":{"3":{},"8":{},"30":{},"33":{}},"component":{}}],["2068",{"_index":297,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["21",{"_index":1772,"title":{},"name":{},"text":{"23":{},"33":{},"36":{},"38":{},"47":{}},"component":{}}],["21.0.3",{"_index":3689,"title":{},"name":{},"text":{"38":{}},"component":{}}],["21.0.3+9",{"_index":1540,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["2191",{"_index":399,"title":{},"name":{},"text":{"3":{}},"component":{}}],["222",{"_index":5560,"title":{},"name":{},"text":{"56":{}},"component":{}}],["2396",{"_index":5852,"title":{},"name":{},"text":{"59":{}},"component":{}}],["25",{"_index":2999,"title":{},"name":{},"text":{"34":{}},"component":{}}],["250",{"_index":5109,"title":{},"name":{},"text":{"52":{}},"component":{}}],["2500",{"_index":5111,"title":{},"name":{},"text":{"52":{}},"component":{}}],["2518",{"_index":6405,"title":{},"name":{},"text":{"61":{}},"component":{}}],["256",{"_index":2281,"title":{},"name":{},"text":{"32":{},"42":{},"61":{}},"component":{}}],["26048",{"_index":394,"title":{},"name":{},"text":{"3":{}},"component":{}}],["26049",{"_index":384,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2616",{"_index":259,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["27216",{"_index":457,"title":{},"name":{},"text":{"3":{}},"component":{}}],["27218",{"_index":450,"title":{},"name":{},"text":{"3":{}},"component":{}}],["27223",{"_index":444,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2758",{"_index":498,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2759",{"_index":495,"title":{},"name":{},"text":{"3":{}},"component":{}}],["28163",{"_index":439,"title":{},"name":{},"text":{"3":{}},"component":{}}],["28164",{"_index":438,"title":{},"name":{},"text":{"3":{}},"component":{}}],["28165",{"_index":432,"title":{},"name":{},"text":{"3":{}},"component":{}}],["28169",{"_index":430,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2965",{"_index":5872,"title":{},"name":{},"text":{"59":{}},"component":{}}],["2a",{"_index":2969,"title":{},"name":{},"text":{"34":{}},"component":{}}],["2e",{"_index":2973,"title":{},"name":{},"text":{"34":{}},"component":{}}],["2f",{"_index":2723,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["2xx",{"_index":6127,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3",{"_index":245,"title":{},"name":{},"text":{"2":{},"13":{},"17":{},"19":{},"20":{},"23":{},"26":{},"27":{},"28":{},"30":{},"31":{},"34":{},"38":{},"40":{},"41":{},"44":{},"47":{},"48":{},"53":{},"61":{},"67":{}},"component":{}}],["3.0",{"_index":231,"title":{},"name":{},"text":{"2":{}},"component":{}}],["3.1",{"_index":226,"title":{},"name":{},"text":{"2":{},"11":{}},"component":{}}],["3.8.6",{"_index":897,"title":{},"name":{},"text":{"8":{}},"component":{}}],["3.9.2",{"_index":893,"title":{},"name":{},"text":{"8":{}},"component":{}}],["30",{"_index":2462,"title":{},"name":{},"text":{"33":{},"34":{},"52":{}},"component":{}}],["30000",{"_index":2761,"title":{},"name":{},"text":{"33":{}},"component":{}}],["301",{"_index":2626,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["302",{"_index":4503,"title":{},"name":{},"text":{"48":{}},"component":{}}],["303",{"_index":4504,"title":{},"name":{},"text":{"48":{}},"component":{}}],["31/jan/2020:20:30:40",{"_index":3301,"title":{},"name":{},"text":{"36":{}},"component":{}}],["318m",{"_index":4021,"title":{},"name":{},"text":{"41":{}},"component":{}}],["32",{"_index":2972,"title":{},"name":{},"text":{"34":{},"41":{}},"component":{}}],["34428",{"_index":422,"title":{},"name":{},"text":{"3":{}},"component":{}}],["34429",{"_index":411,"title":{},"name":{},"text":{"3":{}},"component":{}}],["3555",{"_index":470,"title":{},"name":{},"text":{"3":{}},"component":{}}],["356",{"_index":239,"title":{},"name":{},"text":{"2":{},"34":{},"53":{}},"component":{}}],["3600",{"_index":3456,"title":{},"name":{},"text":{"37":{},"57":{}},"component":{}}],["380",{"_index":4502,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["3986",{"_index":5854,"title":{},"name":{},"text":{"59":{}},"component":{}}],["3rd",{"_index":1820,"title":{},"name":{},"text":{"24":{},"34":{},"48":{}},"component":{}}],["3xx",{"_index":6128,"title":{},"name":{},"text":{"61":{}},"component":{}}],["4",{"_index":253,"title":{},"name":{},"text":{"2":{},"8":{},"13":{},"17":{},"20":{},"23":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"44":{},"48":{},"53":{},"56":{},"66":{},"67":{}},"component":{}}],["4.0",{"_index":227,"title":{},"name":{},"text":{"2":{},"11":{},"19":{}},"component":{}}],["4.0.0",{"_index":5390,"title":{},"name":{},"text":{"55":{}},"component":{}}],["4.0.2.jar:jetti",{"_index":3542,"title":{},"name":{},"text":{"37":{}},"component":{}}],["4.2.27",{"_index":492,"title":{},"name":{},"text":{"3":{}},"component":{}}],["4/1/2021",{"_index":431,"title":{},"name":{},"text":{"3":{}},"component":{}}],["4/18/2023",{"_index":382,"title":{},"name":{},"text":{"3":{}},"component":{}}],["40",{"_index":2980,"title":{},"name":{},"text":{"34":{},"49":{},"62":{}},"component":{}}],["400",{"_index":2751,"title":{},"name":{},"text":{"33":{},"34":{},"61":{}},"component":{}}],["4000",{"_index":1950,"title":{},"name":{},"text":{"26":{}},"component":{}}],["401",{"_index":2603,"title":{},"name":{},"text":{"33":{},"48":{}},"component":{}}],["404",{"_index":1551,"title":{},"name":{},"text":{"20":{},"33":{},"34":{},"56":{},"61":{},"67":{}},"component":{}}],["407",{"_index":4880,"title":{},"name":{},"text":{"48":{}},"component":{}}],["41",{"_index":2987,"title":{},"name":{},"text":{"34":{}},"component":{}}],["413",{"_index":6125,"title":{},"name":{},"text":{"61":{}},"component":{}}],["419m",{"_index":3167,"title":{},"name":{},"text":{"34":{}},"component":{}}],["42.6.0",{"_index":3698,"title":{},"name":{},"text":{"38":{}},"component":{}}],["42.6.0.jar",{"_index":3711,"title":{},"name":{},"text":{"38":{}},"component":{}}],["443",{"_index":3196,"title":{},"name":{},"text":{"34":{},"52":{},"61":{},"65":{}},"component":{}}],["4461",{"_index":466,"title":{},"name":{},"text":{"3":{}},"component":{}}],["449m",{"_index":2890,"title":{},"name":{},"text":{"34":{}},"component":{}}],["4559",{"_index":4819,"title":{},"name":{},"text":{"48":{}},"component":{}}],["466m",{"_index":1565,"title":{},"name":{},"text":{"20":{}},"component":{}}],["48",{"_index":2970,"title":{},"name":{},"text":{"34":{}},"component":{}}],["49",{"_index":2968,"title":{},"name":{},"text":{"34":{}},"component":{}}],["4918",{"_index":6408,"title":{},"name":{},"text":{"61":{}},"component":{}}],["4d",{"_index":2977,"title":{},"name":{},"text":{"34":{}},"component":{}}],["5",{"_index":284,"title":{},"name":{},"text":{"2":{},"8":{},"20":{},"23":{},"26":{},"30":{},"31":{},"34":{},"37":{},"38":{},"41":{},"48":{},"52":{},"53":{},"61":{},"66":{},"67":{}},"component":{}}],["5.0",{"_index":228,"title":{},"name":{},"text":{"2":{},"11":{},"19":{}},"component":{}}],["5.1.12",{"_index":491,"title":{},"name":{},"text":{"3":{}},"component":{}}],["5.1.6",{"_index":499,"title":{},"name":{},"text":{"3":{}},"component":{}}],["50",{"_index":2966,"title":{},"name":{},"text":{"34":{},"49":{},"62":{}},"component":{}}],["500",{"_index":5695,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["5000",{"_index":4075,"title":{},"name":{},"text":{"42":{},"61":{}},"component":{}}],["5005",{"_index":4017,"title":{},"name":{},"text":{"41":{}},"component":{}}],["512",{"_index":4649,"title":{},"name":{},"text":{"48":{}},"component":{}}],["52",{"_index":2967,"title":{},"name":{},"text":{"34":{}},"component":{}}],["53",{"_index":2976,"title":{},"name":{},"text":{"34":{}},"component":{}}],["54",{"_index":2971,"title":{},"name":{},"text":{"34":{},"41":{}},"component":{}}],["541m",{"_index":1570,"title":{},"name":{},"text":{"20":{}},"component":{}}],["547m",{"_index":1549,"title":{},"name":{},"text":{"20":{}},"component":{}}],["55",{"_index":3881,"title":{},"name":{},"text":{"41":{}},"component":{}}],["56",{"_index":3886,"title":{},"name":{},"text":{"41":{}},"component":{}}],["5613",{"_index":483,"title":{},"name":{},"text":{"3":{}},"component":{}}],["5614",{"_index":481,"title":{},"name":{},"text":{"3":{}},"component":{}}],["5615",{"_index":486,"title":{},"name":{},"text":{"3":{}},"component":{}}],["561m",{"_index":3787,"title":{},"name":{},"text":{"38":{}},"component":{}}],["568m",{"_index":3327,"title":{},"name":{},"text":{"36":{}},"component":{}}],["57",{"_index":3878,"title":{},"name":{},"text":{"41":{}},"component":{}}],["584m",{"_index":2960,"title":{},"name":{},"text":{"34":{}},"component":{}}],["6",{"_index":278,"title":{},"name":{},"text":{"2":{},"8":{},"23":{},"30":{},"34":{},"37":{},"38":{},"41":{},"53":{}},"component":{}}],["6.0",{"_index":229,"title":{},"name":{},"text":{"2":{},"3":{},"11":{},"19":{}},"component":{}}],["6.0.0",{"_index":5407,"title":{},"name":{},"text":{"55":{}},"component":{}}],["6.0.0beta17",{"_index":496,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.0.0beta4",{"_index":500,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.0.2",{"_index":490,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.1.0",{"_index":489,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.1.0pre3",{"_index":493,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.1.22",{"_index":473,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.1.6",{"_index":478,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.1.6rc0",{"_index":484,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.1.6rc1",{"_index":482,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.1.7",{"_index":479,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.1.rc0",{"_index":477,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6.8.0",{"_index":3988,"title":{},"name":{},"text":{"41":{}},"component":{}}],["6/1/2006",{"_index":494,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6/22/2021",{"_index":421,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6/8/2021",{"_index":429,"title":{},"name":{},"text":{"3":{}},"component":{}}],["60",{"_index":1226,"title":{},"name":{},"text":{"17":{},"33":{},"41":{},"49":{},"62":{},"66":{}},"component":{}}],["600",{"_index":3387,"title":{},"name":{},"text":{"37":{}},"component":{}}],["60000",{"_index":2858,"title":{},"name":{},"text":{"33":{}},"component":{}}],["60000m",{"_index":3192,"title":{},"name":{},"text":{"34":{}},"component":{}}],["600sec",{"_index":6556,"title":{},"name":{},"text":{"66":{}},"component":{}}],["6060",{"_index":1292,"title":{},"name":{},"text":{"18":{}},"component":{}}],["60sec",{"_index":6637,"title":{},"name":{},"text":{"66":{}},"component":{}}],["6265",{"_index":5873,"title":{},"name":{},"text":{"59":{}},"component":{}}],["64",{"_index":2484,"title":{},"name":{},"text":{"33":{},"34":{},"38":{},"41":{},"48":{}},"component":{}}],["6455",{"_index":237,"title":{},"name":{},"text":{"2":{},"34":{},"53":{}},"component":{}}],["6672",{"_index":476,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6789",{"_index":3303,"title":{},"name":{},"text":{"36":{}},"component":{}}],["6969",{"_index":488,"title":{},"name":{},"text":{"3":{}},"component":{}}],["7",{"_index":273,"title":{},"name":{},"text":{"2":{},"23":{},"30":{},"34":{},"38":{},"41":{}},"component":{}}],["7.01",{"_index":472,"title":{},"name":{},"text":{"3":{}},"component":{}}],["7.2.2",{"_index":433,"title":{},"name":{},"text":{"3":{}},"component":{}}],["7.6.0.rco",{"_index":468,"title":{},"name":{},"text":{"3":{}},"component":{}}],["7/15/2021",{"_index":409,"title":{},"name":{},"text":{"3":{}},"component":{}}],["7/5/2022",{"_index":397,"title":{},"name":{},"text":{"3":{}},"component":{}}],["703m",{"_index":1630,"title":{},"name":{},"text":{"20":{}},"component":{}}],["7230",{"_index":235,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["7231",{"_index":5832,"title":{},"name":{},"text":{"59":{}},"component":{}}],["7232",{"_index":5833,"title":{},"name":{},"text":{"59":{}},"component":{}}],["7233",{"_index":5834,"title":{},"name":{},"text":{"59":{}},"component":{}}],["7234",{"_index":5835,"title":{},"name":{},"text":{"59":{}},"component":{}}],["7235",{"_index":4818,"title":{},"name":{},"text":{"48":{},"59":{}},"component":{}}],["7239",{"_index":2512,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["74m/247m",{"_index":707,"title":{},"name":{},"text":{"7":{}},"component":{}}],["7540",{"_index":236,"title":{},"name":{},"text":{"2":{},"59":{}},"component":{}}],["76060800daily20240311",{"_index":3989,"title":{},"name":{},"text":{"41":{}},"component":{}}],["7692",{"_index":3028,"title":{},"name":{},"text":{"34":{}},"component":{}}],["7a",{"_index":2997,"title":{},"name":{},"text":{"34":{}},"component":{}}],["7g7d.com",{"_index":1450,"title":{},"name":{},"text":{"19":{}},"component":{}}],["8",{"_index":267,"title":{},"name":{},"text":{"2":{},"11":{},"13":{},"19":{},"20":{},"23":{},"26":{},"30":{},"34":{},"38":{},"41":{},"48":{},"53":{},"55":{},"57":{},"58":{},"61":{},"67":{}},"component":{}}],["80",{"_index":3195,"title":{},"name":{},"text":{"34":{},"48":{},"49":{},"52":{},"61":{},"62":{},"65":{}},"component":{}}],["8000",{"_index":6930,"title":{},"name":{},"text":{"69":{}},"component":{}}],["8080",{"_index":1291,"title":{},"name":{},"text":{"18":{},"20":{},"33":{},"34":{},"41":{},"42":{},"44":{},"48":{},"49":{},"52":{},"56":{},"61":{},"65":{},"67":{}},"component":{}}],["8181",{"_index":6497,"title":{},"name":{},"text":{"65":{}},"component":{}}],["82",{"_index":2984,"title":{},"name":{},"text":{"34":{}},"component":{}}],["8282",{"_index":3204,"title":{},"name":{},"text":{"34":{}},"component":{}}],["84",{"_index":2985,"title":{},"name":{},"text":{"34":{}},"component":{}}],["843",{"_index":6026,"title":{},"name":{},"text":{"61":{}},"component":{}}],["8441",{"_index":3033,"title":{},"name":{},"text":{"34":{},"53":{}},"component":{}}],["8443",{"_index":2759,"title":{},"name":{},"text":{"33":{},"34":{},"49":{},"61":{},"65":{}},"component":{}}],["8444",{"_index":3023,"title":{},"name":{},"text":{"34":{},"50":{}},"component":{}}],["86",{"_index":2986,"title":{},"name":{},"text":{"34":{}},"component":{}}],["88",{"_index":2998,"title":{},"name":{},"text":{"34":{}},"component":{}}],["887m",{"_index":3022,"title":{},"name":{},"text":{"34":{}},"component":{}}],["8888",{"_index":4852,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["8:00",{"_index":3261,"title":{},"name":{},"text":{"36":{}},"component":{}}],["8a",{"_index":2988,"title":{},"name":{},"text":{"34":{}},"component":{}}],["8b506b4f282f20dbb4b6c960f52ef3e2a658a515",{"_index":1539,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["9",{"_index":313,"title":{},"name":{},"text":{"2":{},"19":{},"20":{},"23":{},"26":{},"30":{},"38":{},"67":{}},"component":{}}],["9.0",{"_index":265,"title":{},"name":{},"text":{"2":{},"56":{}},"component":{}}],["9.1",{"_index":263,"title":{},"name":{},"text":{"2":{}},"component":{}}],["9.1.0.final.jar:jetti",{"_index":3545,"title":{},"name":{},"text":{"37":{}},"component":{}}],["9.2",{"_index":255,"title":{},"name":{},"text":{"2":{}},"component":{}}],["9.2.3",{"_index":462,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.2.9",{"_index":463,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.272",{"_index":699,"title":{},"name":{},"text":{"7":{}},"component":{}}],["9.3",{"_index":251,"title":{},"name":{},"text":{"2":{}},"component":{}}],["9.3.0",{"_index":461,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.3.1",{"_index":5437,"title":{},"name":{},"text":{"56":{}},"component":{}}],["9.4",{"_index":248,"title":{},"name":{},"text":{"2":{}},"component":{}}],["9.4.0",{"_index":460,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.0.rc0",{"_index":451,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.13",{"_index":3332,"title":{"37-25":{}},"name":{},"text":{"37":{}},"component":{}}],["9.4.21",{"_index":459,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.27",{"_index":458,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.32",{"_index":440,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.34",{"_index":452,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.35",{"_index":453,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.36.v20210114",{"_index":446,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.37",{"_index":412,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.38",{"_index":434,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.39",{"_index":437,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.40",{"_index":423,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.41",{"_index":426,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.42",{"_index":413,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.43",{"_index":418,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.46",{"_index":406,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.47",{"_index":407,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.50",{"_index":386,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.51",{"_index":390,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.54.v20240208",{"_index":180,"title":{},"name":{},"text":{"2":{}},"component":{}}],["9.4.6.v20170531",{"_index":445,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9.4.x",{"_index":1043,"title":{"58":{}},"name":{},"text":{"11":{},"58":{}},"component":{}}],["9.x",{"_index":316,"title":{},"name":{},"text":{"2":{}},"component":{}}],["90",{"_index":2133,"title":{},"name":{},"text":{"30":{},"34":{},"36":{},"44":{}},"component":{}}],["9090",{"_index":5973,"title":{},"name":{},"text":{"61":{}},"component":{}}],["94",{"_index":5794,"title":{},"name":{"58":{}},"text":{},"component":{}}],["941m",{"_index":3178,"title":{},"name":{},"text":{"34":{}},"component":{}}],["946m",{"_index":2951,"title":{},"name":{},"text":{"34":{}},"component":{}}],["9876",{"_index":3646,"title":{},"name":{},"text":{"38":{}},"component":{}}],["9966",{"_index":5518,"title":{},"name":{},"text":{"56":{}},"component":{}}],["997/1,016/16,040",{"_index":3991,"title":{},"name":{},"text":{"41":{}},"component":{}}],["9999",{"_index":1559,"title":{},"name":{},"text":{"20":{},"56":{}},"component":{}}],["9d",{"_index":2992,"title":{},"name":{},"text":{"34":{}},"component":{}}],["_",{"_index":1079,"title":{},"name":{},"text":{"13":{},"37":{},"48":{},"66":{}},"component":{}}],["_and_",{"_index":4128,"title":{},"name":{},"text":{"43":{}},"component":{}}],["_catalog",{"_index":3444,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["_dhe_rsa_",{"_index":3104,"title":{},"name":{},"text":{"34":{}},"component":{}}],["_ee10",{"_index":1619,"title":{},"name":{},"text":{"20":{}},"component":{}}],["_privatefield",{"_index":1083,"title":{},"name":{},"text":{"13":{}},"component":{}}],["_rsa_.*_(md5|sha|sha1",{"_index":3103,"title":{},"name":{},"text":{"34":{}},"component":{}}],["a0",{"_index":2989,"title":{},"name":{},"text":{"34":{}},"component":{}}],["ab",{"_index":3002,"title":{},"name":{},"text":{"34":{}},"component":{}}],["abandon",{"_index":1010,"title":{},"name":{},"text":{"10":{}},"component":{}}],["abcd12345",{"_index":6743,"title":{},"name":{},"text":{"66":{}},"component":{}}],["abil",{"_index":1833,"title":{},"name":{},"text":{"25":{},"49":{},"50":{}},"component":{}}],["abort",{"_index":2606,"title":{},"name":{},"text":{"33":{},"37":{},"48":{},"52":{}},"component":{}}],["abov",{"_index":362,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"19":{},"23":{},"25":{},"30":{},"31":{},"32":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"44":{},"47":{},"48":{},"52":{},"53":{},"56":{},"57":{},"61":{},"65":{},"66":{},"67":{},"69":{}},"component":{}}],["abruptli",{"_index":3777,"title":{},"name":{},"text":{"38":{}},"component":{}}],["absenc",{"_index":6809,"title":{},"name":{},"text":{"66":{}},"component":{}}],["absent",{"_index":4938,"title":{},"name":{},"text":{"49":{},"50":{},"61":{}},"component":{}}],["absolut",{"_index":1210,"title":{},"name":{},"text":{"17":{},"33":{},"37":{}},"component":{}}],["abstract",{"_index":2879,"title":{},"name":{},"text":{"34":{},"36":{},"44":{},"52":{},"67":{}},"component":{}}],["abstractconnect",{"_index":4176,"title":{},"name":{},"text":{"44":{},"52":{},"65":{}},"component":{}}],["abstractconnection.onfil",{"_index":5907,"title":{},"name":{},"text":{"61":{}},"component":{}}],["abstractconnectionfactori",{"_index":6504,"title":{},"name":{},"text":{"65":{}},"component":{}}],["abstracthandl",{"_index":5377,"title":{},"name":{},"text":{"55":{}},"component":{}}],["abstractlifecycl",{"_index":4088,"title":{},"name":{},"text":{"43":{}},"component":{}}],["abstractsessioncach",{"_index":6617,"title":{},"name":{},"text":{"66":{}},"component":{}}],["abstractsessiondatastor",{"_index":6661,"title":{},"name":{},"text":{"66":{}},"component":{}}],["abstractsessionmanag",{"_index":6683,"title":{},"name":{},"text":{"66":{}},"component":{}}],["accept",{"_index":992,"title":{},"name":{},"text":{"9":{},"10":{},"25":{},"32":{},"33":{},"34":{},"36":{},"38":{},"41":{},"44":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["accept(serversocketchannel",{"_index":4154,"title":{},"name":{},"text":{"44":{}},"component":{}}],["acceptor",{"_index":2326,"title":{"33-9":{},"61-11":{}},"name":{},"text":{"33":{},"41":{},"44":{},"61":{}},"component":{}}],["acceptor.accept",{"_index":4155,"title":{},"name":{},"text":{"44":{}},"component":{}}],["acceptqueues",{"_index":5966,"title":{},"name":{},"text":{"61":{}},"component":{}}],["access",{"_index":938,"title":{"25-3":{},"25-4":{},"25-5":{},"45-2":{},"45-3":{},"45-4":{},"45-5":{}},"name":{},"text":{"8":{},"20":{},"23":{},"25":{},"26":{},"28":{},"30":{},"33":{},"36":{},"37":{},"40":{},"41":{},"42":{},"43":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"61":{},"62":{},"63":{},"66":{},"67":{}},"component":{}}],["accesstim",{"_index":3493,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["accident",{"_index":2836,"title":{},"name":{},"text":{"33":{}},"component":{}}],["accompani",{"_index":832,"title":{},"name":{},"text":{"7":{},"19":{}},"component":{}}],["accomplish",{"_index":2018,"title":{},"name":{},"text":{"27":{},"30":{},"56":{}},"component":{}}],["accord",{"_index":1173,"title":{},"name":{},"text":{"17":{},"37":{},"56":{},"61":{},"66":{}},"component":{}}],["accordingli",{"_index":998,"title":{},"name":{},"text":{"10":{},"34":{},"49":{}},"component":{}}],["account",{"_index":980,"title":{},"name":{},"text":{"9":{},"37":{},"47":{},"56":{},"61":{},"66":{}},"component":{}}],["accumul",{"_index":4292,"title":{},"name":{},"text":{"44":{},"66":{}},"component":{}}],["accur",{"_index":4470,"title":{},"name":{},"text":{"47":{},"48":{}},"component":{}}],["achiev",{"_index":521,"title":{},"name":{},"text":{"4":{},"19":{},"25":{},"32":{},"37":{},"39":{},"48":{},"56":{},"61":{}},"component":{}}],["acid",{"_index":3630,"title":{},"name":{},"text":{"37":{}},"component":{}}],["acm",{"_index":2228,"title":{},"name":{},"text":{"31":{},"32":{}},"component":{}}],["acme.mod",{"_index":2270,"title":{},"name":{},"text":{"32":{}},"component":{}}],["acquir",{"_index":2468,"title":{},"name":{},"text":{"33":{}},"component":{}}],["act",{"_index":352,"title":{},"name":{},"text":{"3":{},"12":{},"25":{},"30":{},"34":{},"45":{},"49":{},"61":{}},"component":{}}],["action",{"_index":1025,"title":{},"name":{},"text":{"10":{},"23":{},"28":{},"44":{},"45":{},"48":{},"53":{},"61":{},"65":{}},"component":{}}],["action.idl",{"_index":4219,"title":{},"name":{},"text":{"44":{},"65":{}},"component":{}}],["action.schedul",{"_index":4218,"title":{},"name":{},"text":{"44":{},"53":{},"65":{}},"component":{}}],["action.succeed",{"_index":4222,"title":{},"name":{},"text":{"44":{},"53":{},"65":{}},"component":{}}],["action_info",{"_index":4431,"title":{},"name":{},"text":{"45":{}},"component":{}}],["activ",{"_index":146,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"8":{},"9":{},"10":{},"11":{},"12":{},"20":{},"24":{},"34":{},"37":{},"38":{},"43":{},"44":{},"48":{},"50":{},"52":{},"56":{},"61":{}},"component":{}}],["activemq",{"_index":1974,"title":{},"name":{},"text":{"26":{}},"component":{}}],["actual",{"_index":679,"title":{},"name":{},"text":{"7":{},"37":{},"41":{},"47":{},"48":{},"54":{},"59":{},"61":{},"66":{}},"component":{}}],["ad",{"_index":1002,"title":{"38-6":{}},"name":{},"text":{"10":{},"13":{},"19":{},"23":{},"24":{},"25":{},"28":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"43":{},"44":{},"45":{},"47":{},"48":{},"56":{},"61":{}},"component":{}}],["adapt",{"_index":4440,"title":{"47-5":{}},"name":{},"text":{"47":{},"66":{}},"component":{}}],["adaptiveexecutionstrategi",{"_index":4462,"title":{},"name":{},"text":{"47":{}},"component":{}}],["adaptiveexecutionstrategy@198b6731/selectorproducer@7c6908d7/producing/p=0/queuedthreadpool[qtp1860513229]@6ee52dcd{started,4",{"_index":3959,"title":{},"name":{},"text":{"41":{}},"component":{}}],["add",{"_index":812,"title":{},"name":{},"text":{"7":{},"18":{},"19":{},"20":{},"24":{},"25":{},"27":{},"28":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"50":{},"53":{},"55":{},"56":{},"61":{},"62":{},"63":{},"66":{},"67":{}},"component":{}}],["add(uri",{"_index":4799,"title":{},"name":{},"text":{"48":{}},"component":{}}],["add/remov",{"_index":4114,"title":{},"name":{},"text":{"43":{}},"component":{}}],["addapp",{"_index":1605,"title":{},"name":{},"text":{"20":{}},"component":{}}],["addbean(schedul",{"_index":4094,"title":{},"name":{},"text":{"43":{}},"component":{}}],["addcookie(cooki",{"_index":4815,"title":{},"name":{},"text":{"48":{}},"component":{}}],["addcount(@name(\"count",{"_index":4426,"title":{},"name":{},"text":{"45":{}},"component":{}}],["addcount(int",{"_index":4418,"title":{},"name":{},"text":{"45":{}},"component":{}}],["added/changed/remov",{"_index":1342,"title":{},"name":{},"text":{"19":{}},"component":{}}],["added/replac",{"_index":6345,"title":{},"name":{},"text":{"61":{}},"component":{}}],["adding/remov",{"_index":4113,"title":{},"name":{},"text":{"43":{},"61":{}},"component":{}}],["addit",{"_index":92,"title":{},"name":{},"text":{"1":{},"7":{},"10":{},"11":{},"19":{},"27":{},"30":{},"31":{},"32":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"44":{},"45":{},"47":{},"48":{},"52":{},"53":{},"56":{},"59":{},"61":{},"66":{},"67":{}},"component":{}}],["addition",{"_index":565,"title":{},"name":{},"text":{"4":{}},"component":{}}],["addmanaged(monitor",{"_index":4089,"title":{},"name":{},"text":{"43":{}},"component":{}}],["address",{"_index":309,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"10":{},"12":{},"19":{},"25":{},"30":{},"33":{},"34":{},"36":{},"37":{},"41":{},"45":{},"48":{},"49":{},"50":{},"52":{},"56":{},"61":{},"67":{}},"component":{}}],["adds/remov",{"_index":6108,"title":{},"name":{},"text":{"61":{}},"component":{}}],["adequ",{"_index":6028,"title":{},"name":{},"text":{"61":{}},"component":{}}],["adher",{"_index":1014,"title":{},"name":{},"text":{"10":{}},"component":{}}],["adjust",{"_index":3211,"title":{},"name":{},"text":{"34":{}},"component":{}}],["admin",{"_index":4831,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["administr",{"_index":1298,"title":{},"name":{},"text":{"18":{},"61":{}},"component":{}}],["adminrealm",{"_index":4830,"title":{},"name":{},"text":{"48":{}},"component":{}}],["admonit",{"_index":637,"title":{"7-16":{}},"name":{},"text":{"7":{}},"component":{}}],["admonition’",{"_index":867,"title":{},"name":{},"text":{"7":{}},"component":{}}],["adoc",{"_index":819,"title":{},"name":{},"text":{"7":{}},"component":{}}],["adopt",{"_index":328,"title":{},"name":{},"text":{"2":{}},"component":{}}],["adoptium",{"_index":3671,"title":{},"name":{},"text":{"38":{},"41":{}},"component":{}}],["advanc",{"_index":660,"title":{"20-7":{},"39-1":{},"67-5":{}},"name":{},"text":{"7":{},"14":{},"34":{},"44":{},"48":{},"49":{},"52":{},"61":{},"67":{},"71":{}},"component":{}}],["advantag",{"_index":668,"title":{},"name":{},"text":{"7":{},"26":{},"34":{},"47":{},"61":{}},"component":{}}],["advent",{"_index":4911,"title":{},"name":{},"text":{"48":{}},"component":{}}],["advertis",{"_index":2935,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["advic",{"_index":2630,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["advis",{"_index":3378,"title":{},"name":{},"text":{"37":{}},"component":{}}],["affect",{"_index":381,"title":{},"name":{},"text":{"3":{},"17":{},"18":{},"47":{},"56":{},"61":{},"67":{}},"component":{}}],["aforement",{"_index":789,"title":{},"name":{},"text":{"7":{},"37":{}},"component":{}}],["afterhandl",{"_index":6148,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ag",{"_index":2754,"title":{},"name":{},"text":{"33":{},"66":{}},"component":{}}],["again",{"_index":1891,"title":{},"name":{},"text":{"25":{},"30":{},"33":{},"34":{},"37":{},"38":{},"42":{},"44":{},"48":{},"49":{},"52":{},"53":{},"59":{},"61":{},"62":{},"65":{},"66":{}},"component":{}}],["against",{"_index":1325,"title":{},"name":{},"text":{"19":{},"33":{},"34":{},"48":{},"61":{},"67":{}},"component":{}}],["agent",{"_index":3299,"title":{},"name":{},"text":{"36":{},"38":{},"48":{},"61":{}},"component":{}}],["agent(\"mozilla/5.0",{"_index":4555,"title":{},"name":{},"text":{"48":{}},"component":{}}],["agentlib:jdwp",{"_index":4012,"title":{},"name":{},"text":{"41":{}},"component":{}}],["agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005",{"_index":4011,"title":{},"name":{},"text":{"41":{}},"component":{}}],["agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000",{"_index":6929,"title":{},"name":{},"text":{"69":{}},"component":{}}],["agent}i",{"_index":2554,"title":{},"name":{},"text":{"33":{}},"component":{}}],["aggreg",{"_index":4162,"title":{},"name":{},"text":{"44":{},"52":{}},"component":{}}],["agil",{"_index":68,"title":{},"name":{},"text":{"1":{}},"component":{}}],["agnost",{"_index":6545,"title":{},"name":{},"text":{"66":{}},"component":{}}],["ago",{"_index":3411,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["agreement",{"_index":972,"title":{"9":{}},"name":{},"text":{"9":{},"10":{}},"component":{}}],["ahead",{"_index":87,"title":{},"name":{},"text":{"1":{},"34":{}},"component":{}}],["aim",{"_index":1659,"title":{},"name":{},"text":{"23":{}},"component":{}}],["aka",{"_index":2427,"title":{},"name":{},"text":{"33":{},"66":{}},"component":{}}],["alert",{"_index":4202,"title":{},"name":{},"text":{"44":{}},"component":{}}],["algorithm",{"_index":2148,"title":{},"name":{},"text":{"30":{},"33":{},"45":{},"48":{},"56":{}},"component":{}}],["alia",{"_index":2001,"title":{},"name":{},"text":{"26":{},"30":{},"36":{}},"component":{}}],["alic",{"_index":1901,"title":{},"name":{},"text":{"25":{}},"component":{}}],["align",{"_index":3256,"title":{},"name":{},"text":{"36":{}},"component":{}}],["alik",{"_index":552,"title":{},"name":{},"text":{"4":{},"56":{}},"component":{}}],["aliv",{"_index":2607,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["all_caps_for_public_const",{"_index":1077,"title":{},"name":{},"text":{"13":{}},"component":{}}],["all_module_path",{"_index":3829,"title":{},"name":{},"text":{"39":{}},"component":{}}],["alloc",{"_index":2216,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"37":{},"44":{},"47":{},"48":{},"61":{},"66":{}},"component":{}}],["allow",{"_index":1279,"title":{},"name":{},"text":{"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"28":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"54":{},"56":{},"59":{},"61":{},"62":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["allowcredenti",{"_index":6228,"title":{},"name":{},"text":{"61":{}},"component":{}}],["allowcredentials=fals",{"_index":6229,"title":{},"name":{},"text":{"61":{}},"component":{}}],["allowcredentials=tru",{"_index":6230,"title":{},"name":{},"text":{"61":{}},"component":{}}],["allowedorigin",{"_index":6223,"title":{},"name":{},"text":{"61":{}},"component":{}}],["allparamet",{"_index":5635,"title":{},"name":{},"text":{"57":{}},"component":{}}],["alon",{"_index":6934,"title":{},"name":{},"text":{"71":{}},"component":{}}],["along",{"_index":956,"title":{},"name":{},"text":{"8":{},"25":{},"30":{},"37":{},"38":{},"41":{},"61":{},"66":{}},"component":{}}],["alongsid",{"_index":683,"title":{},"name":{},"text":{"7":{},"19":{},"20":{}},"component":{}}],["alpha",{"_index":1498,"title":{},"name":{},"text":{"20":{}},"component":{}}],["alpn",{"_index":2323,"title":{"33-1":{}},"name":{},"text":{"33":{},"34":{},"48":{},"61":{}},"component":{}}],["alpn.getprotocol",{"_index":5939,"title":{},"name":{},"text":{"61":{}},"component":{}}],["alpn.setdefaultprotocol(h1.getprotocol",{"_index":5936,"title":{},"name":{},"text":{"61":{}},"component":{}}],["alpn.setdefaultprotocol(http11.getprotocol",{"_index":6018,"title":{},"name":{},"text":{"61":{}},"component":{}}],["alpn.setdefaultprotocol(https.getprotocol",{"_index":5986,"title":{},"name":{},"text":{"61":{}},"component":{}}],["alpnserverconnectionfactori",{"_index":5935,"title":{},"name":{},"text":{"61":{}},"component":{}}],["alreadi",{"_index":600,"title":{},"name":{},"text":{"6":{},"21":{},"25":{},"26":{},"27":{},"28":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"42":{},"44":{},"47":{},"48":{},"52":{},"56":{},"59":{},"61":{},"66":{},"67":{}},"component":{}}],["alt",{"_index":6022,"title":{},"name":{},"text":{"61":{}},"component":{}}],["alter",{"_index":4107,"title":{},"name":{},"text":{"43":{}},"component":{}}],["altern",{"_index":1687,"title":{},"name":{},"text":{"23":{},"30":{},"34":{},"37":{},"38":{},"41":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["although",{"_index":666,"title":{},"name":{},"text":{"7":{},"11":{},"18":{},"19":{},"25":{},"30":{},"34":{},"37":{},"42":{},"44":{},"48":{},"53":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["alway",{"_index":1087,"title":{},"name":{},"text":{"13":{},"18":{},"19":{},"34":{},"35":{},"37":{},"38":{},"44":{},"45":{},"47":{},"48":{},"53":{},"61":{},"63":{},"66":{}},"component":{}}],["ambigu",{"_index":5825,"title":{},"name":{},"text":{"59":{}},"component":{}}],["ambiguous_path_separ",{"_index":2720,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["amd64",{"_index":3987,"title":{},"name":{},"text":{"41":{}},"component":{}}],["america/los_angel",{"_index":3260,"title":{},"name":{},"text":{"36":{}},"component":{}}],["amongst",{"_index":6543,"title":{},"name":{},"text":{"66":{}},"component":{}}],["amount",{"_index":1221,"title":{},"name":{},"text":{"17":{},"28":{},"33":{},"37":{},"41":{},"66":{}},"component":{}}],["analog",{"_index":5489,"title":{},"name":{},"text":{"56":{},"66":{}},"component":{}}],["analysi",{"_index":5523,"title":{},"name":{},"text":{"56":{}},"component":{}}],["analyz",{"_index":3289,"title":{},"name":{},"text":{"36":{},"53":{},"61":{},"67":{}},"component":{}}],["ancient",{"_index":292,"title":{},"name":{},"text":{"2":{}},"component":{}}],["and/or",{"_index":1517,"title":{},"name":{},"text":{"20":{},"32":{},"34":{},"37":{},"38":{},"53":{},"61":{},"66":{}},"component":{}}],["anew",{"_index":4093,"title":{},"name":{},"text":{"43":{}},"component":{}}],["anim",{"_index":3431,"title":{},"name":{},"text":{"37":{}},"component":{}}],["annot",{"_index":336,"title":{"17":{},"17-1":{},"45-6":{},"53-13":{}},"name":{},"text":{"2":{},"8":{},"17":{},"21":{},"26":{},"28":{},"34":{},"35":{},"41":{},"42":{},"45":{},"53":{},"56":{},"57":{},"67":{}},"component":{}}],["annotatedendpoint",{"_index":5241,"title":{},"name":{},"text":{"53":{}},"component":{}}],["announc",{"_index":504,"title":{"4-7":{}},"name":{},"text":{"4":{},"6":{}},"component":{}}],["announce@eclipse.org",{"_index":188,"title":{},"name":{},"text":{"2":{}},"component":{}}],["anoth",{"_index":591,"title":{},"name":{},"text":{"6":{},"7":{},"19":{},"26":{},"28":{},"32":{},"33":{},"37":{},"38":{},"41":{},"44":{},"47":{},"48":{},"49":{},"51":{},"53":{},"56":{},"61":{},"62":{},"64":{},"65":{},"66":{}},"component":{}}],["answer",{"_index":551,"title":{},"name":{},"text":{"4":{},"71":{}},"component":{}}],["ant",{"_index":2053,"title":{},"name":{},"text":{"28":{},"55":{},"56":{},"57":{}},"component":{}}],["antiqu",{"_index":283,"title":{},"name":{},"text":{"2":{}},"component":{}}],["antora",{"_index":673,"title":{},"name":{},"text":{"7":{}},"component":{}}],["anymor",{"_index":3284,"title":{},"name":{},"text":{"36":{},"44":{},"48":{},"49":{},"50":{},"61":{},"65":{},"67":{}},"component":{}}],["anyth",{"_index":991,"title":{},"name":{},"text":{"9":{},"20":{}},"component":{}}],["anyway",{"_index":6242,"title":{},"name":{},"text":{"61":{}},"component":{}}],["anywher",{"_index":1390,"title":{},"name":{},"text":{"19":{},"33":{}},"component":{}}],["apach",{"_index":106,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"28":{},"32":{},"34":{},"36":{},"37":{},"48":{},"55":{},"57":{},"61":{}},"component":{}}],["apache’",{"_index":2617,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["api",{"_index":175,"title":{"48-7":{},"48-8":{},"48-9":{},"53-18":{},"57-5":{},"57-6":{},"57-7":{},"57-8":{},"57-9":{},"61-37":{},"67-1":{},"67-6":{}},"name":{},"text":{"2":{},"5":{},"8":{},"16":{},"18":{},"19":{},"24":{},"25":{},"27":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"62":{},"65":{},"66":{},"67":{},"68":{},"71":{},"72":{}},"component":{}}],["api.domain.com",{"_index":6066,"title":{},"name":{},"text":{"61":{}},"component":{}}],["api/product",{"_index":6064,"title":{},"name":{},"text":{"61":{}},"component":{}}],["apicontext",{"_index":6079,"title":{},"name":{},"text":{"61":{}},"component":{}}],["app",{"_index":1331,"title":{},"name":{},"text":{"19":{},"35":{},"37":{},"61":{}},"component":{}}],["app.properti",{"_index":1375,"title":{},"name":{},"text":{"19":{}},"component":{}}],["app.war",{"_index":1374,"title":{},"name":{},"text":{"19":{}},"component":{}}],["app1",{"_index":6648,"title":{},"name":{},"text":{"66":{}},"component":{}}],["app1.getsessionhandler().setsessioncache(cach",{"_index":6705,"title":{},"name":{},"text":{"66":{}},"component":{}}],["app1.setcontextpath(\"/app1",{"_index":6649,"title":{},"name":{},"text":{"66":{}},"component":{}}],["app1handl",{"_index":6050,"title":{},"name":{},"text":{"61":{}},"component":{}}],["app2",{"_index":6651,"title":{},"name":{},"text":{"66":{}},"component":{}}],["app2.getsessionhandler().setsessioncache(nullsessioncach",{"_index":6658,"title":{},"name":{},"text":{"66":{}},"component":{}}],["app2.setcontextpath(\"/app2",{"_index":6652,"title":{},"name":{},"text":{"66":{}},"component":{}}],["app2handl",{"_index":6051,"title":{},"name":{},"text":{"61":{}},"component":{}}],["app@2a266d09[ee10,null,/path/to/jetty.hom",{"_index":1606,"title":{},"name":{},"text":{"20":{}},"component":{}}],["appar",{"_index":2807,"title":{},"name":{},"text":{"33":{}},"component":{}}],["appear",{"_index":856,"title":{},"name":{},"text":{"7":{},"37":{},"38":{}},"component":{}}],["append",{"_index":2285,"title":{},"name":{},"text":{"32":{},"33":{},"36":{},"37":{},"38":{},"71":{}},"component":{}}],["appendtofile(partialpayload",{"_index":5246,"title":{},"name":{},"text":{"53":{}},"component":{}}],["appendtofile(payload",{"_index":5239,"title":{},"name":{},"text":{"53":{}},"component":{}}],["appendtofile(stream",{"_index":5251,"title":{},"name":{},"text":{"53":{}},"component":{}}],["appengin",{"_index":3379,"title":{},"name":{},"text":{"37":{}},"component":{}}],["appeventshandl",{"_index":6171,"title":{},"name":{},"text":{"61":{}},"component":{}}],["apphandl",{"_index":6054,"title":{},"name":{},"text":{"61":{}},"component":{}}],["applet",{"_index":1653,"title":{},"name":{},"text":{"23":{}},"component":{}}],["applewebkit/537.36",{"_index":3307,"title":{},"name":{},"text":{"36":{}},"component":{}}],["appli",{"_index":1244,"title":{},"name":{},"text":{"17":{},"26":{},"28":{},"33":{},"34":{},"37":{},"38":{},"42":{},"44":{},"56":{},"59":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["applic",{"_index":648,"title":{"19":{},"35":{},"19-11":{},"20-5":{},"55-8":{},"61-51":{},"61-52":{}},"name":{},"text":{"7":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"71":{}},"component":{}}],["application/json",{"_index":4987,"title":{},"name":{},"text":{"49":{},"50":{},"61":{}},"component":{}}],["application/x",{"_index":6300,"title":{},"name":{},"text":{"61":{}},"component":{}}],["application’",{"_index":1578,"title":{},"name":{},"text":{"20":{},"67":{}},"component":{}}],["appoint",{"_index":515,"title":{},"name":{},"text":{"4":{}},"component":{}}],["approach",{"_index":361,"title":{},"name":{},"text":{"3":{},"7":{},"48":{},"56":{}},"component":{}}],["appropri",{"_index":564,"title":{},"name":{},"text":{"4":{},"6":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"37":{},"45":{},"52":{},"56":{},"61":{},"66":{}},"component":{}}],["approv",{"_index":3820,"title":{},"name":{},"text":{"38":{},"67":{}},"component":{}}],["approxim",{"_index":3386,"title":{},"name":{},"text":{"37":{}},"component":{}}],["arbitrari",{"_index":1429,"title":{},"name":{},"text":{"19":{},"34":{},"36":{},"56":{},"61":{}},"component":{}}],["arch",{"_index":5079,"title":{},"name":{"52":{},"65":{}},"text":{},"component":{}}],["arch/bean.adoc#listen",{"_index":4435,"title":{},"name":{},"text":{"46":{}},"component":{}}],["arch/io.adoc#connect",{"_index":4436,"title":{},"name":{},"text":{"46":{}},"component":{}}],["archetyp",{"_index":5365,"title":{},"name":{},"text":{"55":{}},"component":{}}],["architect",{"_index":6537,"title":{},"name":{},"text":{"66":{}},"component":{}}],["architectur",{"_index":1256,"title":{"18":{},"43":{},"44":{},"47":{},"52":{},"65":{},"48-4":{},"53-8":{},"66-1":{}},"name":{},"text":{"20":{},"38":{},"43":{},"44":{},"45":{},"46":{},"47":{},"51":{},"52":{},"53":{},"61":{},"64":{},"65":{},"67":{}},"component":{}}],["archiv",{"_index":544,"title":{},"name":{},"text":{"4":{},"6":{},"16":{},"20":{},"55":{},"61":{}},"component":{}}],["aren’t",{"_index":1045,"title":{},"name":{},"text":{"11":{}},"component":{}}],["arg",{"_index":2009,"title":{"42-3":{}},"name":{},"text":{"26":{},"38":{},"42":{},"55":{}},"component":{}}],["args=$(java",{"_index":3756,"title":{},"name":{},"text":{"38":{}},"component":{}}],["argument",{"_index":1954,"title":{},"name":{},"text":{"26":{},"32":{},"37":{},"38":{},"42":{},"53":{},"56":{}},"component":{}}],["arm",{"_index":53,"title":{},"name":{},"text":{"1":{}},"component":{}}],["around",{"_index":763,"title":{},"name":{},"text":{"7":{},"28":{},"44":{},"45":{},"47":{},"48":{},"53":{},"57":{},"65":{},"66":{}},"component":{}}],["arrang",{"_index":4291,"title":{},"name":{},"text":{"44":{},"48":{},"49":{},"62":{}},"component":{}}],["array",{"_index":2075,"title":{"42-10":{}},"name":{},"text":{"28":{},"34":{},"41":{},"42":{},"56":{}},"component":{}}],["arraylist",{"_index":4040,"title":{},"name":{},"text":{"42":{},"44":{}},"component":{}}],["arraylist().listiterator(0).next",{"_index":4043,"title":{},"name":{},"text":{"42":{}},"component":{}}],["arraylist(16",{"_index":4042,"title":{},"name":{},"text":{"42":{}},"component":{}}],["arriv",{"_index":1265,"title":{},"name":{},"text":{"18":{},"25":{},"33":{},"34":{},"36":{},"37":{},"45":{},"47":{},"48":{},"53":{},"61":{},"67":{}},"component":{}}],["artifact",{"_index":888,"title":{"8-7":{},"57-2":{},"58-3":{}},"name":{},"text":{"8":{},"20":{},"32":{},"36":{},"38":{},"48":{},"49":{},"50":{},"53":{},"58":{},"61":{},"62":{},"63":{},"67":{},"71":{}},"component":{}}],["artifactid",{"_index":5424,"title":{},"name":{},"text":{"56":{}},"component":{}}],["as=styl",{"_index":6378,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ascii",{"_index":1445,"title":{},"name":{},"text":{"19":{}},"component":{}}],["asciidoc",{"_index":621,"title":{"7-3":{},"7-13":{}},"name":{},"text":{"7":{}},"component":{}}],["asciidoctor",{"_index":622,"title":{"7-4":{}},"name":{},"text":{"7":{},"8":{}},"component":{}}],["asciidoctor’",{"_index":733,"title":{},"name":{},"text":{"7":{}},"component":{}}],["asid",{"_index":4679,"title":{},"name":{},"text":{"48":{}},"component":{}}],["ask",{"_index":55,"title":{},"name":{},"text":{"1":{},"4":{},"18":{},"37":{},"47":{},"48":{},"61":{},"65":{},"67":{}},"component":{}}],["assembl",{"_index":1268,"title":{"38-12":{}},"name":{},"text":{"18":{},"20":{},"32":{},"38":{},"54":{},"55":{},"56":{},"61":{}},"component":{}}],["assent",{"_index":3513,"title":{},"name":{},"text":{"37":{}},"component":{}}],["asset",{"_index":168,"title":{},"name":{},"text":{"2":{}},"component":{}}],["assign",{"_index":2168,"title":{},"name":{},"text":{"30":{},"32":{},"38":{},"42":{},"45":{}},"component":{}}],["associ",{"_index":1324,"title":{},"name":{},"text":{"19":{},"26":{},"33":{},"37":{},"44":{},"48":{},"53":{},"61":{},"65":{},"66":{}},"component":{}}],["assum",{"_index":1580,"title":{},"name":{},"text":{"20":{},"23":{},"31":{},"34":{},"39":{},"49":{},"61":{},"62":{},"66":{}},"component":{}}],["assumpt",{"_index":2475,"title":{},"name":{},"text":{"33":{},"52":{}},"component":{}}],["async",{"_index":2043,"title":{},"name":{},"text":{"28":{}},"component":{}}],["asynccontentlistener.oncontent(respons",{"_index":4683,"title":{},"name":{},"text":{"48":{}},"component":{}}],["asynchron",{"_index":2803,"title":{},"name":{},"text":{"33":{},"41":{},"44":{},"47":{},"48":{},"49":{},"51":{},"53":{},"57":{},"61":{},"62":{},"65":{},"72":{}},"component":{}}],["asyncjson",{"_index":6510,"title":{},"name":{},"text":{"65":{}},"component":{}}],["asyncjson.factory().newasyncjson",{"_index":6511,"title":{},"name":{},"text":{"65":{}},"component":{}}],["asyncrequestcont",{"_index":4627,"title":{},"name":{},"text":{"48":{}},"component":{}}],["atomicinteg",{"_index":4192,"title":{},"name":{},"text":{"44":{}},"component":{}}],["attach",{"_index":1835,"title":{},"name":{},"text":{"25":{},"41":{},"43":{},"44":{},"48":{}},"component":{}}],["attack",{"_index":2394,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["attempt",{"_index":1785,"title":{},"name":{},"text":{"23":{},"28":{},"34":{},"37":{},"42":{},"44":{},"48":{},"52":{},"66":{}},"component":{}}],["attent",{"_index":6565,"title":{},"name":{},"text":{"66":{}},"component":{}}],["attribut",{"_index":1052,"title":{},"name":{},"text":{"12":{},"17":{},"23":{},"27":{},"28":{},"33":{},"34":{},"35":{},"37":{},"39":{},"41":{},"42":{},"45":{},"53":{},"56":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["au",{"_index":3684,"title":{},"name":{},"text":{"38":{}},"component":{}}],["audienc",{"_index":532,"title":{},"name":{},"text":{"4":{},"7":{}},"component":{}}],["audit",{"_index":2238,"title":{},"name":{},"text":{"31":{}},"component":{}}],["audit.ini",{"_index":2261,"title":{},"name":{},"text":{"31":{}},"component":{}}],["audit.jar",{"_index":2248,"title":{},"name":{},"text":{"31":{}},"component":{}}],["audit.mod",{"_index":2257,"title":{},"name":{},"text":{"31":{}},"component":{}}],["audit.xml",{"_index":2252,"title":{},"name":{},"text":{"31":{}},"component":{}}],["auditingeventshandl",{"_index":2247,"title":{},"name":{},"text":{"31":{}},"component":{}}],["augment",{"_index":2037,"title":{},"name":{},"text":{"28":{},"59":{}},"component":{}}],["australia/brisban",{"_index":3993,"title":{},"name":{},"text":{"41":{}},"component":{}}],["auth",{"_index":1799,"title":{},"name":{},"text":{"24":{},"25":{},"33":{},"37":{},"48":{},"66":{}},"component":{}}],["auth.addauthentication(new",{"_index":4824,"title":{},"name":{},"text":{"48":{}},"component":{}}],["auth.addauthenticationresult(new",{"_index":4839,"title":{},"name":{},"text":{"48":{}},"component":{}}],["auth.ini",{"_index":1898,"title":{},"name":{},"text":{"25":{}},"component":{}}],["auth.xml",{"_index":1897,"title":{},"name":{},"text":{"25":{}},"component":{}}],["authconfigfactori",{"_index":1811,"title":{},"name":{},"text":{"24":{}},"component":{}}],["authconfigfactory.getfactori",{"_index":1812,"title":{},"name":{},"text":{"24":{}},"component":{}}],["authconfigfactory.setfactori",{"_index":1827,"title":{},"name":{},"text":{"24":{}},"component":{}}],["authconfigprovid",{"_index":1810,"title":{},"name":{},"text":{"24":{}},"component":{}}],["authen",{"_index":1719,"title":{},"name":{},"text":{"23":{}},"component":{}}],["authent",{"_index":1648,"title":{"24-5":{},"25-4":{},"30-5":{},"48-20":{},"48-21":{},"48-24":{}},"name":{},"text":{"23":{},"24":{},"25":{},"30":{},"33":{},"36":{},"37":{},"40":{},"44":{},"45":{},"48":{},"49":{},"50":{},"53":{},"61":{},"66":{},"67":{}},"component":{}}],["authentication.result",{"_index":4832,"title":{},"name":{},"text":{"48":{}},"component":{}}],["authentication/author",{"_index":1747,"title":{},"name":{},"text":{"23":{}},"component":{}}],["authenticationmethod=\"simpl",{"_index":1753,"title":{},"name":{},"text":{"23":{}},"component":{}}],["authenticationstor",{"_index":4518,"title":{},"name":{},"text":{"48":{}},"component":{}}],["authmoduleconfig.xml",{"_index":1807,"title":{},"name":{},"text":{"24":{}},"component":{}}],["authmoduleconfig.xml|etc/jaspi/jetti",{"_index":1809,"title":{},"name":{},"text":{"24":{}},"component":{}}],["authn",{"_index":4842,"title":{},"name":{},"text":{"48":{}},"component":{}}],["authn.apply(request",{"_index":4844,"title":{},"name":{},"text":{"48":{}},"component":{}}],["author",{"_index":1012,"title":{"25-4":{},"45-3":{}},"name":{},"text":{"10":{},"23":{},"25":{},"30":{},"33":{},"34":{},"45":{},"48":{},"61":{}},"component":{}}],["auto",{"_index":1553,"title":{},"name":{},"text":{"20":{},"35":{},"37":{},"41":{},"53":{},"66":{}},"component":{}}],["autoconfigur",{"_index":6260,"title":{},"name":{},"text":{"61":{}},"component":{}}],["autodemand",{"_index":5200,"title":{},"name":{},"text":{"53":{}},"component":{}}],["autodemandannotatedendpoint",{"_index":5201,"title":{},"name":{},"text":{"53":{}},"component":{}}],["autodemandlistenerendpoint",{"_index":5207,"title":{},"name":{},"text":{"53":{}},"component":{}}],["autofrag",{"_index":5264,"title":{},"name":{},"text":{"53":{}},"component":{}}],["autom",{"_index":3115,"title":{},"name":{},"text":{"34":{},"67":{}},"component":{}}],["automat",{"_index":905,"title":{},"name":{},"text":{"8":{},"20":{},"26":{},"30":{},"33":{},"36":{},"37":{},"39":{},"43":{},"48":{},"53":{},"56":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["avail",{"_index":187,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"8":{},"13":{},"18":{},"19":{},"20":{},"25":{},"26":{},"29":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["avenu",{"_index":341,"title":{},"name":{},"text":{"3":{}},"component":{}}],["averag",{"_index":2477,"title":{},"name":{},"text":{"33":{},"61":{},"66":{}},"component":{}}],["avoid",{"_index":805,"title":{},"name":{},"text":{"7":{},"13":{},"19":{},"32":{},"33":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"59":{},"61":{},"62":{}},"component":{}}],["await",{"_index":4635,"title":{},"name":{},"text":{"48":{}},"component":{}}],["awar",{"_index":871,"title":{},"name":{},"text":{"7":{},"26":{},"37":{},"48":{},"56":{}},"component":{}}],["away",{"_index":4300,"title":{},"name":{},"text":{"44":{},"49":{},"56":{},"62":{}},"component":{}}],["a’",{"_index":5550,"title":{},"name":{},"text":{"56":{}},"component":{}}],["b",{"_index":5030,"title":{},"name":{},"text":{"49":{},"56":{},"62":{}},"component":{}}],["b.war",{"_index":5554,"title":{},"name":{},"text":{"56":{}},"component":{}}],["b3e9",{"_index":2080,"title":{},"name":{},"text":{"28":{}},"component":{}}],["b6",{"_index":3000,"title":{},"name":{},"text":{"34":{}},"component":{}}],["b8",{"_index":2994,"title":{},"name":{},"text":{"34":{}},"component":{}}],["back",{"_index":137,"title":{},"name":{},"text":{"1":{},"30":{},"34":{},"37":{},"41":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{}},"component":{}}],["backend",{"_index":1294,"title":{},"name":{},"text":{"18":{},"34":{},"37":{},"61":{}},"component":{}}],["background",{"_index":2046,"title":{},"name":{},"text":{"28":{},"37":{},"56":{}},"component":{}}],["backlog",{"_index":609,"title":{},"name":{},"text":{"6":{},"33":{}},"component":{}}],["backoff",{"_index":6817,"title":{},"name":{},"text":{"66":{}},"component":{}}],["backoffm",{"_index":6815,"title":{},"name":{},"text":{"66":{}},"component":{}}],["backpressur",{"_index":4275,"title":{},"name":{},"text":{"44":{},"67":{}},"component":{}}],["backup",{"_index":3540,"title":{},"name":{},"text":{"37":{}},"component":{}}],["backward",{"_index":2685,"title":{},"name":{},"text":{"33":{},"34":{},"42":{},"59":{}},"component":{}}],["bad",{"_index":1067,"title":{},"name":{},"text":{"13":{},"33":{},"34":{},"41":{},"61":{}},"component":{}}],["bake",{"_index":5472,"title":{},"name":{},"text":{"56":{}},"component":{}}],["balanc",{"_index":1293,"title":{"34-22":{},"37-45":{},"37-46":{},"41-6":{},"61-21":{}},"name":{},"text":{"18":{},"19":{},"20":{},"22":{},"34":{},"36":{},"37":{},"41":{},"47":{},"61":{},"65":{},"66":{}},"component":{}}],["bar",{"_index":1203,"title":{},"name":{},"text":{"17":{},"48":{},"59":{}},"component":{}}],["bar.jsp",{"_index":5535,"title":{},"name":{},"text":{"56":{}},"component":{}}],["bar;baz",{"_index":4811,"title":{},"name":{},"text":{"48":{}},"component":{}}],["base",{"_index":1266,"title":{"37-4":{}},"name":{},"text":{"18":{},"20":{},"23":{},"28":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{},"46":{},"48":{},"50":{},"52":{},"55":{},"56":{},"61":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["base/etc/test",{"_index":2918,"title":{},"name":{},"text":{"34":{}},"component":{}}],["base/resourc",{"_index":3740,"title":{},"name":{},"text":{"38":{},"41":{}},"component":{}}],["base/resources:/path/to/jetty.home/lib/logging/slf4j",{"_index":3721,"title":{},"name":{},"text":{"38":{}},"component":{}}],["base/start.d/quickstart.ini",{"_index":3227,"title":{},"name":{},"text":{"35":{}},"component":{}}],["base/webapp",{"_index":1601,"title":{},"name":{},"text":{"20":{}},"component":{}}],["base/webapps/ee10",{"_index":1607,"title":{},"name":{},"text":{"20":{}},"component":{}}],["base/work",{"_index":3679,"title":{},"name":{},"text":{"38":{}},"component":{}}],["base/work/jetti",{"_index":1616,"title":{},"name":{},"text":{"20":{}},"component":{}}],["baseappfirst",{"_index":5484,"title":{},"name":{},"text":{"56":{}},"component":{}}],["basehom",{"_index":2307,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["basehome:etc/jaspi/jetti",{"_index":1808,"title":{},"name":{},"text":{"24":{}},"component":{}}],["basehome:modules/demo.d/demo",{"_index":2308,"title":{},"name":{},"text":{"32":{}},"component":{}}],["baserequest",{"_index":5379,"title":{},"name":{},"text":{"55":{}},"component":{}}],["baserequest.sethandled(tru",{"_index":5383,"title":{},"name":{},"text":{"55":{}},"component":{}}],["baseresourc",{"_index":5480,"title":{},"name":{},"text":{"56":{}},"component":{}}],["bash",{"_index":3735,"title":{},"name":{},"text":{"38":{}},"component":{}}],["basi",{"_index":1781,"title":{},"name":{},"text":{"23":{},"48":{},"61":{}},"component":{}}],["basic",{"_index":1063,"title":{},"name":{},"text":{"13":{},"24":{},"30":{},"40":{},"44":{},"48":{},"52":{},"54":{},"65":{}},"component":{}}],["basicauthentication(proxyuri",{"_index":4868,"title":{},"name":{},"text":{"48":{}},"component":{}}],["basicauthentication(uri1",{"_index":4825,"title":{},"name":{},"text":{"48":{}},"component":{}}],["basicauthentication.basicresult(uri",{"_index":4840,"title":{},"name":{},"text":{"48":{}},"component":{}}],["bay",{"_index":827,"title":{},"name":{},"text":{"7":{}},"component":{}}],["baz.jsp",{"_index":5537,"title":{},"name":{},"text":{"56":{}},"component":{}}],["bc",{"_index":2192,"title":{},"name":{},"text":{"30":{}},"component":{}}],["bc=ca:tru",{"_index":2191,"title":{},"name":{},"text":{"30":{}},"component":{}}],["be",{"_index":21,"title":{},"name":{},"text":{"1":{},"6":{},"17":{},"30":{},"33":{},"34":{},"37":{},"41":{},"44":{},"48":{},"49":{},"53":{},"54":{},"59":{},"61":{},"62":{},"65":{},"66":{},"72":{}},"component":{}}],["be_http",{"_index":3201,"title":{},"name":{},"text":{"34":{}},"component":{}}],["bean",{"_index":1654,"title":{},"name":{"43":{}},"text":{"23":{},"28":{},"41":{},"43":{},"44":{},"45":{},"48":{},"61":{},"66":{}},"component":{}}],["beanadded(contain",{"_index":4121,"title":{},"name":{},"text":{"43":{}},"component":{}}],["beanremoved(contain",{"_index":4122,"title":{},"name":{},"text":{"43":{}},"component":{}}],["bear",{"_index":1099,"title":{},"name":{},"text":{"13":{}},"component":{}}],["beat",{"_index":549,"title":{},"name":{},"text":{"4":{}},"component":{}}],["becom",{"_index":1507,"title":{},"name":{},"text":{"20":{},"33":{},"36":{},"37":{},"38":{},"44":{},"47":{},"66":{}},"component":{}}],["befor",{"_index":599,"title":{"32-10":{}},"name":{},"text":{"6":{},"9":{},"10":{},"13":{},"17":{},"20":{},"23":{},"24":{},"26":{},"28":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"41":{},"42":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["beforehandl",{"_index":6146,"title":{},"name":{},"text":{"61":{}},"component":{}}],["beforehandlingnanotim",{"_index":6161,"title":{},"name":{},"text":{"61":{}},"component":{}}],["begin",{"_index":2616,"title":{},"name":{},"text":{"33":{},"56":{},"67":{}},"component":{}}],["beginn",{"_index":50,"title":{},"name":{},"text":{"1":{}},"component":{}}],["behalf",{"_index":5940,"title":{},"name":{},"text":{"61":{}},"component":{}}],["behav",{"_index":780,"title":{},"name":{},"text":{"7":{},"33":{},"38":{},"47":{},"48":{},"61":{}},"component":{}}],["behavior",{"_index":932,"title":{},"name":{},"text":{"8":{},"34":{},"47":{},"48":{},"53":{},"59":{},"61":{}},"component":{}}],["behaviour",{"_index":6618,"title":{},"name":{},"text":{"66":{}},"component":{}}],["behind",{"_index":618,"title":{"34-22":{},"41-6":{},"61-21":{}},"name":{},"text":{"6":{},"18":{},"19":{},"20":{},"22":{},"34":{},"36":{},"41":{},"61":{},"65":{}},"component":{}}],["belong",{"_index":738,"title":{},"name":{},"text":{"7":{},"26":{},"37":{},"65":{},"66":{}},"component":{}}],["below",{"_index":162,"title":{},"name":{},"text":{"2":{},"19":{},"25":{},"30":{},"31":{},"33":{},"34":{},"36":{},"38":{},"41":{},"44":{},"45":{},"48":{},"49":{},"50":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["benefici",{"_index":2659,"title":{},"name":{},"text":{"33":{},"43":{},"61":{},"67":{}},"component":{}}],["benefit",{"_index":2471,"title":{},"name":{},"text":{"33":{},"61":{},"66":{}},"component":{}}],["beryl",{"_index":2542,"title":{},"name":{},"text":{"33":{}},"component":{}}],["best",{"_index":511,"title":{},"name":{},"text":{"4":{},"7":{},"10":{},"23":{},"35":{},"37":{},"38":{},"41":{},"53":{},"55":{},"56":{},"66":{}},"component":{}}],["beta",{"_index":266,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["better",{"_index":536,"title":{},"name":{},"text":{"4":{},"7":{},"47":{},"48":{},"61":{},"71":{}},"component":{}}],["between",{"_index":527,"title":{},"name":{},"text":{"4":{},"18":{},"24":{},"25":{},"26":{},"28":{},"33":{},"35":{},"37":{},"38":{},"44":{},"47":{},"48":{},"52":{},"53":{},"56":{},"61":{},"66":{}},"component":{}}],["beyond",{"_index":148,"title":{},"name":{},"text":{"1":{}},"component":{}}],["bi",{"_index":5831,"title":{},"name":{},"text":{"59":{}},"component":{}}],["bidirect",{"_index":3024,"title":{},"name":{},"text":{"34":{}},"component":{}}],["big",{"_index":4638,"title":{},"name":{},"text":{"48":{}},"component":{}}],["bigint",{"_index":3478,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["binari",{"_index":1284,"title":{},"name":{},"text":{"18":{},"34":{},"48":{},"53":{},"57":{},"61":{},"67":{}},"component":{}}],["bind",{"_index":1782,"title":{"71-1":{}},"name":{},"text":{"23":{},"25":{},"26":{},"33":{},"34":{},"36":{},"38":{},"45":{},"56":{},"61":{},"71":{}},"component":{}}],["binddn=\"cn=directori",{"_index":1751,"title":{},"name":{},"text":{"23":{}},"component":{}}],["bindpassword=\"directori",{"_index":1752,"title":{},"name":{},"text":{"23":{}},"component":{}}],["bit",{"_index":3674,"title":{},"name":{},"text":{"38":{},"41":{},"54":{},"66":{}},"component":{}}],["black",{"_index":6180,"title":{},"name":{},"text":{"61":{}},"component":{}}],["blank",{"_index":2735,"title":{},"name":{},"text":{"33":{},"37":{},"40":{},"54":{},"56":{}},"component":{}}],["blob",{"_index":3472,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["block",{"_index":633,"title":{"7-12":{},"48-8":{},"48-9":{}},"name":{},"text":{"7":{},"33":{},"41":{},"44":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"61":{},"65":{},"72":{}},"component":{}}],["blockag",{"_index":2804,"title":{},"name":{},"text":{"33":{}},"component":{}}],["blockingqueu",{"_index":4468,"title":{},"name":{},"text":{"47":{}},"component":{}}],["blockingwrite(content.sink",{"_index":4343,"title":{},"name":{},"text":{"44":{}},"component":{}}],["blog",{"_index":3054,"title":{},"name":{},"text":{"34":{}},"component":{}}],["bob",{"_index":1903,"title":{},"name":{},"text":{"25":{}},"component":{}}],["bodi",{"_index":2663,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["body(cont",{"_index":4628,"title":{},"name":{},"text":{"48":{}},"component":{}}],["body(content2",{"_index":4697,"title":{},"name":{},"text":{"48":{}},"component":{}}],["body(new",{"_index":4613,"title":{},"name":{},"text":{"48":{}},"component":{}}],["book",{"_index":514,"title":{},"name":{},"text":{"4":{}},"component":{}}],["boolean",{"_index":3429,"title":{},"name":{},"text":{"37":{},"41":{},"44":{},"45":{},"48":{},"53":{},"57":{},"61":{},"62":{},"65":{},"66":{},"67":{}},"component":{}}],["bootstrap",{"_index":3034,"title":{},"name":{},"text":{"34":{}},"component":{}}],["boringssl",{"_index":3121,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["both",{"_index":592,"title":{},"name":{},"text":{"6":{},"7":{},"19":{},"20":{},"25":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{},"46":{},"48":{},"51":{},"53":{},"56":{},"61":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["bottom",{"_index":3858,"title":{},"name":{},"text":{"41":{},"44":{}},"component":{}}],["bought",{"_index":2158,"title":{},"name":{},"text":{"30":{}},"component":{}}],["bounc",{"_index":6627,"title":{},"name":{},"text":{"66":{}},"component":{}}],["bouncycastle.version?=1.78.1",{"_index":2831,"title":{},"name":{},"text":{"33":{}},"component":{}}],["bouncycastle.version}.jar",{"_index":2822,"title":{},"name":{},"text":{"33":{}},"component":{}}],["bound",{"_index":122,"title":{},"name":{},"text":{"1":{},"26":{},"47":{},"56":{},"61":{}},"component":{}}],["boundari",{"_index":6321,"title":{},"name":{},"text":{"61":{}},"component":{}}],["box",{"_index":2269,"title":{},"name":{},"text":{"32":{},"36":{},"42":{},"48":{},"52":{},"61":{}},"component":{}}],["brace",{"_index":1086,"title":{},"name":{},"text":{"13":{}},"component":{}}],["branch",{"_index":891,"title":{"11-2":{}},"name":{},"text":{"8":{},"11":{}},"component":{}}],["branch(",{"_index":957,"title":{},"name":{},"text":{"8":{}},"component":{}}],["break",{"_index":766,"title":{},"name":{},"text":{"7":{},"59":{}},"component":{}}],["bridg",{"_index":1793,"title":{"36-8":{},"36-9":{}},"name":{},"text":{"24":{},"28":{},"36":{}},"component":{}}],["bring",{"_index":3650,"title":{},"name":{},"text":{"38":{}},"component":{}}],["broad",{"_index":585,"title":{},"name":{},"text":{"6":{}},"component":{}}],["broadcast",{"_index":4434,"title":{},"name":{},"text":{"46":{}},"component":{}}],["broader",{"_index":138,"title":{},"name":{},"text":{"1":{}},"component":{}}],["broadli",{"_index":533,"title":{},"name":{},"text":{"4":{},"37":{},"66":{}},"component":{}}],["broken",{"_index":5190,"title":{},"name":{},"text":{"53":{}},"component":{}}],["brought",{"_index":5785,"title":{},"name":{},"text":{"57":{}},"component":{}}],["brows",{"_index":165,"title":{},"name":{},"text":{"2":{},"25":{},"61":{}},"component":{}}],["browser",{"_index":716,"title":{},"name":{},"text":{"7":{},"19":{},"20":{},"30":{},"33":{},"34":{},"48":{},"55":{},"59":{},"61":{}},"component":{}}],["bucket",{"_index":2343,"title":{},"name":{},"text":{"33":{},"41":{}},"component":{}}],["buffer",{"_index":2347,"title":{},"name":{},"text":{"33":{},"44":{},"48":{},"49":{},"52":{},"53":{},"62":{},"63":{},"65":{},"67":{}},"component":{}}],["buffer.get",{"_index":5141,"title":{},"name":{},"text":{"52":{}},"component":{}}],["buffer.hasremain",{"_index":5139,"title":{},"name":{},"text":{"52":{}},"component":{}}],["buffer1",{"_index":4994,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["buffer2",{"_index":4996,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["bufferingresponselisten",{"_index":4654,"title":{},"name":{},"text":{"48":{}},"component":{}}],["bufferingresponselistener(8",{"_index":4656,"title":{},"name":{},"text":{"48":{}},"component":{}}],["bufferutil.allocate(1024",{"_index":4230,"title":{},"name":{},"text":{"44":{},"52":{}},"component":{}}],["bufferutil.allocate(getinputbuffers",{"_index":6513,"title":{},"name":{},"text":{"65":{}},"component":{}}],["bufferutil.tobuffer(resourcefactory.root().newresource(\"/path/to/favicon.ico",{"_index":6446,"title":{},"name":{},"text":{"62":{}},"component":{}}],["bug",{"_index":143,"title":{},"name":{},"text":{"1":{},"6":{},"34":{},"61":{}},"component":{}}],["build",{"_index":623,"title":{"8":{},"7-5":{},"8-2":{},"8-3":{},"8-4":{},"8-6":{},"8-7":{},"54-2":{},"55-4":{},"55-8":{},"55-9":{}},"name":{},"text":{"7":{},"8":{},"9":{},"11":{},"13":{},"33":{},"48":{},"52":{},"54":{},"55":{},"56":{},"57":{},"61":{},"65":{},"67":{}},"component":{}}],["build.finalnam",{"_index":5547,"title":{},"name":{},"text":{"56":{}},"component":{}}],["builder",{"_index":4304,"title":{},"name":{},"text":{"44":{}},"component":{}}],["builder.append(chunk.getbytebuff",{"_index":4305,"title":{},"name":{},"text":{"44":{}},"component":{}}],["builder.tocompletestr",{"_index":4306,"title":{},"name":{},"text":{"44":{}},"component":{}}],["built",{"_index":955,"title":{},"name":{},"text":{"8":{},"20":{},"34":{},"36":{},"38":{},"41":{},"55":{},"56":{},"61":{},"68":{}},"component":{}}],["bundl",{"_index":315,"title":{},"name":{},"text":{"2":{},"39":{}},"component":{}}],["burden",{"_index":6298,"title":{},"name":{},"text":{"61":{}},"component":{}}],["burst",{"_index":6179,"title":{},"name":{},"text":{"61":{}},"component":{}}],["busi",{"_index":1414,"title":{},"name":{},"text":{"19":{},"33":{},"47":{},"61":{}},"component":{}}],["busier",{"_index":2480,"title":{},"name":{},"text":{"33":{}},"component":{}}],["button",{"_index":3857,"title":{},"name":{},"text":{"41":{}},"component":{}}],["bye",{"_index":5305,"title":{},"name":{},"text":{"53":{}},"component":{}}],["bypass",{"_index":904,"title":{},"name":{},"text":{"8":{}},"component":{}}],["byte",{"_index":2460,"title":{"65-3":{}},"name":{},"text":{"33":{},"34":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["byte[]{'h",{"_index":4643,"title":{},"name":{},"text":{"48":{}},"component":{}}],["byte[]{(byte)0x89",{"_index":5232,"title":{},"name":{},"text":{"53":{}},"component":{}}],["bytea",{"_index":3473,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["bytearrayoutputstream",{"_index":5137,"title":{},"name":{},"text":{"52":{}},"component":{}}],["bytebuff",{"_index":2339,"title":{},"name":{},"text":{"33":{},"36":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"57":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["bytebuffer.allocate(8).putlong(nanotime.now()).flip",{"_index":5297,"title":{},"name":{},"text":{"53":{}},"component":{}}],["bytebuffer.allocatedirect(1024",{"_index":5284,"title":{},"name":{},"text":{"53":{}},"component":{}}],["bytebuffer.wrap(byt",{"_index":4632,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["bytebuffer.wrap(line.getbytes(standardcharsets.utf_8",{"_index":5149,"title":{},"name":{},"text":{"52":{}},"component":{}}],["bytebufferpool",{"_index":1528,"title":{"33-2":{}},"name":{},"text":{"20":{},"33":{},"34":{},"36":{},"38":{}},"component":{}}],["bytebufferpool.xml",{"_index":2359,"title":{},"name":{},"text":{"33":{},"38":{}},"component":{}}],["bytecod",{"_index":335,"title":{},"name":{},"text":{"2":{}},"component":{}}],["bytes.length",{"_index":6353,"title":{},"name":{},"text":{"61":{}},"component":{}}],["bytes.reset",{"_index":5143,"title":{},"name":{},"text":{"52":{}},"component":{}}],["bytes.write(read",{"_index":5144,"title":{},"name":{},"text":{"52":{}},"component":{}}],["bytesrequestcont",{"_index":4621,"title":{},"name":{},"text":{"48":{}},"component":{}}],["bytesrequestcontent(\"text/plain",{"_index":4624,"title":{},"name":{},"text":{"48":{}},"component":{}}],["bytesrequestcontent(thirdpartyresponse.getcont",{"_index":4753,"title":{},"name":{},"text":{"48":{}},"component":{}}],["bytesrequestcontent(validatedresponse.getcont",{"_index":4756,"title":{},"name":{},"text":{"48":{}},"component":{}}],["bytesrespons",{"_index":4623,"title":{},"name":{},"text":{"48":{}},"component":{}}],["c",{"_index":825,"title":{},"name":{},"text":{"7":{},"30":{},"48":{},"56":{}},"component":{}}],["c.war",{"_index":5555,"title":{},"name":{},"text":{"56":{}},"component":{}}],["c3",{"_index":3001,"title":{},"name":{},"text":{"34":{}},"component":{}}],["c=countri",{"_index":2145,"title":{},"name":{},"text":{"30":{}},"component":{}}],["ca",{"_index":2170,"title":{},"name":{},"text":{"30":{}},"component":{}}],["ca:tru",{"_index":2193,"title":{},"name":{},"text":{"30":{}},"component":{}}],["cach",{"_index":886,"title":{"8-4":{},"37-7":{},"37-8":{},"37-10":{},"37-40":{},"66-12":{}},"name":{},"text":{"8":{},"21":{},"23":{},"33":{},"37":{},"47":{},"48":{},"61":{},"66":{}},"component":{}}],["cache.ini",{"_index":3611,"title":{},"name":{},"text":{"37":{}},"component":{}}],["cache.setevictionpolicy(sessioncache.never_evict",{"_index":6695,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cache.setflushonresponsecommit(tru",{"_index":6696,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cache.setinvalidateonshutdown(fals",{"_index":6697,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cache.setremoveunloadablesessions(tru",{"_index":6698,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cache.setsaveoncreate(tru",{"_index":6699,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cache.setsessiondatastore(stor",{"_index":6703,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cache/stor",{"_index":6704,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachefactori",{"_index":6636,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachefactory.setevictionpolicy(60",{"_index":6638,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachefactory.setevictionpolicy(sessioncache.never_evict",{"_index":6647,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachefactory.setflushonresponsecommit(tru",{"_index":6640,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachefactory.setinvalidateonshutdown(fals",{"_index":6641,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachefactory.setremoveunloadablesessions(tru",{"_index":6642,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachefactory.setsaveoncreate(tru",{"_index":6643,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachefactory.setsaveoninactiveeviction(tru",{"_index":6639,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachingsessiondatastor",{"_index":3361,"title":{"66-26":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["cachingsessiondatastorefactori",{"_index":6844,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachingsessiondatastorefactory.setsessiondatamapfactory(mapfactori",{"_index":6845,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cachingsessiondatastorefactory.setsessionstorefactory(storefactori",{"_index":6846,"title":{},"name":{},"text":{"66":{}},"component":{}}],["cacreateseri",{"_index":2208,"title":{},"name":{},"text":{"30":{}},"component":{}}],["cakey",{"_index":2207,"title":{},"name":{},"text":{"30":{}},"component":{}}],["calcul",{"_index":2465,"title":{},"name":{},"text":{"33":{},"53":{},"56":{}},"component":{}}],["calculaterequestr",{"_index":6440,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["call",{"_index":1113,"title":{"42-5":{}},"name":{},"text":{"13":{},"16":{},"17":{},"20":{},"23":{},"26":{},"28":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["callback",{"_index":2806,"title":{},"name":{},"text":{"33":{},"41":{},"44":{},"48":{},"49":{},"52":{},"53":{},"57":{},"61":{},"62":{},"65":{},"67":{},"72":{}},"component":{}}],["callback.complet",{"_index":4318,"title":{},"name":{},"text":{"44":{},"57":{}},"component":{}}],["callback.completable.with(callback1",{"_index":4320,"title":{},"name":{},"text":{"44":{}},"component":{}}],["callback.completable.with(flush",{"_index":6348,"title":{},"name":{},"text":{"61":{}},"component":{}}],["callback.completewith(process",{"_index":6366,"title":{},"name":{},"text":{"61":{}},"component":{}}],["callback.completewith(read",{"_index":5705,"title":{},"name":{},"text":{"57":{}},"component":{}}],["callback.failed(failur",{"_index":4341,"title":{},"name":{},"text":{"44":{},"57":{},"61":{}},"component":{}}],["callback.failed(x",{"_index":6381,"title":{},"name":{},"text":{"61":{}},"component":{}}],["callback.from",{"_index":4709,"title":{},"name":{},"text":{"48":{},"49":{},"62":{}},"component":{}}],["callback.from(session::demand",{"_index":5218,"title":{},"name":{},"text":{"53":{}},"component":{}}],["callback.iter",{"_index":4228,"title":{},"name":{},"text":{"44":{},"65":{}},"component":{}}],["callback.noop",{"_index":4315,"title":{},"name":{},"text":{"44":{},"48":{},"49":{},"52":{},"53":{},"61":{},"62":{}},"component":{}}],["callback.succe",{"_index":5240,"title":{},"name":{},"text":{"53":{}},"component":{}}],["callback.succeed",{"_index":4340,"title":{},"name":{},"text":{"44":{},"49":{},"57":{},"61":{},"67":{}},"component":{}}],["callback1",{"_index":4321,"title":{},"name":{},"text":{"44":{}},"component":{}}],["callback2",{"_index":4323,"title":{},"name":{},"text":{"44":{}},"component":{}}],["caller",{"_index":1775,"title":{},"name":{},"text":{"23":{}},"component":{}}],["callerprincipalcallback",{"_index":1824,"title":{},"name":{},"text":{"24":{}},"component":{}}],["callout",{"_index":858,"title":{},"name":{},"text":{"7":{}},"component":{}}],["camel",{"_index":107,"title":{},"name":{},"text":{"1":{},"28":{}},"component":{}}],["cancel",{"_index":5022,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["candid",{"_index":1499,"title":{},"name":{},"text":{"20":{},"37":{},"66":{}},"component":{}}],["canon",{"_index":307,"title":{},"name":{},"text":{"2":{}},"component":{}}],["canonic",{"_index":3595,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["can’t",{"_index":5546,"title":{},"name":{},"text":{"56":{}},"component":{}}],["cap",{"_index":2373,"title":{},"name":{},"text":{"33":{}},"component":{}}],["capabl",{"_index":4112,"title":{},"name":{},"text":{"43":{},"50":{},"56":{},"61":{},"63":{},"66":{}},"component":{}}],["capac",{"_index":2344,"title":{},"name":{},"text":{"33":{},"56":{},"61":{},"67":{}},"component":{}}],["capit",{"_index":2118,"title":{},"name":{},"text":{"28":{}},"component":{}}],["captur",{"_index":2324,"title":{"33-3":{},"36-4":{}},"name":{},"text":{"33":{},"36":{},"38":{},"47":{},"61":{}},"component":{}}],["capture.append=tru",{"_index":2384,"title":{},"name":{},"text":{"33":{}},"component":{}}],["capture.dir=./log",{"_index":2383,"title":{},"name":{},"text":{"33":{}},"component":{}}],["capture.retainday",{"_index":2382,"title":{},"name":{},"text":{"33":{}},"component":{}}],["capture.retaindays=90",{"_index":2385,"title":{},"name":{},"text":{"33":{}},"component":{}}],["capture.timezone=gmt",{"_index":2388,"title":{},"name":{},"text":{"33":{}},"component":{}}],["care",{"_index":874,"title":{},"name":{},"text":{"7":{},"10":{},"17":{},"37":{},"41":{},"43":{},"47":{},"48":{},"53":{},"61":{},"66":{}},"component":{}}],["carefulli",{"_index":4680,"title":{},"name":{},"text":{"48":{}},"component":{}}],["carri",{"_index":3157,"title":{},"name":{},"text":{"34":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["cart",{"_index":6247,"title":{},"name":{},"text":{"61":{}},"component":{}}],["case",{"_index":115,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"12":{},"17":{},"18":{},"19":{},"25":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["casual",{"_index":2764,"title":{},"name":{},"text":{"33":{},"40":{}},"component":{}}],["catalog",{"_index":3443,"title":{},"name":{},"text":{"37":{},"61":{},"66":{}},"component":{}}],["catch",{"_index":1123,"title":{},"name":{},"text":{"13":{},"44":{},"52":{},"61":{},"67":{}},"component":{}}],["categori",{"_index":6933,"title":{},"name":{},"text":{"71":{}},"component":{}}],["caught",{"_index":1144,"title":{},"name":{},"text":{"13":{},"44":{}},"component":{}}],["caus",{"_index":1352,"title":{},"name":{},"text":{"19":{},"25":{},"32":{},"33":{},"34":{},"41":{},"44":{},"47":{},"48":{},"53":{},"54":{},"56":{},"59":{},"61":{},"65":{},"66":{}},"component":{}}],["caution",{"_index":865,"title":{},"name":{},"text":{"7":{},"53":{},"57":{}},"component":{}}],["cautious",{"_index":5459,"title":{},"name":{},"text":{"56":{}},"component":{}}],["cb",{"_index":6894,"title":{},"name":{},"text":{"67":{}},"component":{}}],["cd",{"_index":693,"title":{},"name":{},"text":{"7":{},"20":{},"35":{},"36":{},"38":{},"55":{}},"component":{}}],["cdi",{"_index":5586,"title":{},"name":{},"text":{"57":{}},"component":{}}],["ceas",{"_index":6682,"title":{},"name":{},"text":{"66":{}},"component":{}}],["central",{"_index":167,"title":{},"name":{},"text":{"2":{},"5":{},"32":{},"36":{},"38":{},"39":{},"55":{},"61":{},"65":{}},"component":{}}],["cert",{"_index":2530,"title":{},"name":{},"text":{"33":{}},"component":{}}],["certain",{"_index":937,"title":{},"name":{},"text":{"8":{},"37":{},"40":{},"41":{},"44":{},"53":{},"56":{},"61":{},"65":{}},"component":{}}],["certif",{"_index":1912,"title":{"30-3":{},"30-4":{},"30-5":{},"34-18":{},"48-17":{}},"name":{},"text":{"25":{},"30":{},"33":{},"34":{},"45":{},"48":{},"61":{}},"component":{}}],["certificate(",{"_index":2186,"title":{},"name":{},"text":{"30":{}},"component":{}}],["certificate’",{"_index":3184,"title":{},"name":{},"text":{"34":{}},"component":{}}],["certreq",{"_index":2172,"title":{},"name":{},"text":{"30":{}},"component":{}}],["cg",{"_index":854,"title":{},"name":{},"text":{"7":{}},"component":{}}],["chain",{"_index":2126,"title":{},"name":{},"text":{"30":{},"33":{},"44":{},"48":{},"61":{},"67":{},"72":{}},"component":{}}],["chain_from_ca.pem",{"_index":2181,"title":{},"name":{},"text":{"30":{}},"component":{}}],["challeng",{"_index":4444,"title":{},"name":{},"text":{"47":{},"48":{}},"component":{}}],["chanc",{"_index":520,"title":{},"name":{},"text":{"4":{},"41":{},"61":{}},"component":{}}],["chang",{"_index":90,"title":{"57-1":{},"57-2":{},"57-3":{},"57-9":{},"58-1":{},"58-3":{},"58-4":{}},"name":{},"text":{"1":{},"7":{},"9":{},"10":{},"11":{},"18":{},"19":{},"20":{},"23":{},"25":{},"28":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"44":{},"46":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"58":{},"61":{},"66":{},"71":{}},"component":{}}],["changeme,user,develop",{"_index":1740,"title":{},"name":{},"text":{"23":{}},"component":{}}],["channel",{"_index":20,"title":{},"name":{},"text":{"1":{},"4":{},"44":{},"61":{}},"component":{}}],["chapter",{"_index":845,"title":{},"name":{},"text":{"7":{}},"component":{}}],["char",{"_index":2074,"title":{},"name":{},"text":{"28":{}},"component":{}}],["charact",{"_index":1248,"title":{"48-19":{}},"name":{},"text":{"17":{},"33":{},"36":{},"37":{},"45":{},"48":{},"52":{},"61":{},"66":{}},"component":{}}],["character",{"_index":2233,"title":{},"name":{},"text":{"31":{},"32":{}},"component":{}}],["characterist",{"_index":39,"title":{},"name":{},"text":{"1":{},"37":{}},"component":{}}],["charg",{"_index":4882,"title":{},"name":{},"text":{"48":{}},"component":{}}],["charset",{"_index":4285,"title":{},"name":{},"text":{"44":{}},"component":{}}],["charset=utf",{"_index":5739,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["chat",{"_index":6218,"title":{},"name":{},"text":{"61":{}},"component":{}}],["check",{"_index":206,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"8":{},"28":{},"33":{},"34":{},"37":{},"38":{},"48":{},"53":{},"56":{},"61":{},"62":{},"66":{}},"component":{}}],["checkinterv",{"_index":2044,"title":{},"name":{},"text":{"28":{}},"component":{}}],["checkout",{"_index":6183,"title":{},"name":{},"text":{"61":{}},"component":{}}],["checksum",{"_index":3848,"title":{},"name":{},"text":{"40":{},"57":{}},"component":{}}],["cherri",{"_index":1047,"title":{},"name":{},"text":{"11":{}},"component":{}}],["child",{"_index":2255,"title":{},"name":{},"text":{"31":{},"33":{},"38":{},"42":{},"43":{},"56":{},"61":{},"67":{}},"component":{}}],["children",{"_index":4003,"title":{},"name":{},"text":{"41":{},"43":{},"61":{}},"component":{}}],["choic",{"_index":1997,"title":{},"name":{},"text":{"26":{},"27":{},"30":{},"33":{},"36":{},"37":{},"48":{},"55":{},"61":{}},"component":{}}],["choos",{"_index":526,"title":{"65-3":{}},"name":{},"text":{"4":{},"26":{},"30":{},"34":{},"37":{},"38":{},"48":{},"56":{},"66":{}},"component":{}}],["chose",{"_index":3789,"title":{},"name":{},"text":{"38":{}},"component":{}}],["chosen",{"_index":1081,"title":{},"name":{},"text":{"13":{},"25":{},"33":{},"34":{},"37":{},"45":{},"48":{},"52":{},"66":{}},"component":{}}],["chrome/97.0.4692.71",{"_index":3310,"title":{},"name":{},"text":{"36":{}},"component":{}}],["chunk",{"_index":4250,"title":{},"name":{},"text":{"44":{},"48":{},"49":{},"50":{},"53":{},"57":{},"61":{},"62":{},"63":{}},"component":{}}],["chunk(bytebuff",{"_index":5024,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["chunk.getbytebuff",{"_index":4337,"title":{},"name":{},"text":{"44":{}},"component":{}}],["chunk.getfailur",{"_index":4335,"title":{},"name":{},"text":{"44":{},"57":{}},"component":{}}],["chunk.hasremain",{"_index":4707,"title":{},"name":{},"text":{"48":{}},"component":{}}],["chunk.islast",{"_index":4268,"title":{},"name":{},"text":{"44":{},"48":{},"57":{}},"component":{}}],["chunk.releas",{"_index":4273,"title":{},"name":{},"text":{"44":{},"48":{},"57":{}},"component":{}}],["chunk.retain",{"_index":4301,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{}}],["chunks.add(chunk",{"_index":4302,"title":{},"name":{},"text":{"44":{}},"component":{}}],["chunkstostr",{"_index":4294,"title":{},"name":{},"text":{"44":{}},"component":{}}],["chunkstostring(content.sourc",{"_index":4295,"title":{},"name":{},"text":{"44":{}},"component":{}}],["cipher",{"_index":2213,"title":{"34-17":{}},"name":{},"text":{"31":{},"33":{},"34":{},"61":{}},"component":{}}],["circular",{"_index":2295,"title":{},"name":{},"text":{"32":{}},"component":{}}],["circumst",{"_index":354,"title":{},"name":{},"text":{"3":{},"12":{},"37":{}},"component":{}}],["clarifi",{"_index":6392,"title":{},"name":{},"text":{"61":{}},"component":{}}],["clash",{"_index":3796,"title":{},"name":{},"text":{"38":{}},"component":{}}],["class",{"_index":524,"title":{"38-11":{},"55-2":{},"57-3":{},"58-4":{}},"name":{},"text":{"4":{},"13":{},"16":{},"17":{},"19":{},"20":{},"23":{},"25":{},"26":{},"28":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"64":{},"65":{},"66":{},"67":{},"69":{},"71":{}},"component":{}}],["classdebuginfo",{"_index":2050,"title":{},"name":{},"text":{"28":{}},"component":{}}],["classes/interfac",{"_index":3041,"title":{},"name":{},"text":{"34":{}},"component":{}}],["classesdirectori",{"_index":5322,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["classic",{"_index":3274,"title":{},"name":{},"text":{"36":{},"56":{},"66":{}},"component":{}}],["classifi",{"_index":5422,"title":{},"name":{},"text":{"56":{}},"component":{}}],["classload",{"_index":2048,"title":{},"name":{},"text":{"28":{},"33":{},"36":{},"38":{},"41":{},"61":{}},"component":{}}],["classnam",{"_index":1237,"title":{},"name":{},"text":{"17":{},"23":{},"28":{},"33":{}},"component":{}}],["classnotfoundexcept",{"_index":6268,"title":{},"name":{},"text":{"61":{}},"component":{}}],["classpath",{"_index":1153,"title":{"17-2":{},"17-3":{},"56-8":{}},"name":{},"text":{"17":{},"19":{},"23":{},"26":{},"27":{},"28":{},"33":{},"37":{},"38":{},"41":{},"54":{},"56":{},"66":{}},"component":{}}],["claus",{"_index":1211,"title":{},"name":{},"text":{"17":{},"26":{}},"component":{}}],["clean",{"_index":690,"title":{},"name":{},"text":{"7":{},"8":{},"55":{}},"component":{}}],["clear",{"_index":1276,"title":{"34-1":{},"34-4":{},"34-6":{},"61-15":{},"61-17":{}},"name":{},"text":{"18":{},"20":{},"22":{},"25":{},"32":{},"33":{},"34":{},"38":{},"40":{},"45":{},"48":{},"49":{},"52":{},"61":{},"64":{},"65":{}},"component":{}}],["clearer",{"_index":4432,"title":{},"name":{},"text":{"45":{}},"component":{}}],["clf",{"_index":2573,"title":{},"name":{},"text":{"33":{}},"component":{}}],["clf}",{"_index":2575,"title":{},"name":{},"text":{"33":{}},"component":{}}],["clf}i",{"_index":2572,"title":{},"name":{},"text":{"33":{}},"component":{}}],["clf}o",{"_index":2574,"title":{},"name":{},"text":{"33":{}},"component":{}}],["click",{"_index":3856,"title":{},"name":{},"text":{"41":{}},"component":{}}],["client",{"_index":1122,"title":{"48":{},"49":{},"50":{},"51":{},"53":{},"30-5":{},"34-11":{},"48-17":{}},"name":{},"text":{"13":{},"16":{},"18":{},"25":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{},"68":{},"71":{}},"component":{}}],["client'",{"_index":4920,"title":{},"name":{},"text":{"48":{}},"component":{}}],["client(",{"_index":2211,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.csr",{"_index":2203,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.getmbeanserverconnection().querynames(nul",{"_index":4390,"title":{},"name":{},"text":{"45":{}},"component":{}}],["client.newrequest(\"https://host",{"_index":4924,"title":{},"name":{},"text":{"48":{}},"component":{}}],["client.properti",{"_index":6793,"title":{},"name":{},"text":{"66":{}},"component":{}}],["client.start",{"_index":4899,"title":{},"name":{},"text":{"48":{}},"component":{}}],["client/http.adoc#configur",{"_index":4437,"title":{},"name":{},"text":{"46":{}},"component":{}}],["client_keystore.p12",{"_index":2201,"title":{},"name":{},"text":{"30":{}},"component":{}}],["clientconnectionfactori",{"_index":4161,"title":{},"name":{},"text":{"44":{},"52":{}},"component":{}}],["clientconnectionfactory.info",{"_index":4725,"title":{},"name":{},"text":{"48":{}},"component":{}}],["clientconnectionfactoryoverhttp2.http2",{"_index":4728,"title":{},"name":{},"text":{"48":{}},"component":{}}],["clientconnectionfactoryoverhttp2.http2(http2cli",{"_index":4729,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["clientconnectionfactoryoverhttp3.http3",{"_index":4918,"title":{},"name":{},"text":{"48":{}},"component":{}}],["clientconnectionfactoryoverhttp3.http3(http3cli",{"_index":4919,"title":{},"name":{},"text":{"48":{}},"component":{}}],["clientconnector",{"_index":4079,"title":{},"name":{},"text":{"43":{},"48":{},"49":{},"52":{},"53":{}},"component":{}}],["clientconnector.connect(address",{"_index":5131,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientconnector.connect(socketaddress",{"_index":5118,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientconnector.connectblock",{"_index":4760,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["clientconnector.connecttimeout",{"_index":4762,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["clientconnector.getbytebufferpool",{"_index":5158,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientconnector.getexecutor",{"_index":5124,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientconnector.idletimeout",{"_index":4758,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["clientconnector.selector",{"_index":5107,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientconnector.setexecutor(threadpool",{"_index":5096,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientconnector.setscheduler(schedul",{"_index":5106,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientconnector.setsslcontextfactory(sslcontextfactori",{"_index":4764,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["clientconnector.start",{"_index":5093,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientendpoint",{"_index":5172,"title":{},"name":{},"text":{"53":{}},"component":{}}],["clientenv",{"_index":4386,"title":{},"name":{},"text":{"45":{}},"component":{}}],["clientenv.put(connectorserver.rmi_registry_client_socket_factory_attribut",{"_index":4387,"title":{},"name":{},"text":{"45":{}},"component":{}}],["clientquicconfig",{"_index":4903,"title":{},"name":{},"text":{"48":{}},"component":{}}],["clientquicconfigur",{"_index":4902,"title":{},"name":{},"text":{"48":{}},"component":{}}],["clientquicconfiguration(sslcontextfactori",{"_index":4904,"title":{},"name":{},"text":{"48":{},"50":{}},"component":{}}],["clientselectormanager(getexecutor",{"_index":5099,"title":{},"name":{},"text":{"52":{}},"component":{}}],["clientsessionpromis",{"_index":5174,"title":{},"name":{},"text":{"53":{}},"component":{}}],["clientupgraderequest",{"_index":5179,"title":{},"name":{},"text":{"53":{}},"component":{}}],["clone",{"_index":1033,"title":{},"name":{},"text":{"11":{}},"component":{}}],["close",{"_index":1021,"title":{"53-20":{}},"name":{},"text":{"10":{},"33":{},"34":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"65":{}},"component":{}}],["close\".equalsignorecase(text",{"_index":5303,"title":{},"name":{},"text":{"53":{}},"component":{}}],["closedchannelexcept",{"_index":5077,"title":{},"name":{},"text":{"50":{}},"component":{}}],["closeendpoint",{"_index":5302,"title":{},"name":{},"text":{"53":{}},"component":{}}],["cloud",{"_index":3335,"title":{"37-31":{},"37-38":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["clsid:8ad9c840",{"_index":2077,"title":{},"name":{},"text":{"28":{}},"component":{}}],["cluster",{"_index":1636,"title":{"37-27":{},"37-29":{},"37-45":{},"37-46":{}},"name":{},"text":{"21":{},"37":{},"61":{},"66":{}},"component":{}}],["clustering/persist",{"_index":3360,"title":{},"name":{},"text":{"37":{}},"component":{}}],["cn",{"_index":2152,"title":{},"name":{},"text":{"30":{},"33":{}},"component":{}}],["cn=*.webtide.com",{"_index":3185,"title":{},"name":{},"text":{"34":{}},"component":{}}],["cn=client",{"_index":2202,"title":{},"name":{},"text":{"30":{}},"component":{}}],["cn=domain.com",{"_index":2140,"title":{},"name":{},"text":{"30":{}},"component":{}}],["cn=server_authn",{"_index":2190,"title":{},"name":{},"text":{"30":{}},"component":{}}],["cntrl",{"_index":5466,"title":{},"name":{},"text":{"56":{}},"component":{}}],["co",{"_index":6544,"title":{},"name":{},"text":{"66":{}},"component":{}}],["coars",{"_index":2358,"title":{},"name":{},"text":{"33":{}},"component":{}}],["code",{"_index":141,"title":{"11":{},"13":{},"7-11":{},"58-5":{}},"name":{},"text":{"1":{},"6":{},"7":{},"9":{},"11":{},"13":{},"18":{},"19":{},"23":{},"26":{},"32":{},"33":{},"34":{},"35":{},"36":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"62":{},"63":{},"66":{},"67":{},"69":{},"72":{}},"component":{}}],["codebas",{"_index":119,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"13":{}},"component":{}}],["codehau",{"_index":269,"title":{},"name":{},"text":{"2":{}},"component":{}}],["codestyl",{"_index":1057,"title":{},"name":{},"text":{"13":{}},"component":{}}],["codifi",{"_index":5855,"title":{},"name":{},"text":{"59":{}},"component":{}}],["coercion",{"_index":4026,"title":{"42-15":{}},"name":{},"text":{"42":{}},"component":{}}],["cold",{"_index":6055,"title":{},"name":{},"text":{"61":{}},"component":{}}],["collabor",{"_index":16,"title":{},"name":{},"text":{"1":{}},"component":{}}],["collect",{"_index":2354,"title":{},"name":{},"text":{"33":{},"37":{},"43":{},"61":{},"66":{}},"component":{}}],["collector",{"_index":2342,"title":{},"name":{},"text":{"33":{}},"component":{}}],["column",{"_index":1704,"title":{},"name":{},"text":{"23":{},"36":{},"37":{},"66":{}},"component":{}}],["com.acm",{"_index":1239,"title":{},"name":{},"text":{"17":{},"45":{},"56":{}},"component":{}}],["com.acme.*|com.corp.slowcontaineriniti",{"_index":1238,"title":{},"name":{},"text":{"17":{}},"component":{}}],["com.acme.audit",{"_index":2246,"title":{},"name":{},"text":{"31":{}},"component":{}}],["com.acme.audit.some.property=42",{"_index":2260,"title":{},"name":{},"text":{"31":{}},"component":{}}],["com.acme.foo",{"_index":2430,"title":{},"name":{},"text":{"33":{},"45":{}},"component":{}}],["com.acme.foosci",{"_index":1250,"title":{},"name":{},"text":{"17":{}},"component":{}}],["com.acme.http.port",{"_index":4066,"title":{},"name":{},"text":{"42":{}},"component":{}}],["com.acme.jmx",{"_index":4412,"title":{},"name":{},"text":{"45":{}},"component":{}}],["com.acme.jmx.foombean",{"_index":4411,"title":{},"name":{},"text":{"45":{}},"component":{}}],["com.acme.securityfilt",{"_index":6881,"title":{},"name":{},"text":{"67":{}},"component":{}}],["com.acme.server.customjettyserv",{"_index":2301,"title":{},"name":{},"text":{"32":{}},"component":{}}],["com.acme.someloginmodul",{"_index":1692,"title":{},"name":{},"text":{"23":{}},"component":{}}],["com.acme.ssl.cipherlist",{"_index":2225,"title":{},"name":{},"text":{"31":{}},"component":{}}],["com.acme.ssl.cipherlist=ecdh+aesgcm:ecdh+aes256:!anull:!md5:!dss:!adh",{"_index":2232,"title":{},"name":{},"text":{"31":{}},"component":{}}],["com.acme.x.war",{"_index":5539,"title":{},"name":{},"text":{"56":{}},"component":{}}],["com.acme.y.war",{"_index":5540,"title":{},"name":{},"text":{"56":{}},"component":{}}],["com.corp.slowcontaineriniti",{"_index":1240,"title":{},"name":{},"text":{"17":{}},"component":{}}],["com.exampl",{"_index":3248,"title":{},"name":{},"text":{"36":{}},"component":{}}],["com.example.level=debug",{"_index":3247,"title":{},"name":{},"text":{"36":{}},"component":{}}],["com.example.mycompon",{"_index":3246,"title":{},"name":{},"text":{"36":{}},"component":{}}],["com.example.mycomponent.level=debug",{"_index":3245,"title":{},"name":{},"text":{"36":{}},"component":{}}],["com.example.prioritysci",{"_index":1249,"title":{},"name":{},"text":{"17":{}},"component":{}}],["com.example.stack",{"_index":3249,"title":{},"name":{},"text":{"36":{}},"component":{}}],["com.myapps.mywiki.context.path",{"_index":4064,"title":{},"name":{},"text":{"42":{}},"component":{}}],["com.mysql.cj.jdbc.mysqlconnectionpooldatasourc",{"_index":1403,"title":{},"name":{},"text":{"19":{}},"component":{}}],["com.mysql.jdbc.driv",{"_index":3468,"title":{},"name":{},"text":{"37":{}},"component":{}}],["com.other.otherloginmodul",{"_index":1694,"title":{},"name":{},"text":{"23":{}},"component":{}}],["com.sun.management.jmxremot",{"_index":1846,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["com_acme_http_port",{"_index":4068,"title":{},"name":{},"text":{"42":{}},"component":{}}],["combin",{"_index":2577,"title":{},"name":{},"text":{"33":{},"37":{},"38":{},"56":{},"66":{}},"component":{}}],["come",{"_index":926,"title":{},"name":{},"text":{"8":{},"24":{},"31":{},"33":{},"34":{},"37":{},"44":{},"48":{},"51":{},"57":{},"61":{},"66":{}},"component":{}}],["comma",{"_index":1246,"title":{},"name":{},"text":{"17":{},"32":{},"33":{},"42":{},"54":{},"56":{}},"component":{}}],["command",{"_index":809,"title":{"38-5":{},"38-9":{}},"name":{},"text":{"7":{},"18":{},"19":{},"20":{},"23":{},"25":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"45":{},"47":{},"55":{},"56":{},"69":{},"71":{}},"component":{}}],["comment",{"_index":537,"title":{},"name":{},"text":{"4":{},"7":{},"10":{},"20":{},"32":{},"33":{},"34":{},"37":{},"38":{}},"component":{}}],["commerc",{"_index":6060,"title":{},"name":{},"text":{"61":{}},"component":{}}],["commerci",{"_index":501,"title":{"4-1":{},"6-5":{}},"name":{},"text":{"4":{}},"component":{}}],["commit",{"_index":67,"title":{"10-2":{},"10-3":{}},"name":{},"text":{"1":{},"9":{},"10":{},"18":{},"37":{},"57":{},"61":{}},"component":{}}],["committ",{"_index":517,"title":{},"name":{},"text":{"4":{},"9":{},"12":{}},"component":{}}],["common",{"_index":1366,"title":{"56-7":{}},"name":{},"text":{"19":{},"25":{},"30":{},"33":{},"34":{},"36":{},"37":{},"38":{},"44":{},"45":{},"46":{},"47":{},"48":{},"52":{},"56":{},"57":{},"58":{},"59":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["commonli",{"_index":3236,"title":{},"name":{},"text":{"36":{},"61":{}},"component":{}}],["commun",{"_index":0,"title":{"1":{},"1-1":{},"1-3":{},"37-33":{},"37-37":{}},"name":{"1":{}},"text":{"1":{},"2":{},"4":{},"6":{},"11":{},"25":{},"34":{},"37":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["compact",{"_index":6111,"title":{},"name":{},"text":{"61":{}},"component":{}}],["compactpathrul",{"_index":6115,"title":{},"name":{},"text":{"61":{}},"component":{}}],["compani",{"_index":617,"title":{},"name":{},"text":{"6":{},"31":{}},"component":{}}],["compar",{"_index":2217,"title":{},"name":{},"text":{"31":{},"49":{},"50":{},"62":{},"63":{}},"component":{}}],["comparator.jar",{"_index":2230,"title":{},"name":{},"text":{"31":{}},"component":{}}],["compat",{"_index":1792,"title":{},"name":{},"text":{"24":{},"33":{},"34":{},"42":{},"48":{},"59":{}},"component":{}}],["compet",{"_index":2464,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["compil",{"_index":680,"title":{},"name":{},"text":{"7":{},"20":{},"28":{},"31":{},"54":{},"55":{},"56":{},"67":{}},"component":{}}],["compilerclassnam",{"_index":2051,"title":{},"name":{},"text":{"28":{}},"component":{}}],["compilersourcevm",{"_index":2056,"title":{},"name":{},"text":{"28":{}},"component":{}}],["compilertargetvm",{"_index":2054,"title":{},"name":{},"text":{"28":{}},"component":{}}],["complain",{"_index":1513,"title":{},"name":{},"text":{"20":{}},"component":{}}],["complement",{"_index":1477,"title":{},"name":{},"text":{"19":{}},"component":{}}],["complet",{"_index":714,"title":{},"name":{},"text":{"7":{},"8":{},"17":{},"25":{},"33":{},"34":{},"38":{},"41":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"57":{},"59":{},"61":{},"62":{},"63":{},"65":{},"72":{}},"component":{}}],["completable.get(5",{"_index":4653,"title":{},"name":{},"text":{"48":{}},"component":{}}],["completable.whencomplete((ignor",{"_index":5771,"title":{},"name":{},"text":{"57":{}},"component":{}}],["completable.whencomplete((requestcont",{"_index":5694,"title":{},"name":{},"text":{"57":{}},"component":{}}],["completablefield",{"_index":6308,"title":{},"name":{},"text":{"61":{}},"component":{}}],["completablefields.whencomplete((field",{"_index":6309,"title":{},"name":{},"text":{"61":{}},"component":{}}],["completablefutur",{"_index":4280,"title":{},"name":{},"text":{"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"57":{},"61":{},"65":{}},"component":{}}],["completablepart",{"_index":6325,"title":{},"name":{},"text":{"61":{}},"component":{}}],["completableparts.whencomplete((part",{"_index":6327,"title":{},"name":{},"text":{"61":{}},"component":{}}],["completableresponselistener(request",{"_index":4651,"title":{},"name":{},"text":{"48":{}},"component":{}}],["completabletask",{"_index":4293,"title":{},"name":{},"text":{"44":{},"57":{}},"component":{}}],["complete(nul",{"_index":5703,"title":{},"name":{},"text":{"57":{}},"component":{}}],["complete(result",{"_index":4299,"title":{},"name":{},"text":{"44":{}},"component":{}}],["complete=fals",{"_index":1178,"title":{},"name":{},"text":{"17":{}},"component":{}}],["complete=tru",{"_index":1190,"title":{},"name":{},"text":{"17":{}},"component":{}}],["completeexceptionally(failur",{"_index":5701,"title":{},"name":{},"text":{"57":{}},"component":{}}],["complex",{"_index":610,"title":{},"name":{},"text":{"6":{},"31":{},"47":{}},"component":{}}],["complianc",{"_index":2057,"title":{"59":{},"33-24":{},"59-1":{},"59-2":{},"59-3":{}},"name":{"59":{}},"text":{"28":{},"33":{},"59":{}},"component":{}}],["compliant",{"_index":1841,"title":{},"name":{},"text":{"25":{},"30":{},"38":{},"48":{},"62":{},"67":{}},"component":{}}],["complic",{"_index":3085,"title":{},"name":{},"text":{"34":{},"47":{},"52":{}},"component":{}}],["compon",{"_index":1186,"title":{"43":{},"68":{},"32-2":{},"38-12":{},"43-1":{},"43-2":{}},"name":{"68":{}},"text":{"17":{},"18":{},"19":{},"20":{},"25":{},"27":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"52":{},"53":{},"56":{},"61":{},"65":{},"66":{},"67":{},"68":{},"72":{}},"component":{}}],["component’",{"_index":4082,"title":{},"name":{},"text":{"43":{}},"component":{}}],["compos",{"_index":3026,"title":{},"name":{},"text":{"34":{},"38":{},"43":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"63":{}},"component":{}}],["compose(callback2",{"_index":4322,"title":{},"name":{},"text":{"44":{}},"component":{}}],["composit",{"_index":312,"title":{},"name":{},"text":{"2":{},"37":{}},"component":{}}],["comprehens",{"_index":3553,"title":{},"name":{},"text":{"37":{},"55":{},"58":{}},"component":{}}],["compress",{"_index":3031,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["compris",{"_index":10,"title":{},"name":{},"text":{"1":{},"23":{},"56":{},"61":{}},"component":{}}],["compromised/stolen",{"_index":3114,"title":{},"name":{},"text":{"34":{}},"component":{}}],["comput",{"_index":1888,"title":{},"name":{},"text":{"25":{},"38":{},"45":{},"48":{},"61":{}},"component":{}}],["concaten",{"_index":3380,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["concentr",{"_index":6222,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["concept",{"_index":1253,"title":{"18-1":{}},"name":{},"text":{"18":{},"31":{},"33":{},"37":{},"47":{},"48":{},"52":{},"53":{},"55":{},"61":{},"65":{},"66":{}},"component":{}}],["conceptu",{"_index":5080,"title":{},"name":{},"text":{"52":{}},"component":{}}],["concret",{"_index":4160,"title":{},"name":{},"text":{"44":{},"56":{}},"component":{}}],["concurr",{"_index":2349,"title":{},"name":{},"text":{"33":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["concurrenthashmap",{"_index":4395,"title":{},"name":{},"text":{"45":{},"52":{},"66":{}},"component":{}}],["concurrentlinkedqueu",{"_index":5027,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["condens",{"_index":3252,"title":{},"name":{},"text":{"36":{}},"component":{}}],["condit",{"_index":5113,"title":{},"name":{},"text":{"52":{},"53":{},"61":{},"67":{}},"component":{}}],["confer",{"_index":125,"title":{},"name":{},"text":{"1":{}},"component":{}}],["confidenti",{"_index":2939,"title":{},"name":{},"text":{"34":{}},"component":{}}],["config",{"_index":1313,"title":{},"name":{},"text":{"18":{},"20":{},"23":{},"24":{},"32":{},"37":{},"38":{},"56":{},"66":{}},"component":{}}],["config.adoc",{"_index":739,"title":{},"name":{},"text":{"7":{}},"component":{}}],["config.d",{"_index":1364,"title":{},"name":{},"text":{"19":{}},"component":{}}],["config.xml",{"_index":3089,"title":{},"name":{},"text":{"34":{}},"component":{}}],["configur",{"_index":727,"title":{"30":{},"10-1":{},"13-1":{},"19-6":{},"19-7":{},"19-9":{},"19-12":{},"19-14":{},"23-1":{},"23-3":{},"23-4":{},"24-1":{},"24-3":{},"28-1":{},"33-9":{},"33-10":{},"33-22":{},"33-23":{},"33-25":{},"34-3":{},"34-9":{},"34-13":{},"34-14":{},"34-15":{},"34-21":{},"34-23":{},"34-24":{},"36-3":{},"36-5":{},"37-5":{},"37-9":{},"37-11":{},"37-13":{},"37-15":{},"37-17":{},"37-20":{},"37-23":{},"37-28":{},"37-30":{},"37-36":{},"37-39":{},"37-42":{},"38-1":{},"38-8":{},"39-1":{},"42-2":{},"47-8":{},"48-13":{},"48-14":{},"48-16":{},"48-17":{},"49-4":{},"50-3":{},"53-16":{},"54-1":{},"56-7":{},"56-10":{},"56-12":{},"56-14":{},"56-16":{},"56-18":{},"56-20":{},"56-24":{},"61-14":{},"66-25":{},"67-3":{},"67-5":{}},"name":{},"text":{"7":{},"8":{},"10":{},"17":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["configuration.put(settingsframe.enable_push",{"_index":4968,"title":{},"name":{},"text":{"49":{}},"component":{}}],["configuration.put(settingsframe.initial_window_s",{"_index":4970,"title":{},"name":{},"text":{"49":{}},"component":{}}],["configurationbuild",{"_index":6795,"title":{},"name":{},"text":{"66":{}},"component":{}}],["configurationbuilder.addcontextinitializer(new",{"_index":6799,"title":{},"name":{},"text":{"66":{}},"component":{}}],["configurationbuilder.marshaller(new",{"_index":6797,"title":{},"name":{},"text":{"66":{}},"component":{}}],["configurationbuilder.withproperties(hotrodproperti",{"_index":6796,"title":{},"name":{},"text":{"66":{}},"component":{}}],["configure(connect",{"_index":6509,"title":{},"name":{},"text":{"65":{}},"component":{}}],["configure(jettywebsocketservletfactori",{"_index":5821,"title":{},"name":{},"text":{"58":{}},"component":{}}],["configure(websocketservletfactori",{"_index":5813,"title":{},"name":{},"text":{"58":{}},"component":{}}],["configureendpoint",{"_index":5256,"title":{},"name":{},"text":{"53":{}},"component":{}}],["confirm",{"_index":3794,"title":{},"name":{},"text":{"38":{},"56":{}},"component":{}}],["conform",{"_index":1794,"title":{},"name":{},"text":{"24":{},"35":{}},"component":{}}],["confus",{"_index":3768,"title":{},"name":{},"text":{"38":{}},"component":{}}],["confusingli",{"_index":1115,"title":{},"name":{},"text":{"13":{}},"component":{}}],["congest",{"_index":4167,"title":{},"name":{},"text":{"44":{},"61":{}},"component":{}}],["congestion/uncongest",{"_index":4171,"title":{},"name":{},"text":{"44":{}},"component":{}}],["conjunct",{"_index":2312,"title":{},"name":{},"text":{"32":{},"36":{},"37":{},"41":{},"48":{},"54":{},"56":{},"61":{},"66":{}},"component":{}}],["connect",{"_index":129,"title":{"44-2":{},"44-4":{},"48-5":{},"49-3":{},"50-2":{},"53-3":{},"65-1":{}},"name":{},"text":{"1":{},"20":{},"23":{},"25":{},"26":{},"30":{},"31":{},"33":{},"34":{},"37":{},"39":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"69":{}},"component":{}}],["connect(selectormanag",{"_index":4145,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connection.listen",{"_index":4136,"title":{"44-5":{}},"name":{},"text":{"44":{}},"component":{}}],["connection.onclose(throw",{"_index":4173,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connection.onfil",{"_index":4211,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connection.online(lin",{"_index":5151,"title":{},"name":{},"text":{"52":{}},"component":{}}],["connection.onopen",{"_index":4172,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connection.succeed",{"_index":4213,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connection.writeline(\"get",{"_index":5153,"title":{},"name":{},"text":{"52":{}},"component":{}}],["connectionfactori",{"_index":1934,"title":{"26-5":{},"65-1":{},"65-2":{},"65-3":{},"65-4":{}},"name":{},"text":{"26":{},"34":{},"44":{},"52":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["connectionfactory.detect",{"_index":6492,"title":{},"name":{},"text":{"65":{}},"component":{}}],["connectionlimit",{"_index":4190,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connectionpool",{"_index":4523,"title":{},"name":{},"text":{"48":{}},"component":{}}],["connectionpool.factori",{"_index":4537,"title":{},"name":{},"text":{"48":{}},"component":{}}],["connectionpromis",{"_index":5125,"title":{},"name":{},"text":{"52":{}},"component":{}}],["connectionpromise.get",{"_index":5134,"title":{},"name":{},"text":{"52":{}},"component":{}}],["connectionpromise.whencomplete((connect",{"_index":5133,"title":{},"name":{},"text":{"52":{}},"component":{}}],["connectionpromise.whencomplete((sslconnect",{"_index":5160,"title":{},"name":{},"text":{"52":{}},"component":{}}],["connections.decrementandget",{"_index":4200,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connections.incrementandget",{"_index":4197,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connectionstatist",{"_index":4189,"title":{},"name":{},"text":{"44":{}},"component":{}}],["connectionstr",{"_index":6757,"title":{},"name":{},"text":{"66":{}},"component":{}}],["connector",{"_index":1261,"title":{"34":{},"33-27":{},"61-10":{},"61-13":{}},"name":{},"text":{"18":{},"19":{},"20":{},"30":{},"33":{},"34":{},"36":{},"40":{},"41":{},"44":{},"48":{},"49":{},"56":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["connector.addbean(listen",{"_index":6003,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connector.getexecutor",{"_index":6508,"title":{},"name":{},"text":{"65":{}},"component":{}}],["connector.getlocalport",{"_index":5998,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connector.setacceptqueuesize(128",{"_index":5955,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connector.sethost(\"127.0.0.1",{"_index":5954,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connector.setport(8080",{"_index":5953,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["connector.setport(8181",{"_index":6496,"title":{},"name":{},"text":{"65":{}},"component":{}}],["connector.setport(843",{"_index":6027,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connector.setport(8443",{"_index":6011,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["connector.setsslcontextfactory(sslcontextfactori",{"_index":4915,"title":{},"name":{},"text":{"48":{}},"component":{}}],["connector.setunixdomainpath(path.of(\"/tmp/jetty.sock",{"_index":5957,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["connector1",{"_index":5970,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connector1.setport(8080",{"_index":5971,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connector2",{"_index":5976,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connector2.setport(9090",{"_index":5978,"title":{},"name":{},"text":{"61":{}},"component":{}}],["connectornam",{"_index":1437,"title":{},"name":{},"text":{"19":{}},"component":{}}],["connectorserv",{"_index":4356,"title":{},"name":{},"text":{"45":{}},"component":{}}],["connectorserver(jmxurl",{"_index":4363,"title":{},"name":{},"text":{"45":{}},"component":{}}],["conscrypt",{"_index":2877,"title":{"34-20":{},"61-20":{}},"name":{},"text":{"34":{},"61":{}},"component":{}}],["conscrypt.version?=2.5.1",{"_index":2287,"title":{},"name":{},"text":{"32":{}},"component":{}}],["consecut",{"_index":5004,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["consequ",{"_index":4636,"title":{},"name":{},"text":{"48":{}},"component":{}}],["consid",{"_index":607,"title":{},"name":{},"text":{"6":{},"28":{},"33":{},"37":{},"41":{},"43":{},"44":{},"61":{},"66":{}},"component":{}}],["consider",{"_index":3348,"title":{},"name":{},"text":{"37":{}},"component":{}}],["consist",{"_index":749,"title":{},"name":{},"text":{"7":{},"13":{},"28":{},"61":{},"66":{}},"component":{}}],["consol",{"_index":1914,"title":{"33-3":{}},"name":{},"text":{"25":{},"33":{},"34":{},"36":{},"41":{},"43":{},"45":{},"56":{},"68":{}},"component":{}}],["consolid",{"_index":786,"title":{},"name":{},"text":{"7":{}},"component":{}}],["constant",{"_index":2707,"title":{},"name":{},"text":{"33":{}},"component":{}}],["constitu",{"_index":5463,"title":{},"name":{},"text":{"56":{}},"component":{}}],["constrain",{"_index":2841,"title":{},"name":{},"text":{"33":{}},"component":{}}],["constraint",{"_index":850,"title":{},"name":{},"text":{"7":{},"30":{}},"component":{}}],["construct",{"_index":5462,"title":{},"name":{},"text":{"56":{}},"component":{}}],["constructor",{"_index":2224,"title":{},"name":{},"text":{"31":{},"42":{},"53":{},"56":{}},"component":{}}],["consult",{"_index":828,"title":{},"name":{},"text":{"7":{},"37":{},"48":{},"66":{}},"component":{}}],["consum",{"_index":1197,"title":{"47-2":{},"47-3":{},"47-4":{}},"name":{},"text":{"17":{},"33":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["consume(chunk",{"_index":4272,"title":{},"name":{},"text":{"44":{}},"component":{}}],["consume(content.chunk",{"_index":4288,"title":{},"name":{},"text":{"44":{}},"component":{}}],["consumeasync(chunk",{"_index":4281,"title":{},"name":{},"text":{"44":{}},"component":{}}],["consumed.whencomplete((result",{"_index":4282,"title":{},"name":{},"text":{"44":{}},"component":{}}],["consumer.accept(bytes.tostring(standardcharsets.utf_8",{"_index":5142,"title":{},"name":{},"text":{"52":{}},"component":{}}],["consumpt",{"_index":4455,"title":{},"name":{},"text":{"47":{},"48":{},"49":{},"53":{},"62":{}},"component":{}}],["contact",{"_index":619,"title":{},"name":{},"text":{"6":{},"12":{},"25":{},"37":{},"38":{},"48":{},"51":{},"52":{},"66":{}},"component":{}}],["contain",{"_index":723,"title":{"17-2":{},"56-8":{}},"name":{},"text":{"7":{},"14":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"27":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"53":{},"54":{},"56":{},"61":{},"62":{},"63":{},"66":{},"67":{}},"component":{}}],["container",{"_index":4488,"title":{},"name":{},"text":{"47":{}},"component":{}}],["container.addendpoint",{"_index":6872,"title":{},"name":{},"text":{"67":{}},"component":{}}],["container.addendpoint(myjavaxwebsocketendpoint.class",{"_index":6871,"title":{},"name":{},"text":{"67":{}},"component":{}}],["container.addmapping(\"/ws/adv",{"_index":6896,"title":{},"name":{},"text":{"67":{}},"component":{}}],["container.addmapping(\"/ws/chat/{room",{"_index":6918,"title":{},"name":{},"text":{"67":{}},"component":{}}],["container.addmapping(\"regex|/ws/v\\\\d+/echo",{"_index":6891,"title":{},"name":{},"text":{"67":{}},"component":{}}],["container.inheritedlisten",{"_index":4078,"title":{"43-5":{}},"name":{},"text":{"43":{}},"component":{}}],["container.listen",{"_index":4077,"title":{"43-4":{}},"name":{},"text":{"43":{},"45":{}},"component":{}}],["container.setdefaultmaxtextmessagebuffersize(128",{"_index":6870,"title":{},"name":{},"text":{"67":{}},"component":{}}],["container.setmaxtextmessagesize(128",{"_index":6889,"title":{},"name":{},"text":{"67":{}},"component":{}}],["container.upgrade((rq",{"_index":6908,"title":{},"name":{},"text":{"67":{}},"component":{}}],["containerincludejarpattern",{"_index":5486,"title":{},"name":{},"text":{"56":{}},"component":{}}],["containerlifecycl",{"_index":4086,"title":{},"name":{},"text":{"43":{},"68":{}},"component":{}}],["containerlifecycle.addbean",{"_index":4104,"title":{},"name":{},"text":{"43":{}},"component":{}}],["containerlifecycle.addmanag",{"_index":4103,"title":{},"name":{},"text":{"43":{}},"component":{}}],["container’",{"_index":1198,"title":{},"name":{},"text":{"17":{},"56":{}},"component":{}}],["content",{"_index":659,"title":{"48-10":{},"48-11":{},"57-6":{},"57-8":{},"61-26":{},"61-40":{},"61-45":{},"61-48":{}},"name":{},"text":{"7":{},"19":{},"20":{},"23":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"44":{},"48":{},"49":{},"50":{},"53":{},"55":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["content.chunk",{"_index":4139,"title":{"44-8":{}},"name":{},"text":{"44":{},"48":{},"57":{}},"component":{}}],["content.chunk.getbytebuff",{"_index":4277,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.chunk.isfailure(chunk",{"_index":4267,"title":{},"name":{},"text":{"44":{},"57":{}},"component":{}}],["content.chunk.releas",{"_index":4276,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.clos",{"_index":4634,"title":{},"name":{},"text":{"48":{}},"component":{}}],["content.copy(content.sourc",{"_index":4327,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.copy(request",{"_index":5773,"title":{},"name":{},"text":{"57":{}},"component":{}}],["content.getbytes(utf_8",{"_index":6352,"title":{},"name":{},"text":{"61":{}},"component":{}}],["content.getoutputstream",{"_index":4641,"title":{},"name":{},"text":{"48":{}},"component":{}}],["content.remain",{"_index":5768,"title":{},"name":{},"text":{"57":{}},"component":{}}],["content.sink",{"_index":4140,"title":{"44-9":{}},"name":{},"text":{"44":{},"61":{}},"component":{}}],["content.sink.writ",{"_index":6280,"title":{},"name":{},"text":{"61":{}},"component":{}}],["content.sink.write(boolean",{"_index":4309,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.sink.write(respons",{"_index":5772,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["content.sink.write(sink",{"_index":4344,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.sourc",{"_index":4138,"title":{"44-7":{}},"name":{},"text":{"44":{},"48":{},"57":{},"61":{}},"component":{}}],["content.source.asbytebuffer(request",{"_index":6362,"title":{},"name":{},"text":{"61":{}},"component":{}}],["content.source.asbytebufferasync(request",{"_index":5696,"title":{},"name":{},"text":{"57":{}},"component":{}}],["content.source.asinputstream(content.sourc",{"_index":4287,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.source.asinputstream(request",{"_index":5698,"title":{},"name":{},"text":{"57":{}},"component":{}}],["content.source.asstringasync(content.sourc",{"_index":4284,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.source.asstringasync(request",{"_index":5693,"title":{},"name":{},"text":{"57":{}},"component":{}}],["content.source.fail(throw",{"_index":4256,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.source.read",{"_index":4249,"title":{},"name":{},"text":{"44":{}},"component":{}}],["content.write(buff",{"_index":4633,"title":{},"name":{},"text":{"48":{}},"component":{}}],["content1",{"_index":4312,"title":{},"name":{},"text":{"44":{},"49":{},"50":{}},"component":{}}],["content2",{"_index":4313,"title":{},"name":{},"text":{"44":{},"48":{},"49":{},"50":{}},"component":{}}],["content2.clos",{"_index":4713,"title":{},"name":{},"text":{"48":{}},"component":{}}],["content2.write(chunk.getbytebuff",{"_index":4708,"title":{},"name":{},"text":{"48":{}},"component":{}}],["contentlength",{"_index":5650,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["contentlengthhandl",{"_index":6350,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contentpublish",{"_index":4629,"title":{},"name":{},"text":{"48":{}},"component":{}}],["contentrespons",{"_index":4549,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["contentsourc",{"_index":4672,"title":{},"name":{},"text":{"48":{}},"component":{}}],["contentsource.demand",{"_index":4701,"title":{},"name":{},"text":{"48":{}},"component":{}}],["contentsource.demand(runn",{"_index":4675,"title":{},"name":{},"text":{"48":{}},"component":{}}],["contentsource.read",{"_index":4705,"title":{},"name":{},"text":{"48":{}},"component":{}}],["contentsourcelisten",{"_index":4673,"title":{},"name":{},"text":{"48":{}},"component":{}}],["contenttyp",{"_index":5646,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["context",{"_index":1183,"title":{"19-3":{},"19-5":{},"19-10":{}},"name":{},"text":{"17":{},"19":{},"20":{},"23":{},"24":{},"26":{},"27":{},"28":{},"33":{},"34":{},"35":{},"37":{},"42":{},"43":{},"44":{},"52":{},"56":{},"57":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["context.addservlet(defaultservlet.class",{"_index":6269,"title":{},"name":{},"text":{"61":{}},"component":{}}],["context.addservlet(shopcartservlet.class",{"_index":6254,"title":{},"name":{},"text":{"61":{}},"component":{}}],["context.getcontextpath",{"_index":5617,"title":{},"name":{},"text":{"57":{}},"component":{}}],["context.put(clientconnector.client_connection_factory_context_key",{"_index":5129,"title":{},"name":{},"text":{"52":{}},"component":{}}],["context.put(clientconnector.connection_promise_context_key",{"_index":5130,"title":{},"name":{},"text":{"52":{}},"component":{}}],["context.put(transport.class.getnam",{"_index":5128,"title":{},"name":{},"text":{"52":{}},"component":{}}],["context.setcontextpath(\"/app",{"_index":6262,"title":{},"name":{},"text":{"61":{}},"component":{}}],["context.setcontextpath(\"/shop",{"_index":6251,"title":{},"name":{},"text":{"61":{}},"component":{}}],["context.setwar(\"/path/to/webapp.war",{"_index":6261,"title":{},"name":{},"text":{"61":{}},"component":{}}],["context.xml",{"_index":2310,"title":{},"name":{},"text":{"32":{}},"component":{}}],["context.xml|webapps/demo",{"_index":2309,"title":{},"name":{},"text":{"32":{}},"component":{}}],["context/nod",{"_index":3410,"title":{},"name":{},"text":{"37":{}},"component":{}}],["context_path",{"_index":6070,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contexta",{"_index":6744,"title":{},"name":{},"text":{"66":{}},"component":{}}],["contextb",{"_index":6745,"title":{},"name":{},"text":{"66":{}},"component":{}}],["contextcollect",{"_index":6076,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contextcollection.addhandler(apicontext",{"_index":6107,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contextcollection.addhandler(new",{"_index":6077,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contextcollection.addhandler(shopgziphandl",{"_index":6106,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contextcollection.deployhandler(apicontext",{"_index":6080,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contextfactory=\"com.sun.jndi.ldap.ldapctxfactori",{"_index":1748,"title":{},"name":{},"text":{"23":{}},"component":{}}],["contexthandl",{"_index":1423,"title":{"61-24":{}},"name":{},"text":{"19":{},"42":{},"56":{},"61":{},"67":{}},"component":{}}],["contexthandler(\"/app",{"_index":6167,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contexthandler(\"/ctx",{"_index":6886,"title":{},"name":{},"text":{"67":{}},"component":{}}],["contexthandler(\"/myapp",{"_index":6385,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contexthandler(new",{"_index":6072,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contexthandler.sethandler(new",{"_index":6904,"title":{},"name":{},"text":{"67":{}},"component":{}}],["contexthandler.sethandler(sessionhandl",{"_index":6387,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contexthandler.sethandler(websockethandl",{"_index":6901,"title":{},"name":{},"text":{"67":{}},"component":{}}],["contexthandlercollect",{"_index":5884,"title":{"61-25":{}},"name":{},"text":{"61":{},"66":{}},"component":{}}],["contextpath",{"_index":1322,"title":{},"name":{},"text":{"19":{},"20":{},"37":{},"42":{},"56":{},"57":{},"61":{},"66":{}},"component":{}}],["contexts.addhandler(app1",{"_index":6650,"title":{},"name":{},"text":{"66":{}},"component":{}}],["contextxml",{"_index":5436,"title":{},"name":{},"text":{"56":{}},"component":{}}],["context’",{"_index":3406,"title":{},"name":{},"text":{"37":{}},"component":{}}],["contigu",{"_index":4039,"title":{},"name":{},"text":{"42":{}},"component":{}}],["continu",{"_index":2,"title":{"1-2":{},"61-54":{}},"name":{},"text":{"2":{},"37":{},"44":{},"48":{},"56":{},"61":{},"66":{}},"component":{}}],["continue100handl",{"_index":6354,"title":{},"name":{},"text":{"61":{}},"component":{}}],["continue100handler(handl",{"_index":6355,"title":{},"name":{},"text":{"61":{}},"component":{}}],["continue100httpservlet",{"_index":6396,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contract",{"_index":6273,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["contrari",{"_index":5969,"title":{},"name":{},"text":{"61":{}},"component":{}}],["contribut",{"_index":142,"title":{"6":{}},"name":{},"text":{"1":{},"4":{},"6":{},"7":{},"10":{}},"component":{"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{}}}],["contributor",{"_index":64,"title":{"9":{}},"name":{},"text":{"1":{},"6":{},"9":{},"10":{}},"component":{}}],["control",{"_index":1242,"title":{"49-2":{},"62-2":{}},"name":{},"text":{"17":{},"23":{},"25":{},"28":{},"30":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"53":{},"56":{},"61":{},"62":{},"66":{},"67":{},"68":{}},"component":{}}],["conveni",{"_index":1504,"title":{},"name":{},"text":{"20":{},"23":{},"26":{},"42":{},"44":{},"54":{},"61":{},"66":{}},"component":{}}],["convent",{"_index":634,"title":{"7-13":{},"13-2":{},"13-3":{}},"name":{},"text":{"7":{},"13":{},"45":{},"55":{}},"component":{}}],["convers",{"_index":2881,"title":{},"name":{},"text":{"34":{},"37":{},"44":{},"47":{},"48":{},"67":{}},"component":{}}],["convert",{"_index":675,"title":{"37-25":{}},"name":{},"text":{"7":{},"19":{},"34":{},"37":{},"43":{},"44":{},"48":{},"49":{},"51":{},"53":{},"61":{},"62":{}},"component":{}}],["cooki",{"_index":2395,"title":{"48-18":{},"48-19":{},"59-3":{}},"name":{},"text":{"33":{},"37":{},"48":{},"49":{},"50":{},"53":{},"57":{},"59":{},"61":{},"66":{}},"component":{}}],["cookie(\"foo",{"_index":4810,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cookie(\"nam",{"_index":5724,"title":{},"name":{},"text":{"57":{}},"component":{}}],["cookie(httpcookie.from(\"foo",{"_index":4791,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cookie.setattribute(\"samesit",{"_index":5728,"title":{},"name":{},"text":{"57":{}},"component":{}}],["cookie.setdomain(\"example.org",{"_index":5725,"title":{},"name":{},"text":{"57":{}},"component":{}}],["cookie.setmaxage(24",{"_index":5727,"title":{},"name":{},"text":{"57":{}},"component":{}}],["cookie.setpath(\"/path",{"_index":5726,"title":{},"name":{},"text":{"57":{}},"component":{}}],["cookie.setpath(\"/secur",{"_index":4812,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cookiecompli",{"_index":2727,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["cookiecompliance.from(\"rfc6265",{"_index":5878,"title":{},"name":{},"text":{"59":{}},"component":{}}],["cookiecompliance.from(str",{"_index":2729,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["cookiecompliance.rfc6265",{"_index":2733,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["cookiecompliance.viol",{"_index":5874,"title":{},"name":{},"text":{"59":{}},"component":{}}],["cookiecompliance.violation.reserved_names_not_dollar_prefix",{"_index":2731,"title":{},"name":{},"text":{"33":{}},"component":{}}],["cookiesettim",{"_index":3603,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["cookiestor",{"_index":4517,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cookiestore.add(uri.create(\"http://domain.com",{"_index":4790,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cookiestore.match(uri",{"_index":4793,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cookiestore.match(uri.create(\"http://domain.com/path",{"_index":4785,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cookiestore.remove(uri",{"_index":4794,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cookietim",{"_index":3496,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["cooper",{"_index":151,"title":{},"name":{},"text":{"1":{}},"component":{}}],["coordin",{"_index":35,"title":{},"name":{},"text":{"1":{},"45":{},"48":{},"49":{},"50":{},"53":{},"58":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["cope",{"_index":5278,"title":{},"name":{},"text":{"53":{}},"component":{}}],["copi",{"_index":687,"title":{},"name":{},"text":{"7":{},"8":{},"11":{},"20":{},"24":{},"27":{},"31":{},"32":{},"34":{},"36":{},"37":{},"38":{},"41":{},"44":{},"48":{},"49":{},"56":{},"61":{},"62":{}},"component":{}}],["copy(content.sourc",{"_index":4328,"title":{},"name":{},"text":{"44":{}},"component":{}}],["copyright",{"_index":824,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cor",{"_index":2390,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["core",{"_index":93,"title":{"33-4":{}},"name":{},"text":{"1":{},"19":{},"33":{},"34":{},"36":{},"41":{},"44":{},"47":{},"57":{},"66":{}},"component":{}}],["corpor",{"_index":3821,"title":{},"name":{},"text":{"38":{}},"component":{}}],["correct",{"_index":1041,"title":{},"name":{},"text":{"11":{},"18":{},"26":{},"34":{},"37":{},"38":{},"44":{}},"component":{}}],["correctli",{"_index":728,"title":{},"name":{},"text":{"7":{},"37":{},"56":{},"59":{},"67":{}},"component":{}}],["correspond",{"_index":1274,"title":{},"name":{},"text":{"18":{},"20":{},"25":{},"26":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"42":{},"43":{},"45":{},"48":{},"49":{},"50":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["corrupt",{"_index":878,"title":{"37-47":{}},"name":{},"text":{"7":{},"37":{},"66":{}},"component":{}}],["cost",{"_index":3039,"title":{},"name":{},"text":{"34":{},"44":{},"47":{},"61":{},"67":{}},"component":{}}],["costli",{"_index":4522,"title":{},"name":{},"text":{"48":{}},"component":{}}],["count",{"_index":4196,"title":{},"name":{},"text":{"44":{},"45":{},"61":{}},"component":{}}],["countservic",{"_index":4416,"title":{},"name":{},"text":{"45":{}},"component":{}}],["countservice)super.getmanagedobject",{"_index":4423,"title":{},"name":{},"text":{"45":{}},"component":{}}],["countservicembean",{"_index":4420,"title":{},"name":{},"text":{"45":{}},"component":{}}],["countservicembean(object",{"_index":4421,"title":{},"name":{},"text":{"45":{}},"component":{}}],["coupl",{"_index":340,"title":{},"name":{},"text":{"3":{},"23":{},"47":{}},"component":{}}],["cours",{"_index":3052,"title":{},"name":{},"text":{"34":{},"52":{},"66":{}},"component":{}}],["cover",{"_index":5795,"title":{},"name":{},"text":{"58":{}},"component":{}}],["cp",{"_index":3541,"title":{},"name":{},"text":{"37":{},"40":{}},"component":{}}],["cpu",{"_index":2499,"title":{},"name":{},"text":{"33":{},"34":{},"41":{},"47":{},"61":{}},"component":{}}],["crash",{"_index":3122,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["creat",{"_index":979,"title":{"10-4":{},"30-1":{},"30-3":{},"30-5":{},"31-2":{},"55-2":{},"55-3":{},"55-6":{},"55-7":{},"65-1":{}},"name":{},"text":{"9":{},"10":{},"16":{},"20":{},"23":{},"25":{},"26":{},"27":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["createtim",{"_index":3498,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["createwebsocket(jettyserverupgraderequest",{"_index":5823,"title":{},"name":{},"text":{"58":{}},"component":{}}],["createwebsocket(servletupgraderequest",{"_index":5816,"title":{},"name":{},"text":{"58":{}},"component":{}}],["creation",{"_index":1853,"title":{},"name":{},"text":{"25":{},"30":{},"34":{},"38":{},"42":{},"44":{},"52":{},"65":{},"66":{}},"component":{}}],["creativ",{"_index":3751,"title":{},"name":{},"text":{"38":{}},"component":{}}],["credenti",{"_index":1706,"title":{},"name":{},"text":{"23":{},"24":{},"33":{},"40":{},"48":{}},"component":{}}],["credentialfield=\"mypassword",{"_index":1714,"title":{},"name":{},"text":{"23":{}},"component":{}}],["criteria",{"_index":5224,"title":{},"name":{},"text":{"53":{},"61":{}},"component":{}}],["critic",{"_index":2840,"title":{},"name":{},"text":{"33":{},"41":{}},"component":{}}],["cross",{"_index":2325,"title":{"33-5":{}},"name":{},"text":{"33":{},"61":{},"66":{}},"component":{}}],["crossoriginfilt",{"_index":6257,"title":{},"name":{},"text":{"61":{}},"component":{}}],["crossoriginhandl",{"_index":2391,"title":{"61-34":{}},"name":{},"text":{"33":{},"61":{}},"component":{}}],["crossoriginhandler.setallowcredentials(tru",{"_index":6249,"title":{},"name":{},"text":{"61":{}},"component":{}}],["crossoriginhandler.setallowedoriginpatterns(set.of(\"http://domain.com",{"_index":6248,"title":{},"name":{},"text":{"61":{}},"component":{}}],["crossoriginhandler.setallowedoriginpatterns(set.of(\"http://domain\\\\.com",{"_index":6225,"title":{},"name":{},"text":{"61":{}},"component":{}}],["crossoriginhandler.sethandler(context",{"_index":6252,"title":{},"name":{},"text":{"61":{}},"component":{}}],["crt",{"_index":3197,"title":{},"name":{},"text":{"34":{}},"component":{}}],["crucial",{"_index":3384,"title":{},"name":{},"text":{"37":{}},"component":{}}],["crypt:adpexzg3fuzak,admin",{"_index":1744,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cryptograph",{"_index":1915,"title":{},"name":{},"text":{"25":{},"30":{},"34":{},"45":{},"48":{}},"component":{}}],["csr",{"_index":2171,"title":{},"name":{},"text":{"30":{}},"component":{}}],["csrf",{"_index":6220,"title":{},"name":{},"text":{"61":{}},"component":{}}],["css",{"_index":1574,"title":{},"name":{},"text":{"20":{},"34":{},"61":{}},"component":{}}],["csv",{"_index":2435,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ctrl+c",{"_index":1490,"title":{},"name":{},"text":{"20":{},"33":{},"38":{},"56":{}},"component":{}}],["ctx",{"_index":6858,"title":{},"name":{},"text":{"67":{}},"component":{}}],["ctx//path/to//resourc",{"_index":6113,"title":{},"name":{},"text":{"61":{}},"component":{}}],["cumul",{"_index":6631,"title":{},"name":{},"text":{"66":{}},"component":{}}],["curl",{"_index":2962,"title":{},"name":{},"text":{"34":{}},"component":{}}],["current",{"_index":190,"title":{},"name":{},"text":{"2":{},"7":{},"17":{},"18":{},"23":{},"33":{},"36":{},"37":{},"38":{},"41":{},"45":{},"52":{},"53":{},"54":{},"56":{},"59":{},"61":{},"66":{},"72":{}},"component":{}}],["current}.demo",{"_index":5355,"title":{},"name":{},"text":{"54":{}},"component":{}}],["curv",{"_index":88,"title":{},"name":{},"text":{"1":{}},"component":{}}],["custom",{"_index":635,"title":{"31":{},"7-14":{},"34-15":{},"34-16":{},"34-17":{},"36-5":{},"38-7":{},"53-6":{},"61-4":{},"65-4":{},"66-5":{},"66-11":{},"66-14":{},"67-11":{}},"name":{"31":{}},"text":{"7":{},"14":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"39":{},"41":{},"42":{},"45":{},"48":{},"51":{},"52":{},"53":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["customclientconnector",{"_index":5097,"title":{},"name":{},"text":{"52":{}},"component":{}}],["customconnect",{"_index":5120,"title":{},"name":{},"text":{"52":{}},"component":{}}],["customconnection(endpoint",{"_index":5121,"title":{},"name":{},"text":{"52":{}},"component":{}}],["customhttpcompli",{"_index":5843,"title":{},"name":{},"text":{"59":{}},"component":{}}],["customis",{"_index":3452,"title":{},"name":{},"text":{"37":{}},"component":{}}],["customiz",{"_index":3313,"title":{},"name":{},"text":{"36":{},"37":{}},"component":{}}],["customrequest",{"_index":5180,"title":{},"name":{},"text":{"53":{}},"component":{}}],["customrequest.getcookies().add(new",{"_index":5181,"title":{},"name":{},"text":{"53":{}},"component":{}}],["customrequest.setheader(\"x",{"_index":5183,"title":{},"name":{},"text":{"53":{}},"component":{}}],["customrequest.setsubprotocols(\"chat",{"_index":5186,"title":{},"name":{},"text":{"53":{}},"component":{}}],["customrequestlog",{"_index":5911,"title":{},"name":{},"text":{"61":{}},"component":{}}],["customrequestlog(logwrit",{"_index":5923,"title":{},"name":{},"text":{"61":{}},"component":{}}],["customrequestlog(new",{"_index":5913,"title":{},"name":{},"text":{"61":{}},"component":{}}],["customrequestlog.extended_ncsa_format",{"_index":5915,"title":{},"name":{},"text":{"61":{}},"component":{}}],["customuricompli",{"_index":5869,"title":{},"name":{},"text":{"59":{}},"component":{}}],["cut",{"_index":83,"title":{},"name":{},"text":{"1":{},"13":{},"41":{}},"component":{}}],["cve",{"_index":383,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cycl",{"_index":3394,"title":{},"name":{},"text":{"37":{},"43":{},"46":{},"48":{},"49":{},"50":{},"56":{},"62":{},"63":{},"66":{}},"component":{}}],["d",{"_index":1363,"title":{},"name":{},"text":{"19":{},"33":{},"38":{},"48":{},"61":{}},"component":{}}],["daemon",{"_index":1890,"title":{},"name":{},"text":{"25":{},"33":{}},"component":{}}],["daili",{"_index":5916,"title":{},"name":{},"text":{"61":{}},"component":{}}],["data",{"_index":877,"title":{"37-36":{},"37-40":{},"37-47":{},"53-17":{}},"name":{},"text":{"7":{},"13":{},"23":{},"33":{},"34":{},"36":{},"37":{},"43":{},"44":{},"47":{},"49":{},"50":{},"53":{},"57":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["data.frame().getbytebuff",{"_index":5019,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["data.frame().isendstream",{"_index":5021,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["data.getbytebuff",{"_index":6478,"title":{},"name":{},"text":{"63":{}},"component":{}}],["data.islast",{"_index":5074,"title":{},"name":{},"text":{"50":{},"63":{}},"component":{}}],["data.releas",{"_index":5020,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["databas",{"_index":1702,"title":{},"name":{},"text":{"23":{},"26":{},"37":{},"61":{},"66":{}},"component":{}}],["databaseadapt",{"_index":6708,"title":{},"name":{},"text":{"66":{}},"component":{}}],["databaseadaptor",{"_index":6532,"title":{"66-19":{}},"name":{},"text":{"66":{}},"component":{}}],["database’",{"_index":6711,"title":{},"name":{},"text":{"66":{}},"component":{}}],["datacent",{"_index":5115,"title":{},"name":{},"text":{"52":{}},"component":{}}],["datacf1",{"_index":4998,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["datacf1.thencompose(",{"_index":5001,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["dataframe(buffer1",{"_index":5068,"title":{},"name":{},"text":{"50":{}},"component":{}}],["dataframe(buffer2",{"_index":5069,"title":{},"name":{},"text":{"50":{}},"component":{}}],["dataframe(pushed.getid",{"_index":6465,"title":{},"name":{},"text":{"62":{}},"component":{}}],["dataframe(resourcebyt",{"_index":6483,"title":{},"name":{},"text":{"63":{}},"component":{}}],["dataframe(s.getid",{"_index":5003,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["dataframe(stream.getid",{"_index":5000,"title":{},"name":{},"text":{"49":{}},"component":{}}],["datagramchannel",{"_index":4156,"title":{},"name":{},"text":{"44":{},"52":{},"61":{}},"component":{}}],["datagramchannelendpoint",{"_index":4158,"title":{},"name":{},"text":{"44":{}},"component":{}}],["dataqueu",{"_index":5026,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["dataqueue.offer(new",{"_index":5029,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["dataratehandl",{"_index":6135,"title":{},"name":{},"text":{"61":{}},"component":{}}],["dataratehandler.sethandler(contextcollect",{"_index":6139,"title":{},"name":{},"text":{"61":{}},"component":{}}],["datasourc",{"_index":1398,"title":{"26-4":{}},"name":{},"text":{"19":{},"26":{},"37":{},"39":{},"40":{},"66":{}},"component":{}}],["datasourceadaptor",{"_index":6715,"title":{},"name":{},"text":{"66":{}},"component":{}}],["datasourceadaptor.setdatasourcename(\"/jdbc/myd",{"_index":6716,"title":{},"name":{},"text":{"66":{}},"component":{}}],["datasourceloginmodul",{"_index":1644,"title":{"23-7":{}},"name":{},"text":{},"component":{}}],["datastor",{"_index":3336,"title":{"37-31":{},"37-38":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["date",{"_index":377,"title":{},"name":{},"text":{"3":{},"33":{},"36":{},"37":{},"48":{},"56":{},"57":{},"61":{}},"component":{}}],["day",{"_index":2147,"title":{},"name":{},"text":{"30":{},"33":{},"34":{},"36":{}},"component":{}}],["db",{"_index":3465,"title":{},"name":{},"text":{"37":{}},"component":{}}],["dbdriver=\"org.hsqldb.jdbcdriv",{"_index":1711,"title":{},"name":{},"text":{"23":{}},"component":{}}],["dbjndiname=\"d",{"_index":1733,"title":{},"name":{},"text":{"23":{}},"component":{}}],["dburl=\"jdbc:hsqldb",{"_index":1709,"title":{},"name":{},"text":{"23":{}},"component":{}}],["dbuser",{"_index":3851,"title":{},"name":{},"text":{"40":{}},"component":{}}],["dbusername=\"sa",{"_index":1710,"title":{},"name":{},"text":{"23":{}},"component":{}}],["dd",{"_index":3241,"title":{},"name":{},"text":{"36":{}},"component":{}}],["dd/mmm/yyyy:hh:mm:ss",{"_index":2550,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ddetail=tru",{"_index":5427,"title":{},"name":{},"text":{"56":{}},"component":{}}],["de",{"_index":1798,"title":{},"name":{},"text":{"24":{},"34":{},"37":{},"40":{},"59":{}},"component":{}}],["deactiv",{"_index":4087,"title":{},"name":{},"text":{"43":{}},"component":{}}],["deadlock",{"_index":2805,"title":{},"name":{},"text":{"33":{},"48":{}},"component":{}}],["deal",{"_index":630,"title":{"7-11":{}},"name":{},"text":{"7":{},"44":{},"52":{},"55":{},"62":{},"63":{},"66":{},"67":{}},"component":{}}],["dealloc",{"_index":4240,"title":{},"name":{},"text":{"44":{}},"component":{}}],["debug",{"_index":1119,"title":{"69":{},"41-5":{},"41-7":{},"41-8":{},"41-9":{}},"name":{"69":{}},"text":{"13":{},"28":{},"35":{},"36":{},"38":{},"41":{},"69":{},"71":{}},"component":{}}],["debug.ini",{"_index":4015,"title":{},"name":{},"text":{"41":{}},"component":{}}],["debug.mod",{"_index":4010,"title":{},"name":{},"text":{"41":{}},"component":{}}],["debug=\"fals",{"_index":1771,"title":{},"name":{},"text":{"23":{}},"component":{}}],["debug=tru",{"_index":1693,"title":{},"name":{},"text":{"23":{}},"component":{}}],["debugg",{"_index":4013,"title":{},"name":{},"text":{"41":{},"69":{}},"component":{}}],["decid",{"_index":1098,"title":{},"name":{},"text":{"13":{},"33":{},"34":{},"41":{},"44":{},"47":{},"48":{},"49":{},"50":{},"53":{},"61":{},"62":{},"63":{},"66":{},"67":{}},"component":{}}],["decis",{"_index":6297,"title":{},"name":{},"text":{"61":{}},"component":{}}],["declar",{"_index":1271,"title":{"26-1":{}},"name":{},"text":{"18":{},"19":{},"23":{},"26":{},"28":{},"32":{},"34":{},"35":{},"38":{},"39":{},"44":{},"47":{},"48":{},"52":{},"54":{},"55":{},"56":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["declaredrol",{"_index":1160,"title":{},"name":{},"text":{"17":{}},"component":{}}],["decod",{"_index":5862,"title":{},"name":{},"text":{"59":{},"67":{}},"component":{}}],["decompress",{"_index":6096,"title":{},"name":{},"text":{"61":{}},"component":{}}],["decompression/compress",{"_index":6097,"title":{},"name":{},"text":{"61":{}},"component":{}}],["decrypt",{"_index":3181,"title":{},"name":{},"text":{"34":{},"44":{},"61":{},"65":{}},"component":{}}],["decryption/encrypt",{"_index":3203,"title":{},"name":{},"text":{"34":{}},"component":{}}],["dedic",{"_index":2472,"title":{},"name":{},"text":{"33":{}},"component":{}}],["deep",{"_index":5197,"title":{},"name":{},"text":{"53":{}},"component":{}}],["default",{"_index":741,"title":{"36-3":{}},"name":{},"text":{"7":{},"8":{},"11":{},"13":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"28":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"42":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"59":{},"61":{},"62":{},"66":{},"67":{},"71":{}},"component":{}}],["default.xml",{"_index":1828,"title":{},"name":{},"text":{"24":{}},"component":{}}],["default:\"jettysess",{"_index":6730,"title":{},"name":{},"text":{"66":{}},"component":{}}],["default:\"jsessionid",{"_index":6590,"title":{},"name":{},"text":{"66":{}},"component":{}}],["default:0",{"_index":6666,"title":{},"name":{},"text":{"66":{}},"component":{}}],["default:3600",{"_index":6669,"title":{},"name":{},"text":{"66":{}},"component":{}}],["default:fals",{"_index":6571,"title":{},"name":{},"text":{"66":{}},"component":{}}],["default:nul",{"_index":6582,"title":{},"name":{},"text":{"66":{}},"component":{}}],["default:tru",{"_index":6587,"title":{},"name":{},"text":{"66":{}},"component":{}}],["default:{sessiontrackingmode.cooki",{"_index":6597,"title":{},"name":{},"text":{"66":{}},"component":{}}],["default_backend",{"_index":3200,"title":{},"name":{},"text":{"34":{}},"component":{}}],["defaultauthconfigfactori",{"_index":1788,"title":{"24-6":{}},"name":{},"text":{"24":{}},"component":{}}],["defaultcachemanag",{"_index":6776,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultcachemanager(\"path/to/infinispan.xml",{"_index":6777,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultcachemanager.getcach",{"_index":6779,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaulthandl",{"_index":5890,"title":{"61-36":{}},"name":{},"text":{"61":{}},"component":{}}],["defaulthandler(fals",{"_index":6241,"title":{},"name":{},"text":{"61":{}},"component":{}}],["defaultsdescriptor",{"_index":5471,"title":{},"name":{},"text":{"56":{}},"component":{}}],["defaultservlet",{"_index":5892,"title":{"61-40":{}},"name":{},"text":{"61":{}},"component":{}}],["defaultsessioncach",{"_index":3620,"title":{"66-9":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["defaultsessioncache(app1.getsessionhandl",{"_index":6694,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultsessioncache(sessionhandl",{"_index":6787,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultsessioncache.getsessionscurr",{"_index":6628,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultsessioncache.getsessionsmax",{"_index":6629,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultsessioncache.getsessionstot",{"_index":6630,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultsessioncachefactori",{"_index":6634,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultsessionfactori",{"_index":6632,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defaultsessionidmanag",{"_index":3373,"title":{"66-3":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["defaultsessionidmanager(serv",{"_index":6551,"title":{},"name":{},"text":{"66":{}},"component":{}}],["defer",{"_index":2605,"title":{},"name":{},"text":{"33":{}},"component":{}}],["defin",{"_index":38,"title":{},"name":{},"text":{"1":{},"7":{},"17":{},"19":{},"20":{},"25":{},"26":{},"28":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"42":{},"45":{},"48":{},"49":{},"50":{},"53":{},"56":{},"59":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["definit",{"_index":2038,"title":{},"name":{},"text":{"28":{},"54":{},"56":{},"59":{},"66":{}},"component":{}}],["deflat",{"_index":3029,"title":{},"name":{},"text":{"34":{}},"component":{}}],["delay",{"_index":2645,"title":{},"name":{},"text":{"33":{},"44":{},"48":{},"61":{}},"component":{}}],["delaydispatchuntilcontent=tru",{"_index":3942,"title":{},"name":{},"text":{"41":{}},"component":{}}],["deleg",{"_index":5086,"title":{},"name":{},"text":{"52":{},"61":{},"64":{},"65":{},"66":{}},"component":{}}],["delet",{"_index":370,"title":{},"name":{},"text":{"3":{},"33":{},"37":{},"38":{},"43":{},"54":{},"66":{}},"component":{}}],["deleteunrestorablefiles(boolean",{"_index":6687,"title":{},"name":{},"text":{"66":{}},"component":{}}],["deliber",{"_index":5343,"title":{},"name":{},"text":{"54":{}},"component":{}}],["deliv",{"_index":2403,"title":{},"name":{},"text":{"33":{},"34":{},"49":{},"50":{},"53":{},"61":{},"62":{},"66":{}},"component":{}}],["deliveri",{"_index":5276,"title":{},"name":{},"text":{"53":{}},"component":{}}],["deliverpreflightrequests=tru",{"_index":6227,"title":{},"name":{},"text":{"61":{}},"component":{}}],["delta",{"_index":2447,"title":{},"name":{},"text":{"33":{},"45":{}},"component":{}}],["demand",{"_index":2810,"title":{"53-10":{}},"name":{},"text":{"33":{},"44":{},"47":{},"48":{},"49":{},"50":{},"53":{},"57":{},"61":{},"62":{},"63":{},"67":{}},"component":{}}],["demand+pul",{"_index":5782,"title":{},"name":{},"text":{"57":{}},"component":{}}],["demand+push",{"_index":5779,"title":{},"name":{},"text":{"57":{}},"component":{}}],["demand/read",{"_index":4246,"title":{},"name":{},"text":{"44":{}},"component":{}}],["demandedcontentlistener.oncontent(respons",{"_index":5780,"title":{},"name":{},"text":{"57":{}},"component":{}}],["demander.run",{"_index":4602,"title":{},"name":{},"text":{"48":{}},"component":{}}],["demo",{"_index":1310,"title":{"24-4":{}},"name":{},"text":{"18":{},"20":{},"24":{},"32":{},"33":{},"54":{}},"component":{}}],["demonstr",{"_index":795,"title":{},"name":{},"text":{"7":{},"55":{}},"component":{}}],["denial",{"_index":2491,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["depend",{"_index":910,"title":{"32-8":{}},"name":{},"text":{"8":{},"11":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"47":{},"48":{},"53":{},"54":{},"55":{},"56":{},"58":{},"61":{},"66":{},"67":{}},"component":{}}],["deploy",{"_index":777,"title":{"19":{},"35":{},"19-1":{},"19-2":{},"19-5":{},"20-5":{},"20-6":{},"20-7":{},"33-4":{},"33-6":{},"56-3":{}},"name":{},"text":{"7":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"28":{},"29":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"55":{},"56":{},"59":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["deploy.ini",{"_index":1347,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["deploy/redeploy/undeploy",{"_index":1339,"title":{},"name":{},"text":{"19":{}},"component":{}}],["deploy[distribut",{"_index":5420,"title":{},"name":{},"text":{"56":{}},"component":{}}],["deploymentexcept",{"_index":6876,"title":{},"name":{},"text":{"67":{}},"component":{}}],["deploymentmanag",{"_index":1333,"title":{},"name":{},"text":{"19":{},"33":{}},"component":{}}],["deploymod",{"_index":5429,"title":{},"name":{},"text":{"56":{}},"component":{}}],["deprec",{"_index":254,"title":{},"name":{},"text":{"2":{},"20":{},"33":{},"38":{},"42":{}},"component":{}}],["dequeu",{"_index":4453,"title":{},"name":{},"text":{"47":{},"48":{}},"component":{}}],["derbi",{"_index":1967,"title":{},"name":{},"text":{"26":{}},"component":{}}],["deriv",{"_index":1356,"title":{},"name":{},"text":{"19":{},"32":{},"35":{},"39":{},"47":{},"66":{}},"component":{}}],["descend",{"_index":4110,"title":{},"name":{},"text":{"43":{},"61":{},"67":{}},"component":{}}],["describ",{"_index":1335,"title":{},"name":{},"text":{"19":{},"20":{},"28":{},"32":{},"34":{},"36":{},"37":{},"41":{},"42":{},"43":{},"48":{},"52":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"66":{},"67":{},"72":{}},"component":{}}],["descript",{"_index":958,"title":{"32-5":{}},"name":{},"text":{"8":{},"23":{},"24":{},"28":{},"29":{},"31":{},"32":{},"33":{},"38":{},"39":{},"41":{},"45":{},"56":{},"66":{}},"component":{}}],["descriptor",{"_index":913,"title":{"55-3":{},"55-7":{}},"name":{},"text":{"8":{},"17":{},"20":{},"33":{},"35":{},"55":{},"56":{}},"component":{}}],["deseri",{"_index":3538,"title":{},"name":{},"text":{"37":{},"44":{}},"component":{}}],["deserv",{"_index":6437,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["design",{"_index":1152,"title":{},"name":{},"text":{"16":{},"20":{},"37":{},"49":{},"50":{},"51":{},"52":{},"56":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["desir",{"_index":1305,"title":{},"name":{},"text":{"18":{},"25":{},"33":{},"38":{},"43":{},"45":{},"61":{},"71":{}},"component":{}}],["despit",{"_index":1189,"title":{},"name":{},"text":{"17":{},"48":{},"49":{},"62":{}},"component":{}}],["destin",{"_index":740,"title":{},"name":{},"text":{"7":{},"26":{},"48":{},"66":{}},"component":{}}],["destination.getorigin().getaddress().gethost().equals(\"domain.com",{"_index":4527,"title":{},"name":{},"text":{"48":{}},"component":{}}],["detail",{"_index":985,"title":{"41-3":{}},"name":{},"text":{"9":{},"10":{},"18":{},"20":{},"25":{},"30":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"53":{},"56":{},"61":{},"62":{},"63":{},"64":{},"68":{}},"component":{}}],["detaileddump",{"_index":3871,"title":{},"name":{},"text":{"41":{}},"component":{}}],["detect",{"_index":2798,"title":{"65-3":{}},"name":{},"text":{"33":{},"35":{},"41":{},"56":{},"65":{},"66":{},"72":{}},"component":{}}],["detector",{"_index":6493,"title":{},"name":{},"text":{"65":{}},"component":{}}],["detectorconnectionfactori",{"_index":6491,"title":{},"name":{},"text":{"65":{}},"component":{}}],["detectorconnectionfactory(tl",{"_index":6495,"title":{},"name":{},"text":{"65":{}},"component":{}}],["determin",{"_index":1651,"title":{},"name":{},"text":{"23":{},"28":{},"32":{},"37":{},"43":{},"47":{},"48":{},"54":{},"56":{},"66":{}},"component":{}}],["determinist",{"_index":5277,"title":{},"name":{},"text":{"53":{}},"component":{}}],["dev",{"_index":535,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["develop",{"_index":11,"title":{"4-5":{},"55-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"11":{},"12":{},"14":{},"15":{},"16":{},"25":{},"28":{},"33":{},"35":{},"36":{},"41":{},"45":{},"54":{},"55":{},"56":{},"61":{},"71":{}},"component":{}}],["development=tru",{"_index":2091,"title":{},"name":{},"text":{"28":{}},"component":{}}],["deviat",{"_index":6126,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["devic",{"_index":4349,"title":{},"name":{},"text":{"45":{}},"component":{}}],["devop",{"_index":642,"title":{},"name":{},"text":{"7":{},"14":{},"15":{}},"component":{}}],["dextra=opt",{"_index":3757,"title":{},"name":{},"text":{"38":{}},"component":{}}],["dgoal",{"_index":5428,"title":{},"name":{},"text":{"56":{}},"component":{}}],["dh",{"_index":3190,"title":{},"name":{},"text":{"34":{}},"component":{}}],["dhost",{"_index":3551,"title":{},"name":{},"text":{"37":{}},"component":{}}],["dhost=127.0.0.1",{"_index":3549,"title":{},"name":{},"text":{"37":{}},"component":{}}],["dhost=myhost",{"_index":3558,"title":{},"name":{},"text":{"37":{}},"component":{}}],["diagnos",{"_index":3554,"title":{},"name":{},"text":{"37":{},"41":{},"44":{},"53":{}},"component":{}}],["diagram",{"_index":3051,"title":{},"name":{},"text":{"34":{},"36":{},"61":{}},"component":{}}],["diagrammat",{"_index":6542,"title":{},"name":{},"text":{"66":{}},"component":{}}],["dick",{"_index":1743,"title":{},"name":{},"text":{"23":{}},"component":{}}],["dictat",{"_index":1660,"title":{},"name":{},"text":{"23":{},"61":{}},"component":{}}],["diff",{"_index":760,"title":{},"name":{},"text":{"7":{}},"component":{}}],["differ",{"_index":566,"title":{"19-10":{},"19-11":{}},"name":{},"text":{"4":{},"7":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"28":{},"30":{},"32":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"44":{},"45":{},"47":{},"48":{},"52":{},"53":{},"57":{},"59":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["differenti",{"_index":1461,"title":{},"name":{},"text":{"19":{},"30":{},"34":{}},"component":{}}],["difficult",{"_index":3132,"title":{},"name":{},"text":{"34":{},"44":{},"47":{},"53":{},"61":{}},"component":{}}],["digest",{"_index":3841,"title":{},"name":{},"text":{"40":{},"48":{}},"component":{}}],["digestauthentication(serveruri",{"_index":4874,"title":{},"name":{},"text":{"48":{}},"component":{}}],["digit",{"_index":3446,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["digit].[digit].[digit].[digit",{"_index":3447,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["diminish",{"_index":4486,"title":{},"name":{},"text":{"47":{}},"component":{}}],["dir",{"_index":2267,"title":{},"name":{},"text":{"32":{},"38":{},"54":{},"56":{}},"component":{}}],["direct",{"_index":345,"title":{"32-4":{}},"name":{},"text":{"3":{},"7":{},"19":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"41":{},"43":{},"53":{},"56":{},"61":{},"67":{}},"component":{}}],["directli",{"_index":342,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"20":{},"24":{},"33":{},"34":{},"36":{},"38":{},"39":{},"47":{},"53":{},"56":{},"61":{},"62":{},"63":{},"66":{},"67":{},"68":{}},"component":{}}],["directori",{"_index":720,"title":{"56-25":{}},"name":{},"text":{"7":{},"17":{},"18":{},"19":{},"20":{},"23":{},"27":{},"28":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"54":{},"55":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["dirti",{"_index":3436,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["disabl",{"_index":928,"title":{"34-10":{},"38-3":{}},"name":{},"text":{"8":{},"19":{},"28":{},"33":{},"34":{},"36":{},"38":{},"41":{},"47":{},"48":{},"49":{},"56":{},"62":{},"66":{}},"component":{}}],["disallow",{"_index":6224,"title":{},"name":{},"text":{"61":{}},"component":{}}],["disappear",{"_index":4945,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["disassoci",{"_index":4174,"title":{},"name":{},"text":{"44":{}},"component":{}}],["discard",{"_index":3271,"title":{},"name":{},"text":{"36":{},"48":{},"53":{},"59":{}},"component":{}}],["discov",{"_index":1234,"title":{},"name":{},"text":{"17":{},"33":{},"48":{},"56":{},"67":{}},"component":{}}],["discover",{"_index":5520,"title":{},"name":{},"text":{"56":{}},"component":{}}],["discoveri",{"_index":3215,"title":{},"name":{},"text":{"35":{},"67":{}},"component":{}}],["discuss",{"_index":584,"title":{},"name":{},"text":{"6":{},"10":{},"25":{},"33":{},"46":{},"47":{},"49":{},"50":{},"61":{},"62":{},"67":{}},"component":{}}],["disk",{"_index":3263,"title":{},"name":{},"text":{"36":{},"56":{}},"component":{}}],["dispatch",{"_index":2646,"title":{},"name":{},"text":{"33":{},"37":{},"61":{},"66":{}},"component":{}}],["dispens",{"_index":6635,"title":{},"name":{},"text":{"66":{}},"component":{}}],["display",{"_index":1306,"title":{"38-8":{},"38-9":{}},"name":{},"text":{"18":{},"38":{},"45":{}},"component":{}}],["displaysourcefrag",{"_index":2061,"title":{},"name":{},"text":{"28":{}},"component":{}}],["dispos",{"_index":3409,"title":{},"name":{},"text":{"37":{},"61":{}},"component":{}}],["disposed/recycl",{"_index":4681,"title":{},"name":{},"text":{"48":{}},"component":{}}],["disposing/recycl",{"_index":4684,"title":{},"name":{},"text":{"48":{}},"component":{}}],["distinct",{"_index":5456,"title":{},"name":{},"text":{"56":{},"66":{}},"component":{}}],["distinguish",{"_index":1777,"title":{},"name":{},"text":{"23":{},"30":{},"34":{},"61":{},"65":{}},"component":{}}],["distribut",{"_index":184,"title":{"56-6":{}},"name":{},"text":{"2":{},"8":{},"18":{},"20":{},"26":{},"29":{},"30":{},"33":{},"37":{},"56":{},"61":{},"66":{}},"component":{}}],["distributing/persist",{"_index":3347,"title":{},"name":{},"text":{"37":{}},"component":{}}],["distro",{"_index":5441,"title":{},"name":{},"text":{"56":{}},"component":{}}],["dive",{"_index":3350,"title":{},"name":{},"text":{"37":{}},"component":{}}],["djava.io.tmpdir=/path/to/jetty.hom",{"_index":3718,"title":{},"name":{},"text":{"38":{}},"component":{}}],["djava.rmi.server.hostname=localhost",{"_index":1882,"title":{},"name":{},"text":{"25":{},"33":{},"45":{}},"component":{}}],["djavax.net.ssl.truststore=/path/to/truststor",{"_index":4391,"title":{},"name":{},"text":{"45":{}},"component":{}}],["djavax.net.ssl.truststore=/path/to/truststore.p12",{"_index":1926,"title":{},"name":{},"text":{"25":{}},"component":{}}],["djavax.net.ssl.truststorepassword=password",{"_index":1927,"title":{},"name":{},"text":{"25":{}},"component":{}}],["djavax.net.ssl.truststorepassword=secret",{"_index":4392,"title":{},"name":{},"text":{"45":{}},"component":{}}],["djetty.base=/path/to/jetty.hom",{"_index":3720,"title":{},"name":{},"text":{"38":{}},"component":{}}],["djetty.home=/path/to/jetty.hom",{"_index":3719,"title":{},"name":{},"text":{"38":{}},"component":{}}],["djetty.http.port=9999",{"_index":5433,"title":{},"name":{},"text":{"56":{}},"component":{}}],["djetty.skip",{"_index":5450,"title":{},"name":{},"text":{"56":{}},"component":{}}],["djunit.jupiter.execution.parallel.config.fixed.parallelism=[numb",{"_index":936,"title":{},"name":{},"text":{"8":{}},"component":{}}],["djunit.jupiter.execution.parallel.enabled=[boolean",{"_index":935,"title":{},"name":{},"text":{"8":{}},"component":{}}],["djunit.jupiter.execution.parallel.enabled=fals",{"_index":934,"title":{},"name":{},"text":{"8":{}},"component":{}}],["dmaven.build.cache.enabled=fals",{"_index":930,"title":{},"name":{},"text":{"8":{}},"component":{}}],["dmyapps.dir=/opt/myapp",{"_index":1396,"title":{},"name":{},"text":{"19":{}},"component":{}}],["dn",{"_index":1412,"title":{},"name":{},"text":{"19":{},"52":{}},"component":{}}],["dname",{"_index":2139,"title":{},"name":{},"text":{"30":{}},"component":{}}],["do",{"_index":816,"title":{},"name":{},"text":{"7":{},"17":{},"34":{},"37":{},"61":{}},"component":{}}],["doc",{"_index":176,"title":{"7-5":{}},"name":{},"text":{"2":{},"7":{}},"component":{"5":{}}}],["docheckexpired(set",{"_index":6678,"title":{},"name":{},"text":{"66":{}},"component":{}}],["docker",{"_index":952,"title":{},"name":{},"text":{"8":{}},"component":{}}],["docleanorphans(long",{"_index":6680,"title":{},"name":{},"text":{"66":{}},"component":{}}],["document",{"_index":13,"title":{"5":{},"7":{},"7-1":{},"7-2":{},"7-6":{},"7-9":{},"7-10":{}},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"19":{},"20":{},"23":{},"25":{},"36":{},"37":{},"41":{},"42":{},"45":{},"55":{},"56":{},"66":{}},"component":{}}],["document.txt",{"_index":6084,"title":{},"name":{},"text":{"61":{}},"component":{}}],["document.txt.gz",{"_index":6083,"title":{},"name":{},"text":{"61":{}},"component":{}}],["documentation/jetti",{"_index":655,"title":{},"name":{},"text":{"7":{}},"component":{}}],["documentation/src/main/asciidoc",{"_index":656,"title":{},"name":{},"text":{"7":{}},"component":{}}],["documentation/target/html/index.html",{"_index":718,"title":{},"name":{},"text":{"7":{}},"component":{}}],["doesn’t",{"_index":859,"title":{},"name":{},"text":{"7":{},"28":{},"37":{}},"component":{}}],["doexists(str",{"_index":6674,"title":{},"name":{},"text":{"66":{}},"component":{}}],["doget(httpservletrequest",{"_index":5402,"title":{},"name":{},"text":{"55":{}},"component":{}}],["dogetexpired(long",{"_index":6679,"title":{},"name":{},"text":{"66":{}},"component":{}}],["doload(str",{"_index":6677,"title":{},"name":{},"text":{"66":{}},"component":{}}],["domain",{"_index":1410,"title":{"52-2":{}},"name":{},"text":{"19":{},"30":{},"33":{},"34":{},"44":{},"48":{},"52":{},"61":{},"65":{},"66":{}},"component":{}}],["domain(\"domain.com",{"_index":4788,"title":{},"name":{},"text":{"48":{}},"component":{}}],["domain(\"example.org",{"_index":5732,"title":{},"name":{},"text":{"57":{}},"component":{}}],["domain.biz",{"_index":1466,"title":{},"name":{},"text":{"19":{}},"component":{}}],["domain.com",{"_index":2159,"title":{},"name":{},"text":{"30":{},"34":{},"45":{},"48":{},"61":{}},"component":{}}],["domain.com.csr",{"_index":2173,"title":{},"name":{},"text":{"30":{}},"component":{}}],["domain.com\\r\\n",{"_index":4887,"title":{},"name":{},"text":{"48":{}},"component":{}}],["domain.org",{"_index":2160,"title":{},"name":{},"text":{"30":{}},"component":{}}],["domain.war",{"_index":1462,"title":{},"name":{},"text":{"19":{}},"component":{}}],["domain.xml",{"_index":1464,"title":{},"name":{},"text":{"19":{}},"component":{}}],["don't",{"_index":4229,"title":{},"name":{},"text":{"44":{},"65":{},"66":{}},"component":{}}],["done",{"_index":1270,"title":{},"name":{},"text":{"18":{},"20":{},"24":{},"25":{},"33":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"54":{},"56":{},"61":{},"66":{},"67":{},"69":{}},"component":{}}],["don’t",{"_index":605,"title":{},"name":{},"text":{"6":{},"7":{},"13":{},"17":{},"18":{},"23":{},"26":{},"33":{},"34":{},"36":{},"37":{},"38":{},"44":{},"52":{},"53":{},"56":{},"66":{}},"component":{}}],["dorg.eclipse.jetty.http2.level=debug",{"_index":6939,"title":{},"name":{},"text":{"71":{}},"component":{}}],["dorg.eclipse.jetty.level=debug",{"_index":6938,"title":{},"name":{},"text":{"71":{}},"component":{}}],["dosometh",{"_index":1092,"title":{},"name":{},"text":{"13":{}},"component":{}}],["dostart",{"_index":4091,"title":{},"name":{},"text":{"43":{}},"component":{}}],["dostop",{"_index":4096,"title":{},"name":{},"text":{"43":{}},"component":{}}],["dostore(str",{"_index":6675,"title":{},"name":{},"text":{"66":{}},"component":{}}],["dot",{"_index":3811,"title":{},"name":{},"text":{"38":{}},"component":{}}],["doubl",{"_index":1118,"title":{},"name":{},"text":{"13":{},"48":{},"61":{},"66":{}},"component":{}}],["down",{"_index":1138,"title":{},"name":{},"text":{"13":{},"38":{},"41":{},"61":{},"66":{}},"component":{}}],["downcast",{"_index":6265,"title":{},"name":{},"text":{"61":{}},"component":{}}],["download",{"_index":160,"title":{"2":{},"20-2":{}},"name":{"2":{}},"text":{"7":{},"16":{},"20":{},"25":{},"32":{},"36":{},"37":{},"38":{},"45":{},"48":{},"53":{},"56":{},"61":{}},"component":{}}],["dprod",{"_index":5345,"title":{},"name":{},"text":{"54":{}},"component":{}}],["dri",{"_index":3715,"title":{},"name":{},"text":{"38":{},"41":{}},"component":{}}],["drive",{"_index":6002,"title":{},"name":{},"text":{"61":{}},"component":{}}],["driver",{"_index":1405,"title":{},"name":{},"text":{"19":{},"23":{},"26":{},"36":{},"37":{},"38":{},"66":{}},"component":{}}],["driveradaptor",{"_index":6719,"title":{},"name":{},"text":{"66":{}},"component":{}}],["driveradaptor.setdriverinfo(\"com.mysql.jdbc.driv",{"_index":6720,"title":{},"name":{},"text":{"66":{}},"component":{}}],["driverinfo",{"_index":6714,"title":{},"name":{},"text":{"66":{}},"component":{}}],["driver’",{"_index":3834,"title":{},"name":{},"text":{"39":{}},"component":{}}],["drop",{"_index":1287,"title":{},"name":{},"text":{"18":{},"23":{},"35":{}},"component":{}}],["drupal",{"_index":3055,"title":{},"name":{},"text":{"34":{}},"component":{}}],["ds",{"_index":1732,"title":{},"name":{},"text":{"23":{}},"component":{}}],["dsa",{"_index":2149,"title":{},"name":{},"text":{"30":{}},"component":{}}],["dt_socket",{"_index":4016,"title":{},"name":{},"text":{"41":{}},"component":{}}],["due",{"_index":320,"title":{},"name":{},"text":{"2":{},"8":{},"37":{},"38":{},"41":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"61":{},"62":{},"66":{},"72":{}},"component":{}}],["dump",{"_index":2064,"title":{"68":{},"73":{},"41-1":{},"41-2":{},"41-4":{}},"name":{"68":{},"73":{}},"text":{"28":{},"33":{},"41":{},"43":{},"68":{},"72":{}},"component":{}}],["dumpsmap",{"_index":2063,"title":{},"name":{},"text":{"28":{}},"component":{}}],["duplex",{"_index":2481,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["duplexconnectionpool",{"_index":4531,"title":{},"name":{},"text":{"48":{}},"component":{}}],["duplic",{"_index":5461,"title":{},"name":{},"text":{"56":{},"66":{}},"component":{}}],["durat",{"_index":4184,"title":{},"name":{},"text":{"44":{},"49":{},"50":{},"52":{},"53":{},"62":{},"63":{}},"component":{}}],["dure",{"_index":674,"title":{},"name":{},"text":{"7":{},"25":{},"28":{},"33":{},"34":{},"35":{},"37":{},"43":{},"44":{},"47":{},"48":{},"54":{},"56":{},"58":{},"61":{},"66":{}},"component":{}}],["dverbos",{"_index":3552,"title":{},"name":{},"text":{"37":{}},"component":{}}],["dverbose=true|fals",{"_index":3550,"title":{},"name":{},"text":{"37":{}},"component":{}}],["dynam",{"_index":1,"title":{"1-1":{},"48-30":{}},"name":{},"text":{"20":{},"28":{},"34":{},"36":{},"38":{},"48":{},"49":{},"50":{},"53":{},"55":{},"56":{},"61":{}},"component":{}}],["dynamictransport",{"_index":4731,"title":{},"name":{},"text":{"48":{}},"component":{}}],["d}u",{"_index":2602,"title":{},"name":{},"text":{"33":{}},"component":{}}],["e",{"_index":4644,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["e.g",{"_index":743,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"30":{},"33":{},"34":{},"38":{},"44":{},"48":{},"52":{},"61":{},"66":{}},"component":{}}],["e0",{"_index":3004,"title":{},"name":{},"text":{"34":{}},"component":{}}],["e4",{"_index":2990,"title":{},"name":{},"text":{"34":{}},"component":{}}],["each",{"_index":639,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"18":{},"19":{},"20":{},"25":{},"26":{},"30":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"61":{},"62":{},"63":{},"66":{},"67":{}},"component":{}}],["eager",{"_index":46,"title":{},"name":{},"text":{"1":{}},"component":{}}],["earli",{"_index":6370,"title":{},"name":{},"text":{"61":{}},"component":{}}],["earlier",{"_index":164,"title":{},"name":{},"text":{"2":{},"5":{},"32":{},"59":{}},"component":{}}],["earliest",{"_index":6142,"title":{},"name":{},"text":{"61":{}},"component":{}}],["earlyhints103handl",{"_index":6371,"title":{},"name":{},"text":{"61":{}},"component":{}}],["earlyhints103handler(handl",{"_index":6372,"title":{},"name":{},"text":{"61":{}},"component":{}}],["easi",{"_index":751,"title":{},"name":{},"text":{"7":{},"32":{},"45":{},"48":{},"61":{},"65":{},"71":{}},"component":{}}],["easier",{"_index":761,"title":{},"name":{},"text":{"7":{}},"component":{}}],["easiest",{"_index":582,"title":{},"name":{},"text":{"6":{}},"component":{}}],["easili",{"_index":604,"title":{},"name":{},"text":{"6":{},"31":{},"32":{},"38":{},"39":{},"41":{},"44":{},"55":{},"59":{},"61":{},"69":{}},"component":{}}],["eat",{"_index":4467,"title":{},"name":{},"text":{"47":{}},"component":{}}],["eatwhatyoukil",{"_index":4463,"title":{},"name":{},"text":{"47":{}},"component":{}}],["eca",{"_index":975,"title":{},"name":{},"text":{"9":{}},"component":{}}],["eca’",{"_index":978,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ecdh+aesgcm:ecdh+aes256:!anull:!md5:!dss:!adh",{"_index":2221,"title":{},"name":{},"text":{"31":{}},"component":{}}],["echo",{"_index":4137,"title":{"44-6":{}},"name":{},"text":{"44":{},"48":{},"53":{},"56":{},"57":{},"65":{}},"component":{}}],["echoconnect",{"_index":4223,"title":{},"name":{},"text":{"44":{}},"component":{}}],["echoconnection(endpoint",{"_index":4225,"title":{},"name":{},"text":{"44":{}},"component":{}}],["echoendpoint",{"_index":6895,"title":{},"name":{},"text":{"67":{}},"component":{}}],["echoiteratingcallback",{"_index":4224,"title":{},"name":{},"text":{"44":{}},"component":{}}],["eclips",{"_index":5,"title":{"9":{},"14":{},"21":{},"22":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"20":{},"21":{},"28":{},"37":{},"38":{},"41":{},"51":{},"64":{}},"component":{}}],["eclipse.org",{"_index":981,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ecosystem",{"_index":96,"title":{},"name":{},"text":{"1":{}},"component":{}}],["edg",{"_index":84,"title":{},"name":{},"text":{"1":{},"38":{}},"component":{}}],["edit",{"_index":1345,"title":{"38-4":{}},"name":{},"text":{"19":{},"23":{},"24":{},"25":{},"26":{},"28":{},"29":{},"31":{},"33":{},"34":{},"38":{},"71":{}},"component":{}}],["editor",{"_index":3860,"title":{},"name":{},"text":{"41":{},"55":{}},"component":{}}],["ee",{"_index":330,"title":{},"name":{},"text":{"2":{},"7":{},"19":{},"20":{},"23":{},"24":{},"26":{},"33":{},"54":{},"55":{},"56":{},"61":{},"67":{}},"component":{}}],["ee10",{"_index":779,"title":{},"name":{},"text":{"7":{},"8":{},"19":{},"20":{},"24":{},"26":{},"28":{},"29":{},"33":{},"54":{},"55":{},"56":{},"61":{},"67":{}},"component":{}}],["ee10.jakarta.authentication.api.version?=3.0.0",{"_index":1800,"title":{},"name":{},"text":{"24":{}},"component":{}}],["ee10.jakarta.authentication.api.version}.jar",{"_index":1805,"title":{},"name":{},"text":{"24":{}},"component":{}}],["ee10.war",{"_index":1330,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ee10.xml",{"_index":2413,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ee10/jetti",{"_index":961,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ee10/servlet",{"_index":964,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ee11",{"_index":770,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ee12",{"_index":799,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ee8",{"_index":776,"title":{},"name":{},"text":{"7":{},"8":{},"19":{},"20":{},"26":{}},"component":{}}],["ee8.war",{"_index":1329,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ee8/jetti",{"_index":969,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ee8/servlet",{"_index":970,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ee9",{"_index":778,"title":{},"name":{},"text":{"7":{},"8":{},"19":{},"20":{},"24":{},"26":{}},"component":{}}],["ee9/jetti",{"_index":967,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ee9/servlet",{"_index":968,"title":{},"name":{},"text":{"8":{}},"component":{}}],["een",{"_index":791,"title":{},"name":{},"text":{"7":{}},"component":{}}],["eex",{"_index":5421,"title":{},"name":{},"text":{"56":{}},"component":{}}],["ee{8,9,10",{"_index":790,"title":{"33-6":{},"33-7":{}},"name":{},"text":{"7":{},"17":{},"19":{},"20":{},"23":{},"28":{},"29":{},"33":{},"56":{},"57":{},"61":{}},"component":{}}],["effect",{"_index":2000,"title":{},"name":{},"text":{"26":{},"28":{},"35":{},"38":{},"44":{},"48":{},"56":{},"61":{}},"component":{}}],["effectivewebxml",{"_index":5525,"title":{},"name":{},"text":{"56":{}},"component":{}}],["effici",{"_index":2654,"title":{},"name":{},"text":{"33":{},"34":{},"36":{},"43":{},"44":{},"47":{},"48":{},"53":{},"61":{},"66":{},"67":{}},"component":{}}],["effort",{"_index":36,"title":{},"name":{},"text":{"1":{},"18":{},"61":{}},"component":{}}],["eg",{"_index":1348,"title":{},"name":{},"text":{"19":{},"26":{},"38":{},"56":{},"66":{}},"component":{}}],["el",{"_index":2094,"title":{},"name":{},"text":{"28":{}},"component":{}}],["elaps",{"_index":3793,"title":{},"name":{},"text":{"38":{},"61":{}},"component":{}}],["element",{"_index":2042,"title":{},"name":{},"text":{"28":{},"32":{},"35":{},"42":{},"56":{},"66":{}},"component":{}}],["elig",{"_index":3400,"title":{},"name":{},"text":{"37":{}},"component":{}}],["elimin",{"_index":5414,"title":{},"name":{},"text":{"56":{},"66":{}},"component":{}}],["elsewher",{"_index":2282,"title":{},"name":{},"text":{"32":{},"44":{}},"component":{}}],["email",{"_index":366,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"12":{},"26":{}},"component":{}}],["emb",{"_index":5078,"title":{},"name":{},"text":{"51":{},"55":{},"56":{},"61":{},"64":{}},"component":{}}],["embed",{"_index":553,"title":{"37-22":{},"37-24":{},"37-29":{},"55-1":{},"55-4":{},"56-4":{}},"name":{},"text":{"4":{},"6":{},"8":{},"37":{},"56":{},"66":{},"69":{}},"component":{}}],["embedded.ini",{"_index":3535,"title":{},"name":{},"text":{"37":{}},"component":{}}],["embeddedquerymanag",{"_index":6773,"title":{},"name":{},"text":{"66":{}},"component":{}}],["embeddedservletopt",{"_index":2069,"title":{},"name":{},"text":{"28":{}},"component":{}}],["embodi",{"_index":149,"title":{},"name":{},"text":{"1":{}},"component":{}}],["embrac",{"_index":89,"title":{},"name":{},"text":{"1":{}},"component":{}}],["emit",{"_index":4022,"title":{},"name":{},"text":{"41":{},"43":{},"45":{},"48":{},"53":{},"61":{}},"component":{}}],["employ",{"_index":1049,"title":{},"name":{},"text":{"12":{},"37":{}},"component":{}}],["empti",{"_index":1512,"title":{},"name":{},"text":{"20":{},"26":{},"33":{},"36":{},"38":{},"42":{},"44":{},"48":{},"56":{},"57":{},"59":{},"61":{}},"component":{}}],["emul",{"_index":3340,"title":{"37-37":{}},"name":{},"text":{"37":{}},"component":{}}],["en",{"_index":3682,"title":{},"name":{},"text":{"38":{}},"component":{}}],["enabl",{"_index":946,"title":{"25-1":{},"25-2":{},"35-1":{},"37-38":{},"38-2":{},"38-5":{},"41-5":{},"41-7":{},"41-8":{},"45-1":{},"45-2":{}},"name":{},"text":{"8":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"45":{},"47":{},"48":{},"56":{},"61":{},"62":{},"66":{},"68":{},"69":{},"71":{}},"component":{}}],["enable/dis",{"_index":4571,"title":{},"name":{},"text":{"48":{}},"component":{}}],["enable_push",{"_index":6450,"title":{},"name":{},"text":{"62":{}},"component":{}}],["enablepool",{"_index":2067,"title":{},"name":{},"text":{"28":{}},"component":{}}],["enablepush",{"_index":6452,"title":{},"name":{},"text":{"62":{}},"component":{}}],["encapsul",{"_index":4971,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{},"66":{}},"component":{}}],["enclos",{"_index":4806,"title":{},"name":{},"text":{"48":{}},"component":{}}],["encod",{"_index":1727,"title":{},"name":{},"text":{"23":{},"28":{},"30":{},"33":{},"34":{},"35":{},"48":{},"61":{},"66":{},"67":{}},"component":{}}],["encount",{"_index":5189,"title":{},"name":{},"text":{"53":{},"58":{}},"component":{}}],["encourag",{"_index":54,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"12":{},"34":{},"55":{},"66":{}},"component":{}}],["encrypt",{"_index":2872,"title":{"61-16":{},"61-18":{}},"name":{},"text":{"33":{},"34":{},"44":{},"45":{},"48":{},"49":{},"52":{},"61":{},"64":{},"65":{}},"component":{}}],["end",{"_index":205,"title":{},"name":{},"text":{"2":{},"7":{},"11":{},"19":{},"32":{},"33":{},"34":{},"36":{},"41":{},"43":{},"44":{},"48":{},"54":{},"56":{},"61":{}},"component":{}}],["endp",{"_index":4226,"title":{},"name":{},"text":{"44":{}},"component":{}}],["endpoint",{"_index":2768,"title":{"44-2":{},"44-3":{},"53-9":{},"53-11":{},"53-13":{},"67-3":{},"67-10":{}},"name":{},"text":{"33":{},"34":{},"44":{},"52":{},"53":{},"61":{},"64":{},"65":{},"67":{}},"component":{}}],["endpoint,socketchannelendpoint",{"_index":4157,"title":{},"name":{},"text":{"44":{}},"component":{}}],["endpoint.fill(bytebuff",{"_index":4238,"title":{},"name":{},"text":{"44":{}},"component":{}}],["endpoint.fillinterested(callback",{"_index":4165,"title":{},"name":{},"text":{"44":{}},"component":{}}],["endpoint.sslsessiondata",{"_index":5945,"title":{},"name":{},"text":{"61":{}},"component":{}}],["endpoint.upgrade(connect",{"_index":4159,"title":{},"name":{},"text":{"44":{}},"component":{}}],["endpoint.writ",{"_index":4212,"title":{},"name":{},"text":{"44":{}},"component":{}}],["endpoint.write(callback",{"_index":4170,"title":{},"name":{},"text":{"44":{}},"component":{}}],["endpointclosed(endpoint",{"_index":5104,"title":{},"name":{},"text":{"52":{}},"component":{}}],["endpointopened(endpoint",{"_index":5102,"title":{},"name":{},"text":{"52":{}},"component":{}}],["endstream=fals",{"_index":4989,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["endstream=tru",{"_index":4980,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["enforc",{"_index":2815,"title":{},"name":{},"text":{"33":{},"47":{},"59":{},"61":{}},"component":{}}],["engag",{"_index":4,"title":{"1-3":{}},"name":{},"text":{"6":{},"10":{}},"component":{}}],["engineoptionsclass",{"_index":2068,"title":{},"name":{},"text":{"28":{}},"component":{}}],["enhanc",{"_index":71,"title":{},"name":{},"text":{"1":{},"31":{},"32":{}},"component":{}}],["enhance_your_calm",{"_index":2495,"title":{},"name":{},"text":{"33":{}},"component":{}}],["enjoy",{"_index":3073,"title":{},"name":{},"text":{"34":{}},"component":{}}],["enlarg",{"_index":4946,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["enough",{"_index":3314,"title":{},"name":{},"text":{"36":{},"37":{},"39":{},"41":{},"45":{},"48":{},"53":{},"61":{},"65":{},"69":{}},"component":{}}],["enrich",{"_index":4841,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["ensur",{"_index":512,"title":{},"name":{},"text":{"4":{},"10":{},"17":{},"23":{},"26":{},"27":{},"34":{},"35":{},"37":{},"38":{},"47":{},"49":{},"50":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["enter",{"_index":3846,"title":{},"name":{},"text":{"40":{},"53":{},"56":{}},"component":{}}],["entir",{"_index":1135,"title":{},"name":{},"text":{"13":{},"28":{},"34":{},"36":{},"41":{},"48":{},"59":{}},"component":{}}],["entiti",{"_index":360,"title":{},"name":{},"text":{"3":{},"12":{},"53":{}},"component":{}}],["entitydatamodel",{"_index":6820,"title":{},"name":{},"text":{"66":{}},"component":{}}],["entri",{"_index":735,"title":{"19-6":{},"30-2":{},"42-8":{}},"name":{},"text":{"7":{},"19":{},"20":{},"23":{},"26":{},"33":{},"37":{},"38":{},"42":{},"56":{},"66":{}},"component":{}}],["enumer",{"_index":5839,"title":{},"name":{},"text":{"59":{}},"component":{}}],["env",{"_index":1943,"title":{"42-14":{}},"name":{},"text":{"26":{},"38":{},"45":{},"56":{},"66":{}},"component":{}}],["env.put(\"com.sun.management.jmxremote.access.fil",{"_index":4367,"title":{},"name":{},"text":{"45":{}},"component":{}}],["env.put(\"com.sun.management.jmxremote.password.fil",{"_index":4369,"title":{},"name":{},"text":{"45":{}},"component":{}}],["env.xml",{"_index":1408,"title":{},"name":{},"text":{"19":{},"26":{},"56":{}},"component":{}}],["enventri",{"_index":1951,"title":{},"name":{},"text":{"26":{}},"component":{}}],["environ",{"_index":713,"title":{"19-4":{}},"name":{},"text":{"7":{},"9":{},"19":{},"20":{},"23":{},"24":{},"26":{},"28":{},"29":{},"33":{},"37":{},"38":{},"41":{},"42":{},"47":{},"48":{},"54":{},"55":{},"56":{},"66":{}},"component":{}}],["environment(",{"_index":1285,"title":{},"name":{},"text":{"18":{}},"component":{}}],["environment=ee10",{"_index":1386,"title":{},"name":{},"text":{"19":{}},"component":{}}],["environment=ee9",{"_index":1376,"title":{},"name":{},"text":{"19":{}},"component":{}}],["eoc",{"_index":178,"title":{},"name":{},"text":{"2":{}},"component":{}}],["eof",{"_index":4274,"title":{},"name":{},"text":{"44":{},"57":{}},"component":{}}],["epl",{"_index":840,"title":{},"name":{},"text":{"7":{}},"component":{}}],["epoch",{"_index":3442,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["epub",{"_index":745,"title":{},"name":{},"text":{"7":{}},"component":{}}],["equat",{"_index":2010,"title":{},"name":{},"text":{"26":{}},"component":{}}],["equival",{"_index":1176,"title":{},"name":{},"text":{"17":{},"19":{},"26":{},"32":{},"33":{},"35":{},"39":{},"42":{},"48":{},"56":{},"61":{},"65":{},"66":{}},"component":{}}],["err",{"_index":4031,"title":{},"name":{},"text":{"42":{}},"component":{}}],["error",{"_index":1378,"title":{},"name":{},"text":{"19":{},"20":{},"28":{},"33":{},"35":{},"36":{},"37":{},"38":{},"44":{},"47":{},"48":{},"49":{},"50":{},"53":{},"56":{},"57":{},"61":{},"66":{}},"component":{}}],["errorcode.cancel_stream_error.cod",{"_index":5037,"title":{},"name":{},"text":{"49":{}},"component":{}}],["errorcode.refused_stream_error.cod",{"_index":6442,"title":{},"name":{},"text":{"62":{}},"component":{}}],["erroronusebeaninvalidclassattribut",{"_index":2070,"title":{},"name":{},"text":{"28":{}},"component":{}}],["escap",{"_index":2107,"title":{},"name":{},"text":{"28":{},"36":{},"38":{}},"component":{}}],["esoter",{"_index":4715,"title":{},"name":{},"text":{"48":{}},"component":{}}],["especi",{"_index":1918,"title":{},"name":{},"text":{"25":{},"41":{},"45":{},"53":{},"61":{}},"component":{}}],["essenc",{"_index":5906,"title":{},"name":{},"text":{"61":{}},"component":{}}],["essenti",{"_index":5553,"title":{},"name":{},"text":{"56":{},"66":{}},"component":{}}],["establish",{"_index":1209,"title":{},"name":{},"text":{"17":{},"25":{},"30":{},"32":{},"33":{},"34":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"63":{},"65":{}},"component":{}}],["etc",{"_index":1323,"title":{},"name":{},"text":{"19":{},"20":{},"25":{},"26":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{},"52":{},"53":{},"54":{},"56":{},"61":{},"62":{},"63":{},"66":{},"72":{}},"component":{}}],["etc/acm",{"_index":2259,"title":{},"name":{},"text":{"31":{}},"component":{}}],["etc/custom",{"_index":2231,"title":{},"name":{},"text":{"31":{},"32":{}},"component":{}}],["etc/custom/components.xml",{"_index":2315,"title":{},"name":{},"text":{"32":{}},"component":{}}],["etc/haproxy/haproxy.cfg",{"_index":3186,"title":{},"name":{},"text":{"34":{}},"component":{}}],["etc/host",{"_index":1855,"title":{},"name":{},"text":{"25":{},"33":{}},"component":{}}],["etc/jaspi/jetti",{"_index":1806,"title":{},"name":{},"text":{"24":{}},"component":{}}],["etc/jetti",{"_index":1666,"title":{},"name":{},"text":{"23":{},"33":{}},"component":{}}],["etc/login.conf",{"_index":1673,"title":{},"name":{},"text":{"23":{}},"component":{}}],["etc/tl",{"_index":3088,"title":{},"name":{},"text":{"34":{}},"component":{}}],["evalu",{"_index":2628,"title":{},"name":{},"text":{"33":{},"37":{},"44":{}},"component":{}}],["even",{"_index":944,"title":{},"name":{},"text":{"8":{},"18":{},"20":{},"25":{},"26":{},"32":{},"37":{},"43":{},"44":{},"47":{},"48":{},"53":{},"61":{},"66":{}},"component":{}}],["event",{"_index":1110,"title":{"53-10":{},"61-2":{}},"name":{},"text":{"13":{},"31":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"69":{}},"component":{}}],["event.getsslengin",{"_index":4776,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["eventshandl",{"_index":2242,"title":{"61-31":{}},"name":{},"text":{"31":{},"61":{}},"component":{}}],["eventshandler.sethandler(apphandl",{"_index":6168,"title":{},"name":{},"text":{"61":{}},"component":{}}],["eventu",{"_index":2178,"title":{},"name":{},"text":{"30":{},"33":{},"34":{},"38":{},"44":{},"48":{},"49":{},"53":{},"61":{},"62":{},"67":{}},"component":{}}],["everyth",{"_index":18,"title":{},"name":{},"text":{"1":{},"25":{},"31":{},"54":{}},"component":{}}],["evict",{"_index":2849,"title":{},"name":{},"text":{"33":{},"37":{},"47":{},"61":{},"66":{}},"component":{}}],["evict_on_inact",{"_index":3622,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["evict_on_inactivity_polici",{"_index":3623,"title":{},"name":{},"text":{"37":{}},"component":{}}],["evict_on_session_exit",{"_index":3621,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["evid",{"_index":2317,"title":{},"name":{},"text":{"32":{},"61":{}},"component":{}}],["evolv",{"_index":5837,"title":{},"name":{},"text":{"59":{}},"component":{}}],["exact",{"_index":3485,"title":{},"name":{},"text":{"37":{},"38":{},"59":{},"66":{}},"component":{}}],["exactli",{"_index":1480,"title":{},"name":{},"text":{"19":{},"23":{},"25":{},"42":{},"45":{},"47":{},"48":{},"52":{},"56":{},"61":{},"65":{}},"component":{}}],["examin",{"_index":6498,"title":{},"name":{},"text":{"65":{}},"component":{}}],["exampl",{"_index":631,"title":{"7-11":{},"41-4":{},"58-5":{}},"name":{},"text":{"7":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"71":{}},"component":{}}],["example.com",{"_index":2629,"title":{},"name":{},"text":{"33":{}},"component":{}}],["example.mod",{"_index":2290,"title":{},"name":{},"text":{"32":{}},"component":{}}],["example.org",{"_index":5150,"title":{},"name":{},"text":{"52":{}},"component":{}}],["exampleendpoint",{"_index":5819,"title":{},"name":{},"text":{"58":{}},"component":{}}],["examplewebsocketservlet",{"_index":5811,"title":{},"name":{},"text":{"58":{}},"component":{}}],["exce",{"_index":2090,"title":{},"name":{},"text":{"28":{},"37":{},"66":{}},"component":{}}],["exceed",{"_index":3399,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{}}],["excel",{"_index":518,"title":{},"name":{},"text":{"4":{}},"component":{}}],["except",{"_index":782,"title":{},"name":{},"text":{"7":{},"13":{},"28":{},"36":{},"42":{},"43":{},"44":{},"48":{},"52":{},"53":{},"55":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["exceptionally(funct",{"_index":6315,"title":{},"name":{},"text":{"61":{}},"component":{}}],["excess",{"_index":2102,"title":{},"name":{},"text":{"28":{},"33":{},"48":{},"53":{},"59":{}},"component":{}}],["exchang",{"_index":2482,"title":{},"name":{},"text":{"33":{},"49":{},"50":{},"53":{},"62":{},"63":{},"69":{}},"component":{}}],["exclud",{"_index":1216,"title":{},"name":{},"text":{"17":{},"33":{},"34":{},"38":{},"54":{},"56":{}},"component":{}}],["excludedgo",{"_index":5451,"title":{},"name":{},"text":{"56":{}},"component":{}}],["exclus",{"_index":1156,"title":{"17-6":{}},"name":{},"text":{"17":{},"33":{},"34":{},"36":{},"47":{},"56":{},"61":{}},"component":{}}],["exec",{"_index":2264,"title":{"32-16":{}},"name":{},"text":{"32":{},"33":{},"36":{},"38":{},"39":{},"41":{},"55":{}},"component":{}}],["exec:java",{"_index":5395,"title":{},"name":{},"text":{"55":{}},"component":{}}],["execut",{"_index":712,"title":{"8-5":{},"47-1":{},"47-3":{},"47-4":{},"47-5":{}},"name":{},"text":{"7":{},"8":{},"18":{},"20":{},"23":{},"26":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"44":{},"47":{},"48":{},"55":{},"56":{},"61":{}},"component":{}}],["executor",{"_index":4179,"title":{},"name":{},"text":{"44":{},"47":{},"52":{},"65":{}},"component":{}}],["executors.newsinglethreadscheduledexecutor",{"_index":4046,"title":{},"name":{},"text":{"42":{},"43":{}},"component":{}}],["exercis",{"_index":2218,"title":{},"name":{},"text":{"31":{}},"component":{}}],["exhaust",{"_index":5254,"title":{},"name":{},"text":{"53":{}},"component":{}}],["exist",{"_index":820,"title":{"31-1":{}},"name":{},"text":{"7":{},"17":{},"19":{},"27":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"42":{},"48":{},"49":{},"50":{},"53":{},"54":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"66":{}},"component":{}}],["exit",{"_index":2682,"title":{},"name":{},"text":{"33":{},"37":{},"38":{},"44":{},"48":{},"53":{},"56":{},"66":{}},"component":{}}],["expand",{"_index":1483,"title":{},"name":{},"text":{"20":{},"32":{},"56":{}},"component":{}}],["expans",{"_index":2302,"title":{},"name":{},"text":{"32":{}},"component":{}}],["expect",{"_index":1968,"title":{},"name":{},"text":{"26":{},"33":{},"38":{},"47":{},"56":{},"61":{}},"component":{}}],["expects100",{"_index":6399,"title":{},"name":{},"text":{"61":{}},"component":{}}],["expens",{"_index":2100,"title":{},"name":{},"text":{"28":{},"41":{}},"component":{}}],["experienc",{"_index":58,"title":{},"name":{},"text":{"1":{},"37":{}},"component":{}}],["experiment",{"_index":3017,"title":{},"name":{},"text":{"34":{}},"component":{}}],["expert",{"_index":595,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["expertis",{"_index":568,"title":{},"name":{},"text":{"4":{}},"component":{}}],["expir",{"_index":1724,"title":{},"name":{},"text":{"23":{},"30":{},"37":{},"48":{},"52":{},"66":{}},"component":{}}],["expiri",{"_index":3398,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["expiry]_[contextpath]_[virtualhost]_[id",{"_index":3441,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["expirytim",{"_index":3500,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["explain",{"_index":1875,"title":{},"name":{},"text":{"25":{},"32":{},"33":{},"34":{},"38":{},"39":{},"40":{},"41":{},"44":{},"48":{},"61":{},"65":{},"67":{}},"component":{}}],["explicit",{"_index":3838,"title":{"67-9":{}},"name":{},"text":{"39":{},"42":{},"44":{},"48":{},"57":{},"66":{}},"component":{}}],["explicitdemandlistenerendpoint",{"_index":5216,"title":{},"name":{},"text":{"53":{}},"component":{}}],["explicitli",{"_index":945,"title":{},"name":{},"text":{"8":{},"17":{},"20":{},"26":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"42":{},"43":{},"47":{},"48":{},"49":{},"52":{},"53":{},"57":{},"61":{},"62":{},"64":{},"66":{},"67":{}},"component":{}}],["explod",{"_index":5352,"title":{},"name":{},"text":{"54":{}},"component":{}}],["exploit",{"_index":379,"title":{},"name":{},"text":{"3":{}},"component":{}}],["explor",{"_index":1518,"title":{},"name":{},"text":{"20":{},"28":{},"30":{}},"component":{}}],["export",{"_index":1484,"title":{},"name":{},"text":{"20":{},"25":{},"30":{},"32":{},"33":{},"41":{},"43":{},"45":{},"53":{},"61":{}},"component":{}}],["exportcert",{"_index":2199,"title":{},"name":{},"text":{"30":{}},"component":{}}],["expos",{"_index":1836,"title":{},"name":{},"text":{"25":{},"32":{},"34":{},"41":{},"43":{},"45":{},"47":{},"52":{},"53":{},"61":{},"64":{},"66":{}},"component":{}}],["express",{"_index":1201,"title":{},"name":{},"text":{"17":{},"28":{},"32":{},"34":{},"67":{}},"component":{}}],["ext",{"_index":1940,"title":{},"name":{},"text":{"26":{},"27":{},"30":{},"38":{}},"component":{}}],["extend",{"_index":2212,"title":{},"name":{},"text":{"31":{},"34":{},"36":{},"38":{},"42":{},"43":{},"44":{},"45":{},"48":{},"52":{},"53":{},"55":{},"57":{},"58":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["extending/impl",{"_index":3040,"title":{},"name":{},"text":{"34":{}},"component":{}}],["extens",{"_index":97,"title":{},"name":{},"text":{"1":{},"8":{},"25":{},"30":{},"34":{},"38":{},"45":{},"48":{},"54":{},"56":{},"61":{}},"component":{}}],["extern",{"_index":1231,"title":{},"name":{},"text":{"17":{},"25":{},"26":{},"31":{},"37":{},"48":{},"53":{},"56":{}},"component":{}}],["extra",{"_index":1916,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"37":{},"38":{},"39":{},"56":{},"66":{}},"component":{}}],["extra.xml",{"_index":3759,"title":{},"name":{},"text":{"38":{}},"component":{}}],["extraclasspath",{"_index":1232,"title":{},"name":{},"text":{"17":{}},"component":{}}],["extract",{"_index":1319,"title":{"19-12":{}},"name":{},"text":{"19":{},"20":{},"33":{},"37":{},"54":{},"61":{},"66":{},"67":{}},"component":{}}],["extraprop=valu",{"_index":3758,"title":{},"name":{},"text":{"38":{}},"component":{}}],["extrem",{"_index":875,"title":{},"name":{},"text":{"7":{},"44":{},"61":{}},"component":{}}],["f",{"_index":2582,"title":{},"name":{},"text":{"33":{}},"component":{}}],["f0",{"_index":2995,"title":{},"name":{},"text":{"34":{}},"component":{}}],["f2",{"_index":3003,"title":{},"name":{},"text":{"34":{}},"component":{}}],["face",{"_index":2013,"title":{"27":{}},"name":{},"text":{},"component":{}}],["facil",{"_index":368,"title":{},"name":{},"text":{"3":{},"65":{}},"component":{}}],["fact",{"_index":2816,"title":{},"name":{},"text":{"33":{},"34":{},"39":{},"49":{},"61":{},"62":{}},"component":{}}],["facto",{"_index":3146,"title":{},"name":{},"text":{"34":{},"59":{}},"component":{}}],["factor",{"_index":2345,"title":{},"name":{},"text":{"33":{},"48":{}},"component":{}}],["factori",{"_index":1773,"title":{},"name":{},"text":{"23":{},"24":{},"26":{},"52":{},"58":{},"65":{},"66":{}},"component":{}}],["factory.setcreator(new",{"_index":5814,"title":{},"name":{},"text":{"58":{}},"component":{}}],["fail",{"_index":1784,"title":{},"name":{},"text":{"23":{},"28":{},"33":{},"34":{},"37":{},"42":{},"43":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["fail(throw",{"_index":5270,"title":{},"name":{},"text":{"53":{}},"component":{}}],["failed(throw",{"_index":4208,"title":{},"name":{},"text":{"44":{}},"component":{}}],["failed(x",{"_index":5288,"title":{},"name":{},"text":{"53":{}},"component":{}}],["failur",{"_index":924,"title":{},"name":{},"text":{"8":{},"34":{},"37":{},"43":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"57":{},"61":{},"65":{}},"component":{}}],["failure.printstacktrac",{"_index":5155,"title":{},"name":{},"text":{"52":{},"53":{}},"component":{}}],["fairli",{"_index":5542,"title":{},"name":{},"text":{"56":{}},"component":{}}],["fake",{"_index":3312,"title":{},"name":{},"text":{"36":{}},"component":{}}],["fall",{"_index":5531,"title":{},"name":{},"text":{"56":{},"66":{}},"component":{}}],["fallback",{"_index":3214,"title":{},"name":{},"text":{"34":{},"66":{}},"component":{}}],["fals",{"_index":1184,"title":{},"name":{},"text":{"17":{},"19":{},"23":{},"26":{},"28":{},"33":{},"34":{},"36":{},"37":{},"41":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["familiar",{"_index":1508,"title":{},"name":{},"text":{"20":{},"31":{},"36":{},"38":{},"67":{}},"component":{}}],["fanci",{"_index":4745,"title":{},"name":{},"text":{"48":{}},"component":{}}],["faq",{"_index":977,"title":{},"name":{},"text":{"9":{}},"component":{}}],["far",{"_index":4581,"title":{},"name":{},"text":{"48":{}},"component":{}}],["fashion",{"_index":1009,"title":{},"name":{},"text":{"10":{},"23":{},"37":{},"47":{}},"component":{}}],["fast",{"_index":884,"title":{"8-2":{}},"name":{},"text":{"47":{}},"component":{}}],["fastcgi",{"_index":240,"title":{"60":{},"34-12":{},"48-29":{}},"name":{"60":{}},"text":{"2":{},"16":{},"34":{},"48":{},"51":{},"65":{}},"component":{}}],["fastcgiproxyhandl",{"_index":3072,"title":{},"name":{},"text":{"34":{}},"component":{}}],["faster",{"_index":1637,"title":{"35":{}},"name":{},"text":{"21":{},"34":{},"35":{},"37":{},"53":{},"61":{}},"component":{}}],["fatal",{"_index":4251,"title":{},"name":{},"text":{"44":{},"49":{},"50":{},"53":{},"61":{}},"component":{}}],["favicon",{"_index":6444,"title":{},"name":{},"text":{"62":{}},"component":{}}],["favicon.ico",{"_index":6238,"title":{},"name":{},"text":{"61":{}},"component":{}}],["faviconbuff",{"_index":6445,"title":{},"name":{},"text":{"62":{}},"component":{}}],["faviconbuffer.slic",{"_index":6466,"title":{},"name":{},"text":{"62":{}},"component":{}}],["favor",{"_index":5787,"title":{},"name":{},"text":{"57":{}},"component":{}}],["fcgi",{"_index":3061,"title":{},"name":{},"text":{"34":{},"51":{},"57":{},"64":{}},"component":{}}],["fe_http",{"_index":3194,"title":{},"name":{},"text":{"34":{}},"component":{}}],["featur",{"_index":70,"title":{"21":{},"4-9":{}},"name":{},"text":{"1":{},"4":{},"6":{},"7":{},"10":{},"18":{},"19":{},"20":{},"21":{},"25":{},"26":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"56":{},"59":{},"61":{},"62":{},"63":{},"66":{},"67":{},"71":{}},"component":{}}],["feedback",{"_index":91,"title":{},"name":{},"text":{"1":{}},"component":{}}],["fetch",{"_index":6213,"title":{},"name":{},"text":{"61":{}},"component":{}}],["few",{"_index":525,"title":{},"name":{},"text":{"4":{},"13":{},"34":{},"35":{},"37":{},"38":{},"41":{},"52":{},"56":{},"61":{}},"component":{}}],["fewer",{"_index":6056,"title":{},"name":{},"text":{"61":{}},"component":{}}],["fff",{"_index":5358,"title":{},"name":{},"text":{"54":{}},"component":{}}],["field",{"_index":941,"title":{},"name":{},"text":{"8":{},"13":{},"33":{},"37":{},"38":{},"42":{},"48":{},"57":{},"61":{},"65":{},"66":{}},"component":{}}],["figur",{"_index":2544,"title":{},"name":{},"text":{"33":{},"34":{},"41":{},"61":{},"65":{},"69":{}},"component":{}}],["file",{"_index":182,"title":{"6-3":{},"19-5":{},"19-12":{},"20-6":{},"26-9":{},"32-11":{},"36-4":{},"37-12":{},"38-4":{},"55-9":{},"56-30":{}},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"8":{},"13":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"53":{},"54":{},"55":{},"56":{},"59":{},"61":{},"62":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["file(",{"_index":2283,"title":{},"name":{},"text":{"32":{}},"component":{}}],["file(\"/tmp/sess",{"_index":6690,"title":{},"name":{},"text":{"66":{}},"component":{}}],["file(paths.get(\"file_to_upload.txt",{"_index":4574,"title":{},"name":{},"text":{"48":{}},"component":{}}],["file/",{"_index":2020,"title":{},"name":{},"text":{"27":{},"56":{}},"component":{}}],["file/directori",{"_index":1633,"title":{},"name":{},"text":{"20":{}},"component":{}}],["file:///path/to/jetty.hom",{"_index":1600,"title":{},"name":{},"text":{"20":{},"38":{}},"component":{}}],["file:///path/to/jetty.home/etc/jetti",{"_index":1594,"title":{},"name":{},"text":{"20":{}},"component":{}}],["file:///path/to/jetty.project/documentation/jetti",{"_index":717,"title":{},"name":{},"text":{"7":{}},"component":{}}],["file:/path/to/jetty.hom",{"_index":3967,"title":{},"name":{},"text":{"41":{}},"component":{}}],["file:/path/to/jetty.home/lib/jetti",{"_index":3970,"title":{},"name":{},"text":{"41":{}},"component":{}}],["file:/path/to/jetty.home/lib/logging/jetti",{"_index":3969,"title":{},"name":{},"text":{"41":{}},"component":{}}],["file:/path/to/jetty.home/lib/logging/slf4j",{"_index":3968,"title":{},"name":{},"text":{"41":{}},"component":{}}],["file=\"/somewhere/somefile.prop",{"_index":1736,"title":{},"name":{},"text":{"23":{}},"component":{}}],["file=start.log",{"_index":3797,"title":{},"name":{},"text":{"38":{}},"component":{}}],["filechannel.clos",{"_index":4290,"title":{},"name":{},"text":{"44":{}},"component":{}}],["filechannel.write(chunk.getbytebuff",{"_index":4289,"title":{},"name":{},"text":{"44":{}},"component":{}}],["fileinputstream",{"_index":4616,"title":{},"name":{},"text":{"48":{}},"component":{}}],["fileinputstream(\"/path/to/hotrod",{"_index":6792,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fileinputstream(\"file_to_upload.txt",{"_index":4619,"title":{},"name":{},"text":{"48":{}},"component":{}}],["filenam",{"_index":3818,"title":{},"name":{},"text":{"38":{}},"component":{}}],["filesessiondatastor",{"_index":6530,"title":{"66-17":{}},"name":{},"text":{"66":{}},"component":{}}],["filesessiondatastorefactori",{"_index":6684,"title":{},"name":{},"text":{"66":{}},"component":{}}],["filesystem",{"_index":719,"title":{},"name":{},"text":{"7":{},"33":{},"37":{},"41":{},"66":{}},"component":{}}],["filesystem.getpathmatch",{"_index":5496,"title":{},"name":{},"text":{"56":{}},"component":{}}],["fill",{"_index":3413,"title":{},"name":{},"text":{"37":{},"41":{},"44":{},"52":{},"65":{}},"component":{}}],["fillinterest",{"_index":4183,"title":{},"name":{},"text":{"44":{},"52":{},"65":{}},"component":{}}],["filter",{"_index":4525,"title":{"61-43":{}},"name":{},"text":{"48":{},"56":{},"57":{},"61":{},"67":{}},"component":{}}],["filter(destin",{"_index":4526,"title":{},"name":{},"text":{"48":{}},"component":{}}],["filter/servlet",{"_index":6395,"title":{},"name":{},"text":{"61":{}},"component":{}}],["filterhandl",{"_index":6282,"title":{},"name":{},"text":{"61":{}},"component":{}}],["filterhandler(handl",{"_index":6283,"title":{},"name":{},"text":{"61":{}},"component":{}}],["filterhandler(new",{"_index":6296,"title":{},"name":{},"text":{"61":{}},"component":{}}],["fin",{"_index":5236,"title":{},"name":{},"text":{"53":{}},"component":{}}],["final",{"_index":705,"title":{},"name":{},"text":{"7":{},"13":{},"18":{},"34":{},"35":{},"38":{},"43":{},"44":{},"45":{},"48":{},"52":{},"53":{},"54":{},"61":{},"65":{}},"component":{}}],["find",{"_index":163,"title":{},"name":{},"text":{"2":{},"6":{},"8":{},"20":{},"25":{},"33":{},"35":{},"37":{},"38":{},"41":{},"43":{},"44":{},"47":{},"48":{},"61":{},"66":{},"67":{}},"component":{}}],["findani",{"_index":4528,"title":{},"name":{},"text":{"48":{}},"component":{}}],["fine",{"_index":1876,"title":{},"name":{},"text":{"25":{},"36":{},"37":{},"45":{},"48":{},"61":{},"67":{}},"component":{}}],["finish",{"_index":701,"title":{},"name":{},"text":{"7":{},"33":{},"37":{},"44":{},"48":{},"53":{},"61":{},"66":{}},"component":{}}],["fire",{"_index":4586,"title":{},"name":{},"text":{"48":{},"49":{},"62":{}},"component":{}}],["firefox/17.0",{"_index":4559,"title":{},"name":{},"text":{"48":{}},"component":{}}],["firewal",{"_index":1849,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["first",{"_index":973,"title":{},"name":{},"text":{"9":{},"17":{},"19":{},"20":{},"23":{},"25":{},"26":{},"30":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"53":{},"55":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["firstli",{"_index":6672,"title":{},"name":{},"text":{"66":{}},"component":{}}],["fist",{"_index":5769,"title":{},"name":{},"text":{"57":{}},"component":{}}],["fit",{"_index":5307,"title":{},"name":{},"text":{"53":{}},"component":{}}],["five",{"_index":862,"title":{},"name":{},"text":{"7":{}},"component":{}}],["fix",{"_index":144,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"11":{},"38":{},"71":{}},"component":{}}],["flag",{"_index":597,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"20":{},"23":{},"38":{},"44":{},"54":{}},"component":{}}],["flaki",{"_index":920,"title":{},"name":{},"text":{"8":{}},"component":{}}],["flaw",{"_index":1502,"title":{},"name":{},"text":{"20":{}},"component":{}}],["flexibl",{"_index":349,"title":{},"name":{},"text":{"3":{},"12":{},"23":{},"26":{},"34":{},"38":{},"42":{},"45":{},"48":{},"61":{},"67":{}},"component":{}}],["fli",{"_index":2814,"title":{},"name":{},"text":{"33":{},"34":{},"37":{},"41":{},"44":{},"66":{}},"component":{}}],["float",{"_index":6438,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["flow",{"_index":860,"title":{"49-2":{},"62-2":{}},"name":{},"text":{"7":{},"47":{},"49":{},"61":{},"62":{},"67":{}},"component":{}}],["fluent",{"_index":4565,"title":{},"name":{},"text":{"48":{}},"component":{}}],["flush",{"_index":1725,"title":{},"name":{},"text":{"23":{},"57":{},"61":{}},"component":{}}],["flushinghandl",{"_index":6347,"title":{},"name":{},"text":{"61":{}},"component":{}}],["flushonresponsecommit",{"_index":6626,"title":{},"name":{},"text":{"66":{}},"component":{}}],["focus",{"_index":539,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["follow",{"_index":649,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"13":{},"17":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["foo",{"_index":1202,"title":{},"name":{},"text":{"17":{},"42":{},"54":{},"56":{}},"component":{}}],["foo.class",{"_index":5503,"title":{},"name":{},"text":{"56":{}},"component":{}}],["foo.com",{"_index":1430,"title":{},"name":{},"text":{"19":{}},"component":{}}],["foo.jsp",{"_index":5534,"title":{},"name":{},"text":{"56":{}},"component":{}}],["foo/bar%2fbaz",{"_index":2722,"title":{},"name":{},"text":{"33":{}},"component":{}}],["foo/bar;jsessionid=a8b38cd02b1c",{"_index":5856,"title":{},"name":{},"text":{"59":{}},"component":{}}],["foo=\"bar;baz\";version=1;path=\"/secur",{"_index":4807,"title":{},"name":{},"text":{"48":{}},"component":{}}],["foo=bar",{"_index":2732,"title":{},"name":{},"text":{"33":{}},"component":{}}],["fooprop=222",{"_index":5562,"title":{},"name":{},"text":{"56":{}},"component":{}}],["footprint",{"_index":3423,"title":{},"name":{},"text":{"37":{}},"component":{}}],["for=2.36.72.144:21216;proto=http",{"_index":3150,"title":{},"name":{},"text":{"34":{}},"component":{}}],["forbid",{"_index":2709,"title":{},"name":{},"text":{"33":{}},"component":{}}],["forc",{"_index":2891,"title":{},"name":{},"text":{"34":{},"37":{},"38":{},"48":{},"56":{},"66":{}},"component":{}}],["forcebindinglogin=\"fals",{"_index":1769,"title":{},"name":{},"text":{"23":{}},"component":{}}],["foreign",{"_index":6021,"title":{},"name":{},"text":{"61":{}},"component":{}}],["forev",{"_index":6317,"title":{},"name":{},"text":{"61":{}},"component":{}}],["forg",{"_index":132,"title":{},"name":{},"text":{"1":{}},"component":{}}],["forgeri",{"_index":2393,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["forget",{"_index":3392,"title":{},"name":{},"text":{"37":{},"61":{}},"component":{}}],["fork",{"_index":2072,"title":{"56-5":{}},"name":{},"text":{"28":{},"32":{},"33":{},"34":{},"38":{},"39":{},"41":{},"56":{},"61":{}},"component":{}}],["forkwebxml",{"_index":5439,"title":{},"name":{},"text":{"56":{}},"component":{}}],["form",{"_index":999,"title":{},"name":{},"text":{"10":{},"20":{},"23":{},"37":{},"38":{},"42":{},"49":{},"52":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["formal",{"_index":5847,"title":{},"name":{},"text":{"59":{}},"component":{}}],["format",{"_index":676,"title":{"37-25":{}},"name":{},"text":{"7":{},"10":{},"13":{},"19":{},"20":{},"23":{},"25":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"45":{},"48":{},"61":{},"65":{}},"component":{}}],["format|timezon",{"_index":2590,"title":{},"name":{},"text":{"33":{}},"component":{}}],["format|timezone|local",{"_index":2591,"title":{},"name":{},"text":{"33":{}},"component":{}}],["format|timezone|locale}t",{"_index":2589,"title":{},"name":{},"text":{"33":{}},"component":{}}],["format}a",{"_index":2568,"title":{},"name":{},"text":{"33":{}},"component":{}}],["format}p",{"_index":2571,"title":{},"name":{},"text":{"33":{}},"component":{}}],["formencodedmethod",{"_index":3930,"title":{},"name":{},"text":{"41":{}},"component":{}}],["former",{"_index":3374,"title":{},"name":{},"text":{"37":{},"56":{}},"component":{}}],["formfield",{"_index":6305,"title":{},"name":{},"text":{"61":{}},"component":{}}],["formfields.from(request",{"_index":6301,"title":{},"name":{},"text":{"61":{}},"component":{}}],["formhandl",{"_index":6306,"title":{},"name":{},"text":{"61":{}},"component":{}}],["forthcom",{"_index":769,"title":{},"name":{},"text":{"7":{}},"component":{}}],["fortun",{"_index":5280,"title":{},"name":{},"text":{"53":{}},"component":{}}],["forward",{"_index":1046,"title":{"25-3":{},"33-14":{},"34-23":{},"45-5":{}},"name":{},"text":{"11":{},"18":{},"25":{},"33":{},"34":{},"45":{},"48":{},"51":{},"53":{},"61":{},"64":{},"66":{}},"component":{}}],["forwardcontent(respons",{"_index":4702,"title":{},"name":{},"text":{"48":{}},"component":{}}],["forwarded.ini",{"_index":3154,"title":{},"name":{},"text":{"34":{}},"component":{}}],["forwardedrequestcustom",{"_index":2514,"title":{"61-5":{}},"name":{},"text":{"33":{},"61":{}},"component":{}}],["forwardtorest(partialtext",{"_index":5244,"title":{},"name":{},"text":{"53":{}},"component":{}}],["forwardtorest(payload",{"_index":5235,"title":{},"name":{},"text":{"53":{}},"component":{}}],["forwardtorest(read",{"_index":5249,"title":{},"name":{},"text":{"53":{}},"component":{}}],["fossil",{"_index":296,"title":{},"name":{},"text":{"2":{}},"component":{}}],["foster",{"_index":94,"title":{},"name":{},"text":{"1":{}},"component":{}}],["found",{"_index":573,"title":{},"name":{},"text":{"5":{},"17":{},"20":{},"25":{},"28":{},"33":{},"34":{},"36":{},"37":{},"45":{},"48":{},"54":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["foundat",{"_index":329,"title":{},"name":{},"text":{"2":{},"9":{},"11":{},"37":{}},"component":{}}],["four",{"_index":5089,"title":{},"name":{},"text":{"52":{}},"component":{}}],["fpm",{"_index":3050,"title":{},"name":{},"text":{"34":{},"48":{}},"component":{}}],["fpm.sock",{"_index":3057,"title":{},"name":{},"text":{"34":{}},"component":{}}],["fragment",{"_index":2062,"title":{},"name":{},"text":{"28":{},"53":{},"54":{},"56":{}},"component":{}}],["fragment.xml",{"_index":1945,"title":{},"name":{},"text":{"26":{},"35":{}},"component":{}}],["fragment.xml,overrid",{"_index":5528,"title":{},"name":{},"text":{"56":{}},"component":{}}],["fragment.xml`",{"_index":5521,"title":{},"name":{},"text":{"56":{}},"component":{}}],["frame",{"_index":994,"title":{"10-5":{}},"name":{},"text":{"10":{},"33":{},"34":{},"41":{},"44":{},"48":{},"49":{},"50":{},"53":{},"61":{},"62":{},"63":{},"64":{}},"component":{}}],["frame.getmetadata",{"_index":5008,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["frame.getset",{"_index":6451,"title":{},"name":{},"text":{"62":{}},"component":{}}],["frame.isendstream",{"_index":5013,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["frame.islast",{"_index":6479,"title":{},"name":{},"text":{"63":{}},"component":{}}],["framework",{"_index":104,"title":{},"name":{},"text":{"1":{},"23":{},"24":{},"35":{},"36":{},"42":{}},"component":{}}],["fred",{"_index":1737,"title":{},"name":{},"text":{"23":{},"26":{}},"component":{}}],["free",{"_index":4239,"title":{},"name":{},"text":{"44":{},"45":{},"47":{},"48":{},"56":{}},"component":{}}],["frequenc",{"_index":2058,"title":{},"name":{},"text":{"28":{},"61":{},"66":{}},"component":{}}],["frequent",{"_index":24,"title":{},"name":{},"text":{"1":{},"13":{},"33":{},"36":{},"37":{},"61":{}},"component":{}}],["fresh",{"_index":5443,"title":{},"name":{},"text":{"56":{},"66":{}},"component":{}}],["freshli",{"_index":3867,"title":{},"name":{},"text":{"41":{},"66":{}},"component":{}}],["friday",{"_index":6181,"title":{},"name":{},"text":{"61":{}},"component":{}}],["friendship",{"_index":134,"title":{},"name":{},"text":{"1":{}},"component":{}}],["front",{"_index":2541,"title":{},"name":{},"text":{"33":{},"34":{},"61":{},"65":{}},"component":{}}],["frontend",{"_index":3193,"title":{},"name":{},"text":{"34":{}},"component":{}}],["full",{"_index":885,"title":{"8-3":{}},"name":{},"text":{"8":{},"13":{},"23":{},"34":{},"38":{},"48":{},"55":{},"56":{},"57":{},"65":{},"66":{}},"component":{}}],["fulli",{"_index":505,"title":{},"name":{},"text":{"4":{},"19":{},"23":{},"33":{},"37":{},"42":{},"44":{},"48":{},"57":{},"61":{},"66":{}},"component":{}}],["fullrequesturi",{"_index":5612,"title":{},"name":{},"text":{"57":{}},"component":{}}],["function",{"_index":774,"title":{},"name":{},"text":{"7":{},"20":{},"30":{},"31":{},"34":{},"36":{},"43":{},"52":{},"56":{},"61":{},"66":{}},"component":{}}],["fund",{"_index":506,"title":{},"name":{},"text":{"4":{}},"component":{}}],["fundament",{"_index":2930,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["further",{"_index":1474,"title":{},"name":{},"text":{"19":{},"20":{},"25":{},"34":{},"37":{},"38":{},"44":{},"45":{},"48":{},"61":{},"66":{},"67":{}},"component":{}}],["furthermor",{"_index":135,"title":{},"name":{},"text":{"1":{},"30":{},"34":{},"37":{},"38":{},"39":{},"41":{},"47":{},"48":{},"53":{},"61":{},"65":{}},"component":{}}],["futur",{"_index":513,"title":{},"name":{},"text":{"4":{},"34":{},"38":{},"47":{},"48":{},"61":{}},"component":{}}],["g",{"_index":5234,"title":{},"name":{},"text":{"53":{}},"component":{}}],["gae_module_inst",{"_index":3382,"title":{},"name":{},"text":{"37":{}},"component":{}}],["gain",{"_index":2657,"title":{},"name":{},"text":{"33":{}},"component":{}}],["garbag",{"_index":2341,"title":{},"name":{},"text":{"33":{}},"component":{}}],["garbl",{"_index":6275,"title":{},"name":{},"text":{"61":{}},"component":{}}],["gate",{"_index":1131,"title":{},"name":{},"text":{"13":{}},"component":{}}],["gather",{"_index":3760,"title":{},"name":{},"text":{"38":{},"44":{},"49":{},"50":{},"61":{}},"component":{}}],["gc",{"_index":3657,"title":{},"name":{},"text":{"38":{}},"component":{}}],["gcloud",{"_index":3367,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["gcloud.ini",{"_index":3583,"title":{},"name":{},"text":{"37":{}},"component":{}}],["gcloud_project",{"_index":3575,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["gclouddatastor",{"_index":3338,"title":{"37-33":{},"37-37":{}},"name":{},"text":{},"component":{}}],["gcloudsess",{"_index":3592,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["gcloudsessiondatastor",{"_index":6536,"title":{"66-23":{}},"name":{},"text":{"66":{}},"component":{}}],["gcloudsessiondatastorefactori",{"_index":6810,"title":{},"name":{},"text":{"66":{}},"component":{}}],["gecko",{"_index":3309,"title":{},"name":{},"text":{"36":{}},"component":{}}],["gecko/20100101",{"_index":4558,"title":{},"name":{},"text":{"48":{}},"component":{}}],["gener",{"_index":63,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"7":{},"10":{},"12":{},"13":{},"20":{},"28":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{}},"component":{}}],["generatedclass",{"_index":5324,"title":{},"name":{},"text":{"54":{}},"component":{}}],["generateorigin",{"_index":5530,"title":{},"name":{},"text":{"56":{}},"component":{}}],["genkeypair",{"_index":2131,"title":{},"name":{},"text":{"30":{}},"component":{}}],["genstraschararray",{"_index":2073,"title":{},"name":{},"text":{"28":{}},"component":{}}],["geograph",{"_index":3290,"title":{},"name":{},"text":{"36":{},"61":{}},"component":{}}],["get",{"_index":709,"title":{"11":{},"20":{}},"name":{},"text":{"7":{},"32":{},"57":{},"61":{}},"component":{}}],["get/set",{"_index":4408,"title":{},"name":{},"text":{"45":{}},"component":{}}],["getcont",{"_index":4660,"title":{},"name":{},"text":{"48":{}},"component":{}}],["getcount",{"_index":4417,"title":{},"name":{},"text":{"45":{}},"component":{}}],["getcountservic",{"_index":4422,"title":{},"name":{},"text":{"45":{}},"component":{}}],["getcountservice().addcount(valu",{"_index":4427,"title":{},"name":{},"text":{"45":{}},"component":{}}],["getcountservice().getcount",{"_index":4425,"title":{},"name":{},"text":{"45":{}},"component":{}}],["getendpoint().clos",{"_index":4205,"title":{},"name":{},"text":{"44":{},"52":{},"65":{}},"component":{}}],["getendpoint().close(caus",{"_index":4234,"title":{},"name":{},"text":{"44":{},"65":{}},"component":{}}],["getendpoint().close(x",{"_index":4206,"title":{},"name":{},"text":{"44":{},"52":{}},"component":{}}],["getendpoint().fill(buff",{"_index":4231,"title":{},"name":{},"text":{"44":{},"52":{},"65":{}},"component":{}}],["getendpoint().write(callback",{"_index":5148,"title":{},"name":{},"text":{"52":{}},"component":{}}],["getendpoint().write(thi",{"_index":4203,"title":{},"name":{},"text":{"44":{}},"component":{}}],["getfailur",{"_index":4248,"title":{},"name":{},"text":{"44":{}},"component":{}}],["getfoo",{"_index":4055,"title":{},"name":{},"text":{"42":{},"45":{}},"component":{}}],["getinvocationtyp",{"_index":4236,"title":{},"name":{},"text":{"44":{}},"component":{}}],["getpriority(request",{"_index":6194,"title":{},"name":{},"text":{"61":{}},"component":{}}],["getprivatefield",{"_index":1091,"title":{},"name":{},"text":{"13":{}},"component":{}}],["getresourcebytes(request",{"_index":6432,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["getresult",{"_index":4298,"title":{},"name":{},"text":{"44":{}},"component":{}}],["getschedul",{"_index":5100,"title":{},"name":{},"text":{"52":{}},"component":{}}],["getselector",{"_index":5101,"title":{},"name":{},"text":{"52":{}},"component":{}}],["getservice(@name(valu",{"_index":4404,"title":{},"name":{},"text":{"45":{}},"component":{}}],["getservicecount",{"_index":4397,"title":{},"name":{},"text":{"45":{}},"component":{}}],["getsessionscr",{"_index":6610,"title":{},"name":{},"text":{"66":{}},"component":{}}],["getsessiontimemax",{"_index":6611,"title":{},"name":{},"text":{"66":{}},"component":{}}],["getsessiontimemean",{"_index":6613,"title":{},"name":{},"text":{"66":{}},"component":{}}],["getsessiontimestddev",{"_index":6614,"title":{},"name":{},"text":{"66":{}},"component":{}}],["getsessiontimetot",{"_index":6615,"title":{},"name":{},"text":{"66":{}},"component":{}}],["getter",{"_index":1084,"title":{},"name":{},"text":{"13":{},"42":{},"45":{}},"component":{}}],["getworkernam",{"_index":6566,"title":{},"name":{},"text":{"66":{}},"component":{}}],["git",{"_index":682,"title":{"10-1":{}},"name":{},"text":{"7":{},"9":{},"10":{},"11":{},"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["github",{"_index":27,"title":{"4-9":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"32":{}},"component":{}}],["github’",{"_index":1008,"title":{},"name":{},"text":{"10":{}},"component":{}}],["git’",{"_index":1006,"title":{},"name":{},"text":{"10":{}},"component":{}}],["give",{"_index":136,"title":{},"name":{},"text":{"1":{},"7":{},"19":{},"25":{},"32":{},"33":{},"36":{},"42":{},"48":{},"53":{},"61":{},"67":{},"71":{}},"component":{}}],["given",{"_index":1114,"title":{},"name":{},"text":{"13":{},"19":{},"32":{},"38":{},"44":{},"45":{},"48":{},"61":{},"66":{},"67":{}},"component":{}}],["glassfish",{"_index":2123,"title":{},"name":{},"text":{"29":{},"57":{}},"component":{}}],["glob",{"_index":5495,"title":{},"name":{},"text":{"56":{}},"component":{}}],["global",{"_index":725,"title":{},"name":{},"text":{"7":{},"34":{},"38":{},"48":{}},"component":{}}],["gmt",{"_index":2595,"title":{},"name":{},"text":{"33":{},"36":{}},"component":{}}],["go",{"_index":2469,"title":{},"name":{},"text":{"33":{},"34":{},"37":{},"41":{},"45":{},"47":{},"54":{},"56":{},"67":{},"71":{}},"component":{}}],["goal",{"_index":569,"title":{"56-2":{}},"name":{},"text":{"4":{},"6":{},"56":{}},"component":{}}],["goe",{"_index":3093,"title":{},"name":{},"text":{"34":{},"44":{},"47":{}},"component":{}}],["good",{"_index":528,"title":{},"name":{},"text":{"4":{},"7":{},"13":{},"19":{},"47":{},"61":{}},"component":{}}],["googl",{"_index":3334,"title":{"37-31":{},"37-34":{},"37-35":{},"37-38":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["google.com",{"_index":4802,"title":{},"name":{},"text":{"48":{}},"component":{}}],["google_application_credentials=/path/to/my/key.json",{"_index":3576,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["googleonlycookiestor",{"_index":4797,"title":{},"name":{},"text":{"48":{}},"component":{}}],["google’",{"_index":3120,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["govern",{"_index":2059,"title":{},"name":{},"text":{"28":{}},"component":{}}],["gracefulli",{"_index":2669,"title":{},"name":{},"text":{"33":{},"38":{}},"component":{}}],["graceperiod",{"_index":6670,"title":{},"name":{},"text":{"66":{}},"component":{}}],["gradl",{"_index":5364,"title":{},"name":{},"text":{"55":{}},"component":{}}],["grain",{"_index":4637,"title":{},"name":{},"text":{"48":{},"67":{}},"component":{}}],["grant",{"_index":6029,"title":{},"name":{},"text":{"61":{}},"component":{}}],["graph",{"_index":951,"title":{},"name":{},"text":{"8":{},"32":{},"38":{},"39":{}},"component":{}}],["graphic",{"_index":1510,"title":{},"name":{},"text":{"20":{},"25":{},"30":{},"45":{}},"component":{}}],["graphviz",{"_index":947,"title":{},"name":{},"text":{"8":{},"38":{}},"component":{}}],["great",{"_index":557,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"48":{},"55":{}},"component":{}}],["greater",{"_index":916,"title":{},"name":{},"text":{"8":{},"19":{},"33":{},"44":{},"49":{},"53":{},"62":{},"67":{}},"component":{}}],["greatli",{"_index":5281,"title":{},"name":{},"text":{"53":{},"59":{},"61":{}},"component":{}}],["greet",{"_index":4992,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["grid",{"_index":6765,"title":{},"name":{},"text":{"66":{}},"component":{}}],["grind",{"_index":4475,"title":{},"name":{},"text":{"47":{}},"component":{}}],["group",{"_index":117,"title":{},"name":{},"text":{"1":{},"7":{},"34":{},"38":{},"44":{},"59":{},"61":{}},"component":{}}],["groupid",{"_index":5423,"title":{},"name":{},"text":{"56":{}},"component":{}}],["groupprincipalcallback",{"_index":1825,"title":{},"name":{},"text":{"24":{}},"component":{}}],["grow",{"_index":4454,"title":{},"name":{},"text":{"47":{}},"component":{}}],["guarante",{"_index":2297,"title":{},"name":{},"text":{"32":{},"37":{},"47":{},"48":{},"53":{},"61":{},"62":{}},"component":{}}],["guid",{"_index":57,"title":{"15":{},"16":{},"7-1":{},"7-7":{},"14-1":{},"14-2":{},"58-2":{}},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"10":{},"14":{},"15":{},"16":{},"20":{},"23":{},"25":{},"34":{},"37":{},"45":{}},"component":{"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{}}}],["guidanc",{"_index":6406,"title":{},"name":{},"text":{"61":{}},"component":{}}],["guide/index.adoc",{"_index":732,"title":{},"name":{},"text":{"7":{}},"component":{}}],["gzip",{"_index":1494,"title":{},"name":{},"text":{"20":{},"61":{}},"component":{}}],["gziphandl",{"_index":5885,"title":{"61-27":{}},"name":{},"text":{"61":{}},"component":{}}],["gziphandler(new",{"_index":6105,"title":{},"name":{},"text":{"61":{}},"component":{}}],["gziphandler.addexcludedmimetypes(\"font/ttf",{"_index":6102,"title":{},"name":{},"text":{"61":{}},"component":{}}],["gziphandler.addincludedmethods(\"post",{"_index":6100,"title":{},"name":{},"text":{"61":{}},"component":{}}],["gziphandler.setexcludedpaths(\"/uncompress",{"_index":6099,"title":{},"name":{},"text":{"61":{}},"component":{}}],["gziphandler.sethandler(context",{"_index":6103,"title":{},"name":{},"text":{"61":{}},"component":{}}],["gziphandler.sethandler(sequ",{"_index":6048,"title":{},"name":{},"text":{"61":{}},"component":{}}],["gziphandler.setmingzipsize(1024",{"_index":6098,"title":{},"name":{},"text":{"61":{}},"component":{}}],["h",{"_index":2583,"title":{},"name":{},"text":{"33":{},"48":{}},"component":{}}],["h1",{"_index":5931,"title":{},"name":{},"text":{"61":{}},"component":{}}],["h2",{"_index":2948,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["h2)}{0.0.0.0:8443",{"_index":3013,"title":{},"name":{},"text":{"34":{}},"component":{}}],["h2,http/1.1",{"_index":3199,"title":{},"name":{},"text":{"34":{}},"component":{}}],["h2c",{"_index":2961,"title":{},"name":{},"text":{"34":{},"48":{},"61":{}},"component":{}}],["h2c)}{0.0.0.0:8080",{"_index":2957,"title":{},"name":{},"text":{"34":{}},"component":{}}],["h3",{"_index":6025,"title":{},"name":{},"text":{"61":{}},"component":{}}],["h3)}{0.0.0.0:8444",{"_index":3019,"title":{},"name":{},"text":{"34":{}},"component":{}}],["h3=\":843",{"_index":6024,"title":{},"name":{},"text":{"61":{}},"component":{}}],["hackathon",{"_index":126,"title":{},"name":{},"text":{"1":{}},"component":{}}],["halt",{"_index":3995,"title":{},"name":{},"text":{"41":{},"47":{}},"component":{}}],["hand",{"_index":3391,"title":{},"name":{},"text":{"37":{},"38":{},"44":{},"61":{},"67":{}},"component":{}}],["handi",{"_index":3767,"title":{},"name":{},"text":{"38":{}},"component":{}}],["handl",{"_index":373,"title":{"37-47":{},"48-10":{},"48-11":{}},"name":{},"text":{"3":{},"10":{},"19":{},"25":{},"31":{},"33":{},"34":{},"41":{},"43":{},"44":{},"47":{},"48":{},"49":{},"52":{},"53":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["handle(bifunct",{"_index":6314,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handle(request",{"_index":5606,"title":{},"name":{},"text":{"57":{},"61":{},"67":{}},"component":{}}],["handle(str",{"_index":5378,"title":{},"name":{},"text":{"55":{}},"component":{}}],["handlefatalfailure(chunk.getfailur",{"_index":4269,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handlefatalfailure(failur",{"_index":4283,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handler",{"_index":1326,"title":{"41-10":{},"57-4":{},"57-5":{},"57-6":{},"57-7":{},"57-8":{},"61-22":{},"61-23":{},"61-37":{},"61-41":{},"61-42":{},"61-43":{}},"name":{},"text":{"19":{},"28":{},"31":{},"33":{},"41":{},"43":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"66":{},"67":{},"72":{}},"component":{}}],["handler.abstract",{"_index":5605,"title":{},"name":{},"text":{"57":{},"61":{},"67":{}},"component":{}}],["handler.abstract.nonblock",{"_index":6052,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.abstractcontain",{"_index":6053,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.addservlet(myjavaxwebsocketinitializerservlet.class",{"_index":6867,"title":{},"name":{},"text":{"67":{}},"component":{}}],["handler.collect",{"_index":6074,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.contain",{"_index":6042,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.handl",{"_index":6147,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.handle(request",{"_index":6340,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.sequ",{"_index":6045,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.setacceptranges(tru",{"_index":6090,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.setbaseresource(resourc",{"_index":6095,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.setbaseresource(resourcefactory.of(handler).newresource(\"/path/to/static/resourc",{"_index":6087,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.setdirallowed(fals",{"_index":6088,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.setwelcomefiles(list.of(\"index.html",{"_index":6089,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler.wrapp",{"_index":6044,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handler/request/respons",{"_index":2802,"title":{},"name":{},"text":{"33":{},"41":{},"61":{},"72":{}},"component":{}}],["handlerthreadinfo",{"_index":6237,"title":{},"name":{},"text":{"61":{}},"component":{}}],["handlestyp",{"_index":1170,"title":{},"name":{},"text":{"17":{}},"component":{}}],["handletransientfailure(chunk.getfailur",{"_index":4271,"title":{},"name":{},"text":{"44":{}},"component":{}}],["handshak",{"_index":2766,"title":{},"name":{},"text":{"33":{},"34":{},"48":{},"61":{}},"component":{}}],["handshakefailed(ev",{"_index":4779,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["handshakesucceeded(ev",{"_index":4773,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["hang",{"_index":6316,"title":{},"name":{},"text":{"61":{}},"component":{}}],["happen",{"_index":1127,"title":{},"name":{},"text":{"13":{},"20":{},"25":{},"32":{},"34":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"53":{},"61":{},"62":{},"63":{},"67":{}},"component":{}}],["happi",{"_index":357,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["haproxi",{"_index":2878,"title":{"34-25":{}},"name":{},"text":{"34":{},"61":{}},"component":{}}],["haproxy.cfg",{"_index":3188,"title":{},"name":{},"text":{"34":{}},"component":{}}],["haproxy’",{"_index":3182,"title":{},"name":{},"text":{"34":{}},"component":{}}],["hard",{"_index":548,"title":{},"name":{},"text":{"4":{},"7":{},"19":{},"32":{},"36":{},"44":{},"66":{}},"component":{}}],["hardwar",{"_index":911,"title":{},"name":{},"text":{"8":{},"33":{}},"component":{}}],["hark",{"_index":3416,"title":{},"name":{},"text":{"37":{}},"component":{}}],["harmless",{"_index":2498,"title":{},"name":{},"text":{"33":{}},"component":{}}],["harri",{"_index":1739,"title":{},"name":{},"text":{"23":{}},"component":{}}],["hash",{"_index":3362,"title":{},"name":{},"text":{"37":{}},"component":{}}],["hash.ini",{"_index":3421,"title":{},"name":{},"text":{"37":{}},"component":{}}],["hashcod",{"_index":2734,"title":{},"name":{},"text":{"33":{}},"component":{}}],["hashloginservic",{"_index":5543,"title":{},"name":{},"text":{"56":{}},"component":{}}],["hashmap",{"_index":3419,"title":{},"name":{},"text":{"37":{},"42":{},"45":{},"49":{},"50":{},"52":{},"62":{},"63":{}},"component":{}}],["hashset",{"_index":4125,"title":{},"name":{},"text":{"43":{}},"component":{}}],["have",{"_index":801,"title":{},"name":{},"text":{"7":{},"16":{},"18":{},"19":{},"25":{},"30":{},"33":{},"34":{},"38":{},"43":{},"44":{},"45":{},"48":{},"49":{},"61":{},"62":{},"66":{}},"component":{}}],["haven’t",{"_index":1514,"title":{},"name":{},"text":{"20":{},"37":{}},"component":{}}],["hazelcast",{"_index":3333,"title":{"37-26":{},"37-27":{},"37-29":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["hazelcastsessiondatastor",{"_index":6660,"title":{},"name":{},"text":{"66":{}},"component":{}}],["head",{"_index":4448,"title":{},"name":{},"text":{"47":{},"48":{}},"component":{}}],["header",{"_index":823,"title":{"34-23":{}},"name":{},"text":{"7":{},"28":{},"33":{},"34":{},"48":{},"49":{},"50":{},"53":{},"57":{},"59":{},"61":{},"62":{},"63":{}},"component":{}}],["headercachesize=1024",{"_index":3936,"title":{},"name":{},"text":{"41":{}},"component":{}}],["headers(head",{"_index":4931,"title":{},"name":{},"text":{"48":{}},"component":{}}],["headersfram",{"_index":4981,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["headersframe(pushedstream.getid",{"_index":6462,"title":{},"name":{},"text":{"62":{}},"component":{}}],["headersframe(request",{"_index":4982,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["headersframe(respons",{"_index":6482,"title":{},"name":{},"text":{"63":{}},"component":{}}],["headersframe(stream.getid",{"_index":6434,"title":{},"name":{},"text":{"62":{}},"component":{}}],["health",{"_index":6200,"title":{},"name":{},"text":{"61":{}},"component":{}}],["heap",{"_index":2320,"title":{},"name":{},"text":{"32":{},"33":{},"38":{}},"component":{}}],["hear",{"_index":1020,"title":{},"name":{},"text":{"10":{}},"component":{}}],["heart",{"_index":17,"title":{},"name":{},"text":{"1":{}},"component":{}}],["heartbeat",{"_index":2937,"title":{},"name":{},"text":{"34":{},"37":{},"53":{},"66":{}},"component":{}}],["heavi",{"_index":3996,"title":{},"name":{},"text":{"41":{}},"component":{}}],["heavili",{"_index":842,"title":{},"name":{},"text":{"7":{},"33":{},"37":{},"48":{}},"component":{}}],["held",{"_index":2365,"title":{},"name":{},"text":{"33":{},"37":{},"56":{}},"component":{}}],["hello",{"_index":4034,"title":{"61-42":{}},"name":{},"text":{"42":{},"49":{},"50":{},"55":{},"57":{},"61":{},"65":{}},"component":{}}],["helloservlet",{"_index":5401,"title":{},"name":{},"text":{"55":{}},"component":{}}],["helloworld",{"_index":5359,"title":{"55-2":{},"55-4":{}},"name":{"55":{}},"text":{"55":{}},"component":{}}],["helloworldhandl",{"_index":6276,"title":{},"name":{},"text":{"61":{}},"component":{}}],["help",{"_index":571,"title":{"6-4":{}},"name":{},"text":{"4":{},"6":{},"7":{},"8":{},"18":{},"20":{},"37":{},"38":{},"41":{},"42":{},"55":{},"56":{},"61":{},"66":{},"71":{},"72":{}},"component":{}}],["henc",{"_index":4509,"title":{},"name":{},"text":{"48":{}},"component":{}}],["here",{"_index":308,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"17":{},"23":{},"25":{},"26":{},"28":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"44":{},"47":{},"48":{},"49":{},"50":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"72":{}},"component":{}}],["here’",{"_index":1182,"title":{},"name":{},"text":{"17":{},"23":{},"26":{},"27":{},"28":{},"48":{},"54":{},"56":{},"66":{}},"component":{}}],["heterogen",{"_index":6527,"title":{"66-12":{}},"name":{},"text":{},"component":{}}],["heurist",{"_index":2366,"title":{},"name":{},"text":{"33":{},"37":{},"47":{}},"component":{}}],["hh:mm:ss.sss",{"_index":3242,"title":{},"name":{},"text":{"36":{}},"component":{}}],["hidden",{"_index":2426,"title":{},"name":{},"text":{"33":{},"36":{},"61":{}},"component":{}}],["hide",{"_index":3250,"title":{},"name":{},"text":{"36":{},"48":{}},"component":{}}],["hierarchi",{"_index":1196,"title":{},"name":{},"text":{"17":{}},"component":{}}],["high",{"_index":400,"title":{},"name":{},"text":{"3":{},"33":{},"37":{},"44":{},"48":{},"49":{},"50":{},"51":{},"52":{},"61":{},"62":{},"63":{},"64":{}},"component":{}}],["higher",{"_index":1228,"title":{},"name":{},"text":{"17":{},"32":{},"33":{},"34":{},"38":{},"61":{}},"component":{}}],["highest",{"_index":6195,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["highli",{"_index":3863,"title":{},"name":{},"text":{"41":{}},"component":{}}],["highlight",{"_index":1631,"title":{},"name":{},"text":{"20":{}},"component":{}}],["hint",{"_index":4922,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["histor",{"_index":3417,"title":{},"name":{},"text":{"37":{},"48":{},"64":{}},"component":{}}],["histori",{"_index":156,"title":{"2-2":{}},"name":{},"text":{},"component":{}}],["hit",{"_index":3638,"title":{},"name":{},"text":{"38":{},"40":{},"56":{}},"component":{}}],["hobbi",{"_index":1415,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hobby.net",{"_index":1469,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hobby.war",{"_index":1463,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hobby.xml",{"_index":1467,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hold",{"_index":1718,"title":{},"name":{},"text":{"23":{},"26":{},"33":{},"48":{},"61":{}},"component":{}}],["holder",{"_index":6259,"title":{},"name":{},"text":{"61":{}},"component":{}}],["home",{"_index":216,"title":{},"name":{},"text":{"2":{},"8":{},"20":{}},"component":{}}],["home/johndoe/path/to/my/other/sourc",{"_index":5548,"title":{},"name":{},"text":{"56":{}},"component":{}}],["home/target/jetti",{"_index":959,"title":{},"name":{},"text":{"8":{}},"component":{}}],["home}/.m2/repositori",{"_index":3826,"title":{},"name":{},"text":{"38":{}},"component":{}}],["hood",{"_index":6878,"title":{},"name":{},"text":{"67":{}},"component":{}}],["hook",{"_index":987,"title":{},"name":{},"text":{"9":{},"26":{},"33":{},"38":{},"48":{}},"component":{}}],["host",{"_index":1318,"title":{"19-7":{},"19-8":{},"19-9":{},"19-10":{},"53-3":{}},"name":{},"text":{"19":{},"20":{},"25":{},"30":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"44":{},"45":{},"48":{},"52":{},"56":{},"61":{},"66":{},"69":{}},"component":{}}],["host,port",{"_index":6754,"title":{},"name":{},"text":{"66":{}},"component":{}}],["host/address",{"_index":2438,"title":{},"name":{},"text":{"33":{},"57":{}},"component":{}}],["host/port",{"_index":1852,"title":{},"name":{},"text":{"25":{},"37":{}},"component":{}}],["hostheadercustom",{"_index":5880,"title":{"61-6":{}},"name":{},"text":{"61":{}},"component":{}}],["hostnam",{"_index":1774,"title":{},"name":{},"text":{"23":{},"66":{}},"component":{}}],["hostname.com",{"_index":1428,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hostname.endswith(\".domain.com",{"_index":4771,"title":{},"name":{},"text":{"48":{}},"component":{}}],["hostname=\"ldap.example.com",{"_index":1749,"title":{},"name":{},"text":{"23":{}},"component":{}}],["hot",{"_index":1314,"title":{"19-1":{}},"name":{},"text":{"19":{},"32":{},"33":{},"56":{}},"component":{}}],["hotrod",{"_index":3537,"title":{},"name":{},"text":{"37":{}},"component":{}}],["hotrodproperti",{"_index":6790,"title":{},"name":{},"text":{"66":{}},"component":{}}],["hotrodproperties.load(new",{"_index":6791,"title":{},"name":{},"text":{"66":{}},"component":{}}],["housekeep",{"_index":3353,"title":{"66-4":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["housekeeper.setintervalsec(600l",{"_index":6563,"title":{},"name":{},"text":{"66":{}},"component":{}}],["housekeeper.setsessionidmanager(idmgr",{"_index":6562,"title":{},"name":{},"text":{"66":{}},"component":{}}],["hpack",{"_index":5571,"title":{},"name":{},"text":{"57":{}},"component":{}}],["hsqldb",{"_index":1707,"title":{},"name":{},"text":{"23":{}},"component":{}}],["html",{"_index":677,"title":{},"name":{},"text":{"7":{},"20":{},"34":{},"61":{}},"component":{}}],["http",{"_index":1149,"title":{"37":{},"48":{},"61":{},"66":{},"33-8":{},"33-14":{},"33-15":{},"33-22":{},"37-1":{},"37-7":{},"37-12":{},"37-14":{},"37-16":{},"37-18":{},"37-26":{},"37-31":{},"37-40":{},"48-24":{},"53-6":{},"53-7":{},"59-1":{},"61-16":{},"61-33":{},"61-50":{},"61-51":{},"61-52":{}},"name":{"48":{},"61":{}},"text":{"16":{},"18":{},"20":{},"21":{},"22":{},"24":{},"25":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["http.getprotocol",{"_index":6488,"title":{},"name":{},"text":{"65":{}},"component":{}}],["http.ini",{"_index":1389,"title":{},"name":{},"text":{"19":{},"20":{},"31":{},"34":{},"36":{},"38":{}},"component":{}}],["http.xml",{"_index":3714,"title":{},"name":{},"text":{"38":{}},"component":{}}],["http/0.9",{"_index":1436,"title":{},"name":{},"text":{"19":{},"59":{}},"component":{}}],["http/1",{"_index":2632,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["http/1.0",{"_index":303,"title":{},"name":{},"text":{"2":{},"19":{},"33":{},"34":{},"52":{},"59":{},"61":{},"64":{}},"component":{}}],["http/1.0\\r\\n",{"_index":5154,"title":{},"name":{},"text":{"52":{}},"component":{}}],["http/1.1",{"_index":233,"title":{"34-1":{},"34-2":{},"34-25":{},"48-26":{},"53-4":{},"61-15":{},"61-16":{}},"name":{},"text":{"2":{},"16":{},"20":{},"21":{},"22":{},"32":{},"33":{},"34":{},"36":{},"38":{},"41":{},"44":{},"47":{},"48":{},"51":{},"52":{},"53":{},"59":{},"61":{},"64":{},"65":{}},"component":{}}],["http/1.1)}{0.0.0.0:8080",{"_index":1545,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["http/1.1)}{0.0.0.0:8443",{"_index":2922,"title":{},"name":{},"text":{"34":{}},"component":{}}],["http/1.1)}{0.0.0.0:9999",{"_index":1563,"title":{},"name":{},"text":{"20":{}},"component":{}}],["http/1.1\\r\\n",{"_index":4886,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http/1.x",{"_index":2638,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["http/2",{"_index":100,"title":{"49":{},"62":{},"34-3":{},"34-4":{},"34-5":{},"34-6":{},"34-25":{},"48-27":{},"49-2":{},"49-8":{},"53-5":{},"61-17":{},"61-18":{},"62-2":{},"62-7":{}},"name":{},"text":{"1":{},"2":{},"16":{},"18":{},"20":{},"21":{},"22":{},"33":{},"34":{},"41":{},"44":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"61":{},"62":{},"64":{},"71":{}},"component":{}}],["http/2.0",{"_index":5836,"title":{},"name":{},"text":{"59":{}},"component":{}}],["http/2’",{"_index":3035,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["http/3",{"_index":101,"title":{"50":{},"63":{},"34-7":{},"48-28":{},"61-19":{}},"name":{},"text":{"1":{},"16":{},"18":{},"20":{},"21":{},"22":{},"33":{},"34":{},"44":{},"48":{},"50":{},"51":{},"52":{},"61":{},"63":{},"64":{}},"component":{}}],["http/3+quic",{"_index":3016,"title":{},"name":{},"text":{"34":{}},"component":{}}],["http1",{"_index":4726,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http1.1",{"_index":2963,"title":{},"name":{},"text":{"34":{}},"component":{}}],["http11",{"_index":6007,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http11.getprotocol",{"_index":6010,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http11transport",{"_index":4912,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http1respons",{"_index":4923,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http1transport",{"_index":4719,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http2",{"_index":2296,"title":{"33-11":{}},"name":{"49":{},"62":{}},"text":{"32":{},"33":{},"34":{},"48":{},"49":{},"57":{},"61":{},"62":{}},"component":{}}],["http2.setconnectprotocolenabled(tru",{"_index":6417,"title":{},"name":{},"text":{"62":{}},"component":{}}],["http2.setmaxconcurrentstreams(128",{"_index":6416,"title":{},"name":{},"text":{"62":{}},"component":{}}],["http2c",{"_index":2328,"title":{"33-12":{}},"name":{},"text":{"33":{},"34":{}},"component":{}}],["http2client",{"_index":4187,"title":{"49-1":{}},"name":{},"text":{"44":{},"48":{},"49":{},"53":{}},"component":{}}],["http2client(clientconnector",{"_index":4721,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["http2client(connector",{"_index":4914,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http2client.connect(connector.getsslcontextfactori",{"_index":4964,"title":{},"name":{},"text":{"49":{}},"component":{}}],["http2client.connect(serveraddress",{"_index":4960,"title":{},"name":{},"text":{"49":{}},"component":{}}],["http2client.getclientconnector",{"_index":4963,"title":{},"name":{},"text":{"49":{}},"component":{}}],["http2client.initialstreamrecvwindow",{"_index":4969,"title":{},"name":{},"text":{"49":{}},"component":{}}],["http2client.setinitialsessionrecvwindow(64",{"_index":4900,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http2client.setstreamidletimeout(15000",{"_index":4940,"title":{},"name":{},"text":{"49":{}},"component":{}}],["http2client.start",{"_index":4941,"title":{},"name":{},"text":{"49":{}},"component":{}}],["http2client.stop",{"_index":4942,"title":{},"name":{},"text":{"49":{}},"component":{}}],["http2cserverconnectionfactori",{"_index":6013,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http2cserverconnectionfactory(httpconfig",{"_index":6014,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http2respons",{"_index":4926,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http2serverconnectionfactori",{"_index":5933,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http2serverconnectionfactory(httpconfig",{"_index":6017,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http2serverconnectionfactory(httpsconfig",{"_index":5934,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http2serverconnectionfactory(secureconfig",{"_index":5985,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http2transport",{"_index":4723,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http3",{"_index":2329,"title":{"33-13":{}},"name":{"50":{},"63":{}},"text":{"33":{},"34":{},"48":{},"50":{},"57":{},"61":{},"63":{}},"component":{}}],["http3.gethttp3configuration().setstreamidletimeout(15000",{"_index":6473,"title":{},"name":{},"text":{"63":{}},"component":{}}],["http3client",{"_index":4188,"title":{"50-1":{}},"name":{},"text":{"44":{},"48":{},"50":{}},"component":{}}],["http3client(clientquicconfig",{"_index":4905,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http3client(new",{"_index":5055,"title":{},"name":{},"text":{"50":{}},"component":{}}],["http3client(quicconfigur",{"_index":4917,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http3client.connect(serveraddress",{"_index":5060,"title":{},"name":{},"text":{"50":{}},"component":{}}],["http3client.gethttp3configuration().setstreamidletimeout(15000",{"_index":5056,"title":{},"name":{},"text":{"50":{}},"component":{}}],["http3client.getquicconfiguration().setsessionrecvwindow(64",{"_index":4906,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http3client.start",{"_index":5057,"title":{},"name":{},"text":{"50":{}},"component":{}}],["http3client.stop",{"_index":5058,"title":{},"name":{},"text":{"50":{}},"component":{}}],["http3connector",{"_index":5993,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http3connector.setport(port",{"_index":6001,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http3respons",{"_index":4928,"title":{},"name":{},"text":{"48":{}},"component":{}}],["http3serverconnectionfactory(serverquicconfig",{"_index":5964,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://chat.domain.com",{"_index":6219,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://cross.domain.com",{"_index":6215,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://dev.eclipse.org/mhonarc/lists/jetti",{"_index":545,"title":{},"name":{},"text":{"4":{}},"component":{}}],["http://docs.project.org",{"_index":1421,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://domain.biz",{"_index":1416,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://domain.com",{"_index":6212,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://domain.com:8080/path?param=valu",{"_index":6203,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://download.eclipse.org/jetty/updates/jetti",{"_index":314,"title":{},"name":{},"text":{"2":{}},"component":{}}],["http://example.com",{"_index":6216,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://hobby.net",{"_index":1417,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://localhost/path",{"_index":6500,"title":{},"name":{},"text":{"65":{}},"component":{}}],["http://localhost:8080",{"_index":1362,"title":{},"name":{},"text":{"19":{},"20":{},"34":{},"55":{},"56":{}},"component":{}}],["http://localhost:8080/ee10",{"_index":1632,"title":{},"name":{},"text":{"20":{}},"component":{}}],["http://localhost:8080/hello",{"_index":5409,"title":{},"name":{},"text":{"55":{}},"component":{}}],["http://localhost:8080/mywebapp",{"_index":1360,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://localhost:9000$3",{"_index":3070,"title":{},"name":{},"text":{"34":{}},"component":{}}],["http://localhost:9090",{"_index":1470,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://mywebapp.com/mywebapp",{"_index":1455,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://mywebapp.com/oth",{"_index":1459,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://mywebapp.net/mywebapp",{"_index":1457,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://other.com/mywebapp",{"_index":1460,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://project.org",{"_index":1420,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://www.mywebapp.com/mywebapp",{"_index":1456,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://www.mywebapp.net/mywebapp",{"_index":1458,"title":{},"name":{},"text":{"19":{}},"component":{}}],["httpchannel.onrequest",{"_index":5909,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpclient",{"_index":4081,"title":{"48-1":{},"48-2":{},"48-3":{},"48-4":{},"48-5":{},"48-6":{},"48-7":{},"48-8":{},"48-9":{},"48-13":{},"48-14":{},"48-15":{},"48-16":{},"48-17":{},"48-18":{},"48-20":{},"48-21":{},"48-22":{},"48-25":{},"57-10":{}},"name":{},"text":{"43":{},"44":{},"45":{},"48":{},"53":{},"57":{},"61":{},"68":{}},"component":{}}],["httpclient'",{"_index":4510,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient(dynamictransport",{"_index":4733,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient(new",{"_index":4746,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["httpclient(transport",{"_index":4898,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.addbean(listen",{"_index":4781,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.addbean(mbeancontain",{"_index":4355,"title":{},"name":{},"text":{"45":{}},"component":{}}],["httpclient.connectblock",{"_index":4759,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.connecttimeout",{"_index":4761,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.get",{"_index":4551,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.get(\"http://domain.com/path",{"_index":4857,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.get(\"http://domain.com/path?queri",{"_index":4550,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.getauthenticationstor",{"_index":4821,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.getauthenticationstore().clearauthenticationresult",{"_index":4835,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.getdestinations().stream",{"_index":4524,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.gethttpcookiestor",{"_index":4784,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.getmaxconnectionsperdestin",{"_index":4539,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.getproxyconfigur",{"_index":4855,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.getproxyconfiguration().addproxy(new",{"_index":5167,"title":{},"name":{},"text":{"53":{}},"component":{}}],["httpclient.gettransport",{"_index":4541,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.idletimeout",{"_index":4757,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.maxconnectionsperdestin",{"_index":4545,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.maxrequestsqueuedperdestin",{"_index":4548,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest",{"_index":4564,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(\"http://domain.com/path",{"_index":4587,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(\"http://domain.com/path?queri",{"_index":4553,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(\"http://localhost",{"_index":4743,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["httpclient.newrequest(\"http://localhost/process",{"_index":4755,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(\"http://localhost/valid",{"_index":4751,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(\"https://third",{"_index":4748,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(\"jetty.org",{"_index":4734,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(host1",{"_index":4689,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(host2",{"_index":4694,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(serveruri).send",{"_index":4879,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.newrequest(uri",{"_index":4843,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.post(\"http://domain.com/entity/1",{"_index":4568,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.post(\"http://domain.com/upload",{"_index":4573,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.post(\"http://localhost:8080",{"_index":4642,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.setfollowredirects(fals",{"_index":4507,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.sethttpcookiestore(new",{"_index":4796,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclient.start",{"_index":4508,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["httpclient.stop",{"_index":4511,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclientconnectionfactory.http11",{"_index":4727,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransport",{"_index":4080,"title":{},"name":{},"text":{"43":{},"44":{},"48":{}},"component":{}}],["httpclienttransportdynam",{"_index":4730,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransportdynamic(clientconnector",{"_index":4732,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["httpclienttransportdynamic(connector",{"_index":4913,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransportoverfcgi",{"_index":4896,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransportoverfcgi(scriptroot",{"_index":4909,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransportoverhttp",{"_index":4718,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransportoverhttp(clientconnector",{"_index":4720,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransportoverhttp2",{"_index":4722,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransportoverhttp2(http2cli",{"_index":4724,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["httpclienttransportoverhttp3",{"_index":4895,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpclienttransportoverhttp3(http3cli",{"_index":4907,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpcomplianc",{"_index":2706,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["httpcompliance.from(\"rfc7230,multiple_content_length",{"_index":5844,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpcompliance.from(str",{"_index":2710,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["httpcompliance.rfc7230",{"_index":2714,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["httpcompliance.viol",{"_index":5838,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpcompliance.violation.case_insensitive_method",{"_index":5827,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpcompliance.violation.multiple_content_length",{"_index":2712,"title":{},"name":{},"text":{"33":{}},"component":{}}],["httpconfig",{"_index":6005,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfig.addcustomizer(new",{"_index":6009,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfig.setsecureport(secureport",{"_index":6206,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfig.setsendserverversion(fals",{"_index":6006,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfig2",{"_index":5974,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfig2.sethttpcompliance(httpcompliance.legaci",{"_index":5975,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfigur",{"_index":5840,"title":{},"name":{},"text":{"59":{},"61":{}},"component":{}}],["httpconfiguration(httpconfig",{"_index":6207,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfiguration(plainconfig",{"_index":5982,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfiguration.custom",{"_index":5927,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconfiguration.sethttpcompliance(customhttpcompli",{"_index":5845,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpconfiguration.sethttpcompliance(httpcompliance.rfc7230",{"_index":5841,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpconfiguration.setrequestcookiecompliance(cookiecompliance.rfc6265",{"_index":5875,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpconfiguration.setrequestcookiecompliance(customuricompli",{"_index":5879,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpconfiguration.setresponsecookiecompliance(cookiecompliance.rfc6265",{"_index":5876,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpconfiguration.seturicompliance(customuricompli",{"_index":5871,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpconfiguration.seturicompliance(uricompliance.rfc3986",{"_index":5867,"title":{},"name":{},"text":{"59":{}},"component":{}}],["httpconnect",{"_index":6004,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["httpconnectionfactori",{"_index":4739,"title":{},"name":{},"text":{"48":{},"61":{},"65":{}},"component":{}}],["httpconnectionfactory(httpconfig",{"_index":6008,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconnectionfactory(httpconfig2",{"_index":5977,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconnectionfactory(httpsconfig",{"_index":5932,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconnectionfactory(plainconfig",{"_index":5990,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconnectionfactory(secureconfig",{"_index":5984,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpconnector",{"_index":5431,"title":{},"name":{},"text":{"56":{}},"component":{}}],["httpconstraint",{"_index":1168,"title":{},"name":{},"text":{"17":{}},"component":{}}],["httpcooki",{"_index":4786,"title":{},"name":{},"text":{"48":{},"57":{},"61":{}},"component":{}}],["httpcookie(\"nam",{"_index":5182,"title":{},"name":{},"text":{"53":{}},"component":{}}],["httpcookie.build(\"foo",{"_index":4787,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpcookie.build(\"nam",{"_index":5731,"title":{},"name":{},"text":{"57":{}},"component":{}}],["httpcookie.samesite.lax",{"_index":6585,"title":{},"name":{},"text":{"66":{}},"component":{}}],["httpcookie.samesite.non",{"_index":6583,"title":{},"name":{},"text":{"66":{}},"component":{}}],["httpcookie.samesite.strict",{"_index":6584,"title":{},"name":{},"text":{"66":{}},"component":{}}],["httpcookiestor",{"_index":4783,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpcookiestore.default",{"_index":4798,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpcookiestore.empti",{"_index":4795,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpd",{"_index":5905,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpfield",{"_index":4972,"title":{},"name":{},"text":{"49":{},"50":{},"57":{},"61":{}},"component":{}}],["httpfields.build",{"_index":4974,"title":{},"name":{},"text":{"49":{},"50":{},"57":{},"61":{}},"component":{}}],["httpfields.build().put(\"checksum",{"_index":5746,"title":{},"name":{},"text":{"57":{}},"component":{}}],["httpfields.empti",{"_index":6359,"title":{},"name":{},"text":{"61":{},"62":{},"63":{}},"component":{}}],["httpfields.mut",{"_index":5721,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["httpheadervalue.continue.asstr",{"_index":6357,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpheadervalue.continue.is(request.getheader(\"expect",{"_index":6400,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpmethod.get.is(request.getmethod",{"_index":6430,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["httpmethod.post.is(request.getmethod",{"_index":6398,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpmethodconstraint",{"_index":1169,"title":{},"name":{},"text":{"17":{}},"component":{}}],["httpproxi",{"_index":4850,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpproxy(\"localhost",{"_index":5168,"title":{},"name":{},"text":{"53":{}},"component":{}}],["httpproxy(\"proxy.net",{"_index":4878,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpproxy(\"proxyhost",{"_index":4851,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httprespons",{"_index":4935,"title":{},"name":{},"text":{"48":{}},"component":{}}],["https.getprotocol",{"_index":5987,"title":{},"name":{},"text":{"61":{}},"component":{}}],["https.ini",{"_index":2235,"title":{},"name":{},"text":{"31":{},"34":{}},"component":{}}],["https.xml",{"_index":2533,"title":{},"name":{},"text":{"33":{}},"component":{}}],["https/http2",{"_index":6000,"title":{},"name":{},"text":{"61":{}},"component":{}}],["https://acme.com/favicon.ico|webapps/acme/favicon.ico",{"_index":2311,"title":{},"name":{},"text":{"32":{}},"component":{}}],["https://api.domain.com/product",{"_index":6068,"title":{},"name":{},"text":{"61":{}},"component":{}}],["https://cloud.google.com/docs/authentication#prepar",{"_index":3571,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["https://cloud.google.com/sdk/?hl=en",{"_index":3573,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["https://dev.eclipse.org/mailman/listinfo/jetti",{"_index":543,"title":{},"name":{},"text":{"4":{}},"component":{}}],["https://docs.domain.com/$1",{"_index":6121,"title":{},"name":{},"text":{"61":{}},"component":{}}],["https://domain.com:8443/path?param=valu",{"_index":6204,"title":{},"name":{},"text":{"61":{}},"component":{}}],["https://eclipse.dev/jetty/document",{"_index":1665,"title":{},"name":{},"text":{"23":{},"24":{},"28":{},"29":{},"33":{}},"component":{}}],["https://eclipse.dev/jetty/download.php",{"_index":1493,"title":{},"name":{},"text":{"20":{}},"component":{}}],["https://eclipse.dev/jetty/javadoc/jetti",{"_index":1442,"title":{},"name":{},"text":{"19":{}},"component":{}}],["https://en.wikipedia.org/wiki/database_catalog",{"_index":3487,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["https://en.wikipedia.org/wiki/database_schema",{"_index":3486,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["https://github.com/eclipse/jetty.project",{"_index":1031,"title":{},"name":{},"text":{"11":{}},"component":{}}],["https://github.com/eclipse/jetty.project.git",{"_index":1036,"title":{},"name":{},"text":{"11":{}},"component":{}}],["https://github.com/eclipse/jetty.project/issues/2919",{"_index":3539,"title":{},"name":{},"text":{"37":{}},"component":{}}],["https://github.com/eclipse/jetty.toolchain",{"_index":1039,"title":{},"name":{},"text":{"11":{}},"component":{}}],["https://github.com/jetti",{"_index":1038,"title":{},"name":{},"text":{"11":{}},"component":{}}],["https://google.com",{"_index":4765,"title":{},"name":{},"text":{"48":{}},"component":{}}],["https://graphviz.org",{"_index":3812,"title":{},"name":{},"text":{"38":{}},"component":{}}],["https://host/store/cart",{"_index":1264,"title":{},"name":{},"text":{"18":{}},"component":{}}],["https://localhost:8443",{"_index":2926,"title":{},"name":{},"text":{"34":{}},"component":{}}],["https://repo1.maven.org/maven2",{"_index":3827,"title":{},"name":{},"text":{"38":{}},"component":{}}],["https://shop.domain.com/cart",{"_index":6067,"title":{},"name":{},"text":{"61":{}},"component":{}}],["https://www.apache.org/licenses/licens",{"_index":838,"title":{},"name":{},"text":{"7":{},"32":{}},"component":{}}],["https://www.eclipse.org/legal/epl",{"_index":837,"title":{},"name":{},"text":{"7":{}},"component":{}}],["httpsconfig",{"_index":5929,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpsconfig.addcustomizer(new",{"_index":5930,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpservlet",{"_index":1819,"title":{},"name":{},"text":{"24":{},"55":{},"57":{},"61":{},"67":{}},"component":{}}],["httpservletrequest",{"_index":2880,"title":{},"name":{},"text":{"34":{},"55":{}},"component":{}}],["httpservletrequest.getremoteaddr",{"_index":3147,"title":{},"name":{},"text":{"34":{}},"component":{}}],["httpservletrequest.getremoteport",{"_index":3148,"title":{},"name":{},"text":{"34":{}},"component":{}}],["httpservletrequest.issecur",{"_index":3149,"title":{},"name":{},"text":{"34":{}},"component":{}}],["httpservletrespons",{"_index":2882,"title":{},"name":{},"text":{"34":{},"48":{},"55":{},"61":{}},"component":{}}],["httpsession",{"_index":3517,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["httpsessionactivationlisten",{"_index":6664,"title":{},"name":{},"text":{"66":{}},"component":{}}],["httpsessionlisten",{"_index":3532,"title":{},"name":{},"text":{"37":{}},"component":{}}],["httpsessionlistener.destroy",{"_index":3408,"title":{},"name":{},"text":{"37":{}},"component":{}}],["httpstatus.bad_request_400",{"_index":6311,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpstatus.not_found_404",{"_index":6380,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpstatus.ok_200",{"_index":4665,"title":{},"name":{},"text":{"48":{}},"component":{}}],["httpstatus.payload_too_large_413",{"_index":6367,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpstatus.service_unavailable_503",{"_index":5762,"title":{},"name":{},"text":{"57":{}},"component":{}}],["httpstatus.upgrade_required_426",{"_index":6909,"title":{},"name":{},"text":{"67":{}},"component":{}}],["httpstream",{"_index":6337,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpstream.failed(throw",{"_index":6339,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpstream.succeed",{"_index":6338,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpuri",{"_index":5043,"title":{},"name":{},"text":{"49":{},"61":{},"62":{}},"component":{}}],["httpuri.build(request.gethttpuri()).path(\"/favicon.ico",{"_index":6455,"title":{},"name":{},"text":{"62":{}},"component":{}}],["httpuri.build(uri).path(newpath).asimmut",{"_index":6291,"title":{},"name":{},"text":{"61":{}},"component":{}}],["httpuri.from(\"http://localhost:8080/path",{"_index":4978,"title":{},"name":{},"text":{"49":{}},"component":{}}],["httpuri.from(\"http://localhost:8444/path",{"_index":5063,"title":{},"name":{},"text":{"50":{}},"component":{}}],["httpversion.http_2",{"_index":4979,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["httpversion.http_3",{"_index":5064,"title":{},"name":{},"text":{"50":{},"63":{}},"component":{}}],["hub",{"_index":31,"title":{},"name":{},"text":{"1":{}},"component":{}}],["human",{"_index":664,"title":{},"name":{},"text":{"7":{},"34":{}},"component":{}}],["hundr",{"_index":907,"title":{},"name":{},"text":{"8":{},"35":{},"52":{}},"component":{}}],["hunt",{"_index":4464,"title":{},"name":{},"text":{"47":{}},"component":{}}],["i.",{"_index":1277,"title":{},"name":{},"text":{"18":{},"25":{},"33":{},"34":{},"37":{},"42":{},"44":{},"45":{},"48":{},"52":{},"54":{},"61":{},"65":{}},"component":{}}],["i/o",{"_index":2473,"title":{"44":{},"52":{},"65":{},"44-1":{},"44-2":{},"44-3":{},"44-4":{},"44-5":{},"44-6":{}},"name":{},"text":{"33":{},"41":{},"44":{},"47":{},"48":{},"51":{},"52":{},"53":{},"61":{},"64":{},"65":{}},"component":{}}],["iana",{"_index":2873,"title":{},"name":{},"text":{"33":{}},"component":{}}],["icon",{"_index":872,"title":{},"name":{},"text":{"7":{},"61":{}},"component":{}}],["id",{"_index":378,"title":{"7-14":{},"13-1":{}},"name":{},"text":{"3":{},"7":{},"13":{},"23":{},"28":{},"31":{},"32":{},"33":{},"36":{},"37":{},"42":{},"43":{},"56":{},"66":{},"69":{},"71":{}},"component":{}}],["id=\"jsp",{"_index":2032,"title":{},"name":{},"text":{"28":{}},"component":{}}],["ide.xml",{"_index":1060,"title":{},"name":{},"text":{"13":{}},"component":{}}],["idea",{"_index":33,"title":{},"name":{},"text":{"1":{},"52":{}},"component":{}}],["ideal",{"_index":562,"title":{},"name":{},"text":{"4":{},"27":{},"38":{},"55":{}},"component":{}}],["ident",{"_index":807,"title":{},"name":{},"text":{"7":{},"23":{},"33":{},"36":{},"48":{},"66":{}},"component":{}}],["identif",{"_index":2769,"title":{},"name":{},"text":{"33":{}},"component":{}}],["identifi",{"_index":358,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"12":{},"23":{},"25":{},"28":{},"32":{},"37":{},"42":{},"48":{},"59":{},"61":{},"66":{}},"component":{}}],["identityservic",{"_index":1826,"title":{},"name":{},"text":{"24":{}},"component":{}}],["idiomat",{"_index":4262,"title":{},"name":{},"text":{"44":{}},"component":{}}],["idl",{"_index":2085,"title":{},"name":{},"text":{"28":{},"33":{},"37":{},"41":{},"44":{},"47":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{}},"component":{}}],["idle_timeout",{"_index":5308,"title":{},"name":{},"text":{"53":{}},"component":{}}],["idletimeout",{"_index":2850,"title":{},"name":{},"text":{"33":{},"41":{},"53":{},"56":{}},"component":{}}],["idmgr",{"_index":6550,"title":{},"name":{},"text":{"66":{}},"component":{}}],["idmgr.setsessionhousekeeper(housekeep",{"_index":6564,"title":{},"name":{},"text":{"66":{}},"component":{}}],["idmgr.setworkername(\"server3",{"_index":6553,"title":{},"name":{},"text":{"66":{}},"component":{}}],["idmgr.setworkername(\"server7",{"_index":6561,"title":{},"name":{},"text":{"66":{}},"component":{}}],["idn",{"_index":1446,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ie",{"_index":3222,"title":{},"name":{},"text":{"35":{},"37":{},"54":{},"56":{},"66":{}},"component":{}}],["ieclassid",{"_index":2076,"title":{},"name":{},"text":{"28":{}},"component":{}}],["ietf",{"_index":2684,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["iff",{"_index":6568,"title":{},"name":{},"text":{"66":{}},"component":{}}],["ignor",{"_index":882,"title":{},"name":{},"text":{"7":{},"19":{},"28":{},"34":{},"44":{},"56":{},"61":{},"67":{}},"component":{}}],["illeg",{"_index":4816,"title":{},"name":{},"text":{"48":{}},"component":{}}],["illegalargumentexcept",{"_index":4817,"title":{},"name":{},"text":{"48":{}},"component":{}}],["illegalstateexcept",{"_index":6346,"title":{},"name":{},"text":{"61":{}},"component":{}}],["illustr",{"_index":1815,"title":{},"name":{},"text":{"24":{},"42":{},"44":{}},"component":{}}],["imag",{"_index":636,"title":{"7-15":{}},"name":{},"text":{"7":{},"34":{},"44":{},"53":{},"61":{}},"component":{}}],["image::small_powered_by.gif[image,width=145",{"_index":857,"title":{},"name":{},"text":{"7":{}},"component":{}}],["immedi",{"_index":1023,"title":{},"name":{},"text":{"10":{},"33":{},"37":{},"44":{},"47":{},"48":{},"52":{},"53":{},"56":{},"61":{},"66":{}},"component":{}}],["immut",{"_index":6274,"title":{},"name":{},"text":{"61":{}},"component":{}}],["impact",{"_index":3218,"title":{},"name":{},"text":{"35":{},"41":{},"45":{}},"component":{}}],["imper",{"_index":3463,"title":{},"name":{},"text":{"37":{}},"component":{}}],["impl",{"_index":2024,"title":{},"name":{},"text":{"27":{},"36":{},"38":{},"41":{},"56":{},"58":{},"71":{}},"component":{}}],["implement",{"_index":102,"title":{"61-41":{},"66-5":{},"66-11":{},"67-1":{},"67-6":{}},"name":{},"text":{"1":{},"17":{},"23":{},"24":{},"26":{},"27":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["impli",{"_index":3285,"title":{},"name":{},"text":{"36":{},"38":{},"39":{},"41":{}},"component":{}}],["implicit",{"_index":3840,"title":{"67-8":{}},"name":{},"text":{"39":{},"42":{},"44":{},"57":{}},"component":{}}],["implicitli",{"_index":4307,"title":{},"name":{},"text":{"44":{},"49":{},"53":{},"57":{},"61":{},"62":{},"67":{}},"component":{}}],["import",{"_index":863,"title":{"30-4":{}},"name":{},"text":{"7":{},"13":{},"19":{},"20":{},"25":{},"30":{},"33":{},"34":{},"37":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"52":{},"55":{},"61":{},"62":{},"65":{},"66":{}},"component":{}}],["importcert",{"_index":2180,"title":{},"name":{},"text":{"30":{}},"component":{}}],["impos",{"_index":4576,"title":{},"name":{},"text":{"48":{},"59":{}},"component":{}}],["improv",{"_index":79,"title":{},"name":{},"text":{"1":{},"66":{}},"component":{}}],["in",{"_index":669,"title":{},"name":{},"text":{"7":{}},"component":{}}],["inact",{"_index":3425,"title":{},"name":{},"text":{"37":{},"52":{},"66":{}},"component":{}}],["incident",{"_index":1884,"title":{},"name":{},"text":{"25":{}},"component":{}}],["includ",{"_index":183,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"17":{},"20":{},"25":{},"28":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"41":{},"45":{},"48":{},"52":{},"53":{},"54":{},"55":{},"56":{},"59":{},"61":{},"66":{},"72":{}},"component":{}}],["include/exclud",{"_index":3086,"title":{},"name":{},"text":{"34":{},"56":{}},"component":{}}],["inclus",{"_index":40,"title":{},"name":{},"text":{"1":{},"17":{},"33":{}},"component":{}}],["incom",{"_index":989,"title":{},"name":{},"text":{"9":{},"25":{},"33":{},"34":{},"36":{},"44":{},"53":{},"61":{},"65":{}},"component":{}}],["incompat",{"_index":3636,"title":{},"name":{},"text":{"37":{},"48":{},"65":{}},"component":{}}],["incomplete/non",{"_index":1503,"title":{},"name":{},"text":{"20":{}},"component":{}}],["inconsist",{"_index":2120,"title":{},"name":{},"text":{"28":{}},"component":{}}],["incorpor",{"_index":5545,"title":{},"name":{},"text":{"56":{}},"component":{}}],["incorrectli",{"_index":3144,"title":{},"name":{},"text":{"34":{}},"component":{}}],["increas",{"_index":2008,"title":{},"name":{},"text":{"26":{},"33":{},"37":{},"52":{},"61":{},"66":{},"67":{}},"component":{}}],["incur",{"_index":4833,"title":{},"name":{},"text":{"48":{}},"component":{}}],["inde",{"_index":4766,"title":{},"name":{},"text":{"48":{}},"component":{}}],["indefinit",{"_index":3616,"title":{},"name":{},"text":{"37":{},"47":{}},"component":{}}],["indent",{"_index":1072,"title":{},"name":{},"text":{"13":{}},"component":{}}],["independ",{"_index":921,"title":{},"name":{},"text":{"8":{},"23":{},"34":{},"37":{},"43":{},"57":{},"61":{},"66":{}},"component":{}}],["indetermin",{"_index":3628,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["index",{"_index":572,"title":{"37-36":{}},"name":{"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"51":{},"64":{},"70":{}},"text":{"7":{},"37":{},"66":{}},"component":{}}],["index.adoc",{"_index":821,"title":{},"name":{},"text":{"7":{}},"component":{}}],["index.html",{"_index":1571,"title":{},"name":{},"text":{"20":{},"48":{},"61":{}},"component":{}}],["index.php",{"_index":3069,"title":{},"name":{},"text":{"34":{}},"component":{}}],["index.yaml",{"_index":3579,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["indic",{"_index":1435,"title":{},"name":{},"text":{"19":{},"28":{},"30":{},"32":{},"33":{},"34":{},"37":{},"44":{},"45":{},"47":{},"48":{},"54":{},"56":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["indirect",{"_index":3909,"title":{},"name":{},"text":{"41":{}},"component":{}}],["indirectli",{"_index":5255,"title":{},"name":{},"text":{"53":{}},"component":{}}],["individu",{"_index":731,"title":{},"name":{},"text":{"7":{},"11":{},"34":{},"38":{},"43":{},"66":{}},"component":{}}],["ineffici",{"_index":2470,"title":{},"name":{},"text":{"33":{},"44":{}},"component":{}}],["inetaddress.getbyname(\"jdk.java.net",{"_index":4045,"title":{},"name":{},"text":{"42":{}},"component":{}}],["inetsocketaddress(\"localhost",{"_index":4958,"title":{},"name":{},"text":{"49":{},"50":{},"66":{}},"component":{}}],["inetsocketaddress(host",{"_index":4151,"title":{},"name":{},"text":{"44":{},"52":{}},"component":{}}],["inf",{"_index":1358,"title":{},"name":{},"text":{"19":{},"20":{},"35":{},"55":{},"56":{}},"component":{}}],["inf/class",{"_index":1207,"title":{},"name":{},"text":{"17":{},"20":{},"61":{},"67":{}},"component":{}}],["inf/jetti",{"_index":1407,"title":{},"name":{},"text":{"19":{},"26":{}},"component":{}}],["inf/lib",{"_index":1208,"title":{},"name":{},"text":{"17":{},"20":{},"34":{},"56":{},"67":{}},"component":{}}],["inf/quickstart",{"_index":3223,"title":{},"name":{},"text":{"35":{}},"component":{}}],["inf/special.xml",{"_index":5538,"title":{},"name":{},"text":{"56":{}},"component":{}}],["inf/web.xml",{"_index":1579,"title":{},"name":{},"text":{"20":{},"54":{},"55":{},"56":{},"61":{}},"component":{}}],["infer",{"_index":3488,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["infinispan",{"_index":3331,"title":{"37-18":{},"37-19":{},"37-21":{},"37-22":{},"37-24":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["infinispanidletimeoutsec",{"_index":6772,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastor",{"_index":6535,"title":{"66-22":{}},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastore.setcache(localcach",{"_index":6780,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastore.setcache(remotecach",{"_index":6806,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastore.setgraceperiodsec(3600",{"_index":6785,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastore.setinfinispanidletimeoutsec(0",{"_index":6782,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastore.setquerymanager(new",{"_index":6783,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastore.setsaveperiodsec(0",{"_index":6786,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastore.setserialization(fals",{"_index":6781,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastore.setserialization(tru",{"_index":6807,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessiondatastorefactori",{"_index":6766,"title":{},"name":{},"text":{"66":{}},"component":{}}],["infinispansessionlegacyconvert",{"_index":3548,"title":{},"name":{},"text":{"37":{}},"component":{}}],["infinit",{"_index":4706,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["influenc",{"_index":5458,"title":{},"name":{},"text":{"56":{}},"component":{}}],["info",{"_index":695,"title":{},"name":{},"text":{"7":{},"13":{},"20":{},"28":{},"34":{},"36":{},"41":{},"45":{},"61":{},"71":{}},"component":{}}],["info.class",{"_index":3828,"title":{},"name":{},"text":{"39":{}},"component":{}}],["info.java",{"_index":5196,"title":{},"name":{},"text":{"53":{}},"component":{}}],["inform",{"_index":372,"title":{"41-3":{}},"name":{},"text":{"3":{},"7":{},"9":{},"13":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"30":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"44":{},"45":{},"48":{},"49":{},"52":{},"53":{},"55":{},"56":{},"57":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["infrastructur",{"_index":1663,"title":{"37-34":{},"37-35":{}},"name":{},"text":{"23":{},"26":{},"66":{}},"component":{}}],["infrequ",{"_index":2656,"title":{},"name":{},"text":{"33":{},"37":{},"66":{}},"component":{}}],["ing",{"_index":6558,"title":{},"name":{},"text":{"66":{}},"component":{}}],["inherit",{"_index":2860,"title":{},"name":{},"text":{"33":{},"41":{},"43":{},"44":{},"61":{},"65":{}},"component":{}}],["inheritablethreadloc",{"_index":2864,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ini",{"_index":1521,"title":{"32-14":{},"32-15":{},"38-4":{}},"name":{},"text":{"20":{},"23":{},"24":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{}},"component":{}}],["init",{"_index":1320,"title":{"19-14":{}},"name":{},"text":{"19":{},"28":{},"61":{},"66":{},"67":{}},"component":{}}],["initi",{"_index":1524,"title":{"53-6":{},"53-7":{}},"name":{},"text":{"20":{},"33":{},"34":{},"36":{},"37":{},"44":{},"48":{},"53":{},"56":{},"57":{},"59":{},"61":{},"65":{},"67":{}},"component":{}}],["innov",{"_index":3,"title":{"1-2":{}},"name":{},"text":{"1":{}},"component":{}}],["input",{"_index":4620,"title":{},"name":{},"text":{"48":{},"53":{},"61":{}},"component":{}}],["inputbuffers",{"_index":5261,"title":{},"name":{},"text":{"53":{}},"component":{}}],["inputstream",{"_index":4286,"title":{},"name":{},"text":{"44":{},"48":{},"53":{},"57":{},"61":{}},"component":{}}],["inputstream.read",{"_index":5697,"title":{},"name":{},"text":{"57":{}},"component":{}}],["inputstream.read(byt",{"_index":5253,"title":{},"name":{},"text":{"53":{}},"component":{}}],["inputstreamrequestcont",{"_index":4617,"title":{},"name":{},"text":{"48":{}},"component":{}}],["inputstreamrequestcontent(\"text/plain",{"_index":4618,"title":{},"name":{},"text":{"48":{}},"component":{}}],["inputstreamresponselisten",{"_index":4661,"title":{},"name":{},"text":{"48":{}},"component":{}}],["insecur",{"_index":3819,"title":{},"name":{},"text":{"38":{}},"component":{}}],["insensit",{"_index":1361,"title":{},"name":{},"text":{"19":{},"59":{}},"component":{}}],["insert",{"_index":2254,"title":{},"name":{},"text":{"31":{},"33":{},"54":{},"72":{}},"component":{}}],["inserthandl",{"_index":2253,"title":{},"name":{},"text":{"31":{}},"component":{}}],["insertionmark",{"_index":5325,"title":{},"name":{},"text":{"54":{}},"component":{}}],["insid",{"_index":1939,"title":{"37-35":{}},"name":{},"text":{"26":{},"34":{},"37":{},"48":{},"53":{},"54":{},"66":{}},"component":{}}],["insight",{"_index":131,"title":{},"name":{},"text":{"1":{}},"component":{}}],["insist",{"_index":4255,"title":{},"name":{},"text":{"44":{}},"component":{}}],["inspect",{"_index":2392,"title":{"53-7":{}},"name":{},"text":{"33":{},"35":{},"36":{},"53":{},"61":{}},"component":{}}],["instal",{"_index":691,"title":{"20-3":{}},"name":{},"text":{"7":{},"8":{},"14":{},"15":{},"16":{},"18":{},"20":{},"33":{},"34":{},"37":{},"48":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["instanc",{"_index":775,"title":{},"name":{},"text":{"7":{},"8":{},"17":{},"19":{},"24":{},"26":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["instanceof",{"_index":5702,"title":{},"name":{},"text":{"57":{}},"component":{}}],["instanti",{"_index":2223,"title":{},"name":{},"text":{"31":{},"32":{},"37":{},"38":{},"39":{},"42":{},"48":{},"49":{},"50":{},"53":{},"61":{},"66":{}},"component":{}}],["instead",{"_index":367,"title":{},"name":{},"text":{"3":{},"7":{},"18":{},"19":{},"23":{},"28":{},"33":{},"34":{},"37":{},"38":{},"43":{},"47":{},"48":{},"52":{},"55":{},"56":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["instruct",{"_index":983,"title":{},"name":{},"text":{"9":{},"20":{},"37":{},"66":{},"69":{}},"component":{}}],["insuffici",{"_index":6393,"title":{},"name":{},"text":{"61":{}},"component":{}}],["int",{"_index":1076,"title":{},"name":{},"text":{"13":{},"34":{},"38":{},"44":{},"45":{},"48":{},"52":{},"53":{},"57":{},"61":{},"65":{}},"component":{}}],["int[]{100",{"_index":6842,"title":{},"name":{},"text":{"66":{}},"component":{}}],["integ",{"_index":1953,"title":{},"name":{},"text":{"26":{},"37":{},"56":{},"62":{},"66":{}},"component":{}}],["integr",{"_index":82,"title":{"24-5":{}},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"12":{},"23":{},"24":{},"31":{},"47":{},"56":{}},"component":{}}],["intellij",{"_index":1054,"title":{},"name":{},"text":{"13":{}},"component":{}}],["intellij.xml",{"_index":1058,"title":{},"name":{},"text":{"13":{}},"component":{}}],["intellij’",{"_index":1059,"title":{},"name":{},"text":{"13":{}},"component":{}}],["intend",{"_index":4767,"title":{},"name":{},"text":{"48":{}},"component":{}}],["intent",{"_index":4881,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["inter",{"_index":5081,"title":{},"name":{},"text":{"52":{}},"component":{}}],["interact",{"_index":519,"title":{},"name":{},"text":{"4":{},"13":{},"24":{},"37":{},"38":{},"42":{},"45":{},"49":{},"52":{},"53":{},"61":{},"62":{}},"component":{}}],["intercept",{"_index":6880,"title":{},"name":{},"text":{"67":{}},"component":{}}],["interest",{"_index":353,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"10":{},"12":{},"31":{},"41":{},"44":{},"49":{},"50":{},"51":{},"52":{},"53":{},"61":{},"62":{},"64":{},"65":{}},"component":{}}],["interfac",{"_index":1192,"title":{},"name":{},"text":{"17":{},"19":{},"20":{},"24":{},"25":{},"26":{},"34":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"52":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"69":{}},"component":{}}],["interfer",{"_index":6145,"title":{},"name":{},"text":{"61":{}},"component":{}}],["interim",{"_index":5893,"title":{"61-49":{}},"name":{},"text":{"61":{}},"component":{}}],["interimhead",{"_index":6375,"title":{},"name":{},"text":{"61":{}},"component":{}}],["interleav",{"_index":1116,"title":{},"name":{},"text":{"13":{}},"component":{}}],["intermediari",{"_index":2932,"title":{},"name":{},"text":{"34":{}},"component":{}}],["intermitt",{"_index":923,"title":{},"name":{},"text":{"8":{}},"component":{}}],["intern",{"_index":540,"title":{},"name":{},"text":{"4":{},"6":{},"26":{},"30":{},"33":{},"38":{},"39":{},"43":{},"44":{},"46":{},"47":{},"48":{},"56":{},"61":{}},"component":{}}],["internet",{"_index":1409,"title":{},"name":{},"text":{"19":{},"28":{},"33":{},"38":{},"52":{},"59":{}},"component":{}}],["interpret",{"_index":1695,"title":{},"name":{},"text":{"23":{},"34":{},"35":{},"38":{},"52":{},"56":{},"59":{},"61":{},"64":{},"65":{}},"component":{}}],["interrog",{"_index":6710,"title":{},"name":{},"text":{"66":{}},"component":{}}],["interv",{"_index":1337,"title":{},"name":{},"text":{"19":{},"20":{},"28":{},"37":{},"56":{},"66":{}},"component":{}}],["intervalsec",{"_index":6557,"title":{},"name":{},"text":{"66":{}},"component":{}}],["intra",{"_index":4754,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["intrins",{"_index":4259,"title":{},"name":{},"text":{"44":{},"61":{}},"component":{}}],["introduc",{"_index":72,"title":{"49-1":{},"50-1":{}},"name":{},"text":{"1":{},"32":{},"33":{},"34":{},"36":{},"38":{},"39":{},"47":{},"48":{},"52":{},"59":{}},"component":{}}],["introduct",{"_index":4497,"title":{"48-1":{},"62-1":{},"63-1":{}},"name":{},"text":{"48":{},"61":{},"70":{}},"component":{}}],["invalid",{"_index":1015,"title":{},"name":{},"text":{"10":{},"33":{},"34":{},"37":{},"41":{},"48":{},"53":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["invalidateonshutdown",{"_index":6624,"title":{},"name":{},"text":{"66":{}},"component":{}}],["invert",{"_index":6264,"title":{},"name":{},"text":{"61":{}},"component":{}}],["invoc",{"_index":1243,"title":{},"name":{},"text":{"17":{},"25":{},"41":{},"44":{},"47":{},"48":{},"53":{},"54":{},"61":{}},"component":{}}],["invocationtyp",{"_index":4235,"title":{},"name":{},"text":{"44":{}},"component":{}}],["invocationtype.non_block",{"_index":4237,"title":{},"name":{},"text":{"44":{}},"component":{}}],["invok",{"_index":1235,"title":{},"name":{},"text":{"17":{},"18":{},"28":{},"38":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"68":{},"72":{}},"component":{}}],["invokeappl",{"_index":6518,"title":{},"name":{},"text":{"65":{}},"component":{}}],["invokeapplication(request",{"_index":6516,"title":{},"name":{},"text":{"65":{}},"component":{}}],["involv",{"_index":583,"title":{},"name":{},"text":{"6":{},"41":{},"61":{}},"component":{}}],["io",{"_index":3709,"title":{},"name":{"44":{},"52":{},"65":{}},"text":{"38":{},"41":{}},"component":{}}],["ioexcept",{"_index":4146,"title":{},"name":{},"text":{"44":{},"55":{},"61":{}},"component":{}}],["ioexception(\"unexpect",{"_index":4668,"title":{},"name":{},"text":{"48":{}},"component":{}}],["ip",{"_index":1413,"title":{},"name":{},"text":{"19":{},"30":{},"33":{},"34":{},"36":{},"45":{},"48":{},"61":{},"65":{},"67":{}},"component":{}}],["ip:port",{"_index":5928,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ipv4",{"_index":2164,"title":{},"name":{},"text":{"30":{},"65":{}},"component":{}}],["ipv6",{"_index":2166,"title":{},"name":{},"text":{"30":{},"48":{},"65":{}},"component":{}}],["irrelev",{"_index":2241,"title":{},"name":{},"text":{"31":{}},"component":{}}],["isen",{"_index":4399,"title":{},"name":{},"text":{"45":{}},"component":{}}],["isfoo",{"_index":4056,"title":{},"name":{},"text":{"42":{}},"component":{}}],["isidinuse(str",{"_index":6567,"title":{},"name":{},"text":{"66":{}},"component":{}}],["isn’t",{"_index":817,"title":{},"name":{},"text":{"7":{}},"component":{}}],["iso",{"_index":3258,"title":{},"name":{},"text":{"36":{}},"component":{}}],["isol",{"_index":943,"title":{},"name":{},"text":{"8":{},"61":{}},"component":{}}],["isolated(\"access",{"_index":942,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ispassiv",{"_index":6662,"title":{},"name":{},"text":{"66":{}},"component":{}}],["ispng",{"_index":5230,"title":{},"name":{},"text":{"53":{}},"component":{}}],["ispost",{"_index":6397,"title":{},"name":{},"text":{"61":{}},"component":{}}],["issu",{"_index":28,"title":{"3-1":{},"4-9":{},"6-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"8":{},"10":{},"11":{},"12":{},"28":{},"30":{},"31":{},"34":{},"37":{},"38":{},"41":{},"47":{},"48":{},"56":{},"57":{},"61":{},"67":{}},"component":{}}],["it'",{"_index":5132,"title":{},"name":{},"text":{"52":{},"62":{}},"component":{}}],["ital",{"_index":6258,"title":{},"name":{},"text":{"61":{}},"component":{}}],["item",{"_index":1670,"title":{"42-10":{}},"name":{},"text":{"23":{},"28":{},"30":{},"34":{},"37":{},"66":{}},"component":{}}],["iter",{"_index":3984,"title":{},"name":{},"text":{"41":{},"44":{},"53":{},"61":{},"65":{}},"component":{}}],["iteratingcallback",{"_index":4215,"title":{},"name":{},"text":{"44":{},"53":{},"65":{}},"component":{}}],["iteratingcallback.iter",{"_index":4216,"title":{},"name":{},"text":{"44":{}},"component":{}}],["iteratingcallback.process",{"_index":4217,"title":{},"name":{},"text":{"44":{}},"component":{}}],["itself",{"_index":344,"title":{},"name":{},"text":{"3":{},"8":{},"12":{},"18":{},"19":{},"23":{},"25":{},"36":{},"38":{},"44":{},"45":{},"47":{},"48":{},"52":{},"53":{},"56":{},"61":{},"65":{},"66":{}},"component":{}}],["it’",{"_index":75,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"30":{},"31":{},"34":{},"38":{},"42":{},"48":{},"56":{},"61":{}},"component":{}}],["j2ee",{"_index":1969,"title":{},"name":{},"text":{"26":{}},"component":{}}],["j2me",{"_index":291,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jaa",{"_index":1634,"title":{"23":{},"23-2":{},"23-3":{},"23-4":{}},"name":{},"text":{"21":{},"23":{},"45":{}},"component":{}}],["jaas.xml",{"_index":1667,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jakarta",{"_index":327,"title":{},"name":{},"text":{"2":{},"7":{},"17":{},"19":{},"20":{},"24":{},"26":{},"33":{},"36":{},"37":{},"54":{},"55":{},"56":{},"57":{},"61":{},"67":{}},"component":{}}],["jakarta.servlet",{"_index":965,"title":{},"name":{},"text":{"8":{},"55":{}},"component":{}}],["jakarta.servlet.http.cooki",{"_index":4809,"title":{},"name":{},"text":{"48":{}},"component":{}}],["jakarta.servlet.http.httpservlet",{"_index":5400,"title":{},"name":{},"text":{"55":{}},"component":{}}],["jakarta.servlet.http.httpservletrequest",{"_index":5371,"title":{},"name":{},"text":{"55":{},"61":{}},"component":{}}],["jakarta.servlet.http.httpservletrespons",{"_index":5372,"title":{},"name":{},"text":{"55":{}},"component":{}}],["jakarta.servlet.servletcontaineriniti",{"_index":1172,"title":{},"name":{},"text":{"17":{}},"component":{}}],["jakarta.servlet.servletexcept",{"_index":5373,"title":{},"name":{},"text":{"55":{}},"component":{}}],["jakarta.websocket",{"_index":6852,"title":{},"name":{},"text":{"67":{}},"component":{}}],["jakarta.websocket.endpoint",{"_index":6863,"title":{},"name":{},"text":{"67":{}},"component":{}}],["jakarta.websocket.server.serverapplicationconfig",{"_index":6864,"title":{},"name":{},"text":{"67":{}},"component":{}}],["jakarta.websocket.server.servercontain",{"_index":6855,"title":{},"name":{},"text":{"67":{}},"component":{}}],["jakartaauthent",{"_index":1797,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jakartae",{"_index":241,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jakartawebsocketservletcontaineriniti",{"_index":6856,"title":{},"name":{},"text":{"67":{}},"component":{}}],["jakartawebsocketservletcontainerinitializer.configur",{"_index":6862,"title":{},"name":{},"text":{"67":{}},"component":{}}],["jakartawebsocketservletcontainerinitializer.configure(handl",{"_index":6861,"title":{},"name":{},"text":{"67":{}},"component":{}}],["januari",{"_index":210,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jar",{"_index":334,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"17":{},"18":{},"19":{},"20":{},"24":{},"25":{},"26":{},"27":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"54":{},"55":{},"56":{},"61":{},"67":{}},"component":{}}],["jar$|.*/bar",{"_index":1204,"title":{},"name":{},"text":{"17":{}},"component":{}}],["jar$|.*/class",{"_index":1205,"title":{},"name":{},"text":{"17":{}},"component":{}}],["jar$|.*/javax.servlet.jsp.jstl",{"_index":2022,"title":{},"name":{},"text":{"27":{}},"component":{}}],["jar$|.*/jsf",{"_index":2025,"title":{},"name":{},"text":{"27":{}},"component":{}}],["jar$|.*/org.apache.taglibs.taglib",{"_index":2023,"title":{},"name":{},"text":{"27":{}},"component":{}}],["jar$|.*jakarta.servlet.jsp.jstl",{"_index":2420,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jar$|.jakarta.servlet.jsp.jstl",{"_index":5487,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jars,resourc",{"_index":2433,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jar|.taglib",{"_index":5488,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jasper",{"_index":2026,"title":{},"name":{},"text":{"28":{}},"component":{}}],["jaspi",{"_index":1786,"title":{"24":{},"24-2":{},"24-3":{},"24-4":{}},"name":{},"text":{"24":{},"57":{}},"component":{}}],["jaspi/jakarta.authent",{"_index":1804,"title":{},"name":{},"text":{"24":{}},"component":{}}],["java",{"_index":44,"title":{"28":{},"13-2":{},"57-1":{},"58-1":{}},"name":{},"text":{"1":{},"2":{},"7":{},"8":{},"11":{},"13":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"61":{},"65":{},"68":{},"69":{},"71":{}},"component":{}}],["java'",{"_index":4092,"title":{},"name":{},"text":{"43":{}},"component":{}}],["java.bas",{"_index":4052,"title":{},"name":{},"text":{"42":{}},"component":{}}],["java.hom",{"_index":3668,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.io.ioexcept",{"_index":5374,"title":{},"name":{},"text":{"55":{}},"component":{}}],["java.io.tmpdir",{"_index":2105,"title":{},"name":{},"text":{"28":{},"38":{}},"component":{}}],["java.lang.boolean",{"_index":1963,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.lang.byt",{"_index":1962,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.lang.charact",{"_index":1961,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.lang.doubl",{"_index":1958,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.lang.float",{"_index":1957,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.lang.illegalaccessexcept",{"_index":4048,"title":{},"name":{},"text":{"42":{}},"component":{}}],["java.lang.integ",{"_index":1956,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.lang.long",{"_index":1959,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.lang.object",{"_index":4428,"title":{},"name":{},"text":{"45":{},"48":{}},"component":{}}],["java.lang.short",{"_index":1960,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.lang.str",{"_index":1955,"title":{},"name":{},"text":{"26":{},"42":{},"61":{}},"component":{}}],["java.lang.system",{"_index":4032,"title":{},"name":{},"text":{"42":{}},"component":{}}],["java.net.cookiestor",{"_index":4782,"title":{},"name":{},"text":{"48":{}},"component":{}}],["java.net.inetaddress",{"_index":4074,"title":{},"name":{},"text":{"42":{}},"component":{}}],["java.net.url",{"_index":4073,"title":{},"name":{},"text":{"42":{}},"component":{}}],["java.nio.channels.datagramchannel",{"_index":5952,"title":{},"name":{},"text":{"61":{}},"component":{}}],["java.nio.channels.selector",{"_index":4142,"title":{},"name":{},"text":{"44":{}},"component":{}}],["java.nio.channels.serversocketchannel",{"_index":5951,"title":{},"name":{},"text":{"61":{}},"component":{}}],["java.nio.channels.socketchannel",{"_index":4143,"title":{},"name":{},"text":{"44":{}},"component":{}}],["java.nio.fil",{"_index":4572,"title":{},"name":{},"text":{"48":{}},"component":{}}],["java.nio.file.path",{"_index":4611,"title":{},"name":{},"text":{"48":{}},"component":{}}],["java.nio.selector",{"_index":5108,"title":{},"name":{},"text":{"52":{}},"component":{}}],["java.rmi.server.hostnam",{"_index":1881,"title":{},"name":{},"text":{"25":{},"33":{},"45":{}},"component":{}}],["java.runtime.nam",{"_index":3677,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.runtime.vers",{"_index":3678,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.security.auth.login.config",{"_index":1668,"title":{},"name":{},"text":{"23":{}},"component":{}}],["java.sql",{"_index":3837,"title":{},"name":{},"text":{"39":{}},"component":{}}],["java.sql.connect",{"_index":6266,"title":{},"name":{},"text":{"61":{}},"component":{}}],["java.tim",{"_index":2596,"title":{},"name":{},"text":{"33":{}},"component":{}}],["java.time.zoneid",{"_index":2387,"title":{},"name":{},"text":{"33":{}},"component":{}}],["java.util.concurrent.executor",{"_index":4451,"title":{},"name":{},"text":{"47":{},"52":{}},"component":{}}],["java.util.concurrent.executors$delegatedexecutorservic",{"_index":4051,"title":{},"name":{},"text":{"42":{}},"component":{}}],["java.util.concurrent.executorservic",{"_index":4053,"title":{},"name":{},"text":{"42":{},"47":{}},"component":{}}],["java.util.concurrent.locks.condit",{"_index":4607,"title":{},"name":{},"text":{"48":{}},"component":{}}],["java.util.concurrent.timeoutexcept",{"_index":4580,"title":{},"name":{},"text":{"48":{}},"component":{}}],["java.util.eventlisten",{"_index":4115,"title":{},"name":{},"text":{"43":{}},"component":{}}],["java.util.locale.forlanguagetag",{"_index":2597,"title":{},"name":{},"text":{"33":{}},"component":{}}],["java.util.log",{"_index":3235,"title":{"36-9":{}},"name":{},"text":{"36":{}},"component":{}}],["java.util.logging.config.fil",{"_index":3286,"title":{},"name":{},"text":{"36":{}},"component":{}}],["java.util.map",{"_index":4058,"title":{},"name":{},"text":{"42":{}},"component":{}}],["java.vers",{"_index":3688,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.version.major",{"_index":3690,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.version.micro",{"_index":3691,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.version.minor",{"_index":3692,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.version.platform",{"_index":3693,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.version=21.0.3",{"_index":3725,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.vm.info",{"_index":3675,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.vm.nam",{"_index":3673,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.vm.vendor",{"_index":3670,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java.vm.vers",{"_index":3672,"title":{},"name":{},"text":{"38":{}},"component":{}}],["java:comp",{"_index":1948,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java:comp/env",{"_index":1734,"title":{},"name":{},"text":{"23":{},"26":{}},"component":{}}],["java:comp/env/${dnjndinam",{"_index":1731,"title":{},"name":{},"text":{"23":{}},"component":{}}],["java:comp/env/jdbc/us",{"_index":1973,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java:comp/env/jdbc/xxx",{"_index":1971,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java:comp/env/jms/inqueu",{"_index":1979,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java:comp/env/mail/sess",{"_index":1987,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java:comp/env/mail/smtp",{"_index":1994,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java:comp/env/myspecialvalu",{"_index":1952,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java:comp/usertransact",{"_index":1996,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java_home/bin/keytool",{"_index":2129,"title":{},"name":{},"text":{"30":{}},"component":{}}],["java_home/conf/management/jmxremote.access",{"_index":4372,"title":{},"name":{},"text":{"45":{}},"component":{}}],["java_home/conf/management/jmxremote.password.templ",{"_index":4376,"title":{},"name":{},"text":{"45":{}},"component":{}}],["javaag",{"_index":3658,"title":{},"name":{},"text":{"38":{}},"component":{}}],["javabean",{"_index":4054,"title":{},"name":{},"text":{"42":{}},"component":{}}],["javadoc",{"_index":1070,"title":{},"name":{},"text":{"13":{},"34":{},"41":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["javae",{"_index":244,"title":{},"name":{},"text":{"2":{}},"component":{}}],["javaencod",{"_index":2082,"title":{},"name":{},"text":{"28":{}},"component":{}}],["javamail",{"_index":1991,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javascript",{"_index":6081,"title":{},"name":{},"text":{"61":{}},"component":{}}],["javaserv",{"_index":2012,"title":{"27":{},"29":{}},"name":{},"text":{"29":{}},"component":{}}],["javax",{"_index":325,"title":{},"name":{},"text":{"2":{},"19":{},"34":{},"58":{}},"component":{}}],["javax.activ",{"_index":1990,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javax.jms.connectionfactori",{"_index":1977,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javax.mail",{"_index":1989,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javax.mail.sess",{"_index":1980,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javax.management.remote.jmxconnectorserv",{"_index":1892,"title":{},"name":{},"text":{"25":{}},"component":{}}],["javax.naming.refer",{"_index":1965,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javax.naming.referenc",{"_index":1966,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javax.net.ssl.sslparameters#setendpointidentificationalgorithm(str",{"_index":2770,"title":{},"name":{},"text":{"33":{}},"component":{}}],["javax.security.auth.spi.loginmodul",{"_index":1682,"title":{},"name":{},"text":{"23":{}},"component":{}}],["javax.servlet",{"_index":971,"title":{},"name":{},"text":{"8":{}},"component":{}}],["javax.servlet.context.tempdir",{"_index":2104,"title":{},"name":{},"text":{"28":{}},"component":{}}],["javax.servlet.servletcontaineriniti",{"_index":1171,"title":{},"name":{},"text":{"17":{}},"component":{}}],["javax.sql.datasourc",{"_index":1729,"title":{},"name":{},"text":{"23":{},"26":{},"39":{}},"component":{}}],["javax.util.serviceload",{"_index":1193,"title":{},"name":{},"text":{"17":{}},"component":{}}],["javax.websocket",{"_index":260,"title":{},"name":{},"text":{"2":{},"34":{},"53":{},"67":{}},"component":{}}],["javaxwebsocketservletcontaineriniti",{"_index":6860,"title":{},"name":{},"text":{"67":{}},"component":{}}],["java’",{"_index":1837,"title":{},"name":{},"text":{"25":{},"47":{}},"component":{}}],["jcl",{"_index":3283,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jconsol",{"_index":4393,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jdbc",{"_index":1397,"title":{"37-14":{}},"name":{},"text":{"19":{},"23":{},"26":{},"36":{},"37":{},"38":{},"39":{},"40":{},"61":{},"66":{}},"component":{}}],["jdbc.ini",{"_index":3464,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jdbc/employe",{"_index":2004,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jdbc/myd",{"_index":1400,"title":{},"name":{},"text":{"19":{},"26":{},"40":{}},"component":{}}],["jdbc/user",{"_index":1972,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jdbc/workforc",{"_index":2003,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jdbc:mysql://127.0.0.1:3306/sessions?user=sessionsadmin",{"_index":3470,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["jdbc:mysql://localhost:3306/databasenam",{"_index":1401,"title":{},"name":{},"text":{"19":{}},"component":{}}],["jdbcloginmodul",{"_index":1643,"title":{"23-6":{}},"name":{},"text":{},"component":{}}],["jdbcsessiondatastor",{"_index":6531,"title":{"66-18":{}},"name":{},"text":{"66":{}},"component":{}}],["jdbcsessiondatastorefactori",{"_index":6706,"title":{},"name":{},"text":{"66":{}},"component":{}}],["jdk",{"_index":883,"title":{"8-1":{}},"name":{},"text":{"8":{},"30":{},"34":{},"39":{},"42":{},"45":{},"48":{},"61":{}},"component":{}}],["jdk.internal.loader.classloaders$appclassloader@4f2410ac",{"_index":3971,"title":{},"name":{},"text":{"41":{}},"component":{}}],["jdk.internal.loader.classloaders$platformclassloader@c8ff6dd",{"_index":3976,"title":{},"name":{},"text":{"41":{}},"component":{}}],["jdk.java.net",{"_index":4044,"title":{},"name":{},"text":{"42":{}},"component":{}}],["jdk15to18",{"_index":2821,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["jdk15to18/${bouncycastle.version}|lib/bouncycastle/bcpkix",{"_index":2820,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jdk15to18/${bouncycastle.version}|lib/bouncycastle/bcprov",{"_index":2824,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jdk15to18/${bouncycastle.version}|lib/bouncycastle/bcutil",{"_index":2826,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jdk15to18/1.78.1/bcpkix",{"_index":2901,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jdk15to18/1.78.1/bcprov",{"_index":2905,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jdk15to18/1.78.1/bcutil",{"_index":2908,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jdk9",{"_index":331,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jdt",{"_index":2052,"title":{},"name":{},"text":{"28":{}},"component":{}}],["jdwp",{"_index":6932,"title":{},"name":{},"text":{"69":{}},"component":{}}],["jep",{"_index":4501,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["jetti",{"_index":6,"title":{"2":{},"3":{},"5":{},"8":{},"14":{},"15":{},"16":{},"21":{},"22":{},"31":{},"32":{},"34":{},"36":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"54":{},"56":{},"57":{},"58":{},"70":{},"2-4":{},"3-2":{},"4-5":{},"4-6":{},"4-7":{},"18-2":{},"19-5":{},"20-2":{},"20-3":{},"20-4":{},"24-5":{},"24-6":{},"26-9":{},"34-22":{},"34-25":{},"37-25":{},"37-34":{},"37-35":{},"38-10":{},"38-12":{},"38-13":{},"38-14":{},"41-6":{},"42-1":{},"43-1":{},"43-2":{},"44-1":{},"44-2":{},"44-3":{},"44-4":{},"44-5":{},"44-6":{},"45-6":{},"53-8":{},"55-1":{},"55-5":{},"56-6":{},"57-4":{},"61-21":{},"61-23":{},"67-6":{},"71-1":{}},"name":{"54":{},"55":{},"56":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"71":{},"72":{}},"component":{"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{}}}],["jetty'",{"_index":6034,"title":{},"name":{},"text":{"61":{}},"component":{}}],["jetty(12.0.10",{"_index":2668,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty,howev",{"_index":5416,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jetty.alpn.defaultprotocol=http/1.1",{"_index":2338,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.alpn.protocols=h2,http/1.1",{"_index":2337,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bas",{"_index":1516,"title":{},"name":{},"text":{"20":{},"23":{},"33":{},"38":{}},"component":{}}],["jetty.base.uri",{"_index":3694,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base.uri=file:///path/to/jetty.hom",{"_index":3727,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base.uri}/lib/dependency.jar",{"_index":2432,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.base.uri}/resourc",{"_index":2434,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.base/etc",{"_index":1686,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jetty.base/etc/login.conf",{"_index":1691,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jetty.base/start.d/jaas.ini",{"_index":1671,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jetty.base=/path/to/jetty.hom",{"_index":3726,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base}/lib/bouncycastl",{"_index":2899,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/lib/bouncycastle/bcpkix",{"_index":2903,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/lib/bouncycastle/bcprov",{"_index":2906,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/lib/bouncycastle/bcutil",{"_index":2909,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/lib/ext",{"_index":1941,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jetty.base}/lib/postgresql",{"_index":3710,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base}/modules/*.mod",{"_index":3799,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base}/resourc",{"_index":1530,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{}},"component":{}}],["jetty.base}/resources/jetti",{"_index":1532,"title":{},"name":{},"text":{"20":{},"34":{},"36":{}},"component":{}}],["jetty.base}/start.d",{"_index":1519,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{}},"component":{}}],["jetty.base}/start.d/*.ini",{"_index":3808,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base}/start.d/ee10",{"_index":1584,"title":{},"name":{},"text":{"20":{}},"component":{}}],["jetty.base}/start.d/http",{"_index":3153,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/start.d/http.ini",{"_index":1525,"title":{},"name":{},"text":{"20":{},"36":{},"38":{}},"component":{}}],["jetty.base}/start.d/https.ini",{"_index":2894,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/start.d/jvm.ini",{"_index":3665,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base}/start.d/postgresql.ini",{"_index":3667,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base}/start.d/proxi",{"_index":3160,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/start.d/server.ini",{"_index":3666,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base}/start.d/ssl.ini",{"_index":2895,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/start.d/test",{"_index":2897,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.base}/start.ini",{"_index":3807,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.base}/webapp",{"_index":1586,"title":{},"name":{},"text":{"20":{}},"component":{}}],["jetty.build",{"_index":3687,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.bytebufferpool.factor=4096",{"_index":2362,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bytebufferpool.maxbuckets",{"_index":2364,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bytebufferpool.maxcapacity=65536",{"_index":2361,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bytebufferpool.maxdirectmemori",{"_index":2374,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bytebufferpool.maxdirectmemory=0",{"_index":2369,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bytebufferpool.maxheapmemori",{"_index":2372,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bytebufferpool.maxheapmemory=0",{"_index":2368,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bytebufferpool.mincapacity=0",{"_index":2360,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.bytebufferpool.statisticsenabled=fals",{"_index":2371,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.consol",{"_index":2381,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.allowcredenti",{"_index":2409,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.allowcredentials=fals",{"_index":2396,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.allowedheaders=cont",{"_index":2397,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.allowedmethods=get,post,head",{"_index":2398,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.allowedoriginpattern",{"_index":2400,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.allowedtimingoriginpattern",{"_index":2401,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.delivernonallowedoriginrequests=tru",{"_index":2405,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.delivernonallowedoriginwebsocketupgraderequests=fals",{"_index":2406,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.deliverpreflightrequests=fals",{"_index":2404,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.exposedhead",{"_index":2407,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.crossorigin.preflightmaxage=60",{"_index":2408,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.configurationclass",{"_index":2418,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.containerscanjarpattern=.*/jakarta.servlet",{"_index":2419,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.defaultsdescriptorpath=${jetty.base}/etc/webdefault",{"_index":2412,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.extractwars=tru",{"_index":2415,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.monitoreddir",{"_index":2424,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.monitoreddir=webapp",{"_index":2411,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.parentloaderpriority=tru",{"_index":2417,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.scaninterv",{"_index":1336,"title":{},"name":{},"text":{"19":{},"33":{}},"component":{}}],["jetty.deploy.scaninterval=0",{"_index":2414,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.scaninterval=1",{"_index":1343,"title":{},"name":{},"text":{"19":{}},"component":{}}],["jetty.deploy.servletcontainerinitializerexclusionpattern",{"_index":2422,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.servletcontainerinitializerord",{"_index":2423,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploy.webinfscanjarpattern",{"_index":2421,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.deploymod",{"_index":5430,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jetty.hom",{"_index":1506,"title":{},"name":{},"text":{"20":{},"38":{}},"component":{}}],["jetty.home.uri",{"_index":3695,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home.uri=file:///path/to/jetty.hom",{"_index":3729,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home/start.jar",{"_index":5448,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jetty.home=/path/to/jetty.hom",{"_index":3728,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home}/etc/jetti",{"_index":3712,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home}/etc/jetty.xml",{"_index":3713,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home}/lib/jetti",{"_index":3708,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home}/lib/logging/jetti",{"_index":3706,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home}/lib/logging/slf4j",{"_index":3704,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home}/modules/*.mod",{"_index":3800,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.home}/modules/logging/jetty/resources/jetti",{"_index":1531,"title":{},"name":{},"text":{"20":{},"34":{},"36":{}},"component":{}}],["jetty.host}/start.jar",{"_index":3809,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.http.acceptedreceivebuffers",{"_index":2456,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.acceptedsendbuffers",{"_index":2458,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.acceptedtcpnodelay=tru",{"_index":2454,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.acceptor",{"_index":2463,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.acceptorprioritydelta=0",{"_index":2448,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.acceptors=1",{"_index":2443,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.acceptqueuesize=0",{"_index":2446,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.host",{"_index":3208,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.http.host=0.0.0.0",{"_index":2439,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.host=127.0.0.1",{"_index":3206,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.http.idletimeout",{"_index":2459,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.idletimeout=30000",{"_index":2442,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.port",{"_index":1558,"title":{},"name":{},"text":{"20":{},"33":{},"38":{},"56":{}},"component":{}}],["jetty.http.port=8080",{"_index":1557,"title":{},"name":{},"text":{"20":{},"33":{},"38":{}},"component":{}}],["jetty.http.port=8282",{"_index":3207,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.http.port=8888",{"_index":3810,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.http.port=9876",{"_index":3645,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.http.port=9999",{"_index":1560,"title":{},"name":{},"text":{"20":{}},"component":{}}],["jetty.http.reuseaddress=tru",{"_index":2450,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.reuseport=fals",{"_index":2452,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http.selector",{"_index":2444,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2.initialsessionrecvwindow=1048576",{"_index":2488,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2.initialstreamrecvwindow=524288",{"_index":2487,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2.maxconcurrentstreams=128",{"_index":2485,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2.maxsettingskeys=64",{"_index":2489,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2.ratecontrol.maxeventspersecond",{"_index":2493,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2.ratecontrol.maxeventspersecond=50",{"_index":2492,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2c.initialsessionrecvwindow=1232896",{"_index":2502,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2c.initialstreamrecvwindow=524288",{"_index":2501,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2c.maxconcurrentstreams=128",{"_index":2500,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2c.maxsettingskeys=64",{"_index":2503,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http2c.ratecontrol.maxeventspersecond=50",{"_index":2504,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.http3.streamidletimeout=30000",{"_index":2511,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.compli",{"_index":2704,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.compliance=rfc2616",{"_index":2708,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.compliance=rfc3986",{"_index":2717,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.compliance=rfc6265",{"_index":2728,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.compliance=rfc7230",{"_index":2692,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.compliance=rfc7230,multiple_content_length",{"_index":2711,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.delaydispatchuntilcont",{"_index":2660,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.delaydispatchuntilcontent=tru",{"_index":2647,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedciphersuiteheader=proxi",{"_index":2529,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedforheader=x",{"_index":2525,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedheader=forward",{"_index":2519,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedhostheader=x",{"_index":2520,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedhttpsheader=x",{"_index":2527,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedonly=fals",{"_index":2516,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedportasauthority=tru",{"_index":2518,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedportheader=x",{"_index":2526,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedprotoheader=x",{"_index":2523,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedproxyasauthority=fals",{"_index":2517,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedserverheader=x",{"_index":2521,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.forwardedsslsessionidheader=proxi",{"_index":2528,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.headercaches",{"_index":2652,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.headercachesize=1024",{"_index":2644,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.maxerrordispatches=10",{"_index":2648,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.outputaggregationsize=8192",{"_index":2637,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.outputbuffersize=32768",{"_index":2636,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.persistentconnectionsenabled=tru",{"_index":2639,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.relativeredirectallowed=tru",{"_index":2649,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.requestcookiecompli",{"_index":2725,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.requestcookiecompliance=rfc6265",{"_index":2702,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.requestheadersize=8192",{"_index":2640,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.responsecookiecompli",{"_index":2726,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.responsecookiecompliance=rfc6265",{"_index":2703,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.responseheadersize=8192",{"_index":2641,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.secureport=8443",{"_index":2635,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.securescheme=http",{"_index":2634,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.senddateheader=fals",{"_index":2643,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.sendserververs",{"_index":2666,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.sendserverversion=tru",{"_index":2642,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.uricompli",{"_index":2715,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.uricompliance=default",{"_index":2696,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.uricompliance=rfc3986",{"_index":2719,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.useinputdirectbytebuffers=tru",{"_index":2650,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.httpconfig.useoutputdirectbytebuffers=tru",{"_index":2651,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ini",{"_index":3642,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.jaas.login.conf",{"_index":1672,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jetty.jaas.login.conf=etc/login.conf",{"_index":1669,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jetty.jmxremote.rmiregistryhost=localhost",{"_index":2537,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.jmxremote.rmiregistryport=1099",{"_index":2538,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.jmxremote.rmiserverhost=localhost",{"_index":2534,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.jmxremote.rmiserverport=1099",{"_index":2536,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.mod",{"_index":2272,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jetty.project/document",{"_index":694,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jetty.quic.bidirectionalstreamrecvwindow=2097152",{"_index":2510,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.quic.host=0.0.0.0",{"_index":2505,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.quic.idletimeout=30000",{"_index":2507,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.quic.maxbidirectionalremotestreams=128",{"_index":2508,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.quic.port=8444",{"_index":2506,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.quic.sessionrecvwindow=4194304",{"_index":2509,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.quickstart.mod",{"_index":3228,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jetty.quickstart.origin",{"_index":3229,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jetty.quickstart.xml",{"_index":3232,"title":{},"name":{},"text":{"35":{}},"component":{}}],["jetty.requestlog.append=fals",{"_index":2561,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.requestlog.dir=log",{"_index":2555,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.requestlog.filenamedateformat=yyyy_mm_dd",{"_index":2559,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.requestlog.filepath=${jetty.requestlog.dir}/yyyy_mm_dd.request.log",{"_index":2556,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.requestlog.formatstr",{"_index":2563,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.requestlog.formatstring=%{client}a",{"_index":2548,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.requestlog.retaindays=90",{"_index":2560,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.requestlog.timezone=gmt",{"_index":2562,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.rewrite.originalpathattribute=jetty.rewrite.originalrequestpath",{"_index":2620,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.scheduler.daemon=fals",{"_index":2737,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.scheduler.nam",{"_index":2736,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.scheduler.threads=1",{"_index":2738,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.server.dumpafterstart",{"_index":2677,"title":{},"name":{},"text":{"33":{},"41":{}},"component":{}}],["jetty.server.dumpafterstart=fals",{"_index":2673,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.server.dumpafterstart=tru",{"_index":3868,"title":{},"name":{},"text":{"41":{}},"component":{}}],["jetty.server.dumpbeforestop",{"_index":2679,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.server.dumpbeforestop=fals",{"_index":2676,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.server.stopatshutdown",{"_index":2680,"title":{},"name":{},"text":{"33":{},"38":{}},"component":{}}],["jetty.server.stopatshutdown=tru",{"_index":2670,"title":{},"name":{},"text":{"33":{},"38":{}},"component":{}}],["jetty.server.stoptimeout=5000",{"_index":2671,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.server.tempdirectori",{"_index":2674,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.session.evictionpolici",{"_index":3422,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.file.deleteunrestorablefil",{"_index":3454,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.flushonresponsecommit",{"_index":3435,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.backoffm",{"_index":3586,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.maxretri",{"_index":3584,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.access",{"_index":3598,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.attribut",{"_index":3608,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.contextpath",{"_index":3594,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.cookiesettim",{"_index":3602,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.createtim",{"_index":3601,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.expiri",{"_index":3605,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.id",{"_index":3593,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.kind",{"_index":3591,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.lastaccess",{"_index":3599,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.lastnod",{"_index":3604,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.maxinact",{"_index":3606,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.model.vhost",{"_index":3596,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.gcloud.namespac",{"_index":3588,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.graceperiod.second",{"_index":3455,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.hazelcast.address",{"_index":3567,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.hazelcast.configurationloc",{"_index":3565,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.hazelcast.hazelcastinstancenam",{"_index":3569,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.hazelcast.mapnam",{"_index":3563,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.hazelcast.onlycli",{"_index":3564,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.hazelcast.usequeri",{"_index":3566,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.infinispan.idletimeout.second",{"_index":3531,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.infinispan.remotecachenam",{"_index":3530,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.invalidateonshutdown",{"_index":3438,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.blobtyp",{"_index":3471,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.datasourcenam",{"_index":3466,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.driverclass",{"_index":3467,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.driverurl",{"_index":3469,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.longtyp",{"_index":3477,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.accesstimecolumn",{"_index":3492,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.catalognam",{"_index":3484,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.contextpathcolumn",{"_index":3494,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.cookietimecolumn",{"_index":3495,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.createtimecolumn",{"_index":3497,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.expirytimecolumn",{"_index":3499,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.idcolumn",{"_index":3504,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.lastaccesstimecolumn",{"_index":3501,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.lastnodecolumn",{"_index":3506,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.lastsavedtimecolumn",{"_index":3502,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.mapcolumn",{"_index":3511,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.maxintervalcolumn",{"_index":3509,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.schemanam",{"_index":3483,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.t",{"_index":3490,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.schema.virtualhostcolumn",{"_index":3508,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.jdbc.stringtyp",{"_index":3481,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.memcached.expirysec",{"_index":3615,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.memcached.heartbeat",{"_index":3617,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.memcached.host",{"_index":3612,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.memcached.port",{"_index":3613,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.mongo.collectionnam",{"_index":3518,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.mongo.connectionstr",{"_index":3525,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.mongo.dbnam",{"_index":3516,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.mongo.host",{"_index":3521,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.mongo.port",{"_index":3522,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.removeunloadablesess",{"_index":3433,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.saveoncr",{"_index":3432,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.saveoninactiveevict",{"_index":3427,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.saveperiod.second",{"_index":3457,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.session.storedir",{"_index":3453,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.sessionidmanager.workernam",{"_index":3375,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.sessionscavengeinterval.second",{"_index":3385,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty.sh",{"_index":3804,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.ssl.acceptedreceivebuffers",{"_index":2749,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.acceptedsendbuffers",{"_index":2750,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.acceptedtcpnodelay=tru",{"_index":2748,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.acceptor",{"_index":2762,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.acceptorprioritydelta=0",{"_index":2745,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.acceptors=1",{"_index":2742,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.acceptqueuesize=0",{"_index":2744,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.host=0.0.0.0",{"_index":2739,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.idletimeout",{"_index":2760,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.idletimeout=30000",{"_index":2741,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.port",{"_index":2758,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.port=8443",{"_index":2740,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.reuseaddress=tru",{"_index":2746,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.reuseport=fals",{"_index":2747,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.selector",{"_index":2743,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.snihostcheck",{"_index":3137,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.ssl.snihostcheck=tru",{"_index":2753,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.snirequir",{"_index":3135,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.ssl.snirequired=fals",{"_index":2752,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.snirequired=tru",{"_index":3136,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.ssl.stsincludesubdomains=tru",{"_index":2757,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.ssl.stsmaxageseconds=31536000",{"_index":2756,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.endpointidentificationalgorithm",{"_index":2771,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.keymanagerpassword",{"_index":2780,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.keystorepassword",{"_index":2776,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["jetty.sslcontext.keystorepassword=my_passwd",{"_index":3087,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.sslcontext.keystorepassword=obf:1yta1t331v8w1v9q1t331ytc",{"_index":3849,"title":{},"name":{},"text":{"40":{}},"component":{}}],["jetty.sslcontext.keystorepassword?=obf:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4",{"_index":2835,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.keystorepath",{"_index":2794,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["jetty.sslcontext.keystorepath=etc/keystore.p12",{"_index":2774,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.keystorepath?=etc/test",{"_index":2833,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.keystoreprovid",{"_index":2778,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.keystoretype=pkcs12",{"_index":2777,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.keystoretype?=pkcs12",{"_index":2834,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.needclientauth",{"_index":2796,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.needclientauth=fals",{"_index":2784,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.provid",{"_index":2773,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.provider?=conscrypt",{"_index":2288,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jetty.sslcontext.reload.scaninterval=1",{"_index":2800,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.renegotiationallowed=tru",{"_index":2792,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.renegotiationlimit=5",{"_index":2793,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.snirequir",{"_index":3127,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.sslcontext.snirequired=fals",{"_index":2767,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.snirequired=tru",{"_index":3131,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty.sslcontext.sslsessioncaches",{"_index":2789,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.sslsessiontimeout",{"_index":2790,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.truststorepassword",{"_index":2781,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.truststorepath=etc/keystore.p12",{"_index":2775,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.truststoreprovid",{"_index":2783,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.truststoretype=pkcs12",{"_index":2782,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.useciphersuitesorder=tru",{"_index":2787,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.wantclientauth",{"_index":2797,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.sslcontext.wantclientauth=fals",{"_index":2785,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.statetracking.completehandlercallbackattimeout=fals",{"_index":2809,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.statetracking.demandcallbacktimeout=0",{"_index":2811,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.statetracking.handlercallbacktimeout=0",{"_index":2808,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.statetracking.writecallbacktimeout=0",{"_index":2813,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.statetracking.writetimeout=0",{"_index":2812,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.systempropertiesfil",{"_index":5564,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jetty.tag.vers",{"_index":3686,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.threadpool.detaileddump",{"_index":2854,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.detaileddump=fals",{"_index":2852,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.idletimeout",{"_index":2857,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.idletimeout=60000",{"_index":2848,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.maxevictcount=1",{"_index":2851,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.maxthread",{"_index":2280,"title":{},"name":{},"text":{"32":{},"33":{}},"component":{}}],["jetty.threadpool.maxthreads=200",{"_index":2845,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.minthreads=10",{"_index":2844,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.nameprefix",{"_index":2853,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.nameprefix=qtp",{"_index":2843,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.reservedthread",{"_index":2846,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.usevirtualthreads=fals",{"_index":2847,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.virtual.allowsetthreadloc",{"_index":2866,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.virtual.allowsetthreadlocals=tru",{"_index":2865,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.virtual.inheritinheritablethreadloc",{"_index":2863,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.virtual.inheritinheritablethreadlocals=tru",{"_index":2861,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.virtual.nameprefix",{"_index":2862,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.threadpool.virtual.nameprefix=qtp",{"_index":2859,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.vers",{"_index":3685,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.version}.jar",{"_index":1802,"title":{},"name":{},"text":{"24":{},"33":{}},"component":{}}],["jetty.webapp.addhiddenclass",{"_index":3696,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.webapp.addhiddenclasses+=,${jetty.base.uri}/lib/bouncycastl",{"_index":2832,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.webapp.addhiddenclasses+=,org.exampl",{"_index":2437,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.webapp.addhiddenclasses=org.eclipse.jetty.logging.,file:///path/to/jetty.home/lib/logging/,org.slf4j",{"_index":3730,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty.webapp.addprotectedclasses+=,com.acm",{"_index":2286,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jetty.webapp.addprotectedclasses+=,org.exampl",{"_index":2436,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.wellknown.dir=.wel",{"_index":2874,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.wellknown.listdirectories=fals",{"_index":2875,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty.xml",{"_index":1332,"title":{},"name":{},"text":{"19":{},"32":{},"56":{}},"component":{}}],["jetty:effect",{"_index":5412,"title":{"56-19":{}},"name":{},"text":{"56":{}},"component":{}}],["jetty:help",{"_index":5426,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jetty:run",{"_index":5408,"title":{"56-9":{},"56-11":{},"56-27":{}},"name":{},"text":{"55":{},"56":{}},"component":{}}],["jetty:start",{"_index":5410,"title":{"56-13":{},"56-15":{}},"name":{},"text":{"56":{}},"component":{}}],["jetty:stop",{"_index":5411,"title":{"56-17":{}},"name":{},"text":{"56":{}},"component":{}}],["jetty_bas",{"_index":1255,"title":{"18-3":{},"38-1":{}},"name":{},"text":{"18":{},"19":{},"20":{},"23":{},"25":{},"27":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["jetty_base/.wel",{"_index":2868,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty_base/etc",{"_index":2275,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jetty_base/etc/acm",{"_index":2251,"title":{},"name":{},"text":{"31":{}},"component":{}}],["jetty_base/etc/custom",{"_index":2220,"title":{},"name":{},"text":{"31":{}},"component":{}}],["jetty_base/etc/jaspi/jaspi",{"_index":1814,"title":{},"name":{},"text":{"24":{}},"component":{}}],["jetty_base/etc/jetti",{"_index":2624,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty_base/etc/jmxremote.access",{"_index":1905,"title":{},"name":{},"text":{"25":{}},"component":{}}],["jetty_base/etc/jmxremote.password",{"_index":1899,"title":{},"name":{},"text":{"25":{}},"component":{}}],["jetty_base/etc/keystore.p12",{"_index":2795,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty_base/etc/login.conf",{"_index":1674,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jetty_base/etc/sessions/gcloud/index.yaml",{"_index":3580,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["jetty_base/etc/tl",{"_index":3090,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty_base/lib",{"_index":2250,"title":{},"name":{},"text":{"31":{},"32":{},"37":{}},"component":{}}],["jetty_base/lib/*.jar",{"_index":3763,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/lib/ext",{"_index":2016,"title":{},"name":{},"text":{"27":{},"38":{}},"component":{}}],["jetty_base/lib/ext/acm",{"_index":3771,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/lib/ext/util",{"_index":3770,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/lib/hazelcast",{"_index":3561,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_base/lib/infinispan",{"_index":3529,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_base/lib/nosql",{"_index":3514,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_base/lib/postgresql",{"_index":2314,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jetty_base/log",{"_index":3264,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jetty_base/logs/yyyy_mm_dd.request.log",{"_index":3294,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jetty_base/modul",{"_index":2266,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["jetty_base/modules/*.mod",{"_index":3649,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/modules/acm",{"_index":2256,"title":{},"name":{},"text":{"31":{}},"component":{}}],["jetty_base/modules/custom",{"_index":2226,"title":{},"name":{},"text":{"31":{}},"component":{}}],["jetty_base/modules/jpms.mod",{"_index":3830,"title":{},"name":{},"text":{"39":{}},"component":{}}],["jetty_base/modules/jvm.mod",{"_index":3660,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/modules/postgresql.mod",{"_index":3651,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/resourc",{"_index":2611,"title":{},"name":{},"text":{"33":{},"36":{},"38":{}},"component":{}}],["jetty_base/resources/jetti",{"_index":2614,"title":{},"name":{},"text":{"33":{},"38":{}},"component":{}}],["jetty_base/resources/log4j2.xml",{"_index":3282,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jetty_base/resources/logback.xml",{"_index":3277,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jetty_base/sess",{"_index":3440,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_base/start.d",{"_index":1346,"title":{},"name":{},"text":{"19":{},"20":{},"34":{},"37":{}},"component":{}}],["jetty_base/start.d/*.ini",{"_index":3640,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/start.d/acm",{"_index":2263,"title":{},"name":{},"text":{"31":{}},"component":{}}],["jetty_base/start.d/http.ini",{"_index":3209,"title":{},"name":{},"text":{"34":{},"38":{}},"component":{}}],["jetty_base/start.d/jmx",{"_index":1921,"title":{},"name":{},"text":{"25":{}},"component":{}}],["jetty_base/start.d/log",{"_index":3641,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/start.d/postgresql.ini",{"_index":3655,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/start.d/requestlog.ini",{"_index":3293,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jetty_base/start.d/server.ini",{"_index":3775,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_base/start.d/sess",{"_index":3420,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_base/start.d/sessions.ini",{"_index":3372,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_base/start.d/ssl.ini",{"_index":3083,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty_base/start.d/start.d/sess",{"_index":3568,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_base/start.d/threadpool.ini",{"_index":3317,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jetty_base/webapp",{"_index":1334,"title":{},"name":{},"text":{"19":{},"20":{},"33":{}},"component":{}}],["jetty_base/webapps/mi",{"_index":1373,"title":{},"name":{},"text":{"19":{}},"component":{}}],["jetty_base/webapps/wordpress.xml",{"_index":3066,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jetty_base=/path/to/jetty.bas",{"_index":1511,"title":{},"name":{},"text":{"20":{}},"component":{}}],["jetty_distributed_session_inst",{"_index":3570,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_hom",{"_index":1254,"title":{"18-3":{}},"name":{},"text":{"18":{},"20":{},"32":{},"38":{}},"component":{}}],["jetty_home/etc",{"_index":2276,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["jetty_home/etc/sessions/id",{"_index":3370,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_home/etc/webdefault.xml",{"_index":2030,"title":{},"name":{},"text":{"28":{}},"component":{}}],["jetty_home/lib/jetti",{"_index":3762,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_home/modul",{"_index":2268,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["jetty_home/modules/bytebufferpool.mod",{"_index":2355,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty_home/modules/https.mod",{"_index":2531,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty_home/modules/test",{"_index":2817,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jetty_home/start.jar",{"_index":811,"title":{},"name":{},"text":{"7":{},"18":{},"19":{},"20":{},"24":{},"25":{},"31":{},"34":{},"35":{},"36":{},"38":{},"39":{},"41":{}},"component":{}}],["jetty_home=/path/to/jetti",{"_index":1485,"title":{},"name":{},"text":{"20":{}},"component":{}}],["jetty_maven_local_repo",{"_index":3824,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jetty_worker_inst",{"_index":3381,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jetty_worker_nam",{"_index":6548,"title":{},"name":{},"text":{"66":{}},"component":{}}],["jettybas",{"_index":5442,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jettyenvxml",{"_index":5475,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jettyhom",{"_index":5445,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jettyloggerfactorymbean.setloggerlevel(str",{"_index":3999,"title":{},"name":{},"text":{"41":{}},"component":{}}],["jettymavenhellowarapp",{"_index":5396,"title":{},"name":{},"text":{"55":{}},"component":{}}],["jettymavenhellowebapp",{"_index":5397,"title":{},"name":{},"text":{"55":{}},"component":{}}],["jettymavenhelloworld",{"_index":5367,"title":{},"name":{},"text":{"55":{}},"component":{}}],["jettyopt",{"_index":5446,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jettyproperti",{"_index":5455,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jettyserverupgraderespons",{"_index":5824,"title":{},"name":{},"text":{"58":{}},"component":{}}],["jettysess",{"_index":3491,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["jettyupgradelisten",{"_index":5187,"title":{},"name":{},"text":{"53":{}},"component":{}}],["jettyvers",{"_index":5392,"title":{},"name":{},"text":{"55":{}},"component":{}}],["jettywebsocketcr",{"_index":5822,"title":{},"name":{},"text":{"58":{}},"component":{}}],["jettywebsocketservercontain",{"_index":5792,"title":{},"name":{},"text":{"57":{}},"component":{}}],["jettywebsocketservlet",{"_index":5820,"title":{},"name":{},"text":{"58":{}},"component":{}}],["jettyxml",{"_index":5432,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jetty’",{"_index":108,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"9":{},"11":{},"13":{},"20":{},"23":{},"24":{},"32":{},"33":{},"34":{},"36":{},"38":{},"41":{},"45":{},"47":{},"48":{},"53":{},"61":{},"67":{},"68":{}},"component":{}}],["jm",{"_index":1932,"title":{"26-5":{}},"name":{},"text":{"26":{}},"component":{}}],["jmc",{"_index":1845,"title":{},"name":{},"text":{"25":{},"41":{},"45":{},"68":{}},"component":{}}],["jms/connectionfactori",{"_index":1975,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jms/inqueu",{"_index":1978,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jmx",{"_index":1635,"title":{"25":{},"45":{},"25-1":{},"25-2":{},"25-3":{},"25-4":{},"25-5":{},"33-16":{},"33-17":{},"45-1":{},"45-2":{},"45-3":{},"45-4":{},"45-5":{},"45-6":{}},"name":{"45":{}},"text":{"21":{},"25":{},"32":{},"33":{},"36":{},"41":{},"43":{},"45":{},"61":{},"66":{},"68":{}},"component":{}}],["jmx.*mbean",{"_index":4429,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jmx.mbean",{"_index":4410,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jmxconnector",{"_index":4381,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jmxconnectorfactory.connect(jmxurl",{"_index":4389,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jmxconnectorserv",{"_index":1919,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["jmxremote.access",{"_index":1895,"title":{},"name":{},"text":{"25":{}},"component":{}}],["jmxremote.password",{"_index":1896,"title":{},"name":{},"text":{"25":{}},"component":{}}],["jmxserver",{"_index":4362,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jmxserviceurl",{"_index":1860,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["jmxserviceurl(\"rmi",{"_index":4360,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jmxserviceurl(\"service:jmx:rmi:///jndi/rmi://domain.com:1100/jmxrmi",{"_index":4385,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jmxurl",{"_index":4359,"title":{},"name":{},"text":{"45":{}},"component":{}}],["jna",{"_index":6020,"title":{},"name":{},"text":{"61":{}},"component":{}}],["jndi",{"_index":1317,"title":{"26":{},"19-6":{}},"name":{},"text":{"19":{},"20":{},"21":{},"23":{},"26":{},"39":{},"56":{},"57":{},"66":{}},"component":{}}],["jndi/rmi:///jmxrmi",{"_index":4361,"title":{},"name":{},"text":{"45":{}},"component":{}}],["job",{"_index":3082,"title":{},"name":{},"text":{"34":{},"46":{}},"component":{}}],["join",{"_index":542,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jpm",{"_index":317,"title":{"39":{},"32-17":{},"39-1":{}},"name":{"39":{}},"text":{"2":{},"32":{},"38":{},"39":{},"53":{}},"component":{}}],["jpms.mod",{"_index":3831,"title":{},"name":{},"text":{"39":{}},"component":{}}],["js",{"_index":1575,"title":{},"name":{},"text":{"20":{},"34":{}},"component":{}}],["jsessionid",{"_index":5857,"title":{},"name":{},"text":{"59":{}},"component":{}}],["jsf",{"_index":2015,"title":{},"name":{},"text":{"27":{}},"component":{}}],["json",{"_index":2483,"title":{},"name":{},"text":{"33":{},"37":{},"65":{},"66":{}},"component":{}}],["jsonhttp",{"_index":6499,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttpconnect",{"_index":6503,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttpconnection(endpoint",{"_index":6507,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttpconnectionfactori",{"_index":6502,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttpiteratingcallback",{"_index":6512,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttprequest",{"_index":6519,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttprequest.getmethod",{"_index":6520,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttprespons",{"_index":6522,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttpresponse.setstatus(int",{"_index":6523,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsonhttpservic",{"_index":6525,"title":{},"name":{},"text":{"65":{}},"component":{}}],["jsp",{"_index":220,"title":{"28-1":{},"54-3":{}},"name":{},"text":{"2":{},"17":{},"20":{},"21":{},"28":{},"29":{},"32":{},"34":{},"37":{},"54":{},"56":{},"57":{}},"component":{}}],["jsp.1.6",{"_index":2096,"title":{},"name":{},"text":{"28":{}},"component":{}}],["jspc",{"_index":5313,"title":{"54":{}},"name":{"54":{}},"text":{"54":{},"57":{}},"component":{}}],["jspf",{"_index":2034,"title":{},"name":{},"text":{"28":{}},"component":{}}],["jspidletimeout",{"_index":2084,"title":{},"name":{},"text":{"28":{}},"component":{}}],["jspx",{"_index":2035,"title":{},"name":{},"text":{"28":{},"54":{}},"component":{}}],["jsr",{"_index":238,"title":{},"name":{},"text":{"2":{},"34":{},"53":{}},"component":{}}],["jsr45",{"_index":2066,"title":{},"name":{},"text":{"28":{}},"component":{}}],["jsse",{"_index":2772,"title":{},"name":{},"text":{"33":{}},"component":{}}],["jstl",{"_index":2122,"title":{},"name":{},"text":{"29":{},"57":{}},"component":{}}],["jta",{"_index":1947,"title":{},"name":{},"text":{"26":{},"39":{}},"component":{}}],["jul",{"_index":3269,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jump",{"_index":1509,"title":{},"name":{},"text":{"20":{},"21":{},"56":{},"61":{}},"component":{}}],["junit5’",{"_index":931,"title":{},"name":{},"text":{"8":{}},"component":{}}],["jvm",{"_index":218,"title":{"73":{},"38-7":{},"38-9":{}},"name":{},"text":{"2":{},"3":{},"17":{},"18":{},"20":{},"25":{},"26":{},"32":{},"33":{},"34":{},"36":{},"38":{},"39":{},"41":{},"42":{},"43":{},"45":{},"47":{},"52":{},"56":{},"61":{},"69":{}},"component":{}}],["jvm.mod",{"_index":3661,"title":{},"name":{},"text":{"38":{}},"component":{}}],["jvmarg",{"_index":5438,"title":{},"name":{},"text":{"56":{}},"component":{}}],["jvmti",{"_index":6931,"title":{},"name":{},"text":{"69":{}},"component":{}}],["k",{"_index":2585,"title":{},"name":{},"text":{"33":{}},"component":{}}],["keep",{"_index":750,"title":{},"name":{},"text":{"7":{},"18":{},"28":{},"33":{},"37":{},"44":{},"45":{},"53":{},"59":{},"61":{},"65":{},"66":{}},"component":{}}],["keepgener",{"_index":2040,"title":{},"name":{},"text":{"28":{}},"component":{}}],["keepsourc",{"_index":5331,"title":{},"name":{},"text":{"54":{}},"component":{}}],["kept",{"_index":2380,"title":{},"name":{},"text":{"33":{},"37":{}},"component":{}}],["key",{"_index":2125,"title":{},"name":{},"text":{"30":{},"33":{},"34":{},"36":{},"37":{},"41":{},"42":{},"48":{},"52":{},"56":{},"61":{},"66":{}},"component":{}}],["key/certif",{"_index":2167,"title":{},"name":{},"text":{"30":{}},"component":{}}],["key/valu",{"_index":4059,"title":{},"name":{},"text":{"42":{},"56":{},"61":{}},"component":{}}],["keyalg",{"_index":2134,"title":{},"name":{},"text":{"30":{}},"component":{}}],["keymanag",{"_index":2779,"title":{},"name":{},"text":{"33":{}},"component":{}}],["keys=0",{"_index":3955,"title":{},"name":{},"text":{"41":{}},"component":{}}],["keysiz",{"_index":2136,"title":{},"name":{},"text":{"30":{}},"component":{}}],["keystor",{"_index":1911,"title":{"30":{},"30-1":{},"30-2":{},"30-5":{},"33-28":{},"33-31":{},"34-15":{},"34-19":{}},"name":{},"text":{"25":{},"30":{},"33":{},"34":{},"40":{},"45":{},"48":{},"61":{}},"component":{}}],["keystore,h=[localhost],a=[],w",{"_index":2916,"title":{},"name":{},"text":{"34":{}},"component":{}}],["keystore.ini",{"_index":2898,"title":{},"name":{},"text":{"34":{}},"component":{}}],["keystore.mod",{"_index":2818,"title":{},"name":{},"text":{"33":{}},"component":{}}],["keystore.p12",{"_index":2174,"title":{},"name":{},"text":{"30":{},"33":{},"34":{}},"component":{}}],["keystore.p12,truststore=nul",{"_index":2919,"title":{},"name":{},"text":{"34":{}},"component":{}}],["keystore.xml",{"_index":2830,"title":{},"name":{},"text":{"33":{}},"component":{}}],["keytool",{"_index":2130,"title":{},"name":{},"text":{"30":{}},"component":{}}],["keyword",{"_index":3475,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["khtml",{"_index":3308,"title":{},"name":{},"text":{"36":{}},"component":{}}],["kib",{"_index":4650,"title":{},"name":{},"text":{"48":{}},"component":{}}],["kick",{"_index":3798,"title":{},"name":{},"text":{"38":{}},"component":{}}],["kill",{"_index":3774,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{}}],["kind",{"_index":3459,"title":{},"name":{},"text":{"37":{},"48":{},"53":{},"61":{},"66":{}},"component":{}}],["kit",{"_index":890,"title":{},"name":{},"text":{"8":{}},"component":{}}],["knit",{"_index":121,"title":{},"name":{},"text":{"1":{}},"component":{}}],["know",{"_index":1212,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"34":{},"35":{},"37":{},"41":{},"44":{},"48":{},"49":{},"53":{},"56":{},"61":{},"65":{}},"component":{}}],["knowledg",{"_index":2965,"title":{},"name":{},"text":{"34":{},"48":{},"61":{}},"component":{}}],["known",{"_index":66,"title":{"33-35":{}},"name":{},"text":{"1":{},"7":{},"18":{},"25":{},"33":{},"34":{},"37":{},"47":{},"61":{},"65":{}},"component":{}}],["known.ini",{"_index":2869,"title":{},"name":{},"text":{"33":{}},"component":{}}],["l",{"_index":1885,"title":{},"name":{},"text":{"25":{},"30":{},"45":{},"48":{}},"component":{}}],["l1",{"_index":3358,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["l2",{"_index":3341,"title":{"37-40":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["l=citi",{"_index":2143,"title":{},"name":{},"text":{"30":{}},"component":{}}],["label",{"_index":563,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["lack",{"_index":3634,"title":{},"name":{},"text":{"37":{},"61":{}},"component":{}}],["lambda",{"_index":4542,"title":{},"name":{},"text":{"48":{},"67":{}},"component":{}}],["land",{"_index":1026,"title":{},"name":{},"text":{"10":{}},"component":{}}],["languag",{"_index":658,"title":{},"name":{},"text":{"7":{},"34":{},"64":{}},"component":{}}],["larg",{"_index":2658,"title":{},"name":{},"text":{"33":{},"37":{},"41":{},"47":{},"48":{},"53":{},"57":{},"61":{},"66":{}},"component":{}}],["larger",{"_index":581,"title":{},"name":{},"text":{"6":{},"33":{},"37":{},"47":{},"48":{},"61":{}},"component":{}}],["last",{"_index":133,"title":{},"name":{},"text":{"1":{},"20":{},"26":{},"31":{},"33":{},"37":{},"41":{},"44":{},"48":{},"53":{},"56":{},"57":{},"61":{},"66":{}},"component":{}}],["last=fals",{"_index":4253,"title":{},"name":{},"text":{"44":{}},"component":{}}],["last=tru",{"_index":4252,"title":{},"name":{},"text":{"44":{}},"component":{}}],["lastaccess",{"_index":3600,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["lastaccesstim",{"_index":3458,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["lastcont",{"_index":4631,"title":{},"name":{},"text":{"48":{}},"component":{}}],["lastli",{"_index":3060,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["lastnod",{"_index":3507,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["lastsav",{"_index":6748,"title":{},"name":{},"text":{"66":{}},"component":{}}],["lastsavedtim",{"_index":3503,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["lastsavetim",{"_index":6676,"title":{},"name":{},"text":{"66":{}},"component":{}}],["latenc",{"_index":2665,"title":{},"name":{},"text":{"33":{},"47":{},"61":{}},"component":{}}],["later",{"_index":1946,"title":{},"name":{},"text":{"26":{},"32":{},"33":{},"36":{},"37":{},"43":{},"44":{},"48":{},"49":{},"61":{},"62":{},"65":{},"66":{}},"component":{}}],["latest",{"_index":77,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"33":{},"59":{},"66":{}},"component":{}}],["latter",{"_index":1880,"title":{},"name":{},"text":{"25":{},"37":{},"56":{},"66":{}},"component":{}}],["launch",{"_index":1928,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["lax",{"_index":5729,"title":{},"name":{},"text":{"57":{}},"component":{}}],["layer",{"_index":3025,"title":{"52-1":{},"52-4":{}},"name":{},"text":{"34":{},"36":{},"38":{},"44":{},"52":{},"53":{},"61":{}},"component":{}}],["lazili",{"_index":1721,"title":{},"name":{},"text":{"23":{},"37":{},"66":{}},"component":{}}],["ldap",{"_index":1746,"title":{},"name":{},"text":{"23":{}},"component":{}}],["ldaploginmodul",{"_index":1646,"title":{"23-9":{}},"name":{},"text":{},"component":{}}],["lead",{"_index":2101,"title":{},"name":{},"text":{"28":{},"33":{},"44":{},"48":{},"53":{},"56":{},"61":{}},"component":{}}],["leaf",{"_index":6043,"title":{},"name":{},"text":{"61":{}},"component":{}}],["leak",{"_index":4257,"title":{},"name":{},"text":{"44":{},"61":{}},"component":{}}],["learn",{"_index":47,"title":{},"name":{},"text":{"1":{},"4":{},"7":{}},"component":{}}],["leas",{"_index":4478,"title":{},"name":{},"text":{"47":{}},"component":{}}],["leav",{"_index":3091,"title":{},"name":{},"text":{"34":{},"37":{},"56":{},"66":{}},"component":{}}],["leeway",{"_index":6671,"title":{},"name":{},"text":{"66":{}},"component":{}}],["left",{"_index":2112,"title":{},"name":{},"text":{"28":{},"31":{},"37":{},"54":{}},"component":{}}],["legaci",{"_index":2691,"title":{},"name":{},"text":{"33":{},"36":{},"59":{}},"component":{}}],["legal",{"_index":4345,"title":{},"name":{},"text":{"44":{}},"component":{}}],["legend",{"_index":3866,"title":{},"name":{},"text":{"41":{}},"component":{}}],["legendari",{"_index":302,"title":{},"name":{},"text":{"2":{}},"component":{}}],["length",{"_index":1723,"title":{},"name":{},"text":{"23":{},"33":{},"34":{},"36":{},"37":{},"48":{},"53":{},"57":{},"61":{}},"component":{}}],["less",{"_index":1299,"title":{},"name":{},"text":{"18":{},"26":{},"28":{},"33":{},"41":{},"44":{},"47":{},"53":{},"61":{},"66":{}},"component":{}}],["let",{"_index":5464,"title":{},"name":{},"text":{"56":{},"66":{}},"component":{}}],["let’",{"_index":2195,"title":{},"name":{},"text":{"30":{},"31":{},"33":{},"34":{},"37":{},"41":{},"48":{},"49":{},"62":{},"65":{}},"component":{}}],["level",{"_index":567,"title":{},"name":{},"text":{"4":{},"7":{},"13":{},"19":{},"20":{},"23":{},"26":{},"28":{},"33":{},"34":{},"36":{},"38":{},"41":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"61":{},"62":{},"63":{},"64":{},"71":{}},"component":{}}],["levelnam",{"_index":4001,"title":{},"name":{},"text":{"41":{}},"component":{}}],["leverag",{"_index":1296,"title":{},"name":{},"text":{"18":{},"32":{},"34":{},"38":{},"56":{}},"component":{}}],["lib",{"_index":1572,"title":{"32-12":{}},"name":{},"text":{"20":{},"24":{},"31":{},"32":{},"33":{},"36":{},"38":{}},"component":{}}],["lib/acm",{"_index":2258,"title":{},"name":{},"text":{"31":{}},"component":{}}],["lib/bouncycastle/bcpkix",{"_index":2827,"title":{},"name":{},"text":{"33":{}},"component":{}}],["lib/bouncycastle/bcprov",{"_index":2828,"title":{},"name":{},"text":{"33":{}},"component":{}}],["lib/bouncycastle/bcutil",{"_index":2829,"title":{},"name":{},"text":{"33":{}},"component":{}}],["lib/custom",{"_index":2229,"title":{},"name":{},"text":{"31":{}},"component":{}}],["lib/ee10",{"_index":1803,"title":{},"name":{},"text":{"24":{}},"component":{}}],["lib/jetti",{"_index":1801,"title":{},"name":{},"text":{"24":{},"33":{}},"component":{}}],["lib/postgresql",{"_index":2313,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["librari",{"_index":647,"title":{"29":{},"49":{},"50":{},"51":{},"60":{},"61":{},"62":{},"63":{},"64":{}},"name":{},"text":{"7":{},"14":{},"16":{},"17":{},"18":{},"29":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"43":{},"44":{},"48":{},"49":{},"50":{},"51":{},"52":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"71":{}},"component":{}}],["library’",{"_index":1998,"title":{},"name":{},"text":{"26":{}},"component":{}}],["licens",{"_index":632,"title":{"7-12":{},"32-18":{}},"name":{},"text":{"7":{},"32":{},"36":{},"37":{},"38":{}},"component":{}}],["life",{"_index":873,"title":{},"name":{},"text":{"7":{},"36":{},"43":{},"46":{},"49":{},"50":{},"62":{},"63":{}},"component":{}}],["lifecycl",{"_index":3356,"title":{"43-1":{}},"name":{},"text":{"37":{},"43":{},"44":{},"53":{},"56":{},"66":{}},"component":{}}],["lifecycle.listen",{"_index":4076,"title":{"43-3":{}},"name":{},"text":{"43":{}},"component":{}}],["lifecycle.stop",{"_index":4512,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["lifecycle.stop(httpclient)).start",{"_index":4515,"title":{},"name":{},"text":{"48":{}},"component":{}}],["lifecycle.stop(websocketclient)).start",{"_index":5170,"title":{},"name":{},"text":{"53":{}},"component":{}}],["lifecyclefailure(lifecycl",{"_index":4119,"title":{},"name":{},"text":{"43":{}},"component":{}}],["lifecyclestarted(lifecycl",{"_index":4117,"title":{},"name":{},"text":{"43":{}},"component":{}}],["lifecyclestopped(lifecycl",{"_index":4120,"title":{},"name":{},"text":{"43":{}},"component":{}}],["lighter",{"_index":2352,"title":{},"name":{},"text":{"33":{}},"component":{}}],["likelihood",{"_index":3625,"title":{},"name":{},"text":{"37":{}},"component":{}}],["likewis",{"_index":1148,"title":{},"name":{},"text":{"16":{},"19":{},"34":{},"43":{}},"component":{}}],["limit",{"_index":914,"title":{},"name":{},"text":{"8":{},"17":{},"28":{},"33":{},"34":{},"47":{},"48":{},"61":{}},"component":{}}],["line",{"_index":754,"title":{"38-5":{},"38-9":{}},"name":{},"text":{"7":{},"13":{},"18":{},"19":{},"20":{},"23":{},"28":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"45":{},"47":{},"48":{},"52":{},"54":{},"56":{},"57":{},"61":{},"67":{},"69":{},"71":{}},"component":{}}],["linearli",{"_index":2356,"title":{},"name":{},"text":{"33":{}},"component":{}}],["linefe",{"_index":759,"title":{},"name":{},"text":{"7":{}},"component":{}}],["link",{"_index":169,"title":{},"name":{},"text":{"2":{},"7":{},"26":{},"36":{},"43":{},"53":{},"61":{},"65":{}},"component":{}}],["link:http://php.net/manual/en/install.fpm.php",{"_index":4910,"title":{},"name":{},"text":{"48":{}},"component":{}}],["linkag",{"_index":5477,"title":{},"name":{},"text":{"56":{}},"component":{}}],["linux",{"_index":1854,"title":{},"name":{},"text":{"25":{},"33":{},"34":{},"36":{},"38":{},"41":{},"48":{}},"component":{}}],["list",{"_index":23,"title":{"4-4":{},"4-5":{},"4-6":{},"4-7":{},"6-1":{}},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"17":{},"18":{},"19":{},"20":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"42":{},"44":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"61":{},"62":{},"63":{},"65":{},"67":{}},"component":{}}],["listen",{"_index":1258,"title":{"46":{},"43-2":{},"53-11":{},"61-46":{}},"name":{"46":{}},"text":{"18":{},"20":{},"25":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["listener.get(5",{"_index":4663,"title":{},"name":{},"text":{"48":{}},"component":{}}],["listener.getinputstream",{"_index":4666,"title":{},"name":{},"text":{"48":{}},"component":{}}],["listenerendpoint",{"_index":5220,"title":{},"name":{},"text":{"53":{}},"component":{}}],["listener’",{"_index":4965,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["liter",{"_index":2566,"title":{},"name":{},"text":{"33":{},"37":{},"42":{}},"component":{}}],["literalstr",{"_index":4060,"title":{},"name":{},"text":{"42":{}},"component":{}}],["littl",{"_index":1121,"title":{},"name":{},"text":{"13":{},"23":{},"26":{},"33":{},"41":{},"61":{}},"component":{}}],["live",{"_index":855,"title":{},"name":{},"text":{"7":{},"37":{},"43":{},"66":{}},"component":{}}],["load",{"_index":1281,"title":{"34-22":{},"37-45":{},"37-46":{},"41-6":{},"61-21":{}},"name":{},"text":{"18":{},"19":{},"20":{},"22":{},"28":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"47":{},"48":{},"53":{},"61":{},"65":{},"66":{}},"component":{}}],["loadbalanc",{"_index":3415,"title":{},"name":{},"text":{"37":{}},"component":{}}],["loader",{"_index":3854,"title":{},"name":{},"text":{"41":{},"57":{},"61":{}},"component":{}}],["local",{"_index":686,"title":{"25-1":{}},"name":{},"text":{"7":{},"8":{},"9":{},"11":{},"25":{},"31":{},"33":{},"36":{},"37":{},"38":{},"45":{},"53":{},"56":{},"57":{},"61":{},"66":{}},"component":{}}],["local_vari",{"_index":1095,"title":{},"name":{},"text":{"13":{}},"component":{}}],["localaddress",{"_index":5671,"title":{},"name":{},"text":{"57":{}},"component":{}}],["localcach",{"_index":6778,"title":{},"name":{},"text":{"66":{}},"component":{}}],["localhost",{"_index":1883,"title":{},"name":{},"text":{"25":{},"33":{},"37":{},"42":{},"45":{},"52":{}},"component":{}}],["localhost:1099",{"_index":1887,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["localhost:8080",{"_index":2964,"title":{},"name":{},"text":{"34":{},"48":{}},"component":{}}],["localhost:9000",{"_index":3058,"title":{},"name":{},"text":{"34":{}},"component":{}}],["localport",{"_index":5674,"title":{},"name":{},"text":{"57":{}},"component":{}}],["locat",{"_index":558,"title":{},"name":{},"text":{"4":{},"8":{},"18":{},"19":{},"20":{},"23":{},"26":{},"33":{},"35":{},"37":{},"38":{},"41":{},"54":{},"56":{},"57":{},"59":{},"61":{},"66":{}},"component":{}}],["lock",{"_index":2467,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["lockup",{"_index":2842,"title":{},"name":{},"text":{"33":{}},"component":{}}],["log",{"_index":1053,"title":{"71":{},"13-3":{},"36-1":{},"36-2":{},"36-4":{},"36-6":{},"36-7":{},"36-8":{},"36-10":{},"38-15":{},"41-5":{},"41-7":{},"41-8":{},"61-3":{}},"name":{"71":{}},"text":{"13":{},"18":{},"20":{},"22":{},"23":{},"28":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"43":{},"49":{},"56":{},"61":{},"62":{},"63":{},"66":{},"69":{},"71":{}},"component":{}}],["log.debug",{"_index":1101,"title":{},"name":{},"text":{"13":{}},"component":{}}],["log.debug(\"someth",{"_index":1126,"title":{},"name":{},"text":{"13":{}},"component":{}}],["log.info(\"someth",{"_index":1133,"title":{},"name":{},"text":{"13":{}},"component":{}}],["log.isdebugen",{"_index":1104,"title":{},"name":{},"text":{"13":{}},"component":{}}],["log.warn",{"_index":1117,"title":{},"name":{},"text":{"13":{}},"component":{}}],["log.warn(\"someth",{"_index":1140,"title":{},"name":{},"text":{"13":{}},"component":{}}],["log4j",{"_index":3267,"title":{},"name":{},"text":{"36":{}},"component":{}}],["log4j.properti",{"_index":3765,"title":{},"name":{},"text":{"38":{}},"component":{}}],["log4j.xml",{"_index":3766,"title":{},"name":{},"text":{"38":{}},"component":{}}],["log4j1",{"_index":3266,"title":{},"name":{},"text":{"36":{}},"component":{}}],["log4j2",{"_index":2612,"title":{"36-7":{}},"name":{},"text":{"33":{},"36":{},"71":{}},"component":{}}],["log4j2,http",{"_index":3278,"title":{},"name":{},"text":{"36":{}},"component":{}}],["log4j2.ini",{"_index":3281,"title":{},"name":{},"text":{"36":{}},"component":{}}],["log4j2.mod",{"_index":2274,"title":{},"name":{},"text":{"32":{}},"component":{}}],["log4j2.xml",{"_index":3280,"title":{},"name":{},"text":{"36":{}},"component":{}}],["logback",{"_index":2613,"title":{"36-6":{}},"name":{},"text":{"33":{},"36":{},"56":{},"71":{}},"component":{}}],["logback,http",{"_index":3273,"title":{},"name":{},"text":{"36":{}},"component":{}}],["logback.configurationfil",{"_index":5558,"title":{},"name":{},"text":{"56":{}},"component":{}}],["logback.ini",{"_index":3276,"title":{},"name":{},"text":{"36":{}},"component":{}}],["logback.xml",{"_index":3275,"title":{},"name":{},"text":{"36":{},"38":{}},"component":{}}],["logger",{"_index":1141,"title":{},"name":{},"text":{"13":{},"36":{},"38":{},"41":{},"56":{},"61":{},"71":{}},"component":{}}],["loggernam",{"_index":4000,"title":{},"name":{},"text":{"41":{}},"component":{}}],["logging.mod",{"_index":2271,"title":{},"name":{},"text":{"32":{}},"component":{}}],["logging.properti",{"_index":1387,"title":{},"name":{},"text":{"19":{},"20":{},"31":{},"33":{},"34":{},"36":{},"38":{},"41":{},"71":{}},"component":{}}],["logging/slf4j",{"_index":1527,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{}},"component":{}}],["logging|default",{"_index":2273,"title":{},"name":{},"text":{"32":{}},"component":{}}],["logic",{"_index":2569,"title":{},"name":{},"text":{"33":{},"43":{},"44":{},"48":{},"53":{},"61":{},"67":{}},"component":{}}],["login",{"_index":1664,"title":{},"name":{},"text":{"23":{},"37":{},"56":{},"61":{},"66":{}},"component":{}}],["login/error",{"_index":1679,"title":{},"name":{},"text":{"23":{}},"component":{}}],["login/login",{"_index":1678,"title":{},"name":{},"text":{"23":{}},"component":{}}],["loginmodul",{"_index":1642,"title":{"23-5":{}},"name":{},"text":{"23":{}},"component":{}}],["loginservic",{"_index":1821,"title":{},"name":{},"text":{"24":{},"56":{}},"component":{}}],["logwrit",{"_index":5918,"title":{},"name":{},"text":{"61":{}},"component":{}}],["logwriter.setretaindays(14",{"_index":5920,"title":{},"name":{},"text":{"61":{}},"component":{}}],["logwriter.settimezone(timezone.getdefault().getid",{"_index":5922,"title":{},"name":{},"text":{"61":{}},"component":{}}],["long",{"_index":1107,"title":{},"name":{},"text":{"13":{},"33":{},"37":{},"43":{},"44":{},"47":{},"48":{},"49":{},"50":{},"53":{},"57":{},"61":{},"66":{}},"component":{}}],["long)request.getattribute(\"beforehandlingnanotim",{"_index":6162,"title":{},"name":{},"text":{"61":{}},"component":{}}],["longconsum",{"_index":5781,"title":{},"name":{},"text":{"57":{}},"component":{}}],["longer",{"_index":3405,"title":{},"name":{},"text":{"37":{},"41":{},"47":{},"48":{},"56":{},"61":{},"66":{}},"component":{}}],["longest",{"_index":6612,"title":{},"name":{},"text":{"66":{}},"component":{}}],["look",{"_index":608,"title":{},"name":{},"text":{"6":{},"19":{},"20":{},"23":{},"26":{},"33":{},"34":{},"36":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{},"48":{},"51":{},"52":{},"53":{},"56":{},"57":{},"61":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["lookup",{"_index":1730,"title":{},"name":{},"text":{"23":{},"26":{},"38":{},"42":{},"52":{}},"component":{}}],["loop",{"_index":2496,"title":{},"name":{},"text":{"33":{},"44":{},"47":{},"48":{},"57":{},"61":{},"65":{}},"component":{}}],["loopback",{"_index":1872,"title":{},"name":{},"text":{"25":{},"34":{},"45":{},"65":{}},"component":{}}],["lost",{"_index":1301,"title":{},"name":{},"text":{"18":{},"37":{}},"component":{}}],["lot",{"_index":708,"title":{},"name":{},"text":{"7":{},"25":{},"33":{},"34":{},"37":{},"45":{},"47":{},"56":{},"61":{}},"component":{}}],["low",{"_index":385,"title":{},"name":{},"text":{"3":{},"34":{},"48":{},"49":{},"50":{},"51":{},"52":{},"61":{},"62":{},"63":{},"64":{}},"component":{}}],["lower",{"_index":1229,"title":{},"name":{},"text":{"17":{},"28":{},"32":{},"38":{},"44":{},"48":{}},"component":{}}],["lowest",{"_index":6202,"title":{},"name":{},"text":{"61":{}},"component":{}}],["lt",{"_index":1541,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["ltd",{"_index":830,"title":{},"name":{},"text":{"7":{}},"component":{}}],["m",{"_index":1000,"title":{},"name":{},"text":{"10":{},"20":{},"33":{},"48":{}},"component":{}}],["m.foo.com",{"_index":1432,"title":{},"name":{},"text":{"19":{}},"component":{}}],["machin",{"_index":1035,"title":{},"name":{},"text":{"11":{},"25":{},"33":{},"34":{},"37":{},"41":{},"45":{},"56":{}},"component":{}}],["machine_host",{"_index":1889,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["made",{"_index":186,"title":{},"name":{},"text":{"2":{},"7":{},"18":{},"34":{},"48":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["mail",{"_index":22,"title":{"4-4":{},"6-1":{},"26-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"26":{}},"component":{}}],["mail/sess",{"_index":1982,"title":{},"name":{},"text":{"26":{}},"component":{}}],["mail/smtp",{"_index":1993,"title":{},"name":{},"text":{"26":{}},"component":{}}],["mailsessionrefer",{"_index":1992,"title":{},"name":{},"text":{"26":{}},"component":{}}],["main",{"_index":1252,"title":{"18-1":{}},"name":{},"text":{"18":{},"30":{},"38":{},"41":{},"43":{},"44":{},"48":{},"49":{},"50":{},"53":{},"61":{},"64":{}},"component":{}}],["main(str",{"_index":5385,"title":{},"name":{},"text":{"55":{}},"component":{}}],["main=$(java",{"_index":3755,"title":{},"name":{},"text":{"38":{}},"component":{}}],["maintain",{"_index":590,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"9":{},"11":{},"18":{},"47":{},"49":{},"61":{},"62":{}},"component":{}}],["mainten",{"_index":1042,"title":{},"name":{},"text":{"11":{},"66":{}},"component":{}}],["major",{"_index":2185,"title":{},"name":{},"text":{"30":{},"49":{},"50":{},"62":{},"63":{},"66":{}},"component":{}}],["make",{"_index":109,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"9":{},"10":{},"11":{},"13":{},"16":{},"19":{},"20":{},"23":{},"25":{},"26":{},"29":{},"31":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"44":{},"47":{},"48":{},"49":{},"53":{},"56":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["manag",{"_index":1032,"title":{"25":{},"37":{},"66":{}},"name":{},"text":{"11":{},"18":{},"21":{},"23":{},"25":{},"26":{},"33":{},"34":{},"37":{},"41":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{}},"component":{}}],["managedattribut",{"_index":4347,"title":{"45-8":{}},"name":{},"text":{"45":{}},"component":{}}],["managedattribute(\"th",{"_index":4424,"title":{},"name":{},"text":{"45":{}},"component":{}}],["managedattribute(valu",{"_index":4396,"title":{},"name":{},"text":{"45":{}},"component":{}}],["managedobject",{"_index":4346,"title":{"45-7":{}},"name":{},"text":{"45":{}},"component":{}}],["managedobject(\"servic",{"_index":4394,"title":{},"name":{},"text":{"45":{}},"component":{}}],["managedobject(\"th",{"_index":4419,"title":{},"name":{},"text":{"45":{}},"component":{}}],["managedoper",{"_index":4348,"title":{"45-9":{}},"name":{},"text":{"45":{}},"component":{}}],["managedoperation(valu",{"_index":4403,"title":{},"name":{},"text":{"45":{}},"component":{}}],["managedselector",{"_index":4141,"title":{},"name":{},"text":{"44":{},"61":{}},"component":{}}],["managedsess",{"_index":6541,"title":{},"name":{},"text":{"66":{}},"component":{}}],["manager.xml",{"_index":3371,"title":{},"name":{},"text":{"37":{}},"component":{}}],["mandat",{"_index":3629,"title":{},"name":{},"text":{"37":{}},"component":{}}],["mandatori",{"_index":1080,"title":{},"name":{},"text":{"13":{},"23":{},"37":{},"42":{},"52":{},"61":{}},"component":{}}],["mani",{"_index":195,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"17":{},"18":{},"23":{},"25":{},"28":{},"32":{},"33":{},"34":{},"35":{},"36":{},"38":{},"40":{},"41":{},"44":{},"46":{},"47":{},"51":{},"53":{},"56":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["manifest",{"_index":3839,"title":{},"name":{},"text":{"39":{},"54":{}},"component":{}}],["manner",{"_index":1220,"title":{},"name":{},"text":{"17":{}},"component":{}}],["manual",{"_index":1555,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"37":{},"39":{},"55":{},"56":{},"61":{},"66":{}},"component":{}}],["manywrites(content.sink",{"_index":4317,"title":{},"name":{},"text":{"44":{}},"component":{}}],["map",{"_index":1857,"title":{"42-8":{},"67-11":{}},"name":{},"text":{"25":{},"28":{},"37":{},"41":{},"42":{},"44":{},"45":{},"49":{},"50":{},"52":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["map(destination::getconnectionpool",{"_index":4529,"title":{},"name":{},"text":{"48":{}},"component":{}}],["map.get(\"method",{"_index":6521,"title":{},"name":{},"text":{"65":{}},"component":{}}],["map.put(\"statu",{"_index":6524,"title":{},"name":{},"text":{"65":{}},"component":{}}],["mapfactori",{"_index":6837,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mapfactory.setaddresses(new",{"_index":6840,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mapfactory.setexpirysec(0",{"_index":6838,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mapfactory.setheartbeats(tru",{"_index":6839,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mapfactory.setweights(new",{"_index":6841,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mappedfil",{"_index":2087,"title":{},"name":{},"text":{"28":{}},"component":{}}],["mark",{"_index":204,"title":{},"name":{},"text":{"2":{},"7":{},"54":{},"66":{}},"component":{}}],["marker",{"_index":5327,"title":{},"name":{},"text":{"54":{}},"component":{}}],["markup",{"_index":657,"title":{},"name":{},"text":{"7":{}},"component":{}}],["marley",{"_index":1904,"title":{},"name":{},"text":{"25":{}},"component":{}}],["massiv",{"_index":1303,"title":{},"name":{},"text":{"18":{}},"component":{}}],["match",{"_index":986,"title":{},"name":{},"text":{"9":{},"10":{},"17":{},"19":{},"24":{},"26":{},"27":{},"30":{},"33":{},"34":{},"42":{},"48":{},"53":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["materi",{"_index":804,"title":{},"name":{},"text":{"7":{},"25":{},"30":{},"34":{},"45":{}},"component":{}}],["matter",{"_index":3643,"title":{},"name":{},"text":{"38":{},"53":{},"64":{}},"component":{}}],["maven",{"_index":166,"title":{"54":{},"55":{},"56":{},"7-4":{},"8-1":{},"8-4":{},"55-1":{},"55-5":{},"56-22":{},"56-23":{},"57-2":{},"58-3":{}},"name":{"54":{},"55":{},"56":{}},"text":{"2":{},"5":{},"7":{},"8":{},"32":{},"36":{},"38":{},"45":{},"48":{},"49":{},"50":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"61":{},"62":{},"63":{},"67":{}},"component":{}}],["maven.local.repo",{"_index":3816,"title":{},"name":{},"text":{"38":{}},"component":{}}],["maven.repo.uri",{"_index":3817,"title":{},"name":{},"text":{"38":{}},"component":{}}],["maven://org.bouncycastle/bcpkix",{"_index":2819,"title":{},"name":{},"text":{"33":{}},"component":{}}],["maven://org.bouncycastle/bcprov",{"_index":2823,"title":{},"name":{},"text":{"33":{}},"component":{}}],["maven://org.bouncycastle/bcutil",{"_index":2825,"title":{},"name":{},"text":{"33":{}},"component":{}}],["maven://org.postgresql/postgresql/${postgresql",{"_index":2303,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["maven_local_repo",{"_index":3825,"title":{},"name":{},"text":{"38":{}},"component":{}}],["max",{"_index":2319,"title":{},"name":{},"text":{"32":{},"33":{},"38":{},"48":{},"53":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["max_concurrent_stream",{"_index":4547,"title":{},"name":{},"text":{"48":{}},"component":{}}],["maxage(duration.ofdays(1).tosecond",{"_index":5734,"title":{},"name":{},"text":{"57":{}},"component":{}}],["maxage(timeunit.days.toseconds(1",{"_index":4789,"title":{},"name":{},"text":{"48":{}},"component":{}}],["maxbinarymessages",{"_index":5258,"title":{},"name":{},"text":{"53":{}},"component":{}}],["maxchildstartcheck",{"_index":5513,"title":{},"name":{},"text":{"56":{}},"component":{}}],["maxchildstartcheckm",{"_index":5514,"title":{},"name":{},"text":{"56":{}},"component":{}}],["maxconnectionsperdestin",{"_index":4538,"title":{},"name":{},"text":{"48":{}},"component":{}}],["maxerrordispatches=10",{"_index":3944,"title":{},"name":{},"text":{"41":{}},"component":{}}],["maxframes",{"_index":5260,"title":{},"name":{},"text":{"53":{}},"component":{}}],["maxidl",{"_index":6746,"title":{},"name":{},"text":{"66":{}},"component":{}}],["maxidletim",{"_index":3461,"title":{},"name":{},"text":{"37":{}},"component":{}}],["maximum",{"_index":1225,"title":{},"name":{},"text":{"17":{},"28":{},"33":{},"34":{},"37":{},"41":{},"47":{},"49":{},"53":{},"56":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["maxinact",{"_index":3607,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["maxinterv",{"_index":3510,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["maxloadedjsp",{"_index":2089,"title":{},"name":{},"text":{"28":{}},"component":{}}],["maxoutgoingframes=4",{"_index":5275,"title":{},"name":{},"text":{"53":{}},"component":{}}],["maxrequestr",{"_index":6441,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["maxrequestsperconnect",{"_index":4540,"title":{},"name":{},"text":{"48":{}},"component":{}}],["maxretri",{"_index":6818,"title":{},"name":{},"text":{"66":{}},"component":{}}],["maxtextmessages",{"_index":5259,"title":{},"name":{},"text":{"53":{},"67":{}},"component":{}}],["maxthread",{"_index":2839,"title":{},"name":{},"text":{"33":{},"47":{},"61":{}},"component":{}}],["mbean",{"_index":1840,"title":{},"name":{},"text":{"25":{},"41":{},"43":{},"45":{}},"component":{}}],["mbeancontain",{"_index":4133,"title":{},"name":{},"text":{"43":{},"45":{}},"component":{}}],["mbeancontainer(managementfactory.getplatformmbeanserv",{"_index":4353,"title":{},"name":{},"text":{"45":{}},"component":{}}],["mbeanserv",{"_index":1834,"title":{},"name":{},"text":{"25":{},"43":{},"45":{}},"component":{}}],["md5",{"_index":3847,"title":{},"name":{},"text":{"40":{}},"component":{}}],["md5:164c88b302622e17050af52c89945d44,us",{"_index":1742,"title":{},"name":{},"text":{"23":{}},"component":{}}],["md5:5ebe2294ecd0e0f08eab7690d2a6ee69",{"_index":3845,"title":{},"name":{},"text":{"40":{}},"component":{}}],["me@m",{"_index":1985,"title":{},"name":{},"text":{"26":{}},"component":{}}],["mean",{"_index":191,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"18":{},"19":{},"25":{},"26":{},"32":{},"33":{},"34":{},"37":{},"38":{},"44":{},"45":{},"47":{},"48":{},"49":{},"52":{},"56":{},"59":{},"61":{},"62":{},"66":{}},"component":{}}],["meaning",{"_index":4402,"title":{},"name":{},"text":{"45":{},"53":{}},"component":{}}],["measur",{"_index":2239,"title":{},"name":{},"text":{"31":{},"61":{}},"component":{}}],["mechan",{"_index":1194,"title":{"38":{},"18-4":{},"24-5":{},"38-15":{}},"name":{},"text":{"17":{},"18":{},"20":{},"24":{},"25":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"45":{},"48":{},"49":{},"50":{},"53":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["med",{"_index":395,"title":{},"name":{},"text":{"3":{}},"component":{}}],["mediat",{"_index":6659,"title":{},"name":{},"text":{"66":{}},"component":{}}],["medium",{"_index":467,"title":{},"name":{},"text":{"3":{},"43":{}},"component":{}}],["meet",{"_index":4485,"title":{},"name":{},"text":{"47":{},"53":{},"61":{},"66":{}},"component":{}}],["meetup",{"_index":124,"title":{},"name":{},"text":{"1":{}},"component":{}}],["melt",{"_index":7,"title":{},"name":{},"text":{"1":{}},"component":{}}],["mem(free/total/max",{"_index":3990,"title":{},"name":{},"text":{"41":{}},"component":{}}],["member",{"_index":59,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"42":{}},"component":{}}],["memcach",{"_index":3609,"title":{},"name":{},"text":{"37":{},"61":{},"66":{}},"component":{}}],["memcachedsessiondatamap",{"_index":3342,"title":{"37-41":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["memcachedsessiondatamapfactori",{"_index":6836,"title":{},"name":{},"text":{"66":{}},"component":{}}],["memori",{"_index":706,"title":{"37-8":{},"52-3":{}},"name":{},"text":{"7":{},"8":{},"18":{},"23":{},"33":{},"34":{},"37":{},"38":{},"41":{},"44":{},"47":{},"48":{},"49":{},"52":{},"53":{},"61":{},"62":{},"66":{}},"component":{}}],["memoryconnector",{"_index":4737,"title":{},"name":{},"text":{"48":{},"52":{},"61":{}},"component":{}}],["memoryconnector(serv",{"_index":4738,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["memorytransport",{"_index":4741,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["memorytransport(connector",{"_index":5965,"title":{},"name":{},"text":{"61":{}},"component":{}}],["memorytransport(memoryconnector",{"_index":4742,"title":{},"name":{},"text":{"48":{}},"component":{}}],["mention",{"_index":3764,"title":{},"name":{},"text":{"38":{},"61":{},"66":{}},"component":{}}],["merg",{"_index":976,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"54":{},"56":{},"57":{}},"component":{}}],["mergefrag",{"_index":5330,"title":{},"name":{},"text":{"54":{}},"component":{}}],["messag",{"_index":993,"title":{"10-2":{},"53-12":{},"53-14":{}},"name":{},"text":{"10":{},"13":{},"28":{},"33":{},"34":{},"36":{},"37":{},"44":{},"49":{},"53":{},"56":{},"57":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["message.startswith(\"echo",{"_index":5225,"title":{},"name":{},"text":{"53":{}},"component":{}}],["metadata",{"_index":724,"title":{},"name":{},"text":{"7":{},"17":{},"36":{},"38":{},"45":{},"49":{},"50":{},"66":{}},"component":{}}],["metadata.gethttpfield",{"_index":5016,"title":{},"name":{},"text":{"49":{}},"component":{}}],["metadata.isrespons",{"_index":5009,"title":{},"name":{},"text":{"49":{}},"component":{}}],["metadata.request",{"_index":4976,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["metadata.request(\"get",{"_index":4977,"title":{},"name":{},"text":{"49":{},"50":{},"62":{}},"component":{}}],["metadata.request(\"post",{"_index":4988,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["metadata.request)frame.getmetadata",{"_index":6426,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["metadata.respons",{"_index":5010,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["metadata.response(httpstatus.ok_200",{"_index":6429,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["metadata.response)metadata",{"_index":5011,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["method",{"_index":346,"title":{},"name":{},"text":{"3":{},"12":{},"13":{},"17":{},"20":{},"24":{},"25":{},"31":{},"32":{},"33":{},"34":{},"37":{},"41":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{}},"component":{}}],["method(httpmethod.head",{"_index":4554,"title":{},"name":{},"text":{"48":{}},"component":{}}],["method(httpmethod.post",{"_index":4752,"title":{},"name":{},"text":{"48":{}},"component":{}}],["methodhandl",{"_index":5195,"title":{},"name":{},"text":{"53":{}},"component":{}}],["mib",{"_index":3861,"title":{},"name":{},"text":{"41":{},"47":{},"48":{}},"component":{}}],["microsecond",{"_index":2580,"title":{},"name":{},"text":{"33":{}},"component":{}}],["microservic",{"_index":1147,"title":{},"name":{},"text":{"16":{},"34":{}},"component":{}}],["midnight",{"_index":2378,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["migrat",{"_index":5566,"title":{"57":{},"58":{},"57-4":{},"58-2":{}},"name":{},"text":{"58":{},"66":{}},"component":{}}],["mileston",{"_index":1497,"title":{},"name":{},"text":{"20":{}},"component":{}}],["millisecond",{"_index":2441,"title":{},"name":{},"text":{"33":{},"35":{},"37":{},"56":{},"66":{}},"component":{}}],["mime",{"_index":6101,"title":{},"name":{},"text":{"61":{}},"component":{}}],["mimetypes.type.form_encoded.is(contenttyp",{"_index":6307,"title":{},"name":{},"text":{"61":{}},"component":{}}],["mimetypes.type.multipart_form_data.is(contenttyp",{"_index":6320,"title":{},"name":{},"text":{"61":{}},"component":{}}],["min",{"_index":217,"title":{},"name":{},"text":{"2":{},"37":{}},"component":{}}],["mind",{"_index":570,"title":{},"name":{},"text":{"4":{},"6":{},"13":{}},"component":{}}],["minim",{"_index":3187,"title":{"37-44":{}},"name":{},"text":{"34":{},"37":{},"41":{},"42":{},"52":{},"53":{},"61":{},"66":{}},"component":{}}],["minimalist",{"_index":5897,"title":{},"name":{},"text":{"61":{}},"component":{}}],["minimum",{"_index":844,"title":{},"name":{},"text":{"7":{},"8":{},"17":{},"23":{},"32":{},"33":{},"47":{},"61":{}},"component":{}}],["minimumdataratehandl",{"_index":6133,"title":{},"name":{},"text":{"61":{}},"component":{}}],["minrequestdatarate=0",{"_index":3945,"title":{},"name":{},"text":{"41":{}},"component":{}}],["minresponsedatarate=0",{"_index":3946,"title":{},"name":{},"text":{"41":{}},"component":{}}],["minut",{"_index":3393,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["minutia",{"_index":541,"title":{},"name":{},"text":{"4":{}},"component":{}}],["mismatch",{"_index":1018,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{}}],["miss",{"_index":1017,"title":{},"name":{},"text":{"10":{},"33":{},"34":{},"38":{},"61":{}},"component":{}}],["mission",{"_index":1844,"title":{},"name":{},"text":{"25":{},"41":{},"45":{},"68":{}},"component":{}}],["mistak",{"_index":4244,"title":{},"name":{},"text":{"44":{},"61":{}},"component":{}}],["mitig",{"_index":3632,"title":{},"name":{},"text":{"37":{}},"component":{}}],["mix",{"_index":3676,"title":{},"name":{},"text":{"38":{},"48":{}},"component":{}}],["mixtur",{"_index":3769,"title":{},"name":{},"text":{"38":{}},"component":{}}],["mkdir",{"_index":1486,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"55":{}},"component":{}}],["mm",{"_index":3240,"title":{},"name":{},"text":{"36":{}},"component":{}}],["mod",{"_index":2265,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["mod_rewrit",{"_index":2618,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["mode",{"_index":2099,"title":{"59":{},"56-3":{},"59-1":{},"59-2":{},"59-3":{}},"name":{},"text":{"28":{},"30":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"47":{},"56":{},"59":{},"61":{},"66":{}},"component":{}}],["model",{"_index":4247,"title":{},"name":{},"text":{"44":{},"47":{},"48":{},"55":{},"57":{},"61":{},"66":{}},"component":{}}],["modern",{"_index":3124,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modif",{"_index":1658,"title":{},"name":{},"text":{"23":{},"61":{}},"component":{}}],["modifi",{"_index":939,"title":{"31-1":{}},"name":{},"text":{"8":{},"19":{},"20":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"45":{},"52":{},"61":{}},"component":{}}],["modificationtestinterv",{"_index":2060,"title":{},"name":{},"text":{"28":{}},"component":{}}],["modifiers{param}cod",{"_index":2564,"title":{},"name":{},"text":{"33":{}},"component":{}}],["modul",{"_index":318,"title":{"31":{},"32":{},"33":{},"18-2":{},"23-2":{},"24-2":{},"31-1":{},"31-2":{},"32-1":{},"32-2":{},"32-3":{},"32-4":{},"33-1":{},"33-2":{},"33-3":{},"33-4":{},"33-5":{},"33-6":{},"33-7":{},"33-8":{},"33-11":{},"33-12":{},"33-13":{},"33-14":{},"33-15":{},"33-16":{},"33-17":{},"33-18":{},"33-19":{},"33-20":{},"33-21":{},"33-26":{},"33-29":{},"33-30":{},"33-31":{},"33-32":{},"33-33":{},"33-34":{},"33-35":{},"37-3":{},"37-4":{},"37-7":{},"37-12":{},"37-14":{},"37-16":{},"37-18":{},"37-19":{},"37-21":{},"37-22":{},"37-24":{},"37-26":{},"37-31":{},"37-38":{},"37-40":{},"38-2":{},"38-3":{},"38-5":{},"38-6":{},"38-7":{}},"name":{},"text":{"2":{},"7":{},"8":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"48":{},"53":{},"56":{},"61":{},"66":{},"67":{},"71":{}},"component":{}}],["module'",{"_index":3805,"title":{},"name":{},"text":{"38":{}},"component":{}}],["module(",{"_index":1275,"title":{},"name":{},"text":{"18":{},"41":{}},"component":{}}],["module=demo",{"_index":1489,"title":{},"name":{},"text":{"20":{}},"component":{}}],["module=deploy",{"_index":1350,"title":{},"name":{},"text":{"19":{}},"component":{}}],["module=http",{"_index":1556,"title":{},"name":{},"text":{"20":{}},"component":{}}],["module=jmx",{"_index":1924,"title":{},"name":{},"text":{"25":{}},"component":{}}],["module=nam",{"_index":3702,"title":{},"name":{},"text":{"38":{}},"component":{}}],["module=server,http",{"_index":3648,"title":{},"name":{},"text":{"38":{}},"component":{}}],["modules=bytebufferpool",{"_index":1529,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{}},"component":{}}],["modules=connector",{"_index":2884,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=conscrypt",{"_index":3123,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=demo",{"_index":1311,"title":{},"name":{},"text":{"18":{}},"component":{}}],["modules=e",{"_index":1585,"title":{},"name":{},"text":{"20":{}},"component":{}}],["modules=ee10",{"_index":1581,"title":{},"name":{},"text":{"20":{},"24":{}},"component":{}}],["modules=ee12",{"_index":813,"title":{},"name":{},"text":{"7":{}},"component":{}}],["modules=http",{"_index":1312,"title":{},"name":{},"text":{"18":{},"20":{},"34":{},"36":{}},"component":{}}],["modules=http,acm",{"_index":2262,"title":{},"name":{},"text":{"31":{}},"component":{}}],["modules=http,http2c",{"_index":2953,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=http,https,http2c,http2,websocket",{"_index":3038,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=http,requestlog",{"_index":3291,"title":{},"name":{},"text":{"36":{}},"component":{}}],["modules=http,websocket",{"_index":3036,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=http2,websocket",{"_index":3037,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=https,custom",{"_index":2234,"title":{},"name":{},"text":{"31":{}},"component":{}}],["modules=https,test",{"_index":3168,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=jmx",{"_index":1839,"title":{},"name":{},"text":{"25":{}},"component":{}}],["modules=jpm",{"_index":3832,"title":{},"name":{},"text":{"39":{}},"component":{}}],["modules=jvm",{"_index":3664,"title":{},"name":{},"text":{"38":{}},"component":{}}],["modules=log",{"_index":3272,"title":{},"name":{},"text":{"36":{}},"component":{}}],["modules=postgresql",{"_index":3654,"title":{},"name":{},"text":{"38":{}},"component":{}}],["modules=proxi",{"_index":3159,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=quickstart",{"_index":3226,"title":{},"name":{},"text":{"35":{}},"component":{}}],["modules=serv",{"_index":1523,"title":{},"name":{},"text":{"20":{},"34":{},"36":{}},"component":{}}],["modules=server,http",{"_index":3639,"title":{},"name":{},"text":{"38":{}},"component":{}}],["modules=server,http,ee10",{"_index":1488,"title":{},"name":{},"text":{"20":{}},"component":{}}],["modules=server,http,log",{"_index":3644,"title":{},"name":{},"text":{"38":{}},"component":{}}],["modules=server,remot",{"_index":4014,"title":{},"name":{},"text":{"41":{}},"component":{}}],["modules=sess",{"_index":1583,"title":{},"name":{},"text":{"20":{}},"component":{}}],["modules=ssl",{"_index":3116,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=ssl,http",{"_index":2893,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=ssl,http2,http",{"_index":2940,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=ssl,http3",{"_index":3005,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=ssl,https,fcgi",{"_index":3064,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=test",{"_index":2896,"title":{},"name":{},"text":{"34":{}},"component":{}}],["modules=threadpool",{"_index":1526,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{}},"component":{}}],["modules=threadpool,http",{"_index":3315,"title":{},"name":{},"text":{"36":{}},"component":{}}],["module’",{"_index":1566,"title":{},"name":{},"text":{"20":{},"32":{}},"component":{}}],["moment",{"_index":1552,"title":{},"name":{},"text":{"20":{},"61":{},"66":{}},"component":{}}],["mongo",{"_index":3366,"title":{},"name":{},"text":{"37":{}},"component":{}}],["mongo.ini",{"_index":3515,"title":{},"name":{},"text":{"37":{}},"component":{}}],["mongodb",{"_index":3330,"title":{"37-16":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostn[:portn]]][/[database][?opt",{"_index":3526,"title":{},"name":{},"text":{"37":{}},"component":{}}],["mongodb://localhost",{"_index":6753,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastor",{"_index":6534,"title":{"66-21":{}},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastorefactori",{"_index":6749,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastorefactory.setcollectionname(\"jettysess",{"_index":6761,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastorefactory.setconnectionstring(\"mongodb:://localhost:27017",{"_index":6762,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastorefactory.setdbname(\"httpsess",{"_index":6760,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastorefactory.setgraceperiodsec(3600",{"_index":6758,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastorefactory.sethost(\"localhost",{"_index":6763,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastorefactory.setport(27017",{"_index":6764,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongosessiondatastorefactory.setsaveperiodsec(0",{"_index":6759,"title":{},"name":{},"text":{"66":{}},"component":{}}],["mongouri",{"_index":3524,"title":{},"name":{},"text":{"37":{}},"component":{}}],["monitor",{"_index":1599,"title":{"25":{}},"name":{},"text":{"20":{},"21":{},"25":{},"33":{},"34":{},"43":{},"45":{},"56":{},"61":{}},"component":{}}],["more",{"_index":116,"title":{"56-26":{}},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"7":{},"9":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"68":{},"69":{},"71":{}},"component":{}}],["moreov",{"_index":5541,"title":{},"name":{},"text":{"56":{}},"component":{}}],["mort",{"_index":826,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mortbay",{"_index":300,"title":{},"name":{},"text":{"2":{}},"component":{}}],["mostli",{"_index":2631,"title":{},"name":{},"text":{"33":{},"34":{},"37":{},"42":{},"47":{},"61":{}},"component":{}}],["move",{"_index":762,"title":{},"name":{},"text":{"7":{},"32":{},"38":{},"45":{}},"component":{}}],["movement",{"_index":153,"title":{},"name":{},"text":{"1":{}},"component":{}}],["mozilla/5.0",{"_index":3304,"title":{},"name":{},"text":{"36":{}},"component":{}}],["ms",{"_index":2600,"title":{},"name":{},"text":{"33":{},"37":{},"61":{},"66":{}},"component":{}}],["much",{"_index":3183,"title":{},"name":{},"text":{"34":{},"41":{},"47":{},"48":{}},"component":{}}],["multi",{"_index":1154,"title":{"17-4":{}},"name":{},"text":{"17":{},"37":{},"56":{},"66":{}},"component":{}}],["multipart",{"_index":6303,"title":{},"name":{},"text":{"61":{}},"component":{}}],["multipart.extractboundary(contenttyp",{"_index":6322,"title":{},"name":{},"text":{"61":{}},"component":{}}],["multipart/form",{"_index":6329,"title":{},"name":{},"text":{"61":{}},"component":{}}],["multipartconfig",{"_index":1162,"title":{},"name":{},"text":{"17":{}},"component":{}}],["multipartformdata.pars",{"_index":6318,"title":{},"name":{},"text":{"61":{}},"component":{}}],["multipartformdata.parser(boundari",{"_index":6323,"title":{},"name":{},"text":{"61":{}},"component":{}}],["multipartformdata.part",{"_index":6330,"title":{},"name":{},"text":{"61":{}},"component":{}}],["multipartformdatahandl",{"_index":6319,"title":{},"name":{},"text":{"61":{}},"component":{}}],["multipl",{"_index":628,"title":{"7-10":{},"7-11":{},"30-2":{},"56-25":{},"61-13":{}},"name":{},"text":{"7":{},"18":{},"19":{},"25":{},"30":{},"33":{},"34":{},"37":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"53":{},"56":{},"61":{},"62":{},"63":{},"66":{},"67":{}},"component":{}}],["multiplex",{"_index":1878,"title":{},"name":{},"text":{"25":{},"33":{},"34":{},"45":{},"47":{},"48":{},"49":{},"50":{},"61":{},"62":{},"63":{}},"component":{}}],["multiplexconnectionpool",{"_index":4532,"title":{},"name":{},"text":{"48":{}},"component":{}}],["multipli",{"_index":5110,"title":{},"name":{},"text":{"52":{}},"component":{}}],["multireleas",{"_index":333,"title":{},"name":{},"text":{"2":{}},"component":{}}],["mutabl",{"_index":4566,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["mutual",{"_index":152,"title":{},"name":{},"text":{"1":{},"30":{},"33":{},"36":{}},"component":{}}],["mvn",{"_index":689,"title":{},"name":{},"text":{"7":{},"8":{},"54":{},"55":{},"56":{}},"component":{}}],["my/custom/class",{"_index":3556,"title":{},"name":{},"text":{"37":{}},"component":{}}],["myapp",{"_index":6389,"title":{},"name":{},"text":{"61":{}},"component":{}}],["myapp.war",{"_index":1393,"title":{},"name":{},"text":{"19":{}},"component":{}}],["myapphandl",{"_index":6383,"title":{},"name":{},"text":{"61":{}},"component":{}}],["myapps.dir",{"_index":1395,"title":{},"name":{},"text":{"19":{}},"component":{}}],["myclassnam",{"_index":1071,"title":{},"name":{},"text":{"13":{}},"component":{}}],["myconnect",{"_index":4177,"title":{},"name":{},"text":{"44":{}},"component":{}}],["myconnection(endpoint",{"_index":4178,"title":{},"name":{},"text":{"44":{}},"component":{}}],["mycontext",{"_index":5470,"title":{},"name":{},"text":{"56":{}},"component":{}}],["myeventshandl",{"_index":6155,"title":{},"name":{},"text":{"61":{}},"component":{}}],["myhost",{"_index":3555,"title":{},"name":{},"text":{"37":{},"42":{}},"component":{}}],["myjavaxwebsocketinitializerservlet",{"_index":6868,"title":{},"name":{},"text":{"67":{}},"component":{}}],["myjettywebsocketendpoint",{"_index":6900,"title":{},"name":{},"text":{"67":{}},"component":{}}],["mykey",{"_index":2132,"title":{},"name":{},"text":{"30":{}},"component":{}}],["mylist",{"_index":4041,"title":{},"name":{},"text":{"42":{}},"component":{}}],["myrealm",{"_index":4826,"title":{},"name":{},"text":{"48":{}},"component":{}}],["myspecial.properti",{"_index":5506,"title":{},"name":{},"text":{"56":{}},"component":{}}],["myspecial.xml",{"_index":5505,"title":{},"name":{},"text":{"56":{}},"component":{}}],["myspecialvalu",{"_index":1949,"title":{},"name":{},"text":{"26":{}},"component":{}}],["mysql",{"_index":1404,"title":{},"name":{},"text":{"19":{},"37":{}},"component":{}}],["mystr",{"_index":4036,"title":{},"name":{},"text":{"42":{}},"component":{}}],["mysys.prop",{"_index":5561,"title":{},"name":{},"text":{"56":{}},"component":{}}],["mythic",{"_index":306,"title":{},"name":{},"text":{"2":{}},"component":{}}],["mywebapp",{"_index":1357,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mywebapp.com",{"_index":1451,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mywebapp.net",{"_index":1453,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mywebapp.war",{"_index":1367,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["mywebapp.xml",{"_index":1371,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mywebsocketroomendpoint(room",{"_index":6927,"title":{},"name":{},"text":{"67":{}},"component":{}}],["n",{"_index":918,"title":{},"name":{},"text":{"8":{},"19":{},"36":{},"45":{},"48":{},"52":{},"53":{},"61":{}},"component":{}}],["name",{"_index":773,"title":{"19-8":{},"32-1":{},"45-10":{},"58-4":{}},"name":{},"text":{"7":{},"17":{},"19":{},"20":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"66":{},"67":{}},"component":{}}],["name/",{"_index":2019,"title":{},"name":{},"text":{"27":{}},"component":{}}],["name/valu",{"_index":3773,"title":{},"name":{},"text":{"38":{},"56":{}},"component":{}}],["namespac",{"_index":242,"title":{},"name":{},"text":{"2":{},"7":{},"26":{},"32":{},"37":{},"66":{}},"component":{}}],["nanotim",{"_index":5296,"title":{},"name":{},"text":{"53":{},"61":{}},"component":{}}],["nanotime.millissince(beforehandlingnanotim",{"_index":6164,"title":{},"name":{},"text":{"61":{}},"component":{}}],["nanotime.now",{"_index":6159,"title":{},"name":{},"text":{"61":{}},"component":{}}],["nanotime.since(start",{"_index":5301,"title":{},"name":{},"text":{"53":{}},"component":{}}],["narrowli",{"_index":538,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["nasti",{"_index":879,"title":{},"name":{},"text":{"7":{}},"component":{}}],["nativ",{"_index":3053,"title":{},"name":{},"text":{"34":{},"47":{},"61":{}},"component":{}}],["natur",{"_index":768,"title":{},"name":{},"text":{"7":{},"11":{},"33":{},"66":{}},"component":{}}],["navig",{"_index":901,"title":{},"name":{},"text":{"8":{},"34":{},"38":{}},"component":{}}],["ncsa",{"_index":2547,"title":{},"name":{},"text":{"33":{},"36":{},"61":{}},"component":{}}],["near",{"_index":4460,"title":{},"name":{},"text":{"47":{}},"component":{}}],["nearli",{"_index":806,"title":{},"name":{},"text":{"7":{},"33":{}},"component":{}}],["necessari",{"_index":818,"title":{},"name":{},"text":{"7":{},"18":{},"25":{},"31":{},"32":{},"33":{},"34":{},"38":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"52":{},"53":{},"56":{},"61":{},"67":{}},"component":{}}],["necessarili",{"_index":554,"title":{},"name":{},"text":{"4":{},"47":{}},"component":{}}],["need",{"_index":594,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"13":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"27":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"71":{}},"component":{}}],["neg",{"_index":4481,"title":{},"name":{},"text":{"47":{},"66":{}},"component":{}}],["negat",{"_index":2565,"title":{},"name":{},"text":{"33":{}},"component":{}}],["negoti",{"_index":2336,"title":{},"name":{},"text":{"33":{},"34":{},"48":{},"61":{}},"component":{}}],["nest",{"_index":4038,"title":{},"name":{},"text":{"42":{},"61":{},"66":{}},"component":{}}],["net.exampl",{"_index":2431,"title":{},"name":{},"text":{"33":{}},"component":{}}],["netih",{"_index":3476,"title":{},"name":{},"text":{"37":{}},"component":{}}],["network",{"_index":1259,"title":{"44-6":{}},"name":{},"text":{"18":{},"19":{},"20":{},"25":{},"31":{},"33":{},"34":{},"38":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"64":{},"65":{},"67":{}},"component":{}}],["network/transport",{"_index":5262,"title":{},"name":{},"text":{"53":{}},"component":{}}],["networkconnector.listen",{"_index":5996,"title":{},"name":{},"text":{"61":{}},"component":{}}],["never",{"_index":1100,"title":{},"name":{},"text":{"13":{},"28":{},"37":{},"44":{},"47":{},"48":{},"49":{},"52":{},"61":{},"66":{},"67":{}},"component":{}}],["never_evict",{"_index":3624,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["new",{"_index":69,"title":{"31-2":{},"42-4":{}},"name":{},"text":{"1":{},"6":{},"10":{},"13":{},"19":{},"20":{},"23":{},"24":{},"26":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["new/$1",{"_index":2627,"title":{},"name":{},"text":{"33":{}},"component":{}}],["new_path",{"_index":6288,"title":{},"name":{},"text":{"61":{}},"component":{}}],["new_valu",{"_index":919,"title":{},"name":{},"text":{"8":{}},"component":{}}],["newcom",{"_index":45,"title":{},"name":{},"text":{"1":{}},"component":{}}],["newconnection(connector",{"_index":6506,"title":{},"name":{},"text":{"65":{}},"component":{}}],["newer",{"_index":332,"title":{},"name":{},"text":{"2":{},"32":{},"48":{},"52":{},"59":{}},"component":{}}],["newli",{"_index":2184,"title":{},"name":{},"text":{"30":{},"33":{},"34":{},"37":{},"42":{},"48":{},"66":{}},"component":{}}],["newlin",{"_index":5140,"title":{},"name":{},"text":{"52":{}},"component":{}}],["newpath",{"_index":6287,"title":{},"name":{},"text":{"61":{}},"component":{}}],["newrequest",{"_index":6292,"title":{},"name":{},"text":{"61":{}},"component":{}}],["newselectormanag",{"_index":5098,"title":{},"name":{},"text":{"52":{}},"component":{}}],["newsessionid(httpservletrequest",{"_index":6569,"title":{},"name":{},"text":{"66":{}},"component":{}}],["newuri",{"_index":6290,"title":{},"name":{},"text":{"61":{}},"component":{}}],["next",{"_index":62,"title":{},"name":{},"text":{"1":{},"28":{},"31":{},"38":{},"44":{},"45":{},"48":{},"53":{},"61":{},"65":{},"67":{}},"component":{}}],["nginx",{"_index":2619,"title":{},"name":{},"text":{"33":{},"34":{},"48":{},"61":{}},"component":{}}],["nginx(via",{"_index":6036,"title":{},"name":{},"text":{"61":{}},"component":{}}],["nginx/apach",{"_index":6085,"title":{},"name":{},"text":{"61":{}},"component":{}}],["nice",{"_index":6239,"title":{},"name":{},"text":{"61":{}},"component":{}}],["nicer",{"_index":4035,"title":{},"name":{},"text":{"42":{},"61":{}},"component":{}}],["nio",{"_index":2466,"title":{},"name":{},"text":{"33":{},"44":{},"47":{},"61":{}},"component":{}}],["nocert",{"_index":2197,"title":{},"name":{},"text":{"30":{}},"component":{}}],["node",{"_index":2196,"title":{},"name":{},"text":{"30":{},"33":{},"37":{},"38":{},"41":{},"61":{},"66":{}},"component":{}}],["node0",{"_index":3383,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["node0ek3vx7x2y1e7pmi3z00uqj1k0",{"_index":3449,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["node[jetty_worker_nam",{"_index":6547,"title":{},"name":{},"text":{"66":{}},"component":{}}],["noisi",{"_index":6623,"title":{},"name":{},"text":{"66":{}},"component":{}}],["nomin",{"_index":5515,"title":{},"name":{},"text":{"56":{}},"component":{}}],["non",{"_index":1037,"title":{"48-9":{}},"name":{},"text":{"11":{},"19":{},"25":{},"28":{},"32":{},"33":{},"37":{},"38":{},"42":{},"43":{},"44":{},"47":{},"48":{},"51":{},"52":{},"53":{},"56":{},"57":{},"59":{},"61":{},"65":{},"66":{}},"component":{}}],["nonblockingsendendpoint",{"_index":5265,"title":{},"name":{},"text":{"53":{}},"component":{}}],["none",{"_index":5326,"title":{},"name":{},"text":{"54":{},"61":{}},"component":{}}],["noop",{"_index":3270,"title":{},"name":{},"text":{"36":{}},"component":{}}],["normal",{"_index":1351,"title":{},"name":{},"text":{"19":{},"34":{},"35":{},"36":{},"44":{},"45":{},"47":{},"56":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["nosql",{"_index":3365,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["notat",{"_index":2539,"title":{},"name":{},"text":{"33":{}},"component":{}}],["note",{"_index":173,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"10":{},"17":{},"19":{},"20":{},"23":{},"25":{},"26":{},"28":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"44":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["noth",{"_index":1269,"title":{},"name":{},"text":{"18":{},"32":{},"33":{},"38":{},"39":{},"44":{},"66":{}},"component":{}}],["notic",{"_index":247,"title":{},"name":{},"text":{"2":{},"19":{},"28":{},"41":{}},"component":{}}],["notifi",{"_index":4131,"title":{},"name":{},"text":{"43":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["notifyremoteasyncerrors=tru",{"_index":3951,"title":{},"name":{},"text":{"41":{}},"component":{}}],["notori",{"_index":6231,"title":{},"name":{},"text":{"61":{}},"component":{}}],["novic",{"_index":593,"title":{},"name":{},"text":{"6":{}},"component":{}}],["now",{"_index":516,"title":{},"name":{},"text":{"4":{},"7":{},"19":{},"20":{},"23":{},"26":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{}},"component":{}}],["nowaday",{"_index":2936,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["nth",{"_index":6057,"title":{},"name":{},"text":{"61":{}},"component":{}}],["null",{"_index":1096,"title":{},"name":{},"text":{"13":{},"26":{},"33":{},"34":{},"37":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["null.ini",{"_index":3439,"title":{},"name":{},"text":{"37":{}},"component":{}}],["nullsessioncach",{"_index":3626,"title":{"66-10":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["nullsessioncache(app2.getsessionhandl",{"_index":6653,"title":{},"name":{},"text":{"66":{}},"component":{}}],["nullsessioncache.setflushonresponsecommit(tru",{"_index":6654,"title":{},"name":{},"text":{"66":{}},"component":{}}],["nullsessioncache.setremoveunloadablesessions(tru",{"_index":6655,"title":{},"name":{},"text":{"66":{}},"component":{}}],["nullsessioncache.setsaveoncreate(tru",{"_index":6656,"title":{},"name":{},"text":{"66":{}},"component":{}}],["nullsessioncache.setsessiondatastore(new",{"_index":6657,"title":{},"name":{},"text":{"66":{}},"component":{}}],["nullsessioncachefactori",{"_index":6646,"title":{},"name":{},"text":{"66":{}},"component":{}}],["nullsessiondatastor",{"_index":6529,"title":{"66-16":{}},"name":{},"text":{"66":{}},"component":{}}],["number",{"_index":798,"title":{},"name":{},"text":{"7":{},"8":{},"11":{},"12":{},"17":{},"20":{},"28":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"66":{},"71":{}},"component":{}}],["number(20",{"_index":3479,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["numer",{"_index":550,"title":{},"name":{},"text":{"4":{},"66":{}},"component":{}}],["nurtur",{"_index":61,"title":{},"name":{},"text":{"1":{}},"component":{}}],["o",{"_index":2154,"title":{},"name":{},"text":{"30":{},"33":{},"38":{},"48":{}},"component":{}}],["o=compani",{"_index":2142,"title":{},"name":{},"text":{"30":{}},"component":{}}],["obf",{"_index":2763,"title":{},"name":{},"text":{"33":{},"40":{}},"component":{}}],["obf:1xmk1w261u9r1w1c1xmq,user,admin",{"_index":1738,"title":{},"name":{},"text":{"23":{}},"component":{}}],["obf:1xmk1w261z0f1w1c1xmq",{"_index":1983,"title":{},"name":{},"text":{"26":{}},"component":{}}],["obf:1yta1t331v8w1v9q1t331ytc",{"_index":3844,"title":{},"name":{},"text":{"40":{}},"component":{}}],["obfusc",{"_index":1700,"title":{"40-1":{}},"name":{},"text":{"23":{},"26":{},"33":{},"40":{}},"component":{}}],["object",{"_index":1082,"title":{},"name":{},"text":{"13":{},"25":{},"26":{},"31":{},"34":{},"36":{},"37":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"53":{},"55":{},"56":{},"57":{},"58":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["objectclass",{"_index":1779,"title":{},"name":{},"text":{"23":{}},"component":{}}],["objectmbean",{"_index":4409,"title":{},"name":{},"text":{"45":{}},"component":{}}],["observ",{"_index":2765,"title":{},"name":{},"text":{"33":{}},"component":{}}],["obsolet",{"_index":2513,"title":{},"name":{},"text":{"33":{},"36":{},"59":{},"61":{}},"component":{}}],["obtain",{"_index":1394,"title":{},"name":{},"text":{"19":{},"23":{},"24":{},"26":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"61":{},"66":{}},"component":{}}],["obvious",{"_index":3776,"title":{},"name":{},"text":{"38":{}},"component":{}}],["occas",{"_index":6420,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["occupi",{"_index":4489,"title":{},"name":{},"text":{"47":{}},"component":{}}],["occur",{"_index":881,"title":{},"name":{},"text":{"7":{},"17":{},"28":{},"37":{},"44":{},"49":{},"50":{},"66":{}},"component":{}}],["occurr",{"_index":6418,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["oe.jetty:main",{"_index":3321,"title":{},"name":{},"text":{"36":{}},"component":{}}],["oejd.deploymentmanager:main",{"_index":1604,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oejdp.scanningappprovider:main",{"_index":1598,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oeje10w.webappcontext@7857fe2{ee10",{"_index":1613,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oejes.servletcontexthandler:main",{"_index":1622,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oejew.standarddescriptorprocessor:main",{"_index":1609,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oeji.managedselector@489115ef{started}[id=0",{"_index":3954,"title":{},"name":{},"text":{"41":{}},"component":{}}],["oejk.keystoregenerator:main",{"_index":2911,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejqs.quicserverconnectionfactory:main",{"_index":3015,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejs.abstractconnector:main",{"_index":1543,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{}},"component":{}}],["oejs.defaultsessionidmanager:main",{"_index":1624,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oejs.server:main",{"_index":1536,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["oejs.server@1bd39d3c{starting}[12.0.11",{"_index":3177,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejs.server@1ce24091{starting}[12.0.11",{"_index":1629,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oejs.server@27ce24aa{starting}[12.0.11",{"_index":2889,"title":{},"name":{},"text":{"34":{},"38":{},"41":{}},"component":{}}],["oejs.server@488d1cd7{starting}[12.0.11",{"_index":2924,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejs.server@49ec71f8{starting}[12.0.11",{"_index":3326,"title":{},"name":{},"text":{"36":{}},"component":{}}],["oejs.server@4ac3c60d{starting}[12.0.11",{"_index":1547,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oejs.server@4ba2ca36{starting}[12.0.11",{"_index":4020,"title":{},"name":{},"text":{"41":{}},"component":{}}],["oejs.server@6302bbb1{starting}[12.0.11",{"_index":2959,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejs.server@66c92293{starting}[12.0.11",{"_index":2950,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejs.server@68999068{starting}[12.0.11",{"_index":3166,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejs.server@6c0d9d86{starting}[12.0.11",{"_index":3021,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejsh.contexthandler:main",{"_index":1612,"title":{},"name":{},"text":{"20":{}},"component":{}}],["oejsh.contexthandlercollection@9d5509a{start",{"_index":3928,"title":{},"name":{},"text":{"41":{}},"component":{}}],["oejsh.defaulthandler@6f03482{showcontext=true,favicon=true,start",{"_index":3927,"title":{},"name":{},"text":{"41":{}},"component":{}}],["oeju.queuedthreadpool",{"_index":3254,"title":{},"name":{},"text":{"36":{}},"component":{}}],["oejuc.environment$named@0{cor",{"_index":3982,"title":{},"name":{},"text":{"41":{}},"component":{}}],["oejus.sslcontextfactory:main",{"_index":2914,"title":{},"name":{},"text":{"34":{}},"component":{}}],["oejut.scheduledexecutorscheduler@52525845{start",{"_index":3888,"title":{},"name":{},"text":{"41":{}},"component":{}}],["oejx.xmlconfiguration:main",{"_index":1592,"title":{},"name":{},"text":{"20":{}},"component":{}}],["offer",{"_index":209,"title":{},"name":{},"text":{"2":{},"25":{},"31":{},"34":{},"37":{},"43":{},"44":{},"47":{},"48":{},"51":{},"53":{},"61":{},"67":{}},"component":{}}],["offici",{"_index":670,"title":{},"name":{},"text":{"7":{},"25":{},"33":{},"34":{},"36":{},"37":{},"45":{},"47":{}},"component":{}}],["offload",{"_index":2938,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["offset",{"_index":2594,"title":{},"name":{},"text":{"33":{}},"component":{}}],["og",{"_index":852,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ok",{"_index":1073,"title":{},"name":{},"text":{"13":{},"33":{},"34":{}},"component":{}}],["okay",{"_index":363,"title":{},"name":{},"text":{"3":{}},"component":{}}],["old",{"_index":1328,"title":{},"name":{},"text":{"19":{},"20":{},"33":{},"34":{},"42":{},"43":{},"56":{},"61":{}},"component":{}}],["old/broken",{"_index":3141,"title":{},"name":{},"text":{"34":{}},"component":{}}],["older",{"_index":197,"title":{},"name":{},"text":{"2":{},"11":{},"34":{},"43":{},"48":{}},"component":{}}],["olderchild",{"_index":4124,"title":{},"name":{},"text":{"43":{}},"component":{}}],["oldvalu",{"_index":5682,"title":{},"name":{},"text":{"57":{}},"component":{}}],["omit",{"_index":1215,"title":{},"name":{},"text":{"17":{},"26":{},"34":{},"67":{}},"component":{}}],["on",{"_index":37,"title":{"56-26":{}},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"13":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"28":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["on/off",{"_index":3869,"title":{},"name":{},"text":{"41":{}},"component":{}}],["onaccept(sess",{"_index":6421,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["onbeforehandling(request",{"_index":6156,"title":{},"name":{},"text":{"61":{}},"component":{}}],["onbinarymessage(inputstream",{"_index":5250,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onbinarymessage(sess",{"_index":5243,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onc",{"_index":629,"title":{"7-10":{}},"name":{},"text":{"8":{},"17":{},"18":{},"19":{},"20":{},"33":{},"36":{},"37":{},"38":{},"44":{},"47":{},"48":{},"49":{},"50":{},"56":{},"57":{},"59":{},"66":{},"67":{}},"component":{}}],["onclosed(connect",{"_index":4199,"title":{},"name":{},"text":{"44":{}},"component":{}}],["oncomplete(request",{"_index":6160,"title":{},"name":{},"text":{"61":{}},"component":{}}],["oncomplete(result",{"_index":4657,"title":{},"name":{},"text":{"48":{}},"component":{}}],["oncompletefailur",{"_index":4334,"title":{},"name":{},"text":{"44":{}},"component":{}}],["oncompletefailure(throw",{"_index":4233,"title":{},"name":{},"text":{"44":{},"53":{},"65":{}},"component":{}}],["oncompletesuccess",{"_index":4232,"title":{},"name":{},"text":{"44":{},"53":{},"65":{}},"component":{}}],["oncontent(respons",{"_index":4686,"title":{},"name":{},"text":{"48":{}},"component":{}}],["oncontentsource(request",{"_index":4674,"title":{},"name":{},"text":{"48":{}},"component":{}}],["oncontentsource(respons",{"_index":4699,"title":{},"name":{},"text":{"48":{}},"component":{}}],["ondataavail",{"_index":5014,"title":{},"name":{},"text":{"49":{}},"component":{}}],["ondataavailable(stream",{"_index":5017,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["ondataavailable(stream.cli",{"_index":5072,"title":{},"name":{},"text":{"50":{}},"component":{}}],["ondataavailable(stream.serv",{"_index":6477,"title":{},"name":{},"text":{"63":{}},"component":{}}],["one.com",{"_index":3125,"title":{},"name":{},"text":{"34":{}},"component":{}}],["onfailure(stream.cli",{"_index":5075,"title":{},"name":{},"text":{"50":{}},"component":{}}],["onfil",{"_index":4182,"title":{},"name":{},"text":{"44":{},"52":{},"65":{}},"component":{}}],["ongo",{"_index":507,"title":{},"name":{},"text":{"4":{}},"component":{}}],["onhandlercallbacknotcompleted(request",{"_index":6235,"title":{},"name":{},"text":{"61":{}},"component":{}}],["onhandshakeresponse(request",{"_index":5188,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onheaders(stream",{"_index":5007,"title":{},"name":{},"text":{"49":{}},"component":{}}],["online(consum",{"_index":5145,"title":{},"name":{},"text":{"52":{}},"component":{}}],["onnewstream",{"_index":6427,"title":{},"name":{},"text":{"62":{}},"component":{}}],["onnewstream(stream",{"_index":6425,"title":{},"name":{},"text":{"62":{}},"component":{}}],["onopen",{"_index":4175,"title":{},"name":{},"text":{"44":{},"52":{},"65":{}},"component":{}}],["onopen(networkconnector",{"_index":5997,"title":{},"name":{},"text":{"61":{}},"component":{}}],["onopen(sess",{"_index":5203,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onopened(connect",{"_index":4195,"title":{},"name":{},"text":{"44":{}},"component":{}}],["onprefac",{"_index":4966,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["onpreface(sess",{"_index":4967,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["onpush(stream",{"_index":5039,"title":{},"name":{},"text":{"49":{}},"component":{}}],["onrequest",{"_index":6476,"title":{},"name":{},"text":{"63":{}},"component":{}}],["onrequest(stream.serv",{"_index":6475,"title":{},"name":{},"text":{"63":{}},"component":{}}],["onrequestbegin(request",{"_index":4592,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onrequestcommit(request",{"_index":4594,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onrequestcontent((request",{"_index":4595,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onrequestfailure((request",{"_index":4596,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onrequestheaders(request",{"_index":4593,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onrequestqueued(request",{"_index":4591,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onrequestsuccess(request",{"_index":4597,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onreset(stream",{"_index":5033,"title":{},"name":{},"text":{"49":{}},"component":{}}],["onresponse(stream.cli",{"_index":5070,"title":{},"name":{},"text":{"50":{}},"component":{}}],["onresponsebegin(respons",{"_index":4598,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onresponsecontentasync((respons",{"_index":4601,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onresponsefailure((respons",{"_index":4603,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onresponseheader((respons",{"_index":4599,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onresponseheaders(respons",{"_index":4600,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onresponsesuccess(respons",{"_index":4604,"title":{},"name":{},"text":{"48":{}},"component":{}}],["onsettings(sess",{"_index":6448,"title":{},"name":{},"text":{"62":{}},"component":{}}],["ontext(sess",{"_index":5266,"title":{},"name":{},"text":{"53":{}},"component":{}}],["ontext(str",{"_index":5205,"title":{},"name":{},"text":{"53":{}},"component":{}}],["ontextmessage(read",{"_index":5248,"title":{},"name":{},"text":{"53":{}},"component":{}}],["ontextmessage(sess",{"_index":5242,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onto",{"_index":1034,"title":{},"name":{},"text":{"11":{},"24":{},"27":{},"37":{},"42":{},"48":{},"56":{}},"component":{}}],["onward",{"_index":3536,"title":{},"name":{},"text":{"37":{}},"component":{}}],["onwebsocketbinary(bytebuff",{"_index":5227,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onwebsocketfram",{"_index":5294,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onwebsocketmessag",{"_index":5204,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onwebsocketopen",{"_index":5202,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onwebsocketopen(sess",{"_index":5208,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onwebsocketpartialbinary(bytebuff",{"_index":5238,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onwebsocketpong(bytebuff",{"_index":5299,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onwebsockettext(str",{"_index":5210,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onxyz",{"_index":6140,"title":{},"name":{},"text":{"61":{}},"component":{}}],["opaqu",{"_index":3142,"title":{},"name":{},"text":{"34":{},"53":{}},"component":{}}],["open",{"_index":52,"title":{"4-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"8":{},"20":{},"25":{},"32":{},"33":{},"34":{},"39":{},"41":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"63":{}},"component":{}}],["openjdk",{"_index":894,"title":{},"name":{},"text":{"8":{},"25":{},"34":{},"38":{},"41":{},"48":{},"61":{}},"component":{}}],["openjdk’",{"_index":3117,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["openssl",{"_index":2194,"title":{},"name":{},"text":{"30":{},"31":{},"34":{},"61":{}},"component":{}}],["opensslprovid",{"_index":6033,"title":{},"name":{},"text":{"61":{}},"component":{}}],["oper",{"_index":510,"title":{"15":{},"14-1":{}},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"14":{},"15":{},"20":{},"24":{},"33":{},"36":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"52":{},"53":{},"61":{},"66":{},"72":{}},"component":{}}],["opportun",{"_index":128,"title":{},"name":{},"text":{"1":{},"54":{}},"component":{}}],["oppos",{"_index":4459,"title":{},"name":{},"text":{"47":{}},"component":{}}],["opposit",{"_index":4097,"title":{},"name":{},"text":{"43":{}},"component":{}}],["opt",{"_index":1505,"title":{},"name":{},"text":{"20":{},"38":{}},"component":{}}],["opt/myapps/myapp.war",{"_index":1384,"title":{},"name":{},"text":{"19":{}},"component":{}}],["opt/myapps/mywiki.war",{"_index":4063,"title":{},"name":{},"text":{"42":{}},"component":{}}],["opt/webapps/domain.war",{"_index":1465,"title":{},"name":{},"text":{"19":{}},"component":{}}],["opt/webapps/hobby.war",{"_index":1468,"title":{},"name":{},"text":{"19":{}},"component":{}}],["opt/webapps/mywebapp",{"_index":1479,"title":{},"name":{},"text":{"19":{}},"component":{}}],["opt/webapps/mywebapp.war",{"_index":1399,"title":{},"name":{},"text":{"19":{}},"component":{}}],["optim",{"_index":3119,"title":{},"name":{},"text":{"34":{},"61":{},"66":{}},"component":{}}],["optimum",{"_index":3349,"title":{},"name":{},"text":{"37":{}},"component":{}}],["option",{"_index":319,"title":{"8-6":{},"38-7":{}},"name":{},"text":{"2":{},"17":{},"20":{},"23":{},"25":{},"26":{},"28":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"56":{},"59":{},"61":{},"62":{},"63":{},"66":{},"67":{},"69":{}},"component":{}}],["optional_white_spac",{"_index":3948,"title":{},"name":{},"text":{"41":{}},"component":{}}],["opts=$(java",{"_index":3752,"title":{},"name":{},"text":{"38":{}},"component":{}}],["oracl",{"_index":3480,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["oracle’",{"_index":321,"title":{},"name":{},"text":{"2":{}},"component":{}}],["orchestr",{"_index":3354,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["order",{"_index":1157,"title":{"17-7":{}},"name":{},"text":{"17":{},"26":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"43":{},"44":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"59":{},"61":{},"65":{},"66":{},"67":{},"69":{}},"component":{}}],["orelse(nul",{"_index":4530,"title":{},"name":{},"text":{"48":{}},"component":{}}],["org.always.have.a.packag",{"_index":1069,"title":{},"name":{},"text":{"13":{}},"component":{}}],["org.apache.catalina.jsp_classpath",{"_index":2049,"title":{},"name":{},"text":{"28":{}},"component":{}}],["org.apache.jasp",{"_index":2027,"title":{},"name":{},"text":{"28":{}},"component":{}}],["org.apache.jasper.jspc",{"_index":5340,"title":{},"name":{},"text":{"54":{}},"component":{}}],["org.apache.maven.plugin",{"_index":5341,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["org.codehaus.mojo",{"_index":5393,"title":{},"name":{},"text":{"55":{},"56":{}},"component":{}}],["org.eclipse.jetti",{"_index":3244,"title":{},"name":{},"text":{"36":{},"41":{},"45":{},"48":{},"55":{},"61":{},"71":{}},"component":{}}],["org.eclipse.jetty.annotations.maxwait",{"_index":1230,"title":{},"name":{},"text":{"17":{}},"component":{}}],["org.eclipse.jetty.annotations.multithread",{"_index":1223,"title":{},"name":{},"text":{"17":{}},"component":{}}],["org.eclipse.jetty.cli",{"_index":5589,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.client.api",{"_index":5588,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.client.completableresponselisten",{"_index":4648,"title":{},"name":{},"text":{"48":{}},"component":{}}],["org.eclipse.jetty.client.connectionpool",{"_index":4521,"title":{},"name":{},"text":{"48":{}},"component":{}}],["org.eclipse.jetty.client.http",{"_index":5591,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.client.httpcli",{"_index":4506,"title":{},"name":{},"text":{"48":{}},"component":{}}],["org.eclipse.jetty.client.httpproxi",{"_index":4845,"title":{},"name":{},"text":{"48":{}},"component":{}}],["org.eclipse.jetty.client.level=debug",{"_index":6936,"title":{},"name":{},"text":{"71":{}},"component":{}}],["org.eclipse.jetty.client.request.cont",{"_index":4612,"title":{},"name":{},"text":{"48":{}},"component":{}}],["org.eclipse.jetty.client.socks4proxi",{"_index":4847,"title":{},"name":{},"text":{"48":{}},"component":{}}],["org.eclipse.jetty.client.socks5proxi",{"_index":4848,"title":{},"name":{},"text":{"48":{}},"component":{}}],["org.eclipse.jetty.client.transport",{"_index":5592,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.client.util",{"_index":5590,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.containerinitializerexclusionpattern",{"_index":1236,"title":{},"name":{},"text":{"17":{}},"component":{}}],["org.eclipse.jetty.containerinitializerord",{"_index":1245,"title":{},"name":{},"text":{"17":{}},"component":{}}],["org.eclipse.jetty.ee.webappclassloading.addhiddenclasses(org.eclipse.jetty.util.attributes,java.lang.str",{"_index":1593,"title":{},"name":{},"text":{"20":{}},"component":{}}],["org.eclipse.jetty.ee10",{"_index":5314,"title":{},"name":{},"text":{"54":{},"55":{},"56":{}},"component":{}}],["org.eclipse.jetty.ee10.factories.mailsessionrefer",{"_index":1986,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.jetty.ee10.jsp.jettyjspservlet",{"_index":1610,"title":{},"name":{},"text":{"20":{}},"component":{}}],["org.eclipse.jetty.ee10.maven.plugin.mavenwebappcontext",{"_index":5468,"title":{},"name":{},"text":{"56":{}},"component":{}}],["org.eclipse.jetty.ee10.security.jaspi.modules.basicauthenticationauthmodul",{"_index":1817,"title":{},"name":{},"text":{"24":{}},"component":{}}],["org.eclipse.jetty.ee10.security.jaspi.modules.realmnam",{"_index":1818,"title":{},"name":{},"text":{"24":{}},"component":{}}],["org.eclipse.jetty.ee10.security.jaspi.provider.jaspiauthconfigprovid",{"_index":1816,"title":{},"name":{},"text":{"24":{}},"component":{}}],["org.eclipse.jetty.ee10.webapp.webappcontext",{"_index":5469,"title":{},"name":{},"text":{"56":{}},"component":{}}],["org.eclipse.jetty.ee10.websocket",{"_index":6854,"title":{},"name":{},"text":{"67":{}},"component":{}}],["org.eclipse.jetty.ee10.websocket.servlet.websocketupgradefilt",{"_index":6879,"title":{},"name":{},"text":{"67":{}},"component":{}}],["org.eclipse.jetty.ee10:jetti",{"_index":6244,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.ee9.webapp.webappcontext",{"_index":5509,"title":{},"name":{},"text":{"56":{}},"component":{}}],["org.eclipse.jetty.ee{8,9,10",{"_index":6243,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.ee{8,9,10}.jndi.factories.mailsessionrefer",{"_index":1981,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.jetty.ee{8,9,10}.webapp.webappcontext",{"_index":2011,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.jetty.ee{8,9,10}.websocket:jetti",{"_index":5584,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.ee{8,9,10}:jetti",{"_index":5576,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.fcgi:fcgi",{"_index":5567,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.fcgi:jetti",{"_index":5568,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.http",{"_index":4007,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.http2",{"_index":4008,"title":{},"name":{},"text":{"41":{},"49":{},"62":{}},"component":{}}],["org.eclipse.jetty.http2.api.server.serversessionlisten",{"_index":6411,"title":{},"name":{},"text":{"62":{}},"component":{}}],["org.eclipse.jetty.http2.api.sess",{"_index":4943,"title":{},"name":{},"text":{"49":{}},"component":{}}],["org.eclipse.jetty.http2.client.http",{"_index":5593,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.http2.client.http2cli",{"_index":4939,"title":{},"name":{},"text":{"49":{}},"component":{}}],["org.eclipse.jetty.http2.client.transport",{"_index":5594,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.http2.server.rawhttp2serverconnectionfactori",{"_index":6410,"title":{},"name":{},"text":{"62":{}},"component":{}}],["org.eclipse.jetty.http2:http2",{"_index":5569,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.http2:jetti",{"_index":5570,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.http3",{"_index":5053,"title":{},"name":{},"text":{"50":{},"63":{}},"component":{}}],["org.eclipse.jetty.http3.api.sess",{"_index":5059,"title":{},"name":{},"text":{"50":{}},"component":{}}],["org.eclipse.jetty.http3.api.session.server.listen",{"_index":6468,"title":{},"name":{},"text":{"63":{}},"component":{}}],["org.eclipse.jetty.http3.client.http3cli",{"_index":5054,"title":{},"name":{},"text":{"50":{}},"component":{}}],["org.eclipse.jetty.http3.server.rawhttp3serverconnectionfactori",{"_index":6467,"title":{},"name":{},"text":{"63":{}},"component":{}}],["org.eclipse.jetty.http3:http3",{"_index":5572,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.http3:jetti",{"_index":5573,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.io",{"_index":4005,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@10683d9d{capacity=49152,in",{"_index":3904,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@139982de{capacity=4096,in",{"_index":3910,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@1573f9fc{capacity=16384,in",{"_index":3896,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@1e800aaa{capacity=65536,in",{"_index":3925,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@1f2586d6{capacity=45056,in",{"_index":3903,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@217ed35e{capacity=12288,in",{"_index":3912,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@229f66ed{capacity=20480,in",{"_index":3914,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@233795b6{capacity=53248,in",{"_index":3922,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@2f4948e4{capacity=40960,in",{"_index":3902,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@31190526{capacity=24576,in",{"_index":3915,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@385c9627{capacity=65536,in",{"_index":3908,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@3b69e7d1{capacity=4096,in",{"_index":3891,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@3eb25e1a{capacity=36864,in",{"_index":3918,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@3eb738bb{capacity=57344,in",{"_index":3923,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@3fc2959f{capacity=53248,in",{"_index":3905,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@44c03695{capacity=24576,in",{"_index":3898,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@477b4cdf{capacity=40960,in",{"_index":3919,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@5542c4ed{capacity=12288,in",{"_index":3895,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@5aa9e4eb{capacity=57344,in",{"_index":3906,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@5bda8e08{capacity=61440,in",{"_index":3924,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@6150c3ec{capacity=20480,in",{"_index":3897,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@662ac478{capacity=28672,in",{"_index":3916,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@6743e411{capacity=32768,in",{"_index":3917,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@682b2fa{capacity=8192,in",{"_index":3911,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@6989da5e{capacity=61440,in",{"_index":3907,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@6a78afa0{capacity=36864,in",{"_index":3901,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@77c2494c{capacity=45056,in",{"_index":3920,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@7dcf94f8{capacity=16384,in",{"_index":3913,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@7e6f74c{capacity=28672,in",{"_index":3899,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@815b41f{capacity=8192,in",{"_index":3894,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@dd05255{capacity=32768,in",{"_index":3900,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool$retainedbucket@f5958c9{capacity=49152,in",{"_index":3921,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.arraybytebufferpool@5b12b668{min=0,max=65536,buckets=16,heap=0/2102394880,direct=0/2102394880",{"_index":3889,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.io.bytebufferpool",{"_index":5091,"title":{},"name":{},"text":{"52":{}},"component":{}}],["org.eclipse.jetty.io.clientconnector",{"_index":5087,"title":{},"name":{},"text":{"52":{}},"component":{}}],["org.eclipse.jetty.io.content.sink",{"_index":4308,"title":{},"name":{},"text":{"44":{}},"component":{}}],["org.eclipse.jetty.io.content.sourc",{"_index":4245,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{}}],["org.eclipse.jetty.io.selectormanag",{"_index":5088,"title":{},"name":{},"text":{"52":{}},"component":{}}],["org.eclipse.jetty.io.ssl.sslhandshakelisten",{"_index":4772,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["org.eclipse.jetty.io.transport",{"_index":5082,"title":{},"name":{},"text":{"52":{}},"component":{}}],["org.eclipse.jetty.jmx.connectorserv",{"_index":4357,"title":{},"name":{},"text":{"45":{}},"component":{}}],["org.eclipse.jetty.jmx.mbeancontain",{"_index":4350,"title":{},"name":{},"text":{"45":{}},"component":{}}],["org.eclipse.jetty.jmx.objectmbean",{"_index":4407,"title":{},"name":{},"text":{"45":{}},"component":{}}],["org.eclipse.jetty.jmx:name=rmiconnectorserv",{"_index":4364,"title":{},"name":{},"text":{"45":{}},"component":{}}],["org.eclipse.jetty.jsp.jettyjspservlet",{"_index":2029,"title":{},"name":{},"text":{"28":{}},"component":{}}],["org.eclipse.jetty.level",{"_index":3243,"title":{},"name":{},"text":{"36":{}},"component":{}}],["org.eclipse.jetty.level=info",{"_index":6935,"title":{},"name":{},"text":{"71":{}},"component":{}}],["org.eclipse.jetty.logging.,${jetty.home.uri}/lib/logging/,org.slf4j",{"_index":3697,"title":{},"name":{},"text":{"38":{}},"component":{}}],["org.eclipse.jetty.logging.appender.message_align",{"_index":3255,"title":{},"name":{},"text":{"36":{}},"component":{}}],["org.eclipse.jetty.logging.appender.message_escap",{"_index":3257,"title":{},"name":{},"text":{"36":{}},"component":{}}],["org.eclipse.jetty.logging.appender.name_condens",{"_index":3251,"title":{},"name":{},"text":{"36":{}},"component":{}}],["org.eclipse.jetty.logging.stderrappend",{"_index":3237,"title":{},"name":{},"text":{"36":{}},"component":{}}],["org.eclipse.jetty.plus.jndi.enventri",{"_index":1930,"title":{"26-2":{}},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.jetty.plus.jndi.link",{"_index":1936,"title":{"26-8":{}},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.jetty.plus.jndi.resourc",{"_index":1931,"title":{"26-3":{}},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.jetty.plus.jndi.transact",{"_index":1935,"title":{"26-7":{}},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.jetty.quic.server.quicserverconnector",{"_index":5949,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.quic:jetti",{"_index":5578,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.quic:qu",{"_index":5577,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.rewrite.handler.rul",{"_index":6109,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.security.jaas.jaasloginservic",{"_index":1676,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.eclipse.jetty.security.jaas.ldap.ldaploginmodul",{"_index":1699,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.eclipse.jetty.security.jaas.spi.datasourceloginmodul",{"_index":1698,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.eclipse.jetty.security.jaas.spi.jdbcloginmodul",{"_index":1696,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.eclipse.jetty.security.jaas.spi.ldaploginmodul",{"_index":1745,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.eclipse.jetty.security.jaas.spi.propertyfileloginmodul",{"_index":1697,"title":{},"name":{},"text":{"23":{}},"component":{}}],["org.eclipse.jetty.security.loginservic",{"_index":5434,"title":{},"name":{},"text":{"56":{}},"component":{}}],["org.eclipse.jetty.server.connector",{"_index":5900,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.server.handl",{"_index":5901,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.server.handler.abstracthandl",{"_index":5376,"title":{},"name":{},"text":{"55":{}},"component":{}}],["org.eclipse.jetty.server.handler.eventshandl",{"_index":5910,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.server.memoryconnector",{"_index":5950,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.server.memorytransport",{"_index":5117,"title":{},"name":{},"text":{"52":{}},"component":{}}],["org.eclipse.jetty.server.request",{"_index":5375,"title":{},"name":{},"text":{"55":{}},"component":{}}],["org.eclipse.jetty.server.requestlog",{"_index":5435,"title":{},"name":{},"text":{"56":{},"61":{}},"component":{}}],["org.eclipse.jetty.server.serv",{"_index":1684,"title":{},"name":{},"text":{"23":{},"26":{},"32":{},"38":{},"55":{},"56":{},"61":{}},"component":{}}],["org.eclipse.jetty.server.server$dynamicerrorhandler@3bf7ca37",{"_index":3964,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.server.serverconnector",{"_index":5947,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["org.eclipse.jetty.server.webapp.containerincludejarpattern",{"_index":1200,"title":{},"name":{},"text":{"17":{},"27":{},"56":{}},"component":{}}],["org.eclipse.jetty.server.webapp.webinfincludejarpattern",{"_index":1217,"title":{},"name":{},"text":{"17":{},"56":{}},"component":{}}],["org.eclipse.jetty.server:type=server,id=0",{"_index":3855,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.session.checkingremotesessionidencod",{"_index":6572,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.session.infinispan.embeddedquerymanager(localcach",{"_index":6784,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.session.infinispan.infinispanserializationcontextiniti",{"_index":6800,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.session.infinispan.infinispansessionlegacyconvert",{"_index":3547,"title":{},"name":{},"text":{"37":{}},"component":{}}],["org.eclipse.jetty.session.infinispan.remotequerymanager(remotecach",{"_index":6808,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.session.maxag",{"_index":6603,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.session.sessioncooki",{"_index":6592,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.session.sessiondomain",{"_index":6606,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.session.sessionhandl",{"_index":6382,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.session.sessionidpathparameternam",{"_index":6595,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.session.sessionpath",{"_index":6609,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.jetty.start",{"_index":3975,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.start.build",{"_index":3973,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.start.config",{"_index":3972,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.start.shaded.util",{"_index":3974,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.unixdomain.server.unixdomainserverconnector",{"_index":5948,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["org.eclipse.jetty.util",{"_index":4006,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.util.callback",{"_index":5791,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.util.component.contain",{"_index":4084,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.eclipse.jetty.util.component.containerlifecycl",{"_index":4085,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.eclipse.jetty.util.component.haltlifecyclelistener@3c9754d8",{"_index":3963,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.util.component.lifecycl",{"_index":4083,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.eclipse.jetty.util.iteratingcallback",{"_index":4214,"title":{},"name":{},"text":{"44":{}},"component":{}}],["org.eclipse.jetty.util.queuedthreadpool",{"_index":3253,"title":{},"name":{},"text":{"36":{}},"component":{}}],["org.eclipse.jetty.util.resource.filesystempool@185a6e9",{"_index":3926,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.util.security.password",{"_index":3842,"title":{},"name":{},"text":{"40":{}},"component":{}}],["org.eclipse.jetty.util.ssl.sslcontextfactory$serv",{"_index":3772,"title":{},"name":{},"text":{"38":{}},"component":{}}],["org.eclipse.jetty.util.ssl.sslcontextfactory.cli",{"_index":5092,"title":{},"name":{},"text":{"52":{}},"component":{}}],["org.eclipse.jetty.util.ssl.x509",{"_index":5946,"title":{},"name":{},"text":{"61":{}},"component":{}}],["org.eclipse.jetty.util.thread.adaptiveexecutionstrategi",{"_index":4461,"title":{},"name":{},"text":{"47":{}},"component":{}}],["org.eclipse.jetty.util.thread.executionstrategi",{"_index":4456,"title":{},"name":{},"text":{"47":{}},"component":{}}],["org.eclipse.jetty.util.thread.invoc",{"_index":4446,"title":{},"name":{},"text":{"47":{}},"component":{}}],["org.eclipse.jetty.util.thread.schedul",{"_index":5090,"title":{},"name":{},"text":{"52":{}},"component":{}}],["org.eclipse.jetty.util.thread.tryexecutor",{"_index":4457,"title":{},"name":{},"text":{"47":{}},"component":{}}],["org.eclipse.jetty.util.thread:type=queuedthreadpool,id=0",{"_index":3870,"title":{},"name":{},"text":{"41":{}},"component":{}}],["org.eclipse.jetty.websocket",{"_index":5163,"title":{},"name":{},"text":{"53":{},"67":{}},"component":{}}],["org.eclipse.jetty.websocket.api.annot",{"_index":5194,"title":{},"name":{},"text":{"53":{},"67":{}},"component":{}}],["org.eclipse.jetty.websocket.api.annotation.onwebsocketconnect",{"_index":5595,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.annotation.onwebsocketopen",{"_index":5596,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.callback",{"_index":5598,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.configur",{"_index":5603,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.remoteendpoint",{"_index":5601,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.sess",{"_index":5177,"title":{},"name":{},"text":{"53":{},"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.session.listen",{"_index":5193,"title":{},"name":{},"text":{"53":{},"67":{}},"component":{}}],["org.eclipse.jetty.websocket.api.session.listener.autodemand",{"_index":5600,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.websocket*listen",{"_index":5599,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.websocketpolici",{"_index":5602,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.api.writecallback",{"_index":5597,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket.client.websocketcli",{"_index":5164,"title":{},"name":{},"text":{"53":{}},"component":{}}],["org.eclipse.jetty.websocket.javax",{"_index":3042,"title":{},"name":{},"text":{"34":{}},"component":{}}],["org.eclipse.jetty.websocket.javax.server.config.javaxwebsocketservletcontaineriniti",{"_index":5800,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.javax.server.javaxwebsocketservletcontaineriniti",{"_index":1251,"title":{},"name":{},"text":{"17":{}},"component":{}}],["org.eclipse.jetty.websocket.jsr356.server.deploy.websocketservercontaineriniti",{"_index":5799,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.server.config.jettywebsocketservletcontaineriniti",{"_index":5798,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.server.jettyserverupgraderequest",{"_index":5804,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.server.jettyserverupgraderespons",{"_index":5806,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.server.jettywebsocketcr",{"_index":5802,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.server.jettywebsocketservlet",{"_index":5808,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.server.jettywebsocketservletfactori",{"_index":5810,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.server.nativewebsocketservletcontaineriniti",{"_index":5797,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.server.serverwebsocketcontain",{"_index":6884,"title":{},"name":{},"text":{"67":{}},"component":{}}],["org.eclipse.jetty.websocket.server.websocketcr",{"_index":6911,"title":{},"name":{},"text":{"67":{}},"component":{}}],["org.eclipse.jetty.websocket.server.websocketupgradehandl",{"_index":6885,"title":{},"name":{},"text":{"67":{}},"component":{}}],["org.eclipse.jetty.websocket.servlet.servletupgraderequest",{"_index":5803,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.servlet.servletupgraderespons",{"_index":5805,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.servlet.websocketcr",{"_index":5801,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.servlet.websocketservlet",{"_index":5807,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket.servlet.websocketservletfactori",{"_index":5809,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket:javax",{"_index":5796,"title":{},"name":{},"text":{"58":{}},"component":{}}],["org.eclipse.jetty.websocket:jetti",{"_index":5583,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty.websocket:websocket",{"_index":5582,"title":{},"name":{},"text":{"57":{},"58":{}},"component":{}}],["org.eclipse.jetty.xml",{"_index":4050,"title":{},"name":{},"text":{"42":{}},"component":{}}],["org.eclipse.jetty.xml.xmlconfigur",{"_index":3724,"title":{},"name":{},"text":{"38":{}},"component":{}}],["org.eclipse.jetty.xml.xmlconfiguration$jettyxmlconfigur",{"_index":4049,"title":{},"name":{},"text":{"42":{}},"component":{}}],["org.eclipse.jetty.xml/org.eclipse.jetty.xml.xmlconfigur",{"_index":3745,"title":{},"name":{},"text":{"38":{}},"component":{}}],["org.eclipse.jetty.{e",{"_index":5354,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["org.eclipse.jetty:apach",{"_index":5585,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty:glassfish",{"_index":5587,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty:jetti",{"_index":5575,"title":{},"name":{},"text":{"57":{}},"component":{}}],["org.eclipse.jetty[.].level=debug",{"_index":6937,"title":{},"name":{},"text":{"71":{}},"component":{}}],["org.exampl",{"_index":5370,"title":{},"name":{},"text":{"55":{}},"component":{}}],["org.example.helloservlet",{"_index":5406,"title":{},"name":{},"text":{"55":{}},"component":{}}],["org.example.helloworld",{"_index":5394,"title":{},"name":{},"text":{"55":{}},"component":{}}],["org.infinispan.client.hotrod.configuration.configurationbuild",{"_index":6794,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.infinispan.client.hotrod.remotecachemanag",{"_index":6801,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.postgresql.ds.pgconnectionpooldatasourc",{"_index":3835,"title":{},"name":{},"text":{"39":{}},"component":{}}],["org.postgresql.ds.pgsimpledatasourc",{"_index":3850,"title":{},"name":{},"text":{"40":{}},"component":{}}],["org.slf4j.bridge.slf4jbridgehandl",{"_index":3287,"title":{},"name":{},"text":{"36":{}},"component":{}}],["organ",{"_index":2294,"title":{},"name":{},"text":{"32":{},"38":{},"41":{},"45":{},"46":{},"53":{},"61":{},"68":{}},"component":{}}],["origin",{"_index":1027,"title":{"33-5":{}},"name":{},"text":{"10":{},"33":{},"34":{},"35":{},"40":{},"48":{},"49":{},"50":{},"56":{},"61":{}},"component":{}}],["originattribut",{"_index":5529,"title":{},"name":{},"text":{"56":{}},"component":{}}],["orphan",{"_index":3534,"title":{},"name":{},"text":{"37":{}},"component":{}}],["orthogon",{"_index":4678,"title":{},"name":{},"text":{"48":{}},"component":{}}],["os",{"_index":3986,"title":{},"name":{},"text":{"41":{},"61":{}},"component":{}}],["osgi",{"_index":311,"title":{},"name":{},"text":{"2":{},"57":{}},"component":{}}],["other",{"_index":831,"title":{},"name":{},"text":{"7":{},"32":{},"34":{},"47":{},"48":{},"61":{},"66":{}},"component":{}}],["otherwis",{"_index":1024,"title":{},"name":{},"text":{"10":{},"19":{},"20":{},"32":{},"33":{},"34":{},"35":{},"37":{},"39":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"53":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["ou",{"_index":2153,"title":{},"name":{},"text":{"30":{}},"component":{}}],["ou=unit",{"_index":2141,"title":{},"name":{},"text":{"30":{}},"component":{}}],["ourselv",{"_index":1030,"title":{},"name":{},"text":{"10":{}},"component":{}}],["out",{"_index":207,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"12":{},"18":{},"23":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"65":{},"66":{},"69":{}},"component":{}}],["outcom",{"_index":3627,"title":{},"name":{},"text":{"37":{}},"component":{}}],["outermost",{"_index":6154,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["outgo",{"_index":2883,"title":{},"name":{},"text":{"34":{},"53":{}},"component":{}}],["outlin",{"_index":5215,"title":{},"name":{},"text":{"53":{},"57":{},"61":{}},"component":{}}],["outofmemoryerror",{"_index":5214,"title":{},"name":{},"text":{"53":{}},"component":{}}],["output",{"_index":1142,"title":{},"name":{},"text":{"13":{},"28":{},"30":{},"33":{},"36":{},"38":{},"41":{},"48":{},"53":{},"56":{},"61":{},"66":{}},"component":{}}],["output.clos",{"_index":4646,"title":{},"name":{},"text":{"48":{}},"component":{}}],["output.write(byt",{"_index":4645,"title":{},"name":{},"text":{"48":{}},"component":{}}],["outputaggregationsize=8192",{"_index":3933,"title":{},"name":{},"text":{"41":{}},"component":{}}],["outputbuffers",{"_index":5263,"title":{},"name":{},"text":{"53":{}},"component":{}}],["outputbuffersize=32768",{"_index":3932,"title":{},"name":{},"text":{"41":{}},"component":{}}],["outputdirectori",{"_index":5510,"title":{},"name":{},"text":{"56":{}},"component":{}}],["outputstream",{"_index":4640,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["outputstreamrequestcont",{"_index":4639,"title":{},"name":{},"text":{"48":{}},"component":{}}],["outreach",{"_index":1051,"title":{},"name":{},"text":{"12":{}},"component":{}}],["outsid",{"_index":3339,"title":{"37-34":{}},"name":{},"text":{"44":{},"66":{}},"component":{}}],["outstand",{"_index":4546,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["over",{"_index":1381,"title":{},"name":{},"text":{"19":{},"25":{},"28":{},"33":{},"34":{},"37":{},"41":{},"44":{},"45":{},"47":{},"48":{},"52":{},"53":{},"55":{},"59":{},"61":{},"66":{}},"component":{}}],["overal",{"_index":2664,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["overflow",{"_index":578,"title":{"6-2":{}},"name":{},"text":{"49":{},"62":{}},"component":{}}],["overhead",{"_index":5898,"title":{},"name":{},"text":{"61":{}},"component":{}}],["overlaid",{"_index":5312,"title":{"54-3":{},"56-21":{}},"name":{},"text":{"54":{},"56":{}},"component":{}}],["overlay",{"_index":5349,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["overload",{"_index":3414,"title":{},"name":{},"text":{"37":{},"53":{}},"component":{}}],["overrid",{"_index":1290,"title":{"19-13":{}},"name":{},"text":{"18":{},"20":{},"26":{},"31":{},"34":{},"38":{},"41":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"58":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["overridden",{"_index":2428,"title":{},"name":{},"text":{"33":{},"38":{},"53":{},"61":{}},"component":{}}],["override.xml",{"_index":5522,"title":{},"name":{},"text":{"56":{}},"component":{}}],["overridedescriptor",{"_index":5474,"title":{},"name":{},"text":{"56":{}},"component":{}}],["overview",{"_index":1257,"title":{"18":{},"37-1":{}},"name":{},"text":{"66":{}},"component":{}}],["overwrit",{"_index":2837,"title":{},"name":{},"text":{"33":{},"44":{}},"component":{}}],["own",{"_index":509,"title":{},"name":{},"text":{"4":{},"18":{},"53":{}},"component":{}}],["ownership",{"_index":322,"title":{},"name":{},"text":{"2":{}},"component":{}}],["p",{"_index":5233,"title":{},"name":{},"text":{"53":{},"55":{},"61":{}},"component":{}}],["p2",{"_index":158,"title":{"2-4":{}},"name":{},"text":{"2":{}},"component":{}}],["pack",{"_index":5350,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["packag",{"_index":1068,"title":{},"name":{},"text":{"13":{},"17":{},"19":{},"20":{},"24":{},"28":{},"31":{},"33":{},"41":{},"45":{},"53":{},"54":{},"55":{},"56":{},"58":{},"61":{},"67":{}},"component":{}}],["packages/nam",{"_index":5565,"title":{"57-3":{}},"name":{},"text":{},"component":{}}],["packet",{"_index":2662,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["page",{"_index":185,"title":{"28":{},"29":{}},"name":{},"text":{"2":{},"7":{},"28":{},"29":{},"48":{},"55":{},"61":{}},"component":{}}],["page/tag",{"_index":2114,"title":{},"name":{},"text":{"28":{}},"component":{}}],["pair",{"_index":1894,"title":{},"name":{},"text":{"25":{},"30":{},"34":{},"38":{},"42":{},"44":{},"56":{},"61":{},"65":{}},"component":{}}],["pam",{"_index":1649,"title":{},"name":{},"text":{"23":{}},"component":{}}],["panel",{"_index":3859,"title":{},"name":{},"text":{"41":{}},"component":{}}],["parallel",{"_index":771,"title":{"8-5":{}},"name":{},"text":{"7":{},"8":{},"47":{},"48":{},"56":{}},"component":{}}],["param",{"_index":1321,"title":{"19-14":{}},"name":{},"text":{"19":{},"28":{},"33":{},"34":{},"48":{},"66":{},"67":{}},"component":{}}],["param(\"p",{"_index":4569,"title":{},"name":{},"text":{"48":{}},"component":{}}],["paramet",{"_index":1843,"title":{},"name":{},"text":{"25":{},"26":{},"28":{},"33":{},"34":{},"35":{},"37":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"59":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["parametr",{"_index":2236,"title":{},"name":{},"text":{"31":{},"32":{},"38":{}},"component":{}}],["params.get(\"room",{"_index":6926,"title":{},"name":{},"text":{"67":{}},"component":{}}],["pare",{"_index":3619,"title":{},"name":{},"text":{"37":{}},"component":{}}],["parent",{"_index":2416,"title":{},"name":{},"text":{"33":{},"41":{},"43":{},"56":{},"61":{}},"component":{}}],["parent.addbean(old",{"_index":4129,"title":{},"name":{},"text":{"43":{}},"component":{}}],["parent.addbean(young",{"_index":4132,"title":{},"name":{},"text":{"43":{}},"component":{}}],["parlanc",{"_index":6768,"title":{},"name":{},"text":{"66":{}},"component":{}}],["pars",{"_index":2653,"title":{},"name":{},"text":{"33":{},"41":{},"44":{},"52":{},"59":{},"61":{},"65":{}},"component":{}}],["parser",{"_index":5908,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["parser.complet",{"_index":6515,"title":{},"name":{},"text":{"65":{}},"component":{}}],["parser.parse(buff",{"_index":6514,"title":{},"name":{},"text":{"65":{}},"component":{}}],["parser.parse(request",{"_index":6326,"title":{},"name":{},"text":{"61":{}},"component":{}}],["parser.setfilesdirectory(path.of(\"/tmp",{"_index":6324,"title":{},"name":{},"text":{"61":{}},"component":{}}],["part",{"_index":1858,"title":{},"name":{},"text":{"25":{},"29":{},"30":{},"32":{},"34":{},"36":{},"38":{},"43":{},"48":{},"49":{},"50":{},"54":{},"56":{},"61":{},"65":{},"67":{}},"component":{}}],["parti",{"_index":954,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"16":{},"17":{},"24":{},"33":{},"34":{},"37":{},"38":{},"43":{},"48":{},"51":{},"53":{},"64":{}},"component":{}}],["partial",{"_index":2033,"title":{},"name":{},"text":{"28":{},"32":{},"33":{},"44":{},"52":{},"53":{},"61":{}},"component":{}}],["partialpayload",{"_index":5245,"title":{},"name":{},"text":{"53":{}},"component":{}}],["particip",{"_index":147,"title":{"6":{}},"name":{},"text":{"1":{}},"component":{}}],["particular",{"_index":523,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"19":{},"25":{},"36":{},"37":{},"38":{},"41":{},"43":{},"45":{},"47":{},"48":{},"49":{},"52":{},"56":{},"61":{},"66":{}},"component":{}}],["particularli",{"_index":613,"title":{},"name":{},"text":{"6":{},"55":{},"66":{}},"component":{}}],["partit",{"_index":3589,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["party.com/api",{"_index":4749,"title":{},"name":{},"text":{"48":{}},"component":{}}],["pass",{"_index":933,"title":{},"name":{},"text":{"8":{},"26":{},"28":{},"31":{},"32":{},"34":{},"37":{},"38":{},"39":{},"41":{},"42":{},"44":{},"47":{},"48":{},"49":{},"50":{},"53":{},"56":{},"59":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["passion",{"_index":60,"title":{},"name":{},"text":{"1":{}},"component":{}}],["passiv",{"_index":6663,"title":{},"name":{},"text":{"66":{}},"component":{}}],["passphras",{"_index":3822,"title":{},"name":{},"text":{"38":{}},"component":{}}],["password",{"_index":1402,"title":{"40-1":{}},"name":{},"text":{"19":{},"23":{},"25":{},"26":{},"30":{},"33":{},"34":{},"38":{},"40":{},"45":{},"48":{}},"component":{}}],["password.deobfusc",{"_index":3852,"title":{},"name":{},"text":{"40":{}},"component":{}}],["password1",{"_index":4377,"title":{},"name":{},"text":{"45":{},"48":{}},"component":{}}],["password2",{"_index":4378,"title":{},"name":{},"text":{"45":{}},"component":{}}],["passwords/credenti",{"_index":1728,"title":{},"name":{},"text":{"23":{}},"component":{}}],["passwordvalidationcallback",{"_index":1823,"title":{},"name":{},"text":{"24":{}},"component":{}}],["past",{"_index":814,"title":{},"name":{},"text":{"7":{}},"component":{}}],["patch",{"_index":995,"title":{"10":{}},"name":{},"text":{"32":{}},"component":{}}],["path",{"_index":1316,"title":{"19-3":{},"19-10":{},"38-11":{}},"name":{},"text":{"19":{},"20":{},"23":{},"25":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"42":{},"48":{},"53":{},"54":{},"56":{},"57":{},"59":{},"61":{},"65":{},"66":{},"67":{},"69":{},"71":{}},"component":{}}],["path(\"/path",{"_index":5733,"title":{},"name":{},"text":{"57":{}},"component":{}}],["path(\"/sink",{"_index":4696,"title":{},"name":{},"text":{"48":{}},"component":{}}],["path(\"/sourc",{"_index":4691,"title":{},"name":{},"text":{"48":{}},"component":{}}],["path.of(\"/path/to/pem/dir",{"_index":5959,"title":{},"name":{},"text":{"61":{},"63":{}},"component":{}}],["path.of(\"/path/to/server.sock",{"_index":4717,"title":{},"name":{},"text":{"48":{}},"component":{}}],["path.startswith(\"/old_path",{"_index":6285,"title":{},"name":{},"text":{"61":{}},"component":{}}],["path.substring(\"/old_path/\".length",{"_index":6289,"title":{},"name":{},"text":{"61":{}},"component":{}}],["path/to/domain.pem",{"_index":3198,"title":{},"name":{},"text":{"34":{}},"component":{}}],["path/to/java.hom",{"_index":3669,"title":{},"name":{},"text":{"38":{}},"component":{}}],["path/to/java.home/bin/java",{"_index":3717,"title":{},"name":{},"text":{"38":{}},"component":{}}],["path/to/jetti",{"_index":1487,"title":{},"name":{},"text":{"20":{}},"component":{}}],["path/to/jetty.hom",{"_index":1515,"title":{},"name":{},"text":{"20":{},"38":{}},"component":{}}],["path/to/jetty.home/etc/jetti",{"_index":3733,"title":{},"name":{},"text":{"38":{}},"component":{}}],["path/to/jetty.home/etc/jetty.xml",{"_index":3734,"title":{},"name":{},"text":{"38":{}},"component":{}}],["path/to/jetty.home/lib/jetti",{"_index":3743,"title":{},"name":{},"text":{"38":{}},"component":{}}],["path/to/jetty.home/lib/logging/jetti",{"_index":3742,"title":{},"name":{},"text":{"38":{}},"component":{}}],["path/to/jetty.home/lib/logging/slf4j",{"_index":3741,"title":{},"name":{},"text":{"38":{}},"component":{}}],["path/to/keystore.p12",{"_index":2137,"title":{},"name":{},"text":{"30":{}},"component":{}}],["path/to/maven.repository/org/bouncycastle/bcpkix",{"_index":2900,"title":{},"name":{},"text":{"34":{}},"component":{}}],["path/to/maven.repository/org/bouncycastle/bcprov",{"_index":2904,"title":{},"name":{},"text":{"34":{}},"component":{}}],["path/to/maven.repository/org/bouncycastle/bcutil",{"_index":2907,"title":{},"name":{},"text":{"34":{}},"component":{}}],["path/to/static/resourc",{"_index":6271,"title":{},"name":{},"text":{"61":{}},"component":{}}],["path/to/truststor",{"_index":4383,"title":{},"name":{},"text":{"45":{}},"component":{}}],["path/to/users.access",{"_index":4368,"title":{},"name":{},"text":{"45":{}},"component":{}}],["path/to/users.password",{"_index":4370,"title":{},"name":{},"text":{"45":{}},"component":{}}],["pathincontext",{"_index":5623,"title":{},"name":{},"text":{"57":{},"61":{},"67":{}},"component":{}}],["pathincontext.endswith(\".html",{"_index":6374,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pathincontext.equals(\"/health",{"_index":6201,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pathincontext.startswith(\"/admin",{"_index":6199,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pathincontext.startswith(\"/checkout",{"_index":6198,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pathincontext.startswith(\"/login",{"_index":6197,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pathincontext.startswith(\"/pay",{"_index":6196,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pathincontext.startswith(\"/ws/echo",{"_index":6906,"title":{},"name":{},"text":{"67":{}},"component":{}}],["pathmappingshandl",{"_index":6046,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pathrequestcontent(\"text/plain",{"_index":4614,"title":{},"name":{},"text":{"48":{}},"component":{}}],["paths.get(\"file_to_upload.txt",{"_index":4615,"title":{},"name":{},"text":{"48":{}},"component":{}}],["pathspec",{"_index":6851,"title":{"67-11":{}},"name":{},"text":{"67":{}},"component":{}}],["pathspec.getpathparams(pathincontext",{"_index":6924,"title":{},"name":{},"text":{"67":{}},"component":{}}],["pattern",{"_index":1206,"title":{},"name":{},"text":{"17":{},"26":{},"27":{},"33":{},"34":{},"36":{},"37":{},"47":{},"48":{},"54":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["paus",{"_index":4241,"title":{},"name":{},"text":{"44":{},"56":{},"61":{}},"component":{}}],["pay",{"_index":3865,"title":{},"name":{},"text":{"41":{},"47":{},"61":{},"66":{}},"component":{}}],["payload",{"_index":5228,"title":{},"name":{},"text":{"53":{}},"component":{}}],["payload.getlong",{"_index":5300,"title":{},"name":{},"text":{"53":{}},"component":{}}],["payment",{"_index":6184,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pdf",{"_index":744,"title":{},"name":{},"text":{"7":{}},"component":{}}],["peak",{"_index":2351,"title":{},"name":{},"text":{"33":{}},"component":{}}],["peer",{"_index":4204,"title":{},"name":{},"text":{"44":{},"49":{},"50":{},"52":{},"53":{},"61":{},"63":{},"65":{}},"component":{}}],["pem",{"_index":2179,"title":{},"name":{},"text":{"30":{},"34":{},"61":{}},"component":{}}],["pemworkdir",{"_index":5958,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pend",{"_index":4023,"title":{},"name":{},"text":{"41":{},"61":{}},"component":{}}],["peopl",{"_index":196,"title":{},"name":{},"text":{"2":{}},"component":{}}],["per",{"_index":927,"title":{},"name":{},"text":{"8":{},"18":{},"28":{},"33":{},"34":{},"37":{},"47":{},"48":{},"56":{},"61":{},"63":{},"66":{}},"component":{}}],["percent",{"_index":2567,"title":{},"name":{},"text":{"33":{}},"component":{}}],["perfectli",{"_index":4582,"title":{},"name":{},"text":{"48":{}},"component":{}}],["perform",{"_index":80,"title":{},"name":{},"text":{"1":{},"7":{},"17":{},"19":{},"21":{},"23":{},"26":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"53":{},"54":{},"56":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["perfram",{"_index":3030,"title":{},"name":{},"text":{"34":{}},"component":{}}],["perhap",{"_index":4342,"title":{},"name":{},"text":{"44":{}},"component":{}}],["period",{"_index":1044,"title":{},"name":{},"text":{"11":{},"33":{},"34":{},"37":{},"41":{},"47":{},"56":{},"59":{},"61":{},"66":{}},"component":{}}],["perl",{"_index":3047,"title":{},"name":{},"text":{"34":{}},"component":{}}],["perman",{"_index":4476,"title":{},"name":{},"text":{"47":{},"61":{}},"component":{}}],["permiss",{"_index":1297,"title":{},"name":{},"text":{"18":{},"23":{},"25":{},"61":{}},"component":{}}],["permit",{"_index":1655,"title":{},"name":{},"text":{"23":{},"26":{}},"component":{}}],["persist",{"_index":1344,"title":{"37-12":{},"37-14":{},"37-16":{},"37-18":{},"37-26":{},"37-31":{},"37-40":{}},"name":{},"text":{"19":{},"33":{},"34":{},"37":{},"38":{},"41":{},"61":{},"66":{}},"component":{}}],["persist/clust",{"_index":3527,"title":{},"name":{},"text":{"37":{}},"component":{}}],["persist/distribut",{"_index":3363,"title":{},"name":{},"text":{"37":{}},"component":{}}],["persisted/clust",{"_index":3618,"title":{},"name":{},"text":{"37":{}},"component":{}}],["persistence/clust",{"_index":3401,"title":{},"name":{},"text":{"37":{}},"component":{}}],["persistentconnectionsenabled=tru",{"_index":3943,"title":{},"name":{},"text":{"41":{}},"component":{}}],["person",{"_index":130,"title":{},"name":{},"text":{"1":{}},"component":{}}],["perspect",{"_index":547,"title":{},"name":{},"text":{"4":{},"12":{},"61":{}},"component":{}}],["pfast",{"_index":903,"title":{},"name":{},"text":{"8":{}},"component":{}}],["pg",{"_index":853,"title":{},"name":{},"text":{"7":{}},"component":{}}],["phase",{"_index":5351,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["philosophi",{"_index":650,"title":{},"name":{},"text":{"7":{}},"component":{}}],["php",{"_index":3044,"title":{},"name":{},"text":{"34":{},"48":{},"51":{},"64":{}},"component":{}}],["physic",{"_index":2570,"title":{},"name":{},"text":{"33":{},"34":{},"53":{}},"component":{}}],["pick",{"_index":1048,"title":{},"name":{},"text":{"11":{},"23":{},"33":{},"34":{},"48":{},"56":{},"61":{}},"component":{}}],["piec",{"_index":5362,"title":{},"name":{},"text":{"55":{}},"component":{}}],["ping",{"_index":2490,"title":{},"name":{},"text":{"33":{},"53":{}},"component":{}}],["ping/pong",{"_index":5162,"title":{"53-19":{}},"name":{},"text":{"53":{}},"component":{}}],["pipe",{"_index":3814,"title":{},"name":{},"text":{"38":{}},"component":{}}],["pkcs12",{"_index":2127,"title":{},"name":{},"text":{"30":{}},"component":{}}],["place",{"_index":49,"title":{},"name":{},"text":{"1":{},"7":{},"17":{},"18":{},"19":{},"20":{},"23":{},"26":{},"36":{},"37":{},"38":{},"45":{},"54":{},"56":{},"61":{},"65":{}},"component":{}}],["plain",{"_index":1726,"title":{},"name":{},"text":{"23":{},"43":{},"48":{},"61":{}},"component":{}}],["plainconfig",{"_index":5980,"title":{},"name":{},"text":{"61":{}},"component":{}}],["plainconfig.setsecureport(port",{"_index":5999,"title":{},"name":{},"text":{"61":{}},"component":{}}],["plainconnector",{"_index":5991,"title":{},"name":{},"text":{"61":{}},"component":{}}],["plan",{"_index":1040,"title":{},"name":{},"text":{"11":{},"34":{}},"component":{}}],["plantuml",{"_index":950,"title":{},"name":{},"text":{"8":{}},"component":{}}],["platform",{"_index":111,"title":{},"name":{},"text":{"1":{},"4":{},"23":{},"24":{},"25":{},"33":{},"45":{},"47":{},"61":{}},"component":{}}],["platform’",{"_index":2410,"title":{},"name":{},"text":{"33":{}},"component":{}}],["play",{"_index":3180,"title":{},"name":{},"text":{"34":{},"37":{},"66":{}},"component":{}}],["pleas",{"_index":374,"title":{},"name":{},"text":{"3":{},"10":{},"20":{},"25":{},"34":{},"36":{},"41":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"63":{}},"component":{}}],["plexu",{"_index":4028,"title":{},"name":{},"text":{"42":{}},"component":{}}],["plu",{"_index":1938,"title":{},"name":{},"text":{"26":{},"36":{},"56":{},"57":{}},"component":{}}],["plug",{"_index":1657,"title":{},"name":{},"text":{"23":{},"26":{},"36":{},"37":{},"66":{},"71":{}},"component":{}}],["pluggabl",{"_index":1647,"title":{"48-25":{}},"name":{},"text":{"23":{},"24":{},"37":{},"48":{},"49":{},"50":{},"61":{},"66":{}},"component":{}}],["plugin",{"_index":98,"title":{"54":{},"56":{},"56-22":{},"56-23":{}},"name":{"54":{},"56":{}},"text":{"1":{},"7":{},"54":{},"55":{},"56":{},"57":{}},"component":{}}],["plugin’",{"_index":5457,"title":{},"name":{},"text":{"56":{}},"component":{}}],["png",{"_index":5229,"title":{},"name":{},"text":{"53":{}},"component":{}}],["pngbyte",{"_index":5231,"title":{},"name":{},"text":{"53":{}},"component":{}}],["point",{"_index":734,"title":{},"name":{},"text":{"7":{},"20":{},"23":{},"26":{},"30":{},"33":{},"34":{},"44":{},"49":{},"53":{},"55":{},"56":{},"61":{},"62":{},"65":{},"67":{}},"component":{}}],["pojo",{"_index":1964,"title":{},"name":{},"text":{"26":{},"43":{},"45":{}},"component":{}}],["polici",{"_index":376,"title":{},"name":{},"text":{"3":{},"25":{},"37":{},"45":{},"66":{}},"component":{}}],["poll",{"_index":5025,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["pollut",{"_index":1105,"title":{},"name":{},"text":{"13":{}},"component":{}}],["pom",{"_index":5360,"title":{"55-3":{},"55-7":{},"56-29":{}},"name":{},"text":{"55":{},"56":{}},"component":{}}],["pom.xml",{"_index":5389,"title":{},"name":{},"text":{"55":{},"56":{}},"component":{}}],["pong",{"_index":5191,"title":{},"name":{},"text":{"53":{}},"component":{}}],["pool",{"_index":1641,"title":{"36-11":{},"47-6":{},"47-7":{},"48-5":{}},"name":{},"text":{"22":{},"28":{},"33":{},"36":{},"41":{},"43":{},"44":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{}},"component":{}}],["pooled/evicts/removes/releases=0/0/0/0",{"_index":3893,"title":{},"name":{},"text":{"41":{}},"component":{}}],["pool’",{"_index":3833,"title":{},"name":{},"text":{"39":{}},"component":{}}],["popul",{"_index":5127,"title":{},"name":{},"text":{"52":{}},"component":{}}],["popular",{"_index":103,"title":{},"name":{},"text":{"1":{},"4":{},"55":{},"61":{}},"component":{}}],["port",{"_index":1260,"title":{"19-11":{},"25-3":{},"45-5":{}},"name":{},"text":{"18":{},"19":{},"20":{},"23":{},"25":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"56":{},"57":{},"61":{},"65":{},"66":{},"67":{},"69":{}},"component":{}}],["port1",{"_index":4690,"title":{},"name":{},"text":{"48":{}},"component":{}}],["port2",{"_index":4695,"title":{},"name":{},"text":{"48":{}},"component":{}}],["port8080",{"_index":1472,"title":{},"name":{},"text":{"19":{}},"component":{}}],["port9090",{"_index":1473,"title":{},"name":{},"text":{"19":{}},"component":{}}],["port=\"389",{"_index":1750,"title":{},"name":{},"text":{"23":{}},"component":{}}],["portabl",{"_index":1791,"title":{},"name":{},"text":{"24":{},"26":{},"61":{}},"component":{}}],["posit",{"_index":3426,"title":{},"name":{},"text":{"37":{},"47":{},"56":{},"61":{}},"component":{}}],["posix",{"_index":3803,"title":{},"name":{},"text":{"38":{},"61":{}},"component":{}}],["possibl",{"_index":747,"title":{},"name":{},"text":{"7":{},"8":{},"17":{},"18":{},"20":{},"23":{},"25":{},"26":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"52":{},"53":{},"56":{},"57":{},"59":{},"61":{},"62":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["post",{"_index":3813,"title":{},"name":{},"text":{"38":{},"41":{},"48":{},"56":{},"61":{}},"component":{}}],["post/redirect/get",{"_index":4570,"title":{},"name":{},"text":{"48":{}},"component":{}}],["postconstruct",{"_index":1158,"title":{},"name":{},"text":{"17":{}},"component":{}}],["postgr",{"_index":3474,"title":{},"name":{},"text":{"37":{},"38":{},"66":{}},"component":{}}],["postgresql",{"_index":2305,"title":{},"name":{},"text":{"32":{},"36":{},"38":{},"39":{}},"component":{}}],["postgresql.mod",{"_index":3652,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["pot",{"_index":8,"title":{},"name":{},"text":{"1":{}},"component":{}}],["potenti",{"_index":598,"title":{},"name":{},"text":{"6":{},"13":{},"34":{},"61":{}},"component":{}}],["power",{"_index":2117,"title":{},"name":{},"text":{"28":{},"42":{},"48":{},"53":{}},"component":{}}],["practic",{"_index":756,"title":{},"name":{},"text":{"7":{},"19":{},"57":{}},"component":{}}],["pre",{"_index":3220,"title":{},"name":{},"text":{"35":{},"37":{},"54":{},"56":{},"66":{}},"component":{}}],["preced",{"_index":1103,"title":{},"name":{},"text":{"13":{},"28":{},"33":{},"48":{}},"component":{}}],["precis",{"_index":3101,"title":{},"name":{},"text":{"34":{},"48":{},"61":{}},"component":{}}],["precompil",{"_index":5311,"title":{"54-2":{},"54-3":{}},"name":{},"text":{"54":{}},"component":{}}],["precompress",{"_index":6082,"title":{},"name":{},"text":{"61":{}},"component":{}}],["predat",{"_index":1179,"title":{},"name":{},"text":{"17":{},"42":{}},"component":{}}],["predecessor",{"_index":3152,"title":{},"name":{},"text":{"34":{}},"component":{}}],["predefin",{"_index":2705,"title":{},"name":{},"text":{"33":{}},"component":{}}],["predestroy",{"_index":1159,"title":{},"name":{},"text":{"17":{}},"component":{}}],["predict",{"_index":3221,"title":{},"name":{},"text":{"35":{},"47":{},"66":{}},"component":{}}],["preempt",{"_index":4836,"title":{},"name":{},"text":{"48":{}},"component":{}}],["prefac",{"_index":6423,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["prefer",{"_index":364,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"34":{},"37":{},"38":{},"48":{},"55":{},"56":{},"61":{},"66":{},"69":{},"71":{}},"component":{}}],["prefix",{"_index":851,"title":{},"name":{},"text":{"7":{},"13":{},"33":{},"38":{},"40":{},"56":{},"61":{},"67":{}},"component":{}}],["preflight",{"_index":2402,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["prematur",{"_index":4243,"title":{},"name":{},"text":{"44":{}},"component":{}}],["prep",{"_index":5344,"title":{},"name":{},"text":{"54":{}},"component":{}}],["prepar",{"_index":3337,"title":{"37-32":{},"66-24":{}},"name":{},"text":{"37":{},"38":{},"48":{},"54":{},"62":{},"63":{},"66":{}},"component":{}}],["prepend",{"_index":2540,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["prerequisit",{"_index":2298,"title":{},"name":{},"text":{"32":{},"34":{},"41":{}},"component":{}}],["presenc",{"_index":2031,"title":{},"name":{},"text":{"28":{},"32":{},"61":{}},"component":{}}],["present",{"_index":1195,"title":{},"name":{},"text":{"17":{},"19":{},"28":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"42":{},"47":{},"48":{},"52":{},"54":{},"61":{},"66":{},"67":{},"71":{}},"component":{}}],["preserv",{"_index":2021,"title":{},"name":{},"text":{"27":{},"35":{},"54":{}},"component":{}}],["pressur",{"_index":2340,"title":{},"name":{},"text":{"33":{}},"component":{}}],["prevent",{"_index":1180,"title":{},"name":{},"text":{"17":{},"33":{},"37":{},"56":{},"66":{}},"component":{}}],["preview",{"_index":2335,"title":{"33-34":{}},"name":{},"text":{"33":{},"36":{},"38":{},"47":{}},"component":{}}],["previou",{"_index":870,"title":{},"name":{},"text":{"7":{},"30":{},"38":{},"41":{},"44":{},"47":{},"48":{},"53":{},"55":{},"59":{},"61":{},"66":{}},"component":{}}],["previous",{"_index":1690,"title":{},"name":{},"text":{"23":{},"33":{},"37":{},"47":{},"48":{},"49":{},"61":{},"62":{},"66":{}},"component":{}}],["price",{"_index":3864,"title":{},"name":{},"text":{"41":{},"44":{}},"component":{}}],["primari",{"_index":19,"title":{},"name":{},"text":{"1":{},"7":{},"43":{},"44":{},"49":{},"61":{},"62":{}},"component":{}}],["primarili",{"_index":3043,"title":{},"name":{},"text":{"34":{},"44":{},"48":{},"52":{}},"component":{}}],["primarystream",{"_index":5048,"title":{},"name":{},"text":{"49":{}},"component":{}}],["primit",{"_index":4069,"title":{},"name":{},"text":{"42":{},"48":{}},"component":{}}],["princip",{"_index":1776,"title":{},"name":{},"text":{"23":{},"24":{},"41":{}},"component":{}}],["print",{"_index":2088,"title":{},"name":{},"text":{"28":{},"32":{},"36":{},"37":{},"38":{},"56":{}},"component":{}}],["println",{"_index":4033,"title":{},"name":{},"text":{"42":{}},"component":{}}],["prio=3",{"_index":3885,"title":{},"name":{},"text":{"41":{}},"component":{}}],["prio=5",{"_index":3877,"title":{},"name":{},"text":{"41":{}},"component":{}}],["prior",{"_index":157,"title":{"2-3":{}},"name":{},"text":{"34":{},"37":{},"48":{},"61":{}},"component":{}}],["priori",{"_index":4921,"title":{},"name":{},"text":{"48":{}},"component":{}}],["priorit",{"_index":6185,"title":{},"name":{},"text":{"61":{}},"component":{}}],["prioriti",{"_index":1380,"title":{},"name":{},"text":{"19":{},"32":{},"33":{},"38":{},"61":{}},"component":{}}],["priorityqoshandl",{"_index":6193,"title":{},"name":{},"text":{"61":{}},"component":{}}],["privat",{"_index":369,"title":{},"name":{},"text":{"3":{},"12":{},"13":{},"30":{},"34":{},"42":{},"43":{},"44":{},"45":{},"48":{},"52":{},"53":{},"61":{},"62":{},"63":{},"65":{}},"component":{}}],["privatefield",{"_index":1090,"title":{},"name":{},"text":{"13":{}},"component":{}}],["privileg",{"_index":1300,"title":{},"name":{},"text":{"18":{}},"component":{}}],["pro",{"_index":5896,"title":{},"name":{},"text":{"61":{}},"component":{}}],["probabl",{"_index":2175,"title":{},"name":{},"text":{"30":{},"35":{},"37":{},"56":{},"61":{},"71":{}},"component":{}}],["problem",{"_index":556,"title":{},"name":{},"text":{"4":{},"41":{},"44":{},"45":{},"53":{},"61":{},"66":{},"69":{},"71":{}},"component":{}}],["proce",{"_index":1780,"title":{},"name":{},"text":{"23":{}},"component":{}}],["procedur",{"_index":1685,"title":{},"name":{},"text":{"23":{}},"component":{}}],["process",{"_index":710,"title":{"48-6":{},"61-1":{},"61-2":{},"61-55":{}},"name":{},"text":{"7":{},"9":{},"10":{},"18":{},"19":{},"25":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"59":{},"61":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["process(data.getbytebuff",{"_index":5073,"title":{},"name":{},"text":{"50":{}},"component":{}}],["processfields(field",{"_index":6310,"title":{},"name":{},"text":{"61":{}},"component":{}}],["processingtim",{"_index":6163,"title":{},"name":{},"text":{"61":{}},"component":{}}],["processor",{"_index":4442,"title":{},"name":{},"text":{"47":{}},"component":{}}],["processparts(part",{"_index":6328,"title":{},"name":{},"text":{"61":{}},"component":{}}],["prod",{"_index":5346,"title":{},"name":{},"text":{"54":{}},"component":{}}],["produc",{"_index":948,"title":{"47-2":{},"47-3":{},"47-4":{}},"name":{},"text":{"8":{},"13":{},"24":{},"30":{},"31":{},"34":{},"36":{},"38":{},"40":{},"41":{},"44":{},"46":{},"47":{},"48":{},"52":{},"55":{},"56":{},"57":{},"61":{},"65":{},"66":{}},"component":{}}],["producer/consum",{"_index":4445,"title":{},"name":{},"text":{"47":{}},"component":{}}],["product",{"_index":1496,"title":{"54-2":{}},"name":{},"text":{"20":{},"33":{},"34":{},"35":{},"41":{},"47":{},"54":{},"56":{},"61":{}},"component":{}}],["profession",{"_index":203,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["profil",{"_index":1795,"title":{},"name":{},"text":{"24":{},"47":{},"54":{}},"component":{}}],["program",{"_index":576,"title":{"16":{},"14-2":{}},"name":{},"text":{"5":{},"7":{},"14":{},"16":{},"18":{},"30":{},"32":{},"37":{},"38":{},"40":{},"44":{},"48":{}},"component":{}}],["programm",{"_index":6538,"title":{},"name":{},"text":{"66":{}},"component":{}}],["programmat",{"_index":3224,"title":{},"name":{},"text":{"35":{},"48":{},"56":{},"61":{},"64":{},"66":{},"67":{}},"component":{}}],["progress",{"_index":4474,"title":{},"name":{},"text":{"47":{},"48":{},"61":{}},"component":{}}],["project",{"_index":65,"title":{"7-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"11":{},"12":{},"19":{},"32":{},"37":{},"51":{},"54":{},"55":{},"56":{},"64":{},"66":{},"67":{}},"component":{}}],["project.basedir}../../b.war",{"_index":5551,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.basedir}../../c.war",{"_index":5552,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.basedir}/mysys.prop",{"_index":5563,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.basedir}/somewhere/els",{"_index":5502,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.basedir}/src/etc/realm.properti",{"_index":5544,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.basedir}/src/main/webapp",{"_index":5318,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["project.basedir}/src/main/webapp/web",{"_index":5320,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["project.basedir}/src/over/here/jetti",{"_index":5500,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.basedir}/src/over/here/web.xml",{"_index":5499,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.basedir}/src/staticfil",{"_index":5501,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.basedir}/target/web.xml",{"_index":5342,"title":{},"name":{},"text":{"54":{}},"component":{}}],["project.basedir}/target/webfrag.xml",{"_index":5316,"title":{},"name":{},"text":{"54":{}},"component":{}}],["project.baseuri}/resources/logback.xml",{"_index":5559,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.build.directory}/${project.build.finalname}.war",{"_index":5507,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.build.outputdirectori",{"_index":5323,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["project.build.outputdirectory}/tmp",{"_index":5479,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project.build.testoutputdirectori",{"_index":5492,"title":{},"name":{},"text":{"56":{}},"component":{}}],["project_id",{"_index":3574,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["projectid",{"_index":6812,"title":{},"name":{},"text":{"66":{}},"component":{}}],["project’",{"_index":589,"title":{},"name":{},"text":{"6":{},"55":{},"56":{}},"component":{}}],["promis",{"_index":5119,"title":{},"name":{},"text":{"52":{}},"component":{}}],["promise.complet",{"_index":5126,"title":{},"name":{},"text":{"52":{}},"component":{}}],["promise.completable.with(p",{"_index":6361,"title":{},"name":{},"text":{"61":{}},"component":{}}],["promisefram",{"_index":6456,"title":{},"name":{},"text":{"62":{}},"component":{}}],["prompt",{"_index":2156,"title":{},"name":{},"text":{"30":{},"32":{},"36":{},"37":{},"40":{}},"component":{}}],["promptli",{"_index":3390,"title":{},"name":{},"text":{"37":{}},"component":{}}],["prone",{"_index":6342,"title":{},"name":{},"text":{"61":{}},"component":{}}],["proof",{"_index":2176,"title":{},"name":{},"text":{"30":{}},"component":{}}],["prop",{"_index":1735,"title":{},"name":{},"text":{"23":{}},"component":{}}],["propag",{"_index":3581,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["proper",{"_index":359,"title":{},"name":{},"text":{"3":{},"12":{},"39":{},"62":{},"63":{}},"component":{}}],["properli",{"_index":1050,"title":{},"name":{},"text":{"12":{},"25":{},"33":{},"37":{},"41":{},"45":{},"47":{},"48":{},"61":{}},"component":{}}],["properti",{"_index":929,"title":{"32-3":{},"33-22":{},"33-23":{},"33-24":{},"33-25":{},"33-27":{},"33-28":{},"42-12":{},"56-28":{},"56-29":{},"56-30":{}},"name":{},"text":{"8":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"28":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"45":{},"56":{},"61":{},"66":{},"71":{}},"component":{}}],["propertyfileloginmodul",{"_index":1645,"title":{"23-8":{}},"name":{},"text":{},"component":{}}],["propos",{"_index":3179,"title":{},"name":{},"text":{"34":{}},"component":{}}],["prose",{"_index":627,"title":{"7-8":{}},"name":{},"text":{"7":{}},"component":{}}],["protect",{"_index":2128,"title":{},"name":{},"text":{"30":{},"33":{},"40":{},"43":{},"44":{},"48":{},"52":{},"53":{},"55":{},"61":{},"65":{}},"component":{}}],["proto",{"_index":2524,"title":{},"name":{},"text":{"33":{}},"component":{}}],["protocol",{"_index":222,"title":{"34":{},"34-14":{},"34-16":{},"34-24":{},"52-4":{},"61-14":{}},"name":{},"text":{"2":{},"16":{},"18":{},"19":{},"20":{},"21":{},"30":{},"33":{},"34":{},"36":{},"41":{},"44":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"61":{},"62":{},"63":{},"64":{},"65":{},"67":{},"69":{}},"component":{}}],["protocol,http2c,http,deploy",{"_index":3205,"title":{},"name":{},"text":{"34":{}},"component":{}}],["protocol.ini",{"_index":3161,"title":{},"name":{},"text":{"34":{}},"component":{}}],["protostreammarshal",{"_index":6798,"title":{},"name":{},"text":{"66":{}},"component":{}}],["proverb",{"_index":4465,"title":{},"name":{},"text":{"47":{}},"component":{}}],["provid",{"_index":127,"title":{"23-5":{},"32-7":{},"34-20":{},"61-20":{}},"name":{},"text":{"1":{},"2":{},"6":{},"13":{},"16":{},"18":{},"19":{},"23":{},"24":{},"25":{},"26":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"71":{},"72":{}},"component":{}}],["provis",{"_index":159,"title":{"2-4":{}},"name":{},"text":{"2":{},"9":{}},"component":{}}],["proxi",{"_index":1640,"title":{"34-22":{},"34-24":{},"48-22":{},"48-23":{},"48-24":{}},"name":{},"text":{"22":{},"33":{},"34":{},"48":{},"49":{},"51":{},"53":{},"57":{},"61":{},"62":{},"64":{},"65":{}},"component":{}}],["proxy,cor",{"_index":3065,"title":{},"name":{},"text":{"34":{}},"component":{}}],["proxy.getexcludedaddresses().add(\"localhost:8080",{"_index":4853,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxy.putauthenticationfactory(socks5authenticationfactori",{"_index":4865,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxy_protocol",{"_index":6037,"title":{},"name":{},"text":{"61":{}},"component":{}}],["proxyconfig",{"_index":4854,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxyconfig.addproxy(proxi",{"_index":4856,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxyconfigur",{"_index":4519,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxyconfiguration.proxi",{"_index":4849,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxyconnect",{"_index":6040,"title":{},"name":{},"text":{"61":{}},"component":{}}],["proxyconnectionfactori",{"_index":6038,"title":{},"name":{},"text":{"61":{}},"component":{}}],["proxyconnectionfactory(http11.getprotocol",{"_index":6039,"title":{},"name":{},"text":{"61":{}},"component":{}}],["proxycustom",{"_index":5881,"title":{"61-7":{}},"name":{},"text":{"61":{}},"component":{}}],["proxypass",{"_index":4871,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxyrealm",{"_index":4869,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxyuri",{"_index":4866,"title":{},"name":{},"text":{"48":{}},"component":{}}],["proxyus",{"_index":4870,"title":{},"name":{},"text":{"48":{}},"component":{}}],["prudent",{"_index":3560,"title":{},"name":{},"text":{"37":{}},"component":{}}],["pseudo",{"_index":5943,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pst",{"_index":3259,"title":{},"name":{},"text":{"36":{}},"component":{}}],["pti",{"_index":829,"title":{},"name":{},"text":{"7":{}},"component":{}}],["public",{"_index":835,"title":{},"name":{},"text":{"7":{},"13":{},"20":{},"30":{},"31":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"57":{},"58":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["publicli",{"_index":1573,"title":{},"name":{},"text":{"20":{},"42":{},"61":{}},"component":{}}],["publish(byt",{"_index":4630,"title":{},"name":{},"text":{"48":{}},"component":{}}],["pull",{"_index":736,"title":{"10-4":{}},"name":{},"text":{"7":{},"9":{},"10":{},"11":{},"36":{},"57":{}},"component":{}}],["puni",{"_index":1447,"title":{},"name":{},"text":{"19":{}},"component":{}}],["punycode/idn",{"_index":1448,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pure",{"_index":6645,"title":{},"name":{},"text":{"66":{}},"component":{}}],["purpos",{"_index":796,"title":{},"name":{},"text":{"7":{},"23":{},"33":{},"41":{},"43":{},"44":{},"45":{},"56":{},"66":{}},"component":{}}],["push",{"_index":4936,"title":{"49-8":{},"62-7":{}},"name":{},"text":{"49":{},"57":{},"62":{}},"component":{}}],["push_promis",{"_index":5038,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pushed.data(new",{"_index":6464,"title":{},"name":{},"text":{"62":{}},"component":{}}],["pushedrequest",{"_index":5042,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["pushedrequest.gethttpfield",{"_index":5047,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pushedrequest.gethttpuri",{"_index":5045,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pushedrequesthead",{"_index":5046,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pushedrespons",{"_index":6460,"title":{},"name":{},"text":{"62":{}},"component":{}}],["pushedresponsehead",{"_index":5050,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pushedstream",{"_index":5040,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pushedstream.getsession().getstream(frame.getstreamid",{"_index":5049,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pushedstream.headers(new",{"_index":6461,"title":{},"name":{},"text":{"62":{}},"component":{}}],["pushedstream.reset(new",{"_index":5051,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pusheduri",{"_index":5044,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["pushen",{"_index":6447,"title":{},"name":{},"text":{"62":{}},"component":{}}],["pushpromisefram",{"_index":5041,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["pushpromiseframe(stream.getid",{"_index":6457,"title":{},"name":{},"text":{"62":{}},"component":{}}],["put",{"_index":1675,"title":{"42-9":{}},"name":{},"text":{"23":{},"27":{},"31":{},"32":{},"34":{},"37":{},"38":{},"41":{},"42":{},"44":{},"48":{},"54":{},"56":{},"61":{},"66":{}},"component":{}}],["put(httpheader.connect",{"_index":4934,"title":{},"name":{},"text":{"48":{}},"component":{}}],["put(httpheader.content_typ",{"_index":4986,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["put(httpheader.http2_set",{"_index":4933,"title":{},"name":{},"text":{"48":{}},"component":{}}],["put(httpheader.link",{"_index":6376,"title":{},"name":{},"text":{"61":{}},"component":{}}],["put(httpheader.upgrad",{"_index":4932,"title":{},"name":{},"text":{"48":{}},"component":{}}],["put(httpheader.user_ag",{"_index":4975,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["python",{"_index":3045,"title":{},"name":{},"text":{"34":{},"64":{}},"component":{}}],["q",{"_index":2588,"title":{},"name":{},"text":{"33":{}},"component":{}}],["qo",{"_index":6173,"title":{},"name":{},"text":{"61":{}},"component":{}}],["qoshandl",{"_index":5888,"title":{"61-32":{}},"name":{},"text":{"61":{}},"component":{}}],["qoshandler.sethandler(new",{"_index":6192,"title":{},"name":{},"text":{"61":{}},"component":{}}],["qoshandler.setmaxrequestcount(maxthread",{"_index":6189,"title":{},"name":{},"text":{"61":{}},"component":{}}],["qoshandler.setmaxsuspend(duration.ofseconds(15",{"_index":6190,"title":{},"name":{},"text":{"61":{}},"component":{}}],["qpack",{"_index":5574,"title":{},"name":{},"text":{"57":{}},"component":{}}],["qtp1860513229",{"_index":3874,"title":{},"name":{},"text":{"41":{}},"component":{}}],["quadrat",{"_index":2357,"title":{},"name":{},"text":{"33":{}},"component":{}}],["qualifi",{"_index":1426,"title":{},"name":{},"text":{"19":{},"33":{},"42":{}},"component":{}}],["qualiti",{"_index":6172,"title":{},"name":{},"text":{"61":{}},"component":{}}],["queri",{"_index":1720,"title":{"37-21":{},"37-24":{}},"name":{},"text":{"23":{},"33":{},"37":{},"57":{},"61":{},"66":{}},"component":{}}],["queries/",{"_index":6174,"title":{},"name":{},"text":{"61":{}},"component":{}}],["queryparamet",{"_index":5632,"title":{},"name":{},"text":{"57":{}},"component":{}}],["querystr",{"_index":5626,"title":{},"name":{},"text":{"57":{}},"component":{}}],["question",{"_index":56,"title":{},"name":{},"text":{"1":{},"4":{},"6":{},"38":{}},"component":{}}],["queu",{"_index":4473,"title":{},"name":{},"text":{"47":{},"48":{},"61":{}},"component":{}}],["queue",{"_index":1933,"title":{"26-5":{},"47-7":{}},"name":{},"text":{"33":{},"46":{},"47":{},"48":{},"49":{},"61":{},"62":{}},"component":{}}],["queuedthreadpool",{"_index":2277,"title":{"47-8":{}},"name":{},"text":{"32":{},"47":{},"52":{},"61":{},"68":{}},"component":{}}],["queuedthreadpool(maxthread",{"_index":6187,"title":{},"name":{},"text":{"61":{}},"component":{}}],["queuedthreadpool.idletimeout",{"_index":4490,"title":{},"name":{},"text":{"47":{}},"component":{}}],["queuedthreadpool.leasedthread",{"_index":4479,"title":{},"name":{},"text":{"47":{}},"component":{}}],["queuedthreadpool.maxevictcount",{"_index":4491,"title":{},"name":{},"text":{"47":{}},"component":{}}],["queuedthreadpool.maxthread",{"_index":4483,"title":{},"name":{},"text":{"47":{}},"component":{}}],["queuedthreadpool.minthread",{"_index":4484,"title":{},"name":{},"text":{"47":{}},"component":{}}],["queuedthreadpool.reservedthread",{"_index":4482,"title":{},"name":{},"text":{"47":{}},"component":{}}],["queuedthreadpool.setdetaileddump(tru",{"_index":6928,"title":{},"name":{},"text":{"68":{}},"component":{}}],["queuedthreadpool.setmaxthreads(int",{"_index":2279,"title":{},"name":{},"text":{"32":{}},"component":{}}],["queuedthreadpool[qtp1860513229]@6ee52dcd{started,4",{"_index":3872,"title":{},"name":{},"text":{"41":{}},"component":{}}],["quic",{"_index":3074,"title":{},"name":{},"text":{"34":{},"44":{},"48":{},"50":{},"52":{},"57":{},"61":{},"63":{}},"component":{}}],["quic+http/3",{"_index":3078,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["quicconfigur",{"_index":4916,"title":{},"name":{},"text":{"48":{},"63":{}},"component":{}}],["quicconfiguration.setmaxbidirectionalremotestreams(1024",{"_index":6470,"title":{},"name":{},"text":{"63":{}},"component":{}}],["quich",{"_index":5579,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["quick",{"_index":1286,"title":{"20-1":{}},"name":{},"text":{"18":{},"34":{},"48":{},"61":{}},"component":{}}],["quicker",{"_index":4492,"title":{},"name":{},"text":{"47":{}},"component":{}}],["quickli",{"_index":788,"title":{},"name":{},"text":{"7":{},"8":{},"16":{},"41":{},"55":{},"56":{},"61":{},"71":{}},"component":{}}],["quickstart",{"_index":3219,"title":{},"name":{},"text":{"35":{},"56":{},"57":{}},"component":{}}],["quicserverconnector",{"_index":4163,"title":{},"name":{},"text":{"44":{},"61":{},"63":{}},"component":{}}],["quicserverconnector(serv",{"_index":5963,"title":{},"name":{},"text":{"61":{},"63":{}},"component":{}}],["quicserverconnector@68044f4{h3",{"_index":3018,"title":{},"name":{},"text":{"34":{}},"component":{}}],["quictransport",{"_index":5085,"title":{},"name":{},"text":{"52":{}},"component":{}}],["quit",{"_index":2929,"title":{},"name":{},"text":{"34":{},"38":{},"39":{},"48":{},"49":{},"50":{},"53":{},"62":{},"63":{}},"component":{}}],["quot",{"_index":2095,"title":{},"name":{},"text":{"28":{},"48":{}},"component":{}}],["quoteattributeel",{"_index":2093,"title":{},"name":{},"text":{"28":{}},"component":{}}],["r",{"_index":2552,"title":{},"name":{},"text":{"33":{},"36":{},"48":{}},"component":{}}],["r\\n",{"_index":4885,"title":{},"name":{},"text":{"48":{},"52":{}},"component":{}}],["race",{"_index":5112,"title":{},"name":{},"text":{"52":{}},"component":{}}],["random",{"_index":2535,"title":{},"name":{},"text":{"33":{}},"component":{}}],["randomli",{"_index":1866,"title":{},"name":{},"text":{"25":{},"37":{},"38":{},"45":{},"48":{},"61":{},"66":{}},"component":{}}],["randomrobinconnectionpool",{"_index":4536,"title":{},"name":{},"text":{"48":{}},"component":{}}],["rang",{"_index":113,"title":{},"name":{},"text":{"1":{},"6":{},"61":{}},"component":{}}],["rapid",{"_index":5413,"title":{},"name":{},"text":{"56":{}},"component":{}}],["rare",{"_index":2162,"title":{},"name":{},"text":{"30":{},"37":{},"49":{},"50":{},"56":{},"61":{},"62":{},"63":{}},"component":{}}],["rate",{"_index":5968,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ratio",{"_index":2476,"title":{},"name":{},"text":{"33":{}},"component":{}}],["raw",{"_index":5192,"title":{},"name":{},"text":{"53":{},"59":{}},"component":{}}],["rawhttp2serverconnectionfactori",{"_index":6414,"title":{},"name":{},"text":{"62":{}},"component":{}}],["rawhttp2serverconnectionfactory(sessionlisten",{"_index":6415,"title":{},"name":{},"text":{"62":{}},"component":{}}],["rawhttp3serverconnectionfactori",{"_index":6471,"title":{},"name":{},"text":{"63":{}},"component":{}}],["rawhttp3serverconnectionfactory(quicconfigur",{"_index":6472,"title":{},"name":{},"text":{"63":{}},"component":{}}],["rc",{"_index":1500,"title":{},"name":{},"text":{"20":{}},"component":{}}],["rdbm",{"_index":5926,"title":{},"name":{},"text":{"61":{}},"component":{}}],["re",{"_index":2098,"title":{},"name":{},"text":{"28":{},"33":{},"37":{},"38":{},"43":{},"44":{},"47":{},"57":{},"65":{},"66":{}},"component":{}}],["reach",{"_index":355,"title":{},"name":{},"text":{"3":{},"12":{},"44":{},"45":{},"57":{}},"component":{}}],["reachabl",{"_index":1359,"title":{},"name":{},"text":{"19":{}},"component":{}}],["react",{"_index":6419,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["reactor",{"_index":5333,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["read",{"_index":678,"title":{"53-12":{},"53-14":{},"61-45":{}},"name":{},"text":{"7":{},"18":{},"20":{},"23":{},"25":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["read(content.sourc",{"_index":4263,"title":{},"name":{},"text":{"44":{}},"component":{}}],["read(sourc",{"_index":4266,"title":{},"name":{},"text":{"44":{}},"component":{}}],["read/demand",{"_index":4669,"title":{},"name":{},"text":{"48":{}},"component":{}}],["readabl",{"_index":665,"title":{},"name":{},"text":{"7":{},"34":{},"37":{}},"component":{}}],["readchunktosendinto(bytebuff",{"_index":5286,"title":{},"name":{},"text":{"53":{}},"component":{}}],["reader",{"_index":793,"title":{},"name":{},"text":{"7":{},"31":{},"44":{},"53":{},"57":{},"61":{}},"component":{}}],["reader.read(char",{"_index":5252,"title":{},"name":{},"text":{"53":{}},"component":{}}],["reader.start",{"_index":5704,"title":{},"name":{},"text":{"57":{}},"component":{}}],["readi",{"_index":1587,"title":{},"name":{},"text":{"20":{},"33":{},"47":{},"48":{},"61":{}},"component":{}}],["readimagefromfil",{"_index":5268,"title":{},"name":{},"text":{"53":{}},"component":{}}],["reading/writ",{"_index":6144,"title":{},"name":{},"text":{"61":{}},"component":{}}],["readonli",{"_index":1907,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["readwrit",{"_index":1906,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["real",{"_index":2838,"title":{},"name":{},"text":{"33":{},"47":{},"52":{},"61":{}},"component":{}}],["realiz",{"_index":6015,"title":{},"name":{},"text":{"61":{}},"component":{}}],["realli",{"_index":2177,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"48":{},"61":{},"69":{}},"component":{}}],["realm",{"_index":1677,"title":{},"name":{},"text":{"23":{},"24":{},"48":{},"56":{}},"component":{}}],["reason",{"_index":200,"title":{},"name":{},"text":{"2":{},"10":{},"19":{},"25":{},"31":{},"34":{},"37":{},"39":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"53":{},"56":{},"61":{}},"component":{}}],["reassembl",{"_index":5465,"title":{},"name":{},"text":{"56":{}},"component":{}}],["rebuilt",{"_index":5425,"title":{},"name":{},"text":{"56":{}},"component":{}}],["recal",{"_index":1379,"title":{},"name":{},"text":{"19":{},"20":{},"25":{},"34":{},"52":{},"61":{},"65":{}},"component":{}}],["recap",{"_index":1304,"title":{},"name":{},"text":{"18":{}},"component":{}}],["receiv",{"_index":1427,"title":{"49-6":{},"49-8":{},"50-5":{},"62-4":{},"63-3":{}},"name":{},"text":{"19":{},"30":{},"33":{},"34":{},"38":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"61":{},"62":{},"63":{},"64":{},"65":{},"67":{},"69":{}},"component":{}}],["recent",{"_index":797,"title":{},"name":{},"text":{"7":{},"8":{},"17":{},"19":{},"28":{},"48":{},"59":{},"66":{}},"component":{}}],["recogn",{"_index":2927,"title":{},"name":{},"text":{"34":{},"65":{}},"component":{}}],["recommend",{"_index":202,"title":{},"name":{},"text":{"2":{},"8":{},"9":{},"23":{},"26":{},"33":{},"37":{},"41":{},"43":{},"45":{},"48":{},"53":{},"55":{},"56":{},"61":{},"66":{}},"component":{}}],["recompil",{"_index":2047,"title":{},"name":{},"text":{"28":{}},"component":{}}],["recompileonfail",{"_index":2097,"title":{},"name":{},"text":{"28":{}},"component":{}}],["reconfigur",{"_index":1302,"title":{},"name":{},"text":{"18":{},"19":{},"32":{},"41":{}},"component":{}}],["record",{"_index":2240,"title":{},"name":{},"text":{"31":{},"49":{},"61":{},"62":{}},"component":{}}],["recover",{"_index":4254,"title":{},"name":{},"text":{"44":{}},"component":{}}],["recoveri",{"_index":4270,"title":{},"name":{},"text":{"44":{}},"component":{}}],["recurs",{"_index":2291,"title":{},"name":{},"text":{"32":{},"38":{},"41":{},"43":{},"44":{},"61":{}},"component":{}}],["recycl",{"_index":4710,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["redeploy",{"_index":1353,"title":{},"name":{},"text":{"19":{},"56":{}},"component":{}}],["redirect",{"_index":2633,"title":{"61-33":{}},"name":{},"text":{"33":{},"34":{},"48":{},"49":{},"50":{},"57":{},"61":{}},"component":{}}],["redirect/rewrit",{"_index":2621,"title":{},"name":{},"text":{"33":{}},"component":{}}],["redirected/rewritten",{"_index":2623,"title":{},"name":{},"text":{"33":{}},"component":{}}],["redirectregexrul",{"_index":6118,"title":{},"name":{},"text":{"61":{}},"component":{}}],["redirectregexrule(\"/document",{"_index":6120,"title":{},"name":{},"text":{"61":{}},"component":{}}],["redirectrul",{"_index":6119,"title":{},"name":{},"text":{"61":{}},"component":{}}],["redirectrule.setstatuscode(httpstatus.moved_permanently_301",{"_index":6122,"title":{},"name":{},"text":{"61":{}},"component":{}}],["redistribut",{"_index":2187,"title":{},"name":{},"text":{"30":{}},"component":{}}],["reduc",{"_index":1132,"title":{},"name":{},"text":{"13":{},"17":{},"33":{},"34":{},"37":{},"41":{},"49":{},"53":{},"61":{},"62":{},"66":{}},"component":{}}],["ref",{"_index":1944,"title":{"42-11":{}},"name":{},"text":{"26":{},"56":{}},"component":{}}],["refer",{"_index":375,"title":{"38-16":{}},"name":{},"text":{"3":{},"7":{},"10":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"57":{},"61":{},"62":{},"63":{},"66":{},"67":{},"69":{}},"component":{}}],["referenc",{"_index":808,"title":{},"name":{},"text":{"7":{},"19":{},"23":{},"26":{},"31":{},"32":{},"37":{},"42":{},"56":{},"66":{}},"component":{}}],["referer}i",{"_index":2553,"title":{},"name":{},"text":{"33":{}},"component":{}}],["referr",{"_index":3298,"title":{},"name":{},"text":{"36":{},"61":{}},"component":{}}],["refid",{"_index":4062,"title":{},"name":{},"text":{"42":{}},"component":{}}],["refin",{"_index":5850,"title":{},"name":{},"text":{"59":{}},"component":{}}],["reflect",{"_index":3703,"title":{},"name":{},"text":{"38":{},"42":{},"53":{},"56":{}},"component":{}}],["refresh",{"_index":1850,"title":{},"name":{},"text":{"25":{},"66":{}},"component":{}}],["refus",{"_index":5453,"title":{},"name":{},"text":{"56":{}},"component":{}}],["regard",{"_index":588,"title":{},"name":{},"text":{"6":{},"66":{}},"component":{}}],["regardless",{"_index":1652,"title":{},"name":{},"text":{"23":{},"26":{},"48":{}},"component":{}}],["regener",{"_index":6580,"title":{},"name":{},"text":{"66":{}},"component":{}}],["regex",{"_index":2399,"title":{},"name":{},"text":{"33":{},"34":{},"61":{},"67":{}},"component":{}}],["regexp",{"_index":6890,"title":{},"name":{},"text":{"67":{}},"component":{}}],["regist",{"_index":1411,"title":{},"name":{},"text":{"19":{},"24":{},"25":{},"26":{},"43":{},"44":{},"45":{},"46":{},"48":{},"52":{},"61":{},"66":{},"67":{}},"component":{}}],["registers/unregist",{"_index":4351,"title":{},"name":{},"text":{"45":{}},"component":{}}],["registr",{"_index":1813,"title":{},"name":{},"text":{"24":{},"67":{}},"component":{}}],["registri",{"_index":1856,"title":{},"name":{},"text":{"25":{},"33":{},"45":{}},"component":{}}],["regular",{"_index":123,"title":{},"name":{},"text":{"1":{},"6":{},"17":{},"32":{},"34":{},"52":{},"67":{}},"component":{}}],["regularli",{"_index":73,"title":{},"name":{},"text":{"1":{},"11":{}},"component":{}}],["rehandl",{"_index":3071,"title":{},"name":{},"text":{"34":{}},"component":{}}],["reject",{"_index":2713,"title":{},"name":{},"text":{"33":{},"34":{},"47":{},"48":{},"61":{}},"component":{}}],["rejectedexecutionexcept",{"_index":6485,"title":{},"name":{},"text":{"63":{}},"component":{}}],["rel",{"_index":1137,"title":{},"name":{},"text":{"13":{},"17":{},"23":{},"26":{},"32":{},"33":{},"35":{},"37":{},"38":{},"41":{},"56":{},"59":{},"66":{}},"component":{}}],["rel=preload",{"_index":6377,"title":{},"name":{},"text":{"61":{}},"component":{}}],["relat",{"_index":343,"title":{"11-1":{}},"name":{},"text":{"3":{},"11":{},"12":{},"20":{},"25":{},"32":{},"34":{},"37":{},"44":{},"48":{},"49":{},"52":{},"61":{},"62":{},"66":{}},"component":{}}],["relationship",{"_index":2292,"title":{},"name":{},"text":{"32":{},"53":{}},"component":{}}],["relativeredirectallowed=fals",{"_index":3952,"title":{},"name":{},"text":{"41":{}},"component":{}}],["relay",{"_index":3212,"title":{},"name":{},"text":{"34":{}},"component":{}}],["releas",{"_index":161,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"10":{},"20":{},"32":{},"33":{},"34":{},"36":{},"37":{},"44":{},"48":{},"49":{},"53":{},"54":{},"57":{},"62":{},"67":{}},"component":{}}],["relev",{"_index":1842,"title":{},"name":{},"text":{"25":{},"27":{},"28":{},"33":{},"36":{},"41":{},"49":{},"50":{},"61":{},"67":{}},"component":{}}],["reli",{"_index":841,"title":{},"name":{},"text":{"7":{},"25":{},"34":{},"44":{},"48":{},"50":{},"61":{},"63":{}},"component":{}}],["reliabl",{"_index":1650,"title":{},"name":{},"text":{"23":{},"41":{},"48":{},"52":{}},"component":{}}],["relic",{"_index":289,"title":{},"name":{},"text":{"2":{}},"component":{}}],["reliev",{"_index":6221,"title":{},"name":{},"text":{"61":{}},"component":{}}],["reload",{"_index":2333,"title":{"33-29":{},"34-19":{}},"name":{},"text":{"33":{},"34":{}},"component":{}}],["remain",{"_index":663,"title":{},"name":{},"text":{"7":{},"18":{},"23":{},"33":{},"37":{},"49":{},"50":{},"53":{},"61":{},"66":{}},"component":{}}],["rememb",{"_index":1391,"title":{},"name":{},"text":{"19":{},"23":{},"32":{},"34":{},"38":{},"40":{},"47":{},"48":{},"49":{},"53":{},"61":{},"62":{},"66":{},"67":{},"71":{}},"component":{}}],["remind",{"_index":815,"title":{},"name":{},"text":{"7":{}},"component":{}}],["remot",{"_index":1829,"title":{"69":{},"25-2":{},"25-3":{},"25-4":{},"25-5":{},"33-17":{},"37-19":{},"37-21":{},"37-27":{},"38-14":{},"41-9":{},"45-2":{},"45-3":{},"45-4":{},"45-5":{},"53-3":{}},"name":{},"text":{"25":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"45":{},"48":{},"53":{},"57":{},"61":{},"66":{},"67":{},"69":{}},"component":{}}],["remote.ini",{"_index":1859,"title":{},"name":{},"text":{"25":{},"37":{}},"component":{}}],["remote.sendstring(\"wrong",{"_index":5272,"title":{},"name":{},"text":{"53":{}},"component":{}}],["remoteaddress",{"_index":5664,"title":{},"name":{},"text":{"57":{},"62":{},"63":{}},"component":{}}],["remotecach",{"_index":6804,"title":{},"name":{},"text":{"66":{}},"component":{}}],["remotecachemanag",{"_index":6802,"title":{},"name":{},"text":{"66":{}},"component":{}}],["remotecachemanager(configurationbuilder.build",{"_index":6803,"title":{},"name":{},"text":{"66":{}},"component":{}}],["remotecachemanager.getcache(\"jettysess",{"_index":6805,"title":{},"name":{},"text":{"66":{}},"component":{}}],["remoteendpoint",{"_index":5789,"title":{},"name":{},"text":{"57":{}},"component":{}}],["remoteendpoint.setmaxoutgoingframes(int",{"_index":5273,"title":{},"name":{},"text":{"53":{}},"component":{}}],["remoteport",{"_index":5667,"title":{},"name":{},"text":{"57":{}},"component":{}}],["remotequerymanag",{"_index":6774,"title":{},"name":{},"text":{"66":{}},"component":{}}],["remote|embed",{"_index":3528,"title":{},"name":{},"text":{"37":{}},"component":{}}],["remov",{"_index":1354,"title":{},"name":{},"text":{"19":{},"28":{},"33":{},"36":{},"37":{},"41":{},"43":{},"45":{},"48":{},"57":{},"59":{},"61":{},"66":{},"71":{}},"component":{}}],["removebean(schedul",{"_index":4099,"title":{},"name":{},"text":{"43":{}},"component":{}}],["removedvalu",{"_index":5684,"title":{},"name":{},"text":{"57":{}},"component":{}}],["removeunloadablesess",{"_index":6622,"title":{},"name":{},"text":{"66":{}},"component":{}}],["renam",{"_index":2622,"title":{},"name":{},"text":{"33":{},"57":{}},"component":{}}],["render",{"_index":729,"title":{},"name":{},"text":{"7":{},"45":{},"48":{}},"component":{}}],["renegoti",{"_index":2791,"title":{},"name":{},"text":{"33":{}},"component":{}}],["renew",{"_index":2871,"title":{"34-18":{}},"name":{},"text":{"33":{},"34":{}},"component":{}}],["repack",{"_index":5347,"title":{},"name":{},"text":{"54":{}},"component":{}}],["repackag",{"_index":1478,"title":{},"name":{},"text":{"19":{},"56":{}},"component":{}}],["repeat",{"_index":2655,"title":{},"name":{},"text":{"33":{},"37":{},"66":{}},"component":{}}],["repetit",{"_index":803,"title":{},"name":{},"text":{"7":{}},"component":{}}],["replac",{"_index":1787,"title":{"24-6":{}},"name":{},"text":{"24":{},"28":{},"32":{},"34":{},"36":{},"37":{},"38":{},"42":{},"44":{},"56":{},"57":{},"61":{},"66":{}},"component":{}}],["repli",{"_index":1550,"title":{},"name":{},"text":{"20":{},"30":{},"53":{},"61":{}},"component":{}}],["replic",{"_index":6390,"title":{},"name":{},"text":{"61":{}},"component":{}}],["repo",{"_index":902,"title":{},"name":{},"text":{"8":{},"11":{},"13":{}},"component":{}}],["report",{"_index":338,"title":{"3-1":{},"3-2":{}},"name":{},"text":{"3":{},"12":{},"34":{},"38":{},"41":{},"47":{},"55":{},"61":{},"66":{}},"component":{}}],["repositori",{"_index":192,"title":{"11-1":{}},"name":{},"text":{"2":{},"8":{},"10":{},"11":{},"38":{},"56":{}},"component":{}}],["repres",{"_index":1187,"title":{},"name":{},"text":{"17":{},"19":{},"26":{},"27":{},"31":{},"32":{},"34":{},"37":{},"41":{},"42":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"66":{},"67":{}},"component":{}}],["reproduc",{"_index":3998,"title":{},"name":{},"text":{"41":{},"44":{}},"component":{}}],["req",{"_index":2206,"title":{},"name":{},"text":{"30":{},"58":{}},"component":{}}],["request",{"_index":990,"title":{"10-4":{},"30-3":{},"36-10":{},"48-6":{},"48-10":{},"48-12":{},"49-5":{},"49-7":{},"50-4":{},"50-6":{},"53-6":{},"57-5":{},"57-6":{},"61-1":{},"61-2":{},"61-3":{},"61-4":{},"61-44":{},"61-45":{},"61-46":{},"62-4":{},"62-6":{},"63-3":{},"63-5":{}},"name":{},"text":{"9":{},"10":{},"11":{},"13":{},"18":{},"19":{},"20":{},"23":{},"25":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"72":{}},"component":{}}],["request+respons",{"_index":4652,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request.abort(throw",{"_index":4676,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request.addcompletionlistener(consum",{"_index":6336,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.addfailurelistener(consum",{"_index":6334,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.addidletimeoutlistener(pred",{"_index":6331,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.agent(\"mozilla/5.0",{"_index":4562,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request.asattributemap",{"_index":5687,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.clearattribut",{"_index":5686,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.demand(runn",{"_index":6332,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.demand(thi",{"_index":5700,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.extractqueryparameters(request",{"_index":5633,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["request.getattribute(nam",{"_index":5681,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getattributenameset",{"_index":5680,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getbeginnanotim",{"_index":6141,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.getconnectionmetadata().getprotocol",{"_index":5610,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getconnectionmetadata().getremotesocketaddress",{"_index":5942,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.getcontentlengthlong",{"_index":6401,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.getcontext",{"_index":5615,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getcookies(request",{"_index":5638,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["request.gethead",{"_index":5644,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["request.getheaders().contains(\"x",{"_index":6907,"title":{},"name":{},"text":{"67":{}},"component":{}}],["request.getheaders().get(httpheader.content_typ",{"_index":5647,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["request.getheadersnanotim",{"_index":6143,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.gethttpuri",{"_index":6286,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.gethttpuri().asstr",{"_index":5613,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.gethttpuri().getpath",{"_index":5620,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.gethttpuri().getqueri",{"_index":5627,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["request.gethttpuri().getschem",{"_index":5655,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.gethttpuri().tostring().endswith(\"/index.html",{"_index":6454,"title":{},"name":{},"text":{"62":{}},"component":{}}],["request.getinputstream",{"_index":6404,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.getlength",{"_index":5651,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["request.getlocaladdr(request",{"_index":5672,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getlocales(request",{"_index":5653,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getlocalport(request",{"_index":5675,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getmethod",{"_index":5608,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["request.getparameters(request",{"_index":5636,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getparametersasync(request",{"_index":6299,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.getpathincontext(request",{"_index":5624,"title":{},"name":{},"text":{"57":{},"61":{},"67":{}},"component":{}}],["request.getpathincontext(upgraderequest",{"_index":6923,"title":{},"name":{},"text":{"67":{}},"component":{}}],["request.getremoteaddr(request",{"_index":5665,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getremoteport(request",{"_index":5668,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getservername(request",{"_index":5658,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getserverport(request",{"_index":5661,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getsession(boolean",{"_index":6302,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.getsession(cr",{"_index":5692,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.getsession(fals",{"_index":6384,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.getsession(true).getid",{"_index":5405,"title":{},"name":{},"text":{"55":{}},"component":{}}],["request.gettrail",{"_index":5689,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.issecur",{"_index":5941,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.listen",{"_index":4608,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request.method(httpmethod.head",{"_index":4561,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request.onresponsecontent(response.contentlisten",{"_index":5778,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.onresponsecontentasync(response.asynccontentlisten",{"_index":5777,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.onresponsecontentdemanded(response.demandedcontentlisten",{"_index":5775,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.onresponsecontentsource(response.contentsourcelisten",{"_index":5776,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.read",{"_index":5699,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.removeattribute(nam",{"_index":5685,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.send",{"_index":4563,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request.send(response.completelisten",{"_index":4585,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request.serveas(request",{"_index":6293,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.setattribute(\"beforehandlingnanotim",{"_index":6158,"title":{},"name":{},"text":{"61":{}},"component":{}}],["request.setattribute(nam",{"_index":5683,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request.timeout",{"_index":4577,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request.toredirecturi(request",{"_index":5758,"title":{},"name":{},"text":{"57":{}},"component":{}}],["request/respons",{"_index":2546,"title":{},"name":{},"text":{"33":{},"36":{},"41":{},"48":{},"49":{},"50":{},"61":{},"62":{},"63":{}},"component":{}}],["request1",{"_index":4688,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request1.onresponsecontentsource(new",{"_index":4698,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request1.onresponsesuccess(respons",{"_index":4712,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request1.send(result",{"_index":4714,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request2",{"_index":4693,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request2.onrequestcommit(request",{"_index":4700,"title":{},"name":{},"text":{"48":{}},"component":{}}],["request2.send(result",{"_index":4703,"title":{},"name":{},"text":{"48":{}},"component":{}}],["requestapi",{"_index":5604,"title":{},"name":{},"text":{"57":{}},"component":{}}],["requestbeginnanotim",{"_index":6157,"title":{},"name":{},"text":{"61":{}},"component":{}}],["requestcookiecompliance=rfc6265@4116aac9[invalid_cooki",{"_index":3947,"title":{},"name":{},"text":{"41":{}},"component":{}}],["requesthead",{"_index":4973,"title":{},"name":{},"text":{"49":{},"50":{},"57":{},"61":{}},"component":{}}],["requestheaders.contains(httpheader.expect",{"_index":6356,"title":{},"name":{},"text":{"61":{}},"component":{}}],["requestheadersize=8192",{"_index":3934,"title":{},"name":{},"text":{"41":{}},"component":{}}],["requestlog",{"_index":2330,"title":{"33-18":{}},"name":{},"text":{"33":{},"36":{},"56":{},"61":{}},"component":{}}],["requestlog.collect",{"_index":5924,"title":{},"name":{},"text":{"61":{}},"component":{}}],["requestlog.ini",{"_index":3292,"title":{},"name":{},"text":{"36":{}},"component":{}}],["requestlog.writ",{"_index":5925,"title":{},"name":{},"text":{"61":{}},"component":{}}],["requestlogwrit",{"_index":5917,"title":{},"name":{},"text":{"61":{}},"component":{}}],["requestlogwriter(\"/var/log/yyyy_mm_dd.jetty.request.log",{"_index":5919,"title":{},"name":{},"text":{"61":{}},"component":{}}],["requestpath",{"_index":5619,"title":{},"name":{},"text":{"57":{}},"component":{}}],["requestr",{"_index":6439,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["requestread",{"_index":6149,"title":{},"name":{},"text":{"61":{}},"component":{}}],["requests/",{"_index":6175,"title":{},"name":{},"text":{"61":{}},"component":{}}],["requests/respons",{"_index":4583,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["requir",{"_index":201,"title":{"8-1":{},"57-1":{},"58-1":{}},"name":{},"text":{"2":{},"8":{},"10":{},"17":{},"19":{},"23":{},"24":{},"25":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"42":{},"45":{},"47":{},"48":{},"49":{},"53":{},"54":{},"55":{},"58":{},"59":{},"61":{},"62":{},"66":{}},"component":{}}],["reserv",{"_index":350,"title":{},"name":{},"text":{"3":{},"10":{},"12":{},"32":{},"33":{},"47":{},"52":{}},"component":{}}],["reserved_names_not_dollar_prefix",{"_index":2730,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["reservedthread",{"_index":4480,"title":{},"name":{},"text":{"47":{}},"component":{}}],["reset",{"_index":4201,"title":{"49-7":{},"50-6":{},"62-6":{},"63-5":{}},"name":{},"text":{"44":{},"49":{},"50":{},"53":{},"57":{},"62":{},"63":{},"66":{}},"component":{}}],["resetfram",{"_index":5034,"title":{},"name":{},"text":{"49":{}},"component":{}}],["resetframe(pushedstream.getid",{"_index":5052,"title":{},"name":{},"text":{"49":{}},"component":{}}],["resetframe(stream.getid",{"_index":5036,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["resid",{"_index":2007,"title":{},"name":{},"text":{"26":{},"33":{},"37":{},"38":{}},"component":{}}],["resolut",{"_index":522,"title":{"19-3":{},"19-4":{}},"name":{},"text":{"4":{},"25":{},"33":{},"41":{},"52":{},"59":{}},"component":{}}],["resolv",{"_index":194,"title":{},"name":{},"text":{"2":{},"10":{},"19":{},"23":{},"32":{},"38":{},"39":{},"42":{},"59":{}},"component":{}}],["resort",{"_index":2204,"title":{},"name":{},"text":{"30":{},"34":{},"41":{}},"component":{}}],["resourc",{"_index":575,"title":{"26-1":{},"26-10":{},"33-19":{},"62-7":{}},"name":{},"text":{"5":{},"6":{},"17":{},"19":{},"20":{},"26":{},"28":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"53":{},"54":{},"56":{},"59":{},"61":{},"62":{}},"component":{}}],["resource(",{"_index":5485,"title":{},"name":{},"text":{"56":{}},"component":{}}],["resourcebas",{"_index":5483,"title":{},"name":{},"text":{"56":{}},"component":{}}],["resourcebyt",{"_index":6431,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["resourcefactory.combin",{"_index":6092,"title":{},"name":{},"text":{"61":{}},"component":{}}],["resourcefactory.of(handler).newresource(\"/another/path/to/static/resourc",{"_index":6094,"title":{},"name":{},"text":{"61":{}},"component":{}}],["resourcefactory.of(handler).newresource(\"/path/to/static/resourc",{"_index":6093,"title":{},"name":{},"text":{"61":{}},"component":{}}],["resourcehandl",{"_index":2867,"title":{"61-26":{}},"name":{},"text":{"33":{},"34":{},"61":{}},"component":{}}],["resources(se",{"_index":6443,"title":{},"name":{},"text":{"62":{}},"component":{}}],["resources/jetti",{"_index":1056,"title":{},"name":{},"text":{"13":{},"20":{}},"component":{}}],["resp",{"_index":5818,"title":{},"name":{},"text":{"58":{}},"component":{}}],["respect",{"_index":783,"title":{},"name":{},"text":{"7":{},"19":{},"36":{},"45":{},"48":{},"49":{},"53":{},"61":{},"62":{},"66":{}},"component":{}}],["respond",{"_index":1013,"title":{},"name":{},"text":{"10":{},"34":{},"48":{},"53":{},"56":{},"57":{},"65":{}},"component":{}}],["respond(stream",{"_index":6428,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["respond(stream.serv",{"_index":6480,"title":{},"name":{},"text":{"63":{}},"component":{}}],["respons",{"_index":1111,"title":{"48-11":{},"49-6":{},"49-7":{},"50-5":{},"50-6":{},"53-7":{},"57-7":{},"57-8":{},"61-47":{},"61-48":{},"61-49":{},"61-53":{},"62-5":{},"63-4":{}},"name":{},"text":{"13":{},"28":{},"33":{},"34":{},"36":{},"37":{},"44":{},"48":{},"49":{},"50":{},"53":{},"55":{},"57":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["response.abort(new",{"_index":4667,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.abort(x",{"_index":4711,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.addcookie(cooki",{"_index":4813,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.addcookie(respons",{"_index":5736,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["response.asynccontentlisten",{"_index":4682,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.completelisten",{"_index":4589,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.contentlisten",{"_index":4685,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.contentsourcelisten",{"_index":4670,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.contentsourcelistener.oncontentsource(content.sourc",{"_index":5783,"title":{},"name":{},"text":{"57":{}},"component":{}}],["response.contentsourcelistener.oncontentsource(respons",{"_index":4671,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.gethead",{"_index":5723,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["response.getheaders().put(httpheader.content_length",{"_index":5767,"title":{},"name":{},"text":{"57":{}},"component":{}}],["response.getheaders().put(httpheader.content_typ",{"_index":6278,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.getstatu",{"_index":4664,"title":{},"name":{},"text":{"48":{},"57":{},"61":{}},"component":{}}],["response.gettrailerssuppli",{"_index":5751,"title":{},"name":{},"text":{"57":{}},"component":{}}],["response.getwriter().println(\"hello",{"_index":5384,"title":{},"name":{},"text":{"55":{}},"component":{}}],["response.getwriter().println(\"sess",{"_index":5404,"title":{},"name":{},"text":{"55":{}},"component":{}}],["response.iscommit",{"_index":5753,"title":{},"name":{},"text":{"57":{}},"component":{}}],["response.listen",{"_index":4609,"title":{},"name":{},"text":{"48":{}},"component":{}}],["response.replacecookie(respons",{"_index":6343,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.reset",{"_index":5755,"title":{},"name":{},"text":{"57":{}},"component":{}}],["response.senderror(102",{"_index":6409,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.senderror(httpstatus.payload_too_large_413",{"_index":6402,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.sendredirect(request",{"_index":5759,"title":{},"name":{},"text":{"57":{}},"component":{}}],["response.setcontenttype(\"text/html",{"_index":5403,"title":{},"name":{},"text":{"55":{}},"component":{}}],["response.setcontenttype(\"text/html;charset=utf",{"_index":5381,"title":{},"name":{},"text":{"55":{}},"component":{}}],["response.setstatus(200",{"_index":6277,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.setstatus(httpservletresponse.sc_ok",{"_index":5382,"title":{},"name":{},"text":{"55":{}},"component":{}}],["response.setstatus(httpstatus.no_content_204",{"_index":5764,"title":{},"name":{},"text":{"57":{}},"component":{}}],["response.setstatus(httpstatus.ok_200",{"_index":5710,"title":{},"name":{},"text":{"57":{},"61":{},"67":{}},"component":{}}],["response.setstatus(int",{"_index":6341,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.settrailerssupplier(trail",{"_index":5748,"title":{},"name":{},"text":{"57":{}},"component":{}}],["response.writ",{"_index":6281,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.write(boolean",{"_index":6333,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.write(fals",{"_index":5770,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["response.write(tru",{"_index":5765,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["response.writeerror(request",{"_index":5761,"title":{},"name":{},"text":{"57":{},"61":{},"67":{}},"component":{}}],["response.writeinterim",{"_index":6368,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.writeinterim(httpstatus.continue_100",{"_index":6358,"title":{},"name":{},"text":{"61":{}},"component":{}}],["response.writeinterim(httpstatus.early_hints_103",{"_index":6379,"title":{},"name":{},"text":{"61":{}},"component":{}}],["responseapi",{"_index":5706,"title":{},"name":{},"text":{"57":{}},"component":{}}],["responsebegin",{"_index":6150,"title":{},"name":{},"text":{"61":{}},"component":{}}],["responsecont",{"_index":4659,"title":{},"name":{},"text":{"48":{}},"component":{}}],["responsecookiecompliance=rfc6265@4116aac9[invalid_cooki",{"_index":3950,"title":{},"name":{},"text":{"41":{}},"component":{}}],["responsehead",{"_index":5722,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["responseheaders.put(httpheader.content_length",{"_index":5742,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["responseheaders.put(httpheader.content_typ",{"_index":5738,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["responseheadersize=8192",{"_index":3935,"title":{},"name":{},"text":{"41":{}},"component":{}}],["responsetrailerscomplet",{"_index":6153,"title":{},"name":{},"text":{"61":{}},"component":{}}],["responsewrit",{"_index":6151,"title":{},"name":{},"text":{"61":{}},"component":{}}],["responsewritecomplet",{"_index":6152,"title":{},"name":{},"text":{"61":{}},"component":{}}],["rest",{"_index":684,"title":{},"name":{},"text":{"7":{},"16":{},"20":{},"33":{},"51":{},"61":{},"64":{}},"component":{}}],["restart",{"_index":1341,"title":{},"name":{},"text":{"19":{},"20":{},"33":{},"35":{},"38":{},"41":{},"43":{},"56":{},"66":{}},"component":{}}],["resthandl",{"_index":6075,"title":{},"name":{},"text":{"61":{}},"component":{}}],["restor",{"_index":3434,"title":{},"name":{},"text":{"37":{},"41":{}},"component":{}}],["restrict",{"_index":326,"title":{},"name":{},"text":{"2":{},"26":{},"48":{},"56":{},"61":{},"66":{}},"component":{}}],["result",{"_index":922,"title":{},"name":{},"text":{"8":{},"13":{},"18":{},"19":{},"23":{},"33":{},"36":{},"38":{},"41":{},"43":{},"44":{},"47":{},"48":{},"53":{},"55":{},"56":{},"59":{},"61":{},"65":{}},"component":{}}],["result.isfail",{"_index":4658,"title":{},"name":{},"text":{"48":{}},"component":{}}],["result.whencomplete((ignor",{"_index":5237,"title":{},"name":{},"text":{"53":{}},"component":{}}],["resultofwrit",{"_index":4319,"title":{},"name":{},"text":{"44":{}},"component":{}}],["resultofwrites.whencomplete((ignor",{"_index":4324,"title":{},"name":{},"text":{"44":{}},"component":{}}],["resum",{"_index":4221,"title":{},"name":{},"text":{"44":{},"48":{},"49":{},"61":{},"62":{},"65":{}},"component":{}}],["retain",{"_index":2041,"title":{},"name":{},"text":{"28":{},"33":{},"36":{},"37":{},"40":{},"44":{},"48":{},"61":{},"66":{}},"component":{}}],["retain/releas",{"_index":4261,"title":{},"name":{},"text":{"44":{}},"component":{}}],["rethrow",{"_index":4513,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["retri",{"_index":3585,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["retriev",{"_index":1783,"title":{},"name":{},"text":{"23":{},"25":{},"37":{},"40":{},"42":{},"45":{},"49":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["return",{"_index":755,"title":{},"name":{},"text":{"7":{},"13":{},"17":{},"34":{},"38":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"57":{},"58":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["reus",{"_index":1908,"title":{},"name":{},"text":{"25":{},"33":{},"35":{},"38":{},"44":{},"48":{},"49":{},"53":{},"62":{},"66":{}},"component":{}}],["reusabl",{"_index":6217,"title":{},"name":{},"text":{"61":{}},"component":{}}],["reuse/recycl",{"_index":4260,"title":{},"name":{},"text":{"44":{}},"component":{}}],["revers",{"_index":1639,"title":{"34-22":{}},"name":{},"text":{"22":{},"34":{},"43":{},"48":{},"61":{}},"component":{}}],["revert",{"_index":1222,"title":{},"name":{},"text":{"17":{}},"component":{}}],["review",{"_index":3351,"title":{},"name":{},"text":{"37":{}},"component":{}}],["rewrit",{"_index":2331,"title":{"33-20":{}},"name":{},"text":{"33":{},"61":{}},"component":{}}],["rewrite/redirect",{"_index":6086,"title":{},"name":{},"text":{"61":{}},"component":{}}],["rewritecustom",{"_index":5882,"title":{"61-8":{}},"name":{},"text":{"61":{}},"component":{}}],["rewritehandl",{"_index":2615,"title":{"61-28":{}},"name":{},"text":{"33":{},"61":{}},"component":{}}],["rewritehandler.addrule(new",{"_index":6114,"title":{},"name":{},"text":{"61":{}},"component":{}}],["rewritehandler.addrule(redirectrul",{"_index":6123,"title":{},"name":{},"text":{"61":{}},"component":{}}],["rewritehandler.sethandler(contextcollect",{"_index":6124,"title":{},"name":{},"text":{"61":{}},"component":{}}],["rewriteregexrule(\"/(.*)/product",{"_index":6116,"title":{},"name":{},"text":{"61":{}},"component":{}}],["rfc",{"_index":234,"title":{},"name":{},"text":{"2":{},"30":{},"33":{},"34":{},"48":{},"53":{},"59":{},"61":{}},"component":{}}],["rfc2109",{"_index":4804,"title":{},"name":{},"text":{"48":{}},"component":{}}],["rfc2616",{"_index":2689,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rfc2616_legaci",{"_index":2690,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rfc2965",{"_index":2700,"title":{},"name":{},"text":{"33":{},"48":{}},"component":{}}],["rfc2965_legaci",{"_index":2701,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rfc3986",{"_index":2693,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["rfc3986_unambigu",{"_index":2694,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rfc5785",{"_index":2870,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rfc6265",{"_index":2698,"title":{},"name":{},"text":{"33":{},"48":{},"59":{}},"component":{}}],["rfc6265_legaci",{"_index":2699,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rfc6265_strict",{"_index":2697,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rfc7230",{"_index":2687,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["rfc7230_legaci",{"_index":2688,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rfc7239",{"_index":2515,"title":{},"name":{},"text":{"33":{}},"component":{}}],["rich",{"_index":5532,"title":{},"name":{},"text":{"56":{}},"component":{}}],["right",{"_index":351,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"12":{},"13":{},"23":{},"30":{},"39":{},"48":{},"61":{},"66":{}},"component":{}}],["risk",{"_index":1283,"title":{},"name":{},"text":{"18":{},"34":{},"37":{},"47":{},"48":{},"61":{},"66":{}},"component":{}}],["rmi",{"_index":1838,"title":{},"name":{},"text":{"25":{},"33":{},"45":{}},"component":{}}],["rmi_registry_host",{"_index":1867,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["rmi_registry_port",{"_index":1868,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["rmi_server_host",{"_index":1864,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["rmi_server_port",{"_index":1865,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["robin",{"_index":4535,"title":{},"name":{},"text":{"48":{}},"component":{}}],["robust",{"_index":661,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rock",{"_index":6351,"title":{},"name":{},"text":{"61":{}},"component":{}}],["role",{"_index":1701,"title":{},"name":{},"text":{"23":{},"34":{},"45":{}},"component":{}}],["rolebasedn=\"ou=groups,dc=example,dc=com",{"_index":1763,"title":{},"name":{},"text":{"23":{}},"component":{}}],["rolememberattribute=\"uniquememb",{"_index":1766,"title":{},"name":{},"text":{"23":{}},"component":{}}],["rolenameattribute=\"cn",{"_index":1765,"title":{},"name":{},"text":{"23":{}},"component":{}}],["roleobjectclass=\"groupofuniquenam",{"_index":1768,"title":{},"name":{},"text":{"23":{}},"component":{}}],["roll",{"_index":2377,"title":{"36-4":{}},"name":{},"text":{"33":{},"36":{},"41":{},"61":{}},"component":{}}],["rollov",{"_index":2557,"title":{},"name":{},"text":{"33":{}},"component":{}}],["room",{"_index":6925,"title":{},"name":{},"text":{"67":{}},"component":{}}],["root",{"_index":154,"title":{"56-25":{}},"name":{},"text":{"7":{},"19":{},"30":{},"33":{},"34":{},"39":{},"41":{},"42":{},"43":{},"45":{},"54":{},"56":{},"68":{}},"component":{"1":{},"2":{},"3":{},"4":{}}}],["root.addbean(servic",{"_index":4101,"title":{},"name":{},"text":{"43":{}},"component":{}}],["root.getbean",{"_index":4109,"title":{},"name":{},"text":{"43":{}},"component":{}}],["root.getcontainedbeans(scheduledexecutorservice.class",{"_index":4111,"title":{},"name":{},"text":{"43":{}},"component":{}}],["root.start",{"_index":4102,"title":{},"name":{},"text":{"43":{}},"component":{}}],["root.war",{"_index":1368,"title":{},"name":{},"text":{"19":{}},"component":{}}],["round",{"_index":4534,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["roundrobinconnectionpool",{"_index":4533,"title":{},"name":{},"text":{"48":{}},"component":{}}],["roundrobinconnectionpool(destin",{"_index":4544,"title":{},"name":{},"text":{"48":{}},"component":{}}],["roundtrip",{"_index":4837,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["roundtriplistenerendpoint",{"_index":5295,"title":{},"name":{},"text":{"53":{}},"component":{}}],["rountrip",{"_index":4834,"title":{},"name":{},"text":{"48":{}},"component":{}}],["rout",{"_index":3582,"title":{},"name":{},"text":{"37":{}},"component":{}}],["routin",{"_index":1109,"title":{},"name":{},"text":{"13":{}},"component":{}}],["row",{"_index":6724,"title":{},"name":{},"text":{"66":{}},"component":{}}],["rq",{"_index":6892,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rq.getsubprotocol",{"_index":6898,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rs",{"_index":6893,"title":{},"name":{},"text":{"67":{}},"component":{}}],["rsa",{"_index":2135,"title":{},"name":{},"text":{"30":{}},"component":{}}],["rst_stream",{"_index":5032,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["rubi",{"_index":3046,"title":{},"name":{},"text":{"34":{},"64":{}},"component":{}}],["rule",{"_index":529,"title":{"19-2":{}},"name":{},"text":{"4":{},"19":{},"23":{},"28":{},"33":{},"37":{},"44":{},"52":{},"56":{},"61":{}},"component":{}}],["rules.xml",{"_index":2625,"title":{},"name":{},"text":{"33":{}},"component":{}}],["run",{"_index":643,"title":{"8-2":{},"8-3":{},"37-34":{},"37-35":{},"55-4":{},"55-8":{},"56-1":{},"56-26":{}},"name":{},"text":{"7":{},"8":{},"11":{},"18":{},"19":{},"20":{},"23":{},"25":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"52":{},"54":{},"55":{},"56":{},"57":{},"61":{},"66":{},"67":{},"69":{},"71":{}},"component":{}}],["run/php/php",{"_index":3056,"title":{},"name":{},"text":{"34":{}},"component":{}}],["run=arg",{"_index":3747,"title":{},"name":{},"text":{"38":{}},"component":{}}],["run=java",{"_index":3737,"title":{},"name":{},"text":{"38":{}},"component":{}}],["run=main",{"_index":3744,"title":{},"name":{},"text":{"38":{}},"component":{}}],["run=opt",{"_index":3738,"title":{},"name":{},"text":{"38":{}},"component":{}}],["run=opts,path",{"_index":3754,"title":{},"name":{},"text":{"38":{}},"component":{}}],["run=opts,path,main,arg",{"_index":3748,"title":{},"name":{},"text":{"38":{}},"component":{}}],["run=path",{"_index":3739,"title":{},"name":{},"text":{"38":{}},"component":{}}],["runa",{"_index":1161,"title":{},"name":{},"text":{"17":{}},"component":{}}],["runnabl",{"_index":3875,"title":{},"name":{},"text":{"41":{},"47":{},"61":{}},"component":{}}],["runner",{"_index":963,"title":{},"name":{},"text":{"8":{},"57":{}},"component":{}}],["runner/target/jetti",{"_index":962,"title":{},"name":{},"text":{"8":{}},"component":{}}],["runtim",{"_index":1289,"title":{},"name":{},"text":{"18":{},"19":{},"23":{},"24":{},"25":{},"26":{},"33":{},"34":{},"38":{},"41":{},"46":{},"56":{},"59":{},"61":{},"66":{},"67":{}},"component":{}}],["runtime.feature.alpn",{"_index":3699,"title":{},"name":{},"text":{"38":{}},"component":{}}],["runtime.feature.alpn=tru",{"_index":3731,"title":{},"name":{},"text":{"38":{}},"component":{}}],["rv:17.0",{"_index":4557,"title":{},"name":{},"text":{"48":{}},"component":{}}],["rwx",{"_index":6030,"title":{},"name":{},"text":{"61":{}},"component":{}}],["s",{"_index":700,"title":{},"name":{},"text":{"7":{},"10":{},"28":{},"30":{},"33":{},"48":{},"52":{},"54":{},"61":{},"66":{}},"component":{}}],["s.data(new",{"_index":5002,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["s=state",{"_index":2144,"title":{},"name":{},"text":{"30":{}},"component":{}}],["safari/537.36",{"_index":3311,"title":{},"name":{},"text":{"36":{}},"component":{}}],["safest",{"_index":6019,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sale",{"_index":6182,"title":{},"name":{},"text":{"61":{}},"component":{}}],["same",{"_index":651,"title":{"19-10":{}},"name":{},"text":{"7":{},"9":{},"17":{},"19":{},"23":{},"24":{},"25":{},"26":{},"30":{},"32":{},"33":{},"34":{},"37":{},"38":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{}},"component":{}}],["samesite(httpcookie.samesite.lax",{"_index":5735,"title":{},"name":{},"text":{"57":{}},"component":{}}],["sampl",{"_index":1061,"title":{},"name":{},"text":{"13":{},"23":{}},"component":{}}],["san",{"_index":2157,"title":{},"name":{},"text":{"30":{},"33":{}},"component":{}}],["san=dns:www.domain.com,dns:domain.org",{"_index":2146,"title":{},"name":{},"text":{"30":{}},"component":{}}],["san=ip:127.0.0.1,ip:[::1",{"_index":2163,"title":{},"name":{},"text":{"30":{}},"component":{}}],["satisfi",{"_index":5476,"title":{},"name":{},"text":{"56":{}},"component":{}}],["save",{"_index":800,"title":{},"name":{},"text":{"7":{},"30":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"44":{},"53":{},"55":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["saveoncr",{"_index":6621,"title":{},"name":{},"text":{"66":{}},"component":{}}],["saveoninactiveevict",{"_index":6620,"title":{},"name":{},"text":{"66":{}},"component":{}}],["saveperiod",{"_index":3462,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["saveperiodsec",{"_index":6667,"title":{},"name":{},"text":{"66":{}},"component":{}}],["scalabl",{"_index":81,"title":{},"name":{},"text":{"1":{},"34":{},"44":{},"53":{}},"component":{}}],["scale",{"_index":4441,"title":{},"name":{},"text":{"47":{}},"component":{}}],["scan",{"_index":337,"title":{"17-1":{}},"name":{},"text":{"2":{},"17":{},"19":{},"33":{},"34":{},"35":{},"38":{},"45":{},"54":{},"56":{},"66":{}},"component":{}}],["scanalldirectori",{"_index":5332,"title":{},"name":{},"text":{"54":{}},"component":{}}],["scanclassespattern",{"_index":5497,"title":{},"name":{},"text":{"56":{}},"component":{}}],["scanmanifest",{"_index":5335,"title":{},"name":{},"text":{"54":{}},"component":{}}],["scantargetpattern",{"_index":5494,"title":{},"name":{},"text":{"56":{}},"component":{}}],["scantestclassespattern",{"_index":5498,"title":{},"name":{},"text":{"56":{}},"component":{}}],["scatter",{"_index":3631,"title":{},"name":{},"text":{"37":{}},"component":{}}],["scaveng",{"_index":3329,"title":{"37-6":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["scenario",{"_index":3343,"title":{"37-43":{}},"name":{},"text":{"37":{},"48":{},"66":{}},"component":{}}],["schedul",{"_index":2332,"title":{"33-25":{}},"name":{},"text":{"33":{},"34":{},"43":{},"48":{},"52":{},"61":{}},"component":{}}],["scheduledexecutorscheduler(\"schedul",{"_index":5105,"title":{},"name":{},"text":{"52":{}},"component":{}}],["scheduledexecutorservic",{"_index":4090,"title":{},"name":{},"text":{"43":{}},"component":{}}],["scheduler.shutdown",{"_index":4100,"title":{},"name":{},"text":{"43":{}},"component":{}}],["schema",{"_index":3230,"title":{},"name":{},"text":{"35":{},"37":{},"66":{}},"component":{}}],["scheme",{"_index":2522,"title":{},"name":{},"text":{"33":{},"34":{},"38":{},"48":{},"57":{},"61":{}},"component":{}}],["sci",{"_index":1233,"title":{},"name":{},"text":{"17":{}},"component":{}}],["scope",{"_index":1937,"title":{"26-10":{},"42-16":{}},"name":{},"text":{"26":{},"33":{},"37":{},"42":{},"56":{},"66":{}},"component":{}}],["scratch",{"_index":6517,"title":{},"name":{},"text":{"65":{}},"component":{}}],["scratchdir",{"_index":2103,"title":{},"name":{},"text":{"28":{}},"component":{}}],["scriplet",{"_index":2108,"title":{},"name":{},"text":{"28":{}},"component":{}}],["script",{"_index":3049,"title":{},"name":{},"text":{"34":{},"38":{},"61":{},"64":{},"66":{}},"component":{}}],["scriptroot",{"_index":4908,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sdk",{"_index":3572,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["seamlessli",{"_index":5944,"title":{},"name":{},"text":{"61":{}},"component":{}}],["search",{"_index":1778,"title":{},"name":{},"text":{"23":{},"37":{},"38":{},"52":{},"56":{},"66":{}},"component":{}}],["season",{"_index":43,"title":{},"name":{},"text":{"1":{}},"component":{}}],["sec",{"_index":3388,"title":{},"name":{},"text":{"37":{}},"component":{}}],["second",{"_index":1227,"title":{},"name":{},"text":{"17":{},"19":{},"23":{},"28":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["secondari",{"_index":730,"title":{},"name":{},"text":{"7":{},"62":{}},"component":{}}],["secret",{"_index":3843,"title":{},"name":{},"text":{"40":{},"45":{},"48":{}},"component":{}}],["section",{"_index":847,"title":{},"name":{},"text":{"7":{},"14":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"57":{},"61":{},"62":{},"65":{},"66":{},"67":{}},"component":{}}],["secur",{"_index":339,"title":{"3":{},"12":{},"3-1":{},"3-2":{},"25-5":{},"33-27":{},"34-2":{},"34-4":{},"34-5":{},"34-14":{},"45-4":{},"56-24":{},"61-51":{}},"name":{"3":{}},"text":{"3":{},"12":{},"18":{},"20":{},"22":{},"23":{},"24":{},"25":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"45":{},"48":{},"52":{},"56":{},"61":{},"63":{},"66":{},"67":{}},"component":{}}],["secureconfig",{"_index":5981,"title":{},"name":{},"text":{"61":{}},"component":{}}],["secureconfig.addcustomizer(new",{"_index":5983,"title":{},"name":{},"text":{"61":{}},"component":{}}],["secureconnector",{"_index":5988,"title":{},"name":{},"text":{"61":{}},"component":{}}],["secureconnector.addeventlistener(new",{"_index":5995,"title":{},"name":{},"text":{"61":{}},"component":{}}],["secureconnector.setport(8443",{"_index":6208,"title":{},"name":{},"text":{"61":{}},"component":{}}],["securedhandl",{"_index":6209,"title":{},"name":{},"text":{"61":{}},"component":{}}],["securedhandler.sethandler(contextcollect",{"_index":6211,"title":{},"name":{},"text":{"61":{}},"component":{}}],["securedredirecthandl",{"_index":5889,"title":{"61-33":{}},"name":{},"text":{"61":{}},"component":{}}],["secureport",{"_index":6205,"title":{},"name":{},"text":{"61":{}},"component":{}}],["secureport=0",{"_index":3938,"title":{},"name":{},"text":{"41":{}},"component":{}}],["securerequestcustom",{"_index":5883,"title":{"61-9":{}},"name":{},"text":{"61":{}},"component":{}}],["securescheme=http",{"_index":3937,"title":{},"name":{},"text":{"41":{}},"component":{}}],["security.addprovider(new",{"_index":6032,"title":{},"name":{},"text":{"61":{}},"component":{}}],["security@eclipse.org",{"_index":356,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["security@jetty.org",{"_index":347,"title":{},"name":{},"text":{"3":{}},"component":{}}],["security@webtide.com",{"_index":348,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["securityfilt",{"_index":6883,"title":{},"name":{},"text":{"67":{}},"component":{}}],["see",{"_index":561,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"10":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"53":{},"55":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["seem",{"_index":3112,"title":{},"name":{},"text":{"34":{}},"component":{}}],["seen",{"_index":2429,"title":{},"name":{},"text":{"33":{},"52":{},"56":{},"61":{}},"component":{}}],["segment",{"_index":5858,"title":{},"name":{},"text":{"59":{},"61":{}},"component":{}}],["select",{"_index":1218,"title":{"34-10":{}},"name":{},"text":{"17":{},"23":{},"33":{},"37":{},"41":{},"47":{},"48":{},"61":{},"66":{},"67":{}},"component":{}}],["selected=0",{"_index":3956,"title":{},"name":{},"text":{"41":{}},"component":{}}],["selection:tot=0/avg=0.00/max=0",{"_index":3958,"title":{},"name":{},"text":{"41":{}},"component":{}}],["selectionkey.op_read",{"_index":4164,"title":{},"name":{},"text":{"44":{}},"component":{}}],["selectionkey.op_writ",{"_index":4169,"title":{},"name":{},"text":{"44":{}},"component":{}}],["selector",{"_index":2327,"title":{"33-10":{},"61-12":{}},"name":{},"text":{"33":{},"41":{},"47":{},"52":{},"61":{}},"component":{}}],["selectormanag",{"_index":4135,"title":{"44-1":{}},"name":{},"text":{"44":{},"52":{},"61":{}},"component":{}}],["selectormanager.accept(socketchannel",{"_index":4152,"title":{},"name":{},"text":{"44":{}},"component":{}}],["selectormanager.connect(socketchannel",{"_index":4153,"title":{},"name":{},"text":{"44":{}},"component":{}}],["self",{"_index":1917,"title":{},"name":{},"text":{"25":{},"30":{},"33":{},"34":{},"45":{},"48":{}},"component":{}}],["semant",{"_index":758,"title":{},"name":{},"text":{"7":{},"37":{},"48":{},"49":{},"62":{},"65":{}},"component":{}}],["semi",{"_index":3395,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["send",{"_index":1262,"title":{"49-5":{},"50-4":{},"53-17":{},"53-18":{},"53-19":{},"61-49":{},"61-53":{},"62-5":{},"63-4":{}},"name":{},"text":{"18":{},"26":{},"30":{},"33":{},"34":{},"36":{},"38":{},"41":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"57":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["send(listen",{"_index":4662,"title":{},"name":{},"text":{"48":{}},"component":{}}],["send(new",{"_index":4655,"title":{},"name":{},"text":{"48":{}},"component":{}}],["send(result",{"_index":4588,"title":{},"name":{},"text":{"48":{}},"component":{}}],["senddateheader=fals",{"_index":3939,"title":{},"name":{},"text":{"41":{}},"component":{}}],["sender",{"_index":3081,"title":{},"name":{},"text":{"34":{},"49":{},"53":{},"62":{}},"component":{}}],["sender(sess",{"_index":5285,"title":{},"name":{},"text":{"53":{}},"component":{}}],["sender(session).iter",{"_index":5283,"title":{},"name":{},"text":{"53":{}},"component":{}}],["sendparti",{"_index":5279,"title":{},"name":{},"text":{"53":{}},"component":{}}],["sendpartialbinari",{"_index":5290,"title":{},"name":{},"text":{"53":{}},"component":{}}],["sendserverversion=tru",{"_index":3940,"title":{},"name":{},"text":{"41":{}},"component":{}}],["sendtext",{"_index":5213,"title":{},"name":{},"text":{"53":{}},"component":{}}],["sendxpoweredby=fals",{"_index":3941,"title":{},"name":{},"text":{"41":{}},"component":{}}],["sens",{"_index":4466,"title":{},"name":{},"text":{"47":{}},"component":{}}],["sensit",{"_index":5826,"title":{},"name":{},"text":{"59":{}},"component":{}}],["sent",{"_index":1112,"title":{},"name":{},"text":{"13":{},"25":{},"28":{},"30":{},"31":{},"33":{},"34":{},"38":{},"48":{},"49":{},"50":{},"53":{},"56":{},"61":{},"62":{},"63":{}},"component":{}}],["sentenc",{"_index":753,"title":{},"name":{},"text":{"7":{}},"component":{}}],["separ",{"_index":688,"title":{},"name":{},"text":{"7":{},"17":{},"18":{},"32":{},"33":{},"37":{},"42":{},"44":{},"45":{},"48":{},"54":{},"56":{},"61":{},"66":{}},"component":{}}],["sequenc",{"_index":2952,"title":{},"name":{},"text":{"34":{},"42":{},"44":{},"48":{},"61":{}},"component":{}}],["sequence.addhandler(new",{"_index":6049,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sequenti",{"_index":3402,"title":{},"name":{},"text":{"37":{},"44":{},"53":{},"61":{}},"component":{}}],["serial",{"_index":3512,"title":{},"name":{},"text":{"37":{},"48":{},"66":{}},"component":{}}],["serv",{"_index":30,"title":{},"name":{},"text":{"1":{},"19":{},"20":{},"28":{},"33":{},"34":{},"48":{},"56":{},"61":{}},"component":{}}],["server",{"_index":646,"title":{"28":{},"36":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"67":{},"33-21":{},"33-23":{},"33-24":{},"33-25":{},"36-2":{},"38-11":{},"41-1":{},"41-2":{},"49-3":{},"50-2":{},"61-10":{},"61-22":{},"61-51":{},"61-52":{},"62-3":{},"63-2":{}},"name":{},"text":{"7":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"71":{}},"component":{}}],["server'",{"_index":4955,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["server(8080",{"_index":5386,"title":{},"name":{},"text":{"55":{},"67":{}},"component":{}}],["server(serverthread",{"_index":6188,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server(threadpool",{"_index":4495,"title":{},"name":{},"text":{"47":{},"61":{}},"component":{}}],["server,http,webapp,deploy",{"_index":5449,"title":{},"name":{},"text":{"56":{}},"component":{}}],["server.addbean(cachefactori",{"_index":6644,"title":{},"name":{},"text":{"66":{}},"component":{}}],["server.addbean(cachingsessiondatastorefactori",{"_index":6847,"title":{},"name":{},"text":{"66":{}},"component":{}}],["server.addbean(idmgr",{"_index":6554,"title":{},"name":{},"text":{"66":{}},"component":{}}],["server.addbean(jmxserv",{"_index":4365,"title":{},"name":{},"text":{"45":{}},"component":{}}],["server.addbean(mbeancontain",{"_index":4354,"title":{},"name":{},"text":{"45":{}},"component":{}}],["server.addbean(storefactori",{"_index":6693,"title":{},"name":{},"text":{"66":{}},"component":{}}],["server.addconnector(connector",{"_index":5904,"title":{},"name":{},"text":{"61":{},"62":{},"63":{},"65":{}},"component":{}}],["server.addconnector(connector1",{"_index":5972,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.addconnector(connector2",{"_index":5979,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.addconnector(http3connector",{"_index":5994,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.addconnector(memoryconnector",{"_index":4740,"title":{},"name":{},"text":{"48":{}},"component":{}}],["server.addconnector(plainconnector",{"_index":5992,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.addconnector(secureconnector",{"_index":5989,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.addeventlistener(new",{"_index":4116,"title":{},"name":{},"text":{"43":{}},"component":{}}],["server.dump",{"_index":2678,"title":{},"name":{},"text":{"33":{},"41":{},"68":{}},"component":{}}],["server.ini",{"_index":2892,"title":{},"name":{},"text":{"34":{},"38":{},"41":{}},"component":{}}],["server.join",{"_index":5388,"title":{},"name":{},"text":{"55":{}},"component":{}}],["server.mod",{"_index":2299,"title":{},"name":{},"text":{"32":{}},"component":{}}],["server.setdefaulthandler(new",{"_index":6240,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(context",{"_index":6073,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["server.sethandler(contextcollect",{"_index":6078,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(contexthandl",{"_index":6386,"title":{},"name":{},"text":{"61":{},"67":{}},"component":{}}],["server.sethandler(crossoriginhandl",{"_index":6250,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(dataratehandl",{"_index":6138,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(eventshandl",{"_index":6166,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(gziphandl",{"_index":6047,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(handl",{"_index":6091,"title":{},"name":{},"text":{"61":{},"67":{}},"component":{}}],["server.sethandler(new",{"_index":5387,"title":{},"name":{},"text":{"55":{},"61":{}},"component":{}}],["server.sethandler(qoshandl",{"_index":6191,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(rewritehandl",{"_index":6110,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(securedhandl",{"_index":6210,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.sethandler(statshandl",{"_index":6130,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.setrequestlog(new",{"_index":5912,"title":{},"name":{},"text":{"61":{}},"component":{}}],["server.start",{"_index":4366,"title":{},"name":{},"text":{"45":{},"55":{},"61":{},"62":{},"63":{},"65":{},"67":{}},"component":{}}],["server.stop",{"_index":2681,"title":{},"name":{},"text":{"33":{}},"component":{}}],["server.xml",{"_index":2300,"title":{},"name":{},"text":{"32":{}},"component":{}}],["server/http.adoc#connector",{"_index":4438,"title":{},"name":{},"text":{"46":{}},"component":{}}],["server/http.adoc#request",{"_index":4439,"title":{},"name":{},"text":{"46":{}},"component":{}}],["server1",{"_index":4687,"title":{},"name":{},"text":{"48":{}},"component":{}}],["server2",{"_index":4692,"title":{},"name":{},"text":{"48":{}},"component":{}}],["server3",{"_index":6549,"title":{},"name":{},"text":{"66":{}},"component":{}}],["server@130dca52[provider=null,keystore=file:///path/to/jetty.hom",{"_index":3010,"title":{},"name":{},"text":{"34":{}},"component":{}}],["server@5e4bd84a[provider=null,keystore=file:///path/to/jetty.hom",{"_index":2945,"title":{},"name":{},"text":{"34":{}},"component":{}}],["server@74589991[provider=null,keystore=file:///path/to/jetty.hom",{"_index":3173,"title":{},"name":{},"text":{"34":{}},"component":{}}],["server@7b205dbd[provider=null,keystore=file:///path/to/jetty.hom",{"_index":2917,"title":{},"name":{},"text":{"34":{}},"component":{}}],["server_authn",{"_index":2189,"title":{},"name":{},"text":{"30":{}},"component":{}}],["server_authn.crt",{"_index":2200,"title":{},"name":{},"text":{"30":{}},"component":{}}],["server_authn.key",{"_index":2198,"title":{},"name":{},"text":{"30":{}},"component":{}}],["serveraddress",{"_index":4957,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["serverauthmodul",{"_index":1796,"title":{},"name":{},"text":{"24":{}},"component":{}}],["serverconnector",{"_index":1439,"title":{},"name":{},"text":{"19":{},"31":{},"33":{},"43":{},"44":{},"45":{},"56":{},"61":{},"62":{},"65":{},"67":{}},"component":{}}],["serverconnector(serv",{"_index":5903,"title":{},"name":{},"text":{"61":{},"62":{},"65":{}},"component":{}}],["serverconnector@18078bef{http/1.1",{"_index":3883,"title":{},"name":{},"text":{"41":{}},"component":{}}],["serverconnector@1f760b47{http/1.1",{"_index":1627,"title":{},"name":{},"text":{"20":{}},"component":{}}],["serverconnector@2d1dee39{ssl",{"_index":2947,"title":{},"name":{},"text":{"34":{}},"component":{}}],["serverconnector@32f232a5{ssl",{"_index":2921,"title":{},"name":{},"text":{"34":{}},"component":{}}],["serverconnector@351d00c0{http/1.1",{"_index":1544,"title":{},"name":{},"text":{"20":{}},"component":{}}],["serverconnector@385c9627{http/1.1",{"_index":3324,"title":{},"name":{},"text":{"36":{}},"component":{}}],["serverconnector@4c583ecf{[proxi",{"_index":3164,"title":{},"name":{},"text":{"34":{}},"component":{}}],["serverconnector@6302bbb1{http/1.1",{"_index":2887,"title":{},"name":{},"text":{"34":{}},"component":{}}],["serverconnector@6f4a47c7{http/1.1",{"_index":2956,"title":{},"name":{},"text":{"34":{}},"component":{}}],["serverconnector@7cc0cdad{http/1.1",{"_index":3785,"title":{},"name":{},"text":{"38":{}},"component":{}}],["serverconnector@aafcffa{ssl",{"_index":3012,"title":{},"name":{},"text":{"34":{}},"component":{}}],["serverconnector@b1712f3{[proxi",{"_index":3175,"title":{},"name":{},"text":{"34":{}},"component":{}}],["serverconnectormanager@74e52ef6[keys=0",{"_index":3953,"title":{},"name":{},"text":{"41":{}},"component":{}}],["servercontain",{"_index":6848,"title":{"67-2":{}},"name":{},"text":{"67":{}},"component":{}}],["servercontainer)getservletcontext().getattribute(servercontainer.class.getnam",{"_index":6869,"title":{},"name":{},"text":{"67":{}},"component":{}}],["serverendpointconfig.builder.create(myjavaxwebsocketendpoint.class",{"_index":6873,"title":{},"name":{},"text":{"67":{}},"component":{}}],["serverhost",{"_index":5123,"title":{},"name":{},"text":{"52":{}},"component":{}}],["servernam",{"_index":5657,"title":{},"name":{},"text":{"57":{}},"component":{}}],["serverpass",{"_index":4877,"title":{},"name":{},"text":{"48":{}},"component":{}}],["serverport",{"_index":5660,"title":{},"name":{},"text":{"57":{}},"component":{}}],["serverquicconfig",{"_index":5961,"title":{},"name":{},"text":{"61":{}},"component":{}}],["serverquicconfigur",{"_index":5960,"title":{},"name":{},"text":{"61":{},"63":{}},"component":{}}],["serverquicconfiguration(sslcontextfactori",{"_index":5962,"title":{},"name":{},"text":{"61":{},"63":{}},"component":{}}],["serverrealm",{"_index":4875,"title":{},"name":{},"text":{"48":{}},"component":{}}],["serversessionlisten",{"_index":6412,"title":{},"name":{},"text":{"62":{}},"component":{}}],["serversocketchannel",{"_index":2445,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["serverthread",{"_index":6186,"title":{},"name":{},"text":{"61":{}},"component":{}}],["serveruri",{"_index":4872,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["serverus",{"_index":4876,"title":{},"name":{},"text":{"48":{}},"component":{}}],["serverwebsocketcontain",{"_index":5793,"title":{"67-7":{},"67-9":{}},"name":{},"text":{"57":{},"67":{}},"component":{}}],["serverwebsocketcontainer.addmap",{"_index":6912,"title":{},"name":{},"text":{"67":{}},"component":{}}],["serverwebsocketcontainer.configur",{"_index":6914,"title":{},"name":{},"text":{"67":{}},"component":{}}],["serverwebsocketcontainer.ensure(serv",{"_index":6902,"title":{},"name":{},"text":{"67":{}},"component":{}}],["serverwebsocketcontainer.get(request.getcontext",{"_index":6905,"title":{},"name":{},"text":{"67":{}},"component":{}}],["serverwebsocketcontainer.upgrad",{"_index":6910,"title":{},"name":{},"text":{"67":{}},"component":{}}],["server’",{"_index":1406,"title":{},"name":{},"text":{"19":{},"20":{},"33":{},"37":{}},"component":{}}],["servic",{"_index":208,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"16":{},"23":{},"24":{},"25":{},"31":{},"33":{},"34":{},"36":{},"37":{},"39":{},"40":{},"43":{},"44":{},"45":{},"51":{},"53":{},"56":{},"61":{},"64":{},"66":{}},"component":{}}],["service(httpservletrequest",{"_index":4808,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["service(jsonhttprequest",{"_index":6526,"title":{},"name":{},"text":{"65":{}},"component":{}}],["service.start",{"_index":4106,"title":{},"name":{},"text":{"43":{}},"component":{}}],["service.stop",{"_index":4105,"title":{},"name":{},"text":{"43":{}},"component":{}}],["service:jmx:rmi:///jndi/rmi:///jmxrmi",{"_index":1863,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["service:jmx:rmi://0.0.0.0:1099/jndi/rmi://0.0.0.0:1099/jmxrmi",{"_index":1870,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["service:jmx:rmi://:/jndi/rmi://:/jmxrmi",{"_index":1862,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["service:jmx:rmi://localhost:1099/jndi/rmi://localhost:1099/jmxrmi",{"_index":1874,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["service:jmx:rmi://localhost:1100/jndi/rmi://localhost:1099/jmxrmi",{"_index":1871,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["servicembean",{"_index":4413,"title":{},"name":{},"text":{"45":{}},"component":{}}],["servicembean(object",{"_index":4414,"title":{},"name":{},"text":{"45":{}},"component":{}}],["servicenam",{"_index":4405,"title":{},"name":{},"text":{"45":{}},"component":{}}],["services.get(n",{"_index":4406,"title":{},"name":{},"text":{"45":{}},"component":{}}],["services.s",{"_index":4398,"title":{},"name":{},"text":{"45":{}},"component":{}}],["servlet",{"_index":219,"title":{"28-1":{},"55-6":{},"57-4":{},"61-37":{},"61-40":{}},"name":{},"text":{"2":{},"11":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"33":{},"34":{},"35":{},"37":{},"39":{},"47":{},"54":{},"55":{},"56":{},"57":{},"59":{},"61":{},"66":{},"67":{}},"component":{}}],["servlet:12.0.10",{"_index":6245,"title":{},"name":{},"text":{"61":{}},"component":{}}],["servletcontaineriniti",{"_index":1155,"title":{"17-5":{}},"name":{},"text":{"17":{},"33":{},"67":{}},"component":{}}],["servletcontext",{"_index":6865,"title":{},"name":{},"text":{"67":{}},"component":{}}],["servletcontext.getsessioncookieconfig().setdomain(str",{"_index":6605,"title":{},"name":{},"text":{"66":{}},"component":{}}],["servletcontext.getsessioncookieconfig().setmaxage(int",{"_index":6602,"title":{},"name":{},"text":{"66":{}},"component":{}}],["servletcontext.getsessioncookieconfig().setpath(str",{"_index":6608,"title":{},"name":{},"text":{"66":{}},"component":{}}],["servletcontext.setsessiontimeout(int",{"_index":6575,"title":{},"name":{},"text":{"66":{}},"component":{}}],["servletcontext.setsessiontrackingmod",{"_index":6599,"title":{},"name":{},"text":{"66":{}},"component":{}}],["servletcontexthandl",{"_index":5891,"title":{"61-38":{}},"name":{},"text":{"61":{},"66":{},"67":{}},"component":{}}],["servletcontexthandler(\"/ctx",{"_index":6859,"title":{},"name":{},"text":{"67":{}},"component":{}}],["servletcontextlisten",{"_index":6866,"title":{},"name":{},"text":{"67":{}},"component":{}}],["servletexcept",{"_index":5380,"title":{},"name":{},"text":{"55":{},"67":{}},"component":{}}],["servletexception(x",{"_index":6877,"title":{},"name":{},"text":{"67":{}},"component":{}}],["servlethold",{"_index":6253,"title":{},"name":{},"text":{"61":{}},"component":{}}],["servletholder.setasyncsupported(tru",{"_index":6272,"title":{},"name":{},"text":{"61":{}},"component":{}}],["servletholder.setinitparameter(\"maxitem",{"_index":6255,"title":{},"name":{},"text":{"61":{}},"component":{}}],["servletholder.setinitparameter(\"resourcebas",{"_index":6270,"title":{},"name":{},"text":{"61":{}},"component":{}}],["servletinputstream",{"_index":6403,"title":{},"name":{},"text":{"61":{}},"component":{}}],["servletrequest.getattribute(nam",{"_index":5677,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getattributenam",{"_index":5676,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getcontentlength",{"_index":5648,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getcontentlengthlong",{"_index":5649,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getcontenttyp",{"_index":5645,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getcontextpath",{"_index":5616,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getcooki",{"_index":5637,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getdateheader(nam",{"_index":5642,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getheader(nam",{"_index":5640,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getheadernam",{"_index":5639,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getheaders(nam",{"_index":5641,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getintheader(nam",{"_index":5643,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getlocal",{"_index":5652,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getlocaladdr",{"_index":5669,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getlocalhost",{"_index":5670,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getlocalport",{"_index":5673,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getmethod",{"_index":5607,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getparameter(nam",{"_index":5629,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getparametermap",{"_index":5631,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getparameternam",{"_index":5628,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getparametervalues(nam",{"_index":5630,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getpathinfo",{"_index":5622,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getprotocol",{"_index":5609,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getquerystr",{"_index":5625,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getremoteaddr",{"_index":5662,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getremotehost",{"_index":5663,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getremoteport",{"_index":5666,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getrequesturi",{"_index":5618,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getrequesturl",{"_index":5611,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getschem",{"_index":5654,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getservernam",{"_index":5656,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getserverport",{"_index":5659,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getservletcontext",{"_index":5614,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getservletpath",{"_index":5621,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getsess",{"_index":5690,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.getsession(cr",{"_index":5691,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.gettrailerfield",{"_index":5688,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.removeattribute(nam",{"_index":5679,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletrequest.setattribute(nam",{"_index":5678,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.addcookie(cooki",{"_index":5730,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.adddateheader(nam",{"_index":5714,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.addheader(nam",{"_index":5712,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.addintheader(nam",{"_index":5716,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.containsheader(nam",{"_index":5720,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.encoderedirecturl(loc",{"_index":5756,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.getheader(nam",{"_index":5718,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.getheadernam",{"_index":5717,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.getheaders(nam",{"_index":5719,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.getstatu",{"_index":5709,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.gettrailerfield",{"_index":5745,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.iscommit",{"_index":5752,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.reset",{"_index":5754,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.senderror(cod",{"_index":5760,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.sendredirect(loc",{"_index":5757,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.setcontentlength(length",{"_index":5740,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.setcontentlengthlong(length",{"_index":5741,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.setcontenttype(typ",{"_index":5737,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.setdateheader(nam",{"_index":5713,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.setheader(nam",{"_index":5711,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.setintheader(nam",{"_index":5715,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.setstatus(cod",{"_index":5708,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servletresponse.settrailerfield",{"_index":5744,"title":{},"name":{},"text":{"57":{}},"component":{}}],["servlets,`filter``",{"_index":6539,"title":{},"name":{},"text":{"66":{}},"component":{}}],["servletsecur",{"_index":1167,"title":{},"name":{},"text":{"17":{}},"component":{}}],["servletupgraderespons",{"_index":5817,"title":{},"name":{},"text":{"58":{}},"component":{}}],["session",{"_index":1582,"title":{"37":{},"66":{},"37-1":{},"37-3":{},"37-4":{},"37-6":{},"37-7":{},"37-12":{},"37-14":{},"37-16":{},"37-18":{},"37-19":{},"37-22":{},"37-25":{},"37-26":{},"37-31":{},"37-36":{},"37-40":{},"37-43":{},"37-44":{},"37-47":{},"49-4":{},"50-3":{},"53-15":{},"53-16":{},"53-20":{},"61-50":{},"66-1":{}},"name":{"66":{}},"text":{"20":{},"21":{},"23":{},"26":{},"33":{},"37":{},"48":{},"49":{},"50":{},"53":{},"57":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{}},"component":{}}],["session.cli",{"_index":5062,"title":{},"name":{},"text":{"50":{}},"component":{}}],["session.client.listen",{"_index":5061,"title":{},"name":{},"text":{"50":{}},"component":{}}],["session.close(statuscode.norm",{"_index":5304,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.close(statuscode.server_error",{"_index":5219,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.demand",{"_index":5217,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.getremotesocketaddress",{"_index":6422,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["session.listen",{"_index":4961,"title":{},"name":{},"text":{"49":{},"53":{},"67":{}},"component":{}}],["session.listener.autodemand",{"_index":5199,"title":{},"name":{},"text":{"53":{},"57":{},"67":{}},"component":{}}],["session.listener.onwebsocketping(bytebuff",{"_index":5292,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.listener.onwebsocketpong(bytebuff",{"_index":5293,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.newrequest",{"_index":5067,"title":{},"name":{},"text":{"50":{}},"component":{}}],["session.newrequest(headersfram",{"_index":5065,"title":{},"name":{},"text":{"50":{}},"component":{}}],["session.newstream",{"_index":4984,"title":{},"name":{},"text":{"49":{}},"component":{}}],["session.newstream(headersfram",{"_index":4983,"title":{},"name":{},"text":{"49":{}},"component":{}}],["session.sendbinary(byt",{"_index":5269,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.sendpartialbinary(bytebuff",{"_index":5287,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.sendping(buff",{"_index":5298,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.sendtext(\"connect",{"_index":5222,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.sendtext(\"data",{"_index":5267,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.sendtext(messag",{"_index":5212,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.sendtext(message.substring(\"echo:\".length",{"_index":5226,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.server.listen",{"_index":6469,"title":{},"name":{},"text":{"63":{}},"component":{}}],["session.setidletimeout(duration.ofseconds(30",{"_index":5257,"title":{},"name":{},"text":{"53":{}},"component":{}}],["session.setmaxtextmessagesize(16",{"_index":5221,"title":{},"name":{},"text":{"53":{}},"component":{}}],["sessioncach",{"_index":3357,"title":{"66-8":{},"66-11":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["sessioncache.setsessiondatastore(infinispansessiondatastor",{"_index":6788,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessioncache.shutdown",{"_index":6625,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessioncachefactori",{"_index":6616,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessioncf",{"_index":4959,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["sessioncf.get",{"_index":4962,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["sessioncontext",{"_index":6673,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessioncookieconfig.sethttponly(boolean",{"_index":6577,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessioncookieconfig.setmaxage(int",{"_index":6579,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessioncookieconfig.setname(str",{"_index":6591,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessioncookieconfig.setsecure(tru",{"_index":6588,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessiondata",{"_index":3610,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["sessiondatamap",{"_index":6835,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessiondatastor",{"_index":3359,"title":{"66-13":{},"66-14":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["sessiondatastorefactori",{"_index":6528,"title":{"66-15":{}},"name":{},"text":{"66":{}},"component":{}}],["sessionhandl",{"_index":3355,"title":{"66-6":{}},"name":{},"text":{"37":{},"61":{},"66":{}},"component":{}}],["sessionhandler'",{"_index":6546,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessionhandler.sethandler(new",{"_index":6388,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sessionhandler.setsessioncache(sessioncach",{"_index":6789,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessionid",{"_index":3505,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["sessionidmanag",{"_index":3352,"title":{"66-2":{},"66-5":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["sessionlisten",{"_index":6413,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["sessionmanag",{"_index":6540,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessionmang",{"_index":6633,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sessionscavengeinterv",{"_index":3396,"title":{},"name":{},"text":{"37":{}},"component":{}}],["sessiontableschema",{"_index":6533,"title":{"66-20":{}},"name":{},"text":{"66":{}},"component":{}}],["sessiontrackingmode.url",{"_index":6598,"title":{},"name":{},"text":{"66":{}},"component":{}}],["set",{"_index":662,"title":{"42-7":{},"56-24":{},"56-28":{},"67-2":{},"67-7":{}},"name":{},"text":{"7":{},"8":{},"9":{},"13":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"28":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["setaccessed(str",{"_index":6825,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setaccesstimecolumn(str",{"_index":6731,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setattributes(str",{"_index":6832,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setbackoffms(int",{"_index":6816,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setblobtype(str",{"_index":6721,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcache(basiccach",{"_index":6767,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcatalogname(str",{"_index":6727,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcheckingremotesessionidencoding(boolean",{"_index":6570,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setciphercompar",{"_index":2222,"title":{},"name":{},"text":{"31":{}},"component":{}}],["setciphercomparator(compar",{"_index":2215,"title":{},"name":{},"text":{"31":{}},"component":{}}],["setcollectionname(str",{"_index":6751,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setconnectionstring(str",{"_index":6752,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcontextpath(str",{"_index":6823,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcontextpathcolumn(str",{"_index":6732,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcookiesettime(str",{"_index":6828,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcookietimecolumn(str",{"_index":6733,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcreatetime(str",{"_index":6827,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setcreatetimecolumn(str",{"_index":6734,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setdatabaseadaptor(databaseadaptor",{"_index":6707,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setdatasource(datasourc",{"_index":6713,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setdatasource(str",{"_index":6712,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setdbname(str",{"_index":6750,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setdriverinfo(driv",{"_index":6718,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setdriverinfo(str",{"_index":6717,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setenabled(boolean",{"_index":4400,"title":{},"name":{},"text":{"45":{}},"component":{}}],["setentitydatamodel(entitydatamodel",{"_index":6819,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setexpiry(str",{"_index":6830,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setexpirytimecolumn(str",{"_index":6735,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setfoo",{"_index":4057,"title":{},"name":{},"text":{"42":{}},"component":{}}],["setfoo(str",{"_index":4430,"title":{},"name":{},"text":{"45":{}},"component":{}}],["setgraceperiodsec(int",{"_index":6668,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sethost(str",{"_index":6755,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sethttponly(boolean",{"_index":6576,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setid(str",{"_index":6822,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setidcolumn(str",{"_index":6738,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setinfinispanidletimeoutsec(int",{"_index":6770,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setintervalsec(int",{"_index":6555,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setkind(str",{"_index":6821,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setlastaccessed(str",{"_index":6826,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setlastaccesstimecolumn(str",{"_index":6736,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setlastnode(str",{"_index":6829,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setlastnodecolumn(str",{"_index":6739,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setlastsavedtimecolumn(str",{"_index":6737,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setlongtype(str",{"_index":6722,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setmapcolumn(str",{"_index":6742,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setmaxage(int",{"_index":6601,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setmaxinactive(str",{"_index":6831,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setmaxinactiveinterval(int",{"_index":6573,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setmaxintervalcolumn(str",{"_index":6741,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setmaxretries(int",{"_index":6814,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setnamespace(str",{"_index":6813,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setport(int",{"_index":6756,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setprivatefield(object",{"_index":1089,"title":{},"name":{},"text":{"13":{}},"component":{}}],["setprojectid(str",{"_index":6811,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setquerymanager(querymanag",{"_index":6771,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setrefreshcookieage(int",{"_index":6578,"title":{},"name":{},"text":{"66":{}},"component":{}}],["sets/get",{"_index":5707,"title":{},"name":{},"text":{"57":{}},"component":{}}],["setsamesite(httpcookie.samesit",{"_index":6581,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setsaveperiodsec(int",{"_index":6665,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setschemaname(str",{"_index":6726,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setsecurerequestonly(boolean",{"_index":6586,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setserialization(boolean",{"_index":6769,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setsessioncookie(str",{"_index":6589,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setsessiondomain(str",{"_index":6604,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setsessionidpathparametername(str",{"_index":6593,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setsessionpath(str",{"_index":6607,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setsessiontableschema(sessiontableschema",{"_index":6709,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setsessiontrackingmodes(set",{"_index":6596,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setstoredir(fil",{"_index":6685,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setstringtype(str",{"_index":6723,"title":{},"name":{},"text":{"66":{}},"component":{}}],["settablename(str",{"_index":6729,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setter",{"_index":1085,"title":{},"name":{},"text":{"13":{},"32":{},"42":{},"45":{},"53":{},"54":{},"56":{},"66":{}},"component":{}}],["settings.get(settingsframe.enable_push",{"_index":6453,"title":{},"name":{},"text":{"62":{}},"component":{}}],["settings.put(settingsframe.enable_push",{"_index":6424,"title":{},"name":{},"text":{"62":{}},"component":{}}],["settingsfram",{"_index":6449,"title":{},"name":{},"text":{"62":{}},"component":{}}],["setup",{"_index":1482,"title":{"20-1":{},"62-3":{},"63-2":{},"67-8":{},"67-9":{}},"name":{},"text":{"23":{},"28":{},"34":{},"37":{},"38":{},"45":{},"54":{},"55":{},"61":{},"66":{},"67":{}},"component":{}}],["setusingcookies(boolean",{"_index":6600,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setvhost(str",{"_index":6824,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setvirtualhostcolumn(str",{"_index":6740,"title":{},"name":{},"text":{"66":{}},"component":{}}],["setvirtualthreadsexecutor(executor",{"_index":4496,"title":{},"name":{},"text":{"47":{}},"component":{}}],["sever",{"_index":380,"title":{},"name":{},"text":{"3":{},"4":{},"17":{},"25":{},"34":{},"37":{},"45":{},"48":{},"53":{},"59":{}},"component":{}}],["sha256",{"_index":2209,"title":{},"name":{},"text":{"30":{}},"component":{}}],["share",{"_index":32,"title":{},"name":{},"text":{"1":{},"7":{},"33":{},"34":{},"37":{},"38":{},"56":{},"61":{},"66":{}},"component":{}}],["shelf",{"_index":4610,"title":{},"name":{},"text":{"48":{}},"component":{}}],["shell",{"_index":3736,"title":{},"name":{},"text":{"38":{}},"component":{}}],["ship",{"_index":1588,"title":{},"name":{},"text":{"20":{},"23":{},"26":{},"34":{},"37":{}},"component":{}}],["shop",{"_index":6061,"title":{},"name":{},"text":{"61":{}},"component":{}}],["shop.domain.com",{"_index":6065,"title":{},"name":{},"text":{"61":{}},"component":{}}],["shop/cart",{"_index":6063,"title":{},"name":{},"text":{"61":{}},"component":{}}],["shopcartservlet",{"_index":6246,"title":{},"name":{},"text":{"61":{}},"component":{}}],["shopgziphandl",{"_index":6104,"title":{},"name":{},"text":{"61":{}},"component":{}}],["shophandl",{"_index":6071,"title":{},"name":{},"text":{"61":{}},"component":{}}],["short",{"_index":3113,"title":{"41-7":{}},"name":{},"text":{"34":{},"37":{},"42":{},"43":{},"49":{},"50":{},"53":{},"61":{},"62":{},"63":{}},"component":{}}],["shortcut",{"_index":4567,"title":{},"name":{},"text":{"48":{}},"component":{}}],["shorter",{"_index":3389,"title":{},"name":{},"text":{"37":{},"42":{},"52":{}},"component":{}}],["shortest",{"_index":6747,"title":{},"name":{},"text":{"66":{}},"component":{}}],["shorthand",{"_index":4560,"title":{},"name":{},"text":{"48":{}},"component":{}}],["show",{"_index":1062,"title":{},"name":{},"text":{"13":{},"25":{},"34":{},"36":{},"38":{},"44":{},"53":{},"61":{},"62":{},"63":{},"67":{}},"component":{}}],["shown",{"_index":2289,"title":{},"name":{},"text":{"32":{},"41":{},"48":{},"61":{},"67":{}},"component":{}}],["shrink",{"_index":4487,"title":{},"name":{},"text":{"47":{}},"component":{}}],["shrunk",{"_index":4472,"title":{},"name":{},"text":{"47":{}},"component":{}}],["shut",{"_index":3790,"title":{},"name":{},"text":{"38":{},"66":{}},"component":{}}],["shutdown",{"_index":2675,"title":{},"name":{},"text":{"33":{},"37":{},"38":{},"42":{},"53":{},"56":{}},"component":{}}],["sibl",{"_index":4123,"title":{},"name":{},"text":{"43":{}},"component":{}}],["siblings.add(child",{"_index":4126,"title":{},"name":{},"text":{"43":{}},"component":{}}],["siblings.remove(child",{"_index":4127,"title":{},"name":{},"text":{"43":{}},"component":{}}],["side",{"_index":1146,"title":{},"name":{},"text":{"16":{},"34":{},"44":{},"47":{},"48":{},"51":{},"52":{},"53":{},"57":{},"61":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["sift",{"_index":802,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sign",{"_index":974,"title":{"10-3":{},"30-3":{},"30-4":{}},"name":{},"text":{"9":{},"10":{},"25":{},"30":{},"33":{},"34":{},"45":{},"48":{}},"component":{}}],["signal",{"_index":3801,"title":{},"name":{},"text":{"38":{},"44":{},"48":{},"49":{},"50":{},"61":{},"65":{}},"component":{}}],["signatur",{"_index":1019,"title":{},"name":{},"text":{"10":{},"45":{},"48":{},"53":{}},"component":{}}],["signed.crt",{"_index":2210,"title":{},"name":{},"text":{"30":{}},"component":{}}],["signed_certificate.pem",{"_index":2183,"title":{},"name":{},"text":{"30":{}},"component":{}}],["signific",{"_index":2786,"title":{},"name":{},"text":{"33":{},"34":{},"35":{},"61":{}},"component":{}}],["significantli",{"_index":1213,"title":{},"name":{},"text":{"17":{}},"component":{}}],["signoff",{"_index":1007,"title":{},"name":{},"text":{"10":{}},"component":{}}],["similar",{"_index":772,"title":{},"name":{},"text":{"7":{},"18":{},"23":{},"26":{},"31":{},"32":{},"33":{},"34":{},"41":{},"42":{},"48":{},"52":{},"56":{},"57":{},"61":{},"64":{},"65":{},"67":{}},"component":{}}],["similarli",{"_index":781,"title":{},"name":{},"text":{"7":{},"33":{},"34":{},"36":{},"38":{},"45":{},"47":{},"48":{},"52":{},"53":{},"56":{},"61":{},"65":{},"71":{}},"component":{}}],["simpl",{"_index":546,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"18":{},"19":{},"20":{},"24":{},"31":{},"32":{},"34":{},"41":{},"44":{},"48":{},"52":{},"53":{},"55":{},"56":{},"61":{},"65":{},"67":{}},"component":{}}],["simple,b=file:///path/to/jetty.hom",{"_index":1615,"title":{},"name":{},"text":{"20":{}},"component":{}}],["simple.ini",{"_index":1589,"title":{},"name":{},"text":{"20":{}},"component":{}}],["simple.war",{"_index":1590,"title":{},"name":{},"text":{"20":{}},"component":{}}],["simple_war",{"_index":1618,"title":{},"name":{},"text":{"20":{}},"component":{}}],["simpledateformat",{"_index":2558,"title":{},"name":{},"text":{"33":{}},"component":{}}],["simpler",{"_index":4029,"title":{},"name":{},"text":{"42":{},"44":{},"48":{},"53":{},"57":{},"61":{}},"component":{}}],["simplest",{"_index":1893,"title":{},"name":{},"text":{"25":{},"52":{},"61":{}},"component":{}}],["simpli",{"_index":1382,"title":{},"name":{},"text":{"19":{},"26":{},"35":{},"37":{},"38":{},"48":{},"56":{},"66":{}},"component":{}}],["simplic",{"_index":2188,"title":{},"name":{},"text":{"30":{}},"component":{}}],["simplifi",{"_index":1879,"title":{},"name":{},"text":{"25":{},"45":{},"53":{},"57":{}},"component":{}}],["simplist",{"_index":4469,"title":{},"name":{},"text":{"47":{}},"component":{}}],["simul",{"_index":4552,"title":{},"name":{},"text":{"48":{}},"component":{}}],["simultan",{"_index":1327,"title":{},"name":{},"text":{"19":{},"20":{},"37":{},"66":{}},"component":{}}],["singl",{"_index":765,"title":{},"name":{},"text":{"7":{},"13":{},"17":{},"19":{},"28":{},"30":{},"33":{},"34":{},"37":{},"41":{},"47":{},"48":{},"49":{},"50":{},"53":{},"57":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["sink",{"_index":4311,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{}}],["sink.write(chunk.islast",{"_index":4336,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sink.write(fals",{"_index":4314,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sink.write(tru",{"_index":4316,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sit",{"_index":1471,"title":{},"name":{},"text":{"19":{},"38":{}},"component":{}}],["site",{"_index":574,"title":{},"name":{},"text":{"5":{},"14":{},"19":{},"30":{},"33":{},"34":{},"48":{},"61":{}},"component":{}}],["situat",{"_index":869,"title":{},"name":{},"text":{"7":{},"53":{},"56":{},"59":{},"61":{}},"component":{}}],["size",{"_index":1075,"title":{},"name":{},"text":{"13":{},"32":{},"33":{},"37":{},"38":{},"46":{},"53":{},"61":{}},"component":{}}],["size=0",{"_index":3929,"title":{},"name":{},"text":{"41":{}},"component":{}}],["size=1",{"_index":3981,"title":{},"name":{},"text":{"41":{}},"component":{}}],["size=16",{"_index":3890,"title":{},"name":{},"text":{"41":{}},"component":{}}],["size=2",{"_index":3931,"title":{},"name":{},"text":{"41":{}},"component":{}}],["size=3",{"_index":3977,"title":{},"name":{},"text":{"41":{}},"component":{}}],["size=4",{"_index":3873,"title":{},"name":{},"text":{"41":{}},"component":{}}],["size=8",{"_index":3966,"title":{},"name":{},"text":{"41":{}},"component":{}}],["sizelimithandl",{"_index":5886,"title":{"61-29":{}},"name":{},"text":{"61":{}},"component":{}}],["sketch",{"_index":2245,"title":{},"name":{},"text":{"31":{}},"component":{}}],["skip",{"_index":3430,"title":{},"name":{},"text":{"37":{},"38":{},"45":{},"48":{},"54":{},"56":{},"66":{}},"component":{}}],["slash",{"_index":6112,"title":{},"name":{},"text":{"61":{}},"component":{}}],["slf4j",{"_index":3234,"title":{"36-8":{},"71-1":{}},"name":{},"text":{"36":{},"37":{},"38":{},"41":{},"61":{},"71":{}},"component":{}}],["slf4j.version",{"_index":3700,"title":{},"name":{},"text":{"38":{}},"component":{}}],["slf4j.version=2.0.12",{"_index":3732,"title":{},"name":{},"text":{"38":{}},"component":{}}],["slf4j2",{"_index":3279,"title":{},"name":{},"text":{"36":{}},"component":{}}],["slf4jbridgehandl",{"_index":3288,"title":{},"name":{},"text":{"36":{}},"component":{}}],["slf4jrequestlogwrit",{"_index":5914,"title":{},"name":{},"text":{"61":{}},"component":{}}],["slice",{"_index":4258,"title":{},"name":{},"text":{"44":{}},"component":{}}],["slightli",{"_index":3084,"title":{},"name":{},"text":{"34":{},"61":{},"66":{}},"component":{}}],["slow",{"_index":3216,"title":{},"name":{},"text":{"35":{},"37":{},"41":{},"53":{},"66":{}},"component":{}}],["slowdown",{"_index":4443,"title":{},"name":{},"text":{"47":{}},"component":{}}],["slower",{"_index":3577,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["slowhandl",{"_index":6170,"title":{},"name":{},"text":{"61":{}},"component":{}}],["slowli",{"_index":4449,"title":{},"name":{},"text":{"47":{},"61":{}},"component":{}}],["small",{"_index":1280,"title":{},"name":{},"text":{"18":{},"33":{},"34":{},"37":{},"41":{},"47":{},"61":{}},"component":{}}],["smaller",{"_index":4647,"title":{},"name":{},"text":{"48":{}},"component":{}}],["smap",{"_index":2065,"title":{},"name":{},"text":{"28":{}},"component":{}}],["smooth",{"_index":6012,"title":{},"name":{},"text":{"61":{}},"component":{}}],["smtp",{"_index":1988,"title":{},"name":{},"text":{"26":{},"52":{}},"component":{}}],["snapshot",{"_index":1495,"title":{},"name":{},"text":{"20":{},"33":{},"34":{},"36":{},"38":{},"41":{},"45":{},"48":{},"49":{},"50":{},"53":{},"54":{},"55":{},"56":{},"61":{},"62":{},"63":{},"67":{}},"component":{}}],["snapshot,sto=5000",{"_index":1548,"title":{},"name":{},"text":{"20":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["snapshot.jar",{"_index":3707,"title":{},"name":{},"text":{"38":{},"40":{},"41":{},"61":{}},"component":{}}],["snapshot.jar:/path/to/jetty.home/lib/jetti",{"_index":3723,"title":{},"name":{},"text":{"38":{}},"component":{}}],["sni",{"_index":2169,"title":{"34-21":{}},"name":{},"text":{"30":{},"33":{},"34":{}},"component":{}}],["snihostcheck=fals",{"_index":3138,"title":{},"name":{},"text":{"34":{}},"component":{}}],["snihostcheck=tru",{"_index":3139,"title":{},"name":{},"text":{"34":{}},"component":{}}],["snippet",{"_index":1680,"title":{},"name":{},"text":{"23":{}},"component":{}}],["snirequired=fals",{"_index":3128,"title":{},"name":{},"text":{"34":{}},"component":{}}],["snirequired=tru",{"_index":3129,"title":{},"name":{},"text":{"34":{}},"component":{}}],["so_rcvbuf",{"_index":2455,"title":{},"name":{},"text":{"33":{}},"component":{}}],["so_reuseaddr",{"_index":2449,"title":{},"name":{},"text":{"33":{}},"component":{}}],["so_reuseport",{"_index":2451,"title":{},"name":{},"text":{"33":{}},"component":{}}],["so_sndbuf",{"_index":2457,"title":{},"name":{},"text":{"33":{}},"component":{}}],["social",{"_index":6178,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sock",{"_index":4846,"title":{},"name":{},"text":{"48":{}},"component":{}}],["socket",{"_index":1438,"title":{},"name":{},"text":{"19":{},"33":{},"34":{},"38":{},"44":{},"48":{},"52":{},"61":{},"65":{},"67":{}},"component":{}}],["socketaddress",{"_index":4956,"title":{},"name":{},"text":{"49":{},"50":{},"52":{},"62":{},"63":{}},"component":{}}],["socketchannel",{"_index":4144,"title":{},"name":{},"text":{"44":{},"52":{},"61":{}},"component":{}}],["socketchannel.configureblocking(fals",{"_index":4149,"title":{},"name":{},"text":{"44":{}},"component":{}}],["socketchannel.connect(new",{"_index":4150,"title":{},"name":{},"text":{"44":{}},"component":{}}],["socketchannel.connect(socketaddress",{"_index":5114,"title":{},"name":{},"text":{"52":{}},"component":{}}],["socketchannel.open",{"_index":4148,"title":{},"name":{},"text":{"44":{}},"component":{}}],["socketchannelendpoint",{"_index":6489,"title":{},"name":{},"text":{"65":{}},"component":{}}],["socks4",{"_index":4505,"title":{},"name":{},"text":{"48":{}},"component":{}}],["socks5",{"_index":4500,"title":{"48-23":{}},"name":{},"text":{"48":{}},"component":{}}],["socks5.usernamepasswordauthenticationfactory(socks5us",{"_index":4864,"title":{},"name":{},"text":{"48":{}},"component":{}}],["socks5authenticationfactori",{"_index":4863,"title":{},"name":{},"text":{"48":{}},"component":{}}],["socks5pass",{"_index":4862,"title":{},"name":{},"text":{"48":{}},"component":{}}],["socks5proxi",{"_index":4859,"title":{},"name":{},"text":{"48":{}},"component":{}}],["socks5proxy(\"proxyhost",{"_index":4860,"title":{},"name":{},"text":{"48":{}},"component":{}}],["socks5us",{"_index":4861,"title":{},"name":{},"text":{"48":{}},"component":{}}],["softwar",{"_index":5361,"title":{},"name":{},"text":{"55":{},"56":{}},"component":{}}],["solut",{"_index":1848,"title":{},"name":{},"text":{"25":{},"34":{},"42":{},"44":{},"45":{},"56":{}},"component":{}}],["solv",{"_index":555,"title":{},"name":{},"text":{"4":{},"41":{},"47":{},"53":{}},"component":{}}],["some.exact.classnam",{"_index":1065,"title":{},"name":{},"text":{"13":{}},"component":{}}],["some.wildcard.packag",{"_index":1066,"title":{},"name":{},"text":{"13":{}},"component":{}}],["some/%2e%2e/path",{"_index":5861,"title":{},"name":{},"text":{"59":{}},"component":{}}],["some/../path",{"_index":5860,"title":{},"name":{},"text":{"59":{}},"component":{}}],["some/..;/path",{"_index":5859,"title":{},"name":{},"text":{"59":{}},"component":{}}],["some//../path",{"_index":5863,"title":{},"name":{},"text":{"59":{}},"component":{}}],["some/other/java",{"_index":3750,"title":{},"name":{},"text":{"38":{}},"component":{}}],["some/path",{"_index":5864,"title":{},"name":{},"text":{"59":{}},"component":{}}],["someexcept",{"_index":1094,"title":{},"name":{},"text":{"13":{}},"component":{}}],["somehow",{"_index":2497,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["someon",{"_index":601,"title":{},"name":{},"text":{"6":{}},"component":{}}],["someth",{"_index":1097,"title":{},"name":{},"text":{"13":{},"61":{},"67":{}},"component":{}}],["sometim",{"_index":1199,"title":{},"name":{},"text":{"17":{},"19":{},"26":{},"41":{},"42":{},"47":{},"53":{},"56":{},"69":{}},"component":{}}],["somewhat",{"_index":3633,"title":{},"name":{},"text":{"37":{}},"component":{}}],["somewher",{"_index":6363,"title":{},"name":{},"text":{"61":{}},"component":{}}],["soon",{"_index":3424,"title":{},"name":{},"text":{"37":{},"44":{},"47":{},"48":{},"49":{},"53":{},"61":{},"62":{}},"component":{}}],["sophist",{"_index":3265,"title":{},"name":{},"text":{"36":{},"47":{}},"component":{}}],["sort",{"_index":2293,"title":{},"name":{},"text":{"32":{}},"component":{}}],["sourc",{"_index":139,"title":{"11":{},"4-3":{}},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"9":{},"11":{},"13":{},"28":{},"32":{},"34":{},"38":{},"40":{},"42":{},"44":{},"48":{},"54":{},"56":{},"61":{}},"component":{}}],["source.demand",{"_index":4265,"title":{},"name":{},"text":{"44":{}},"component":{}}],["source.demand(thi",{"_index":4297,"title":{},"name":{},"text":{"44":{}},"component":{}}],["source.demand(this::iter",{"_index":4333,"title":{},"name":{},"text":{"44":{}},"component":{}}],["source.fail(chunk.getfailur",{"_index":4279,"title":{},"name":{},"text":{"44":{}},"component":{}}],["source.read",{"_index":4264,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sourceforg",{"_index":286,"title":{},"name":{},"text":{"2":{}},"component":{}}],["sourcevers",{"_index":5336,"title":{},"name":{},"text":{"54":{}},"component":{}}],["space",{"_index":767,"title":{},"name":{},"text":{"7":{},"13":{},"20":{},"28":{},"45":{},"56":{}},"component":{}}],["space_in_valu",{"_index":3949,"title":{},"name":{},"text":{"41":{}},"component":{}}],["spawn",{"_index":3048,"title":{},"name":{},"text":{"34":{},"36":{},"38":{},"48":{}},"component":{}}],["spdi",{"_index":261,"title":{},"name":{},"text":{"2":{}},"component":{}}],["spdx",{"_index":839,"title":{},"name":{},"text":{"7":{}},"component":{}}],["speak",{"_index":2931,"title":{},"name":{},"text":{"34":{},"48":{},"52":{},"61":{},"65":{}},"component":{}}],["spec",{"_index":6913,"title":{},"name":{},"text":{"67":{}},"component":{}}],["special",{"_index":1577,"title":{"48-19":{}},"name":{},"text":{"20":{},"26":{},"37":{},"38":{},"44":{},"48":{},"53":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["special/reserv",{"_index":4805,"title":{},"name":{},"text":{"48":{}},"component":{}}],["specif",{"_index":78,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"7":{},"10":{},"11":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"26":{},"28":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"44":{},"45":{},"46":{},"48":{},"49":{},"52":{},"53":{},"56":{},"59":{},"61":{},"62":{},"65":{},"66":{},"67":{}},"component":{}}],["specifi",{"_index":1188,"title":{"56-29":{},"56-30":{}},"name":{},"text":{"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"47":{},"48":{},"49":{},"52":{},"53":{},"56":{},"57":{},"59":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["speed",{"_index":1214,"title":{},"name":{},"text":{"17":{},"37":{},"66":{}},"component":{}}],["spend",{"_index":3346,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["spent",{"_index":4605,"title":{},"name":{},"text":{"48":{}},"component":{}}],["spi",{"_index":1790,"title":{},"name":{},"text":{"24":{}},"component":{}}],["spider",{"_index":5116,"title":{},"name":{},"text":{"52":{}},"component":{}}],["spike",{"_index":2350,"title":{},"name":{},"text":{"33":{},"47":{},"61":{}},"component":{}}],["spin",{"_index":908,"title":{},"name":{},"text":{"8":{}},"component":{}}],["spirit",{"_index":150,"title":{},"name":{},"text":{"1":{}},"component":{}}],["split",{"_index":3716,"title":{},"name":{},"text":{"38":{}},"component":{}}],["spnego",{"_index":4499,"title":{"48-21":{}},"name":{},"text":{"48":{}},"component":{}}],["spread",{"_index":6560,"title":{},"name":{},"text":{"66":{}},"component":{}}],["spring",{"_index":105,"title":{},"name":{},"text":{"1":{},"17":{},"42":{}},"component":{}}],["src",{"_index":5328,"title":{},"name":{},"text":{"54":{}},"component":{}}],["src/main/asciidoc",{"_index":721,"title":{},"name":{},"text":{"7":{}},"component":{}}],["src/main/asciidoc/config.adoc",{"_index":722,"title":{},"name":{},"text":{"7":{}},"component":{}}],["src/main/etc/jetty.xml",{"_index":5556,"title":{},"name":{},"text":{"56":{}},"component":{}}],["src/main/java/org/exampl",{"_index":5368,"title":{},"name":{},"text":{"55":{}},"component":{}}],["src/main/java/org/example/helloservlet.java",{"_index":5399,"title":{},"name":{},"text":{"55":{}},"component":{}}],["src/main/java/org/example/helloworld.java",{"_index":5369,"title":{},"name":{},"text":{"55":{}},"component":{}}],["src/main/webapp",{"_index":5348,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["src/main/webapp/web",{"_index":5398,"title":{},"name":{},"text":{"55":{},"56":{}},"component":{}}],["src/other",{"_index":5504,"title":{},"name":{},"text":{"56":{}},"component":{}}],["ssh",{"_index":1830,"title":{"25-3":{},"45-5":{}},"name":{},"text":{"25":{},"45":{}},"component":{}}],["ssl",{"_index":1910,"title":{"33-26":{},"33-29":{}},"name":{},"text":{"25":{},"31":{},"33":{},"34":{},"61":{}},"component":{}}],["ssl.ini",{"_index":1922,"title":{},"name":{},"text":{"25":{},"31":{},"34":{},"40":{}},"component":{}}],["ssl.mod",{"_index":2227,"title":{},"name":{},"text":{"31":{}},"component":{}}],["ssl.xml",{"_index":1909,"title":{},"name":{},"text":{"25":{},"31":{}},"component":{}}],["ssl/tl",{"_index":2124,"title":{"30":{},"34-15":{},"34-16":{},"34-17":{},"34-20":{},"61-20":{}},"name":{},"text":{"61":{}},"component":{}}],["ssl_dhe_dss_export_with_des40_cbc_sha",{"_index":3111,"title":{},"name":{},"text":{"34":{}},"component":{}}],["ssl_dhe_dss_with_des_cbc_sha",{"_index":3107,"title":{},"name":{},"text":{"34":{}},"component":{}}],["ssl_dhe_rsa_export_with_des40_cbc_sha",{"_index":3110,"title":{},"name":{},"text":{"34":{}},"component":{}}],["ssl_dhe_rsa_with_des_cbc_sha",{"_index":3106,"title":{},"name":{},"text":{"34":{}},"component":{}}],["ssl_rsa_export_with_des40_cbc_sha",{"_index":3109,"title":{},"name":{},"text":{"34":{}},"component":{}}],["ssl_rsa_export_with_rc4_40_md5",{"_index":3108,"title":{},"name":{},"text":{"34":{}},"component":{}}],["ssl_rsa_with_des_cbc_sha",{"_index":3105,"title":{},"name":{},"text":{"34":{}},"component":{}}],["sslclientconnectionfactori",{"_index":5156,"title":{},"name":{},"text":{"52":{}},"component":{}}],["sslclientconnectionfactory(clientconnector.getsslcontextfactori",{"_index":5157,"title":{},"name":{},"text":{"52":{}},"component":{}}],["sslconnect",{"_index":5159,"title":{},"name":{},"text":{"52":{},"65":{}},"component":{}}],["sslconnectionfactori",{"_index":5937,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["sslconnectionfactory(sslcontextfactori",{"_index":5938,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["sslcontextfactori",{"_index":2214,"title":{},"name":{},"text":{"31":{},"33":{},"34":{},"45":{},"48":{},"49":{},"50":{},"52":{},"61":{},"63":{},"65":{}},"component":{}}],["sslcontextfactory.addexcludeprotocols(\"tlsv1",{"_index":5094,"title":{},"name":{},"text":{"52":{}},"component":{}}],["sslcontextfactory.cli",{"_index":4763,"title":{},"name":{},"text":{"48":{},"50":{},"52":{}},"component":{}}],["sslcontextfactory.serv",{"_index":2799,"title":{},"name":{},"text":{"33":{},"34":{},"45":{},"61":{},"63":{},"65":{}},"component":{}}],["sslcontextfactory.setciphercomparator(compar",{"_index":2219,"title":{},"name":{},"text":{"31":{}},"component":{}}],["sslcontextfactory.setendpointidentificationalgorithm(nul",{"_index":4768,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sslcontextfactory.sethostnameverifier((hostnam",{"_index":4770,"title":{},"name":{},"text":{"48":{}},"component":{}}],["sslcontextfactory.setkeystorepassword(\"secret",{"_index":4380,"title":{},"name":{},"text":{"45":{},"61":{},"63":{},"65":{}},"component":{}}],["sslcontextfactory.setkeystorepath(\"/path/to/keystor",{"_index":4379,"title":{},"name":{},"text":{"45":{},"61":{},"63":{}},"component":{}}],["sslcontextfactory.setkeystorepath(\"/path/to/keystore.p12",{"_index":6487,"title":{},"name":{},"text":{"65":{}},"component":{}}],["sslcontextfactory.setprovider(\"conscrypt",{"_index":6035,"title":{},"name":{},"text":{"61":{}},"component":{}}],["sslendpoint",{"_index":6490,"title":{},"name":{},"text":{"65":{}},"component":{}}],["sslengin",{"_index":4775,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["sslengine.getpeerhost",{"_index":4778,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["sslexcept",{"_index":4774,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["sslhandshakelisten",{"_index":4498,"title":{"48-15":{}},"name":{},"text":{"48":{},"61":{}},"component":{}}],["sslrmiclientsocketfactori",{"_index":4388,"title":{},"name":{},"text":{"45":{}},"component":{}}],["sslsession",{"_index":2788,"title":{},"name":{},"text":{"33":{}},"component":{}}],["sslv2",{"_index":3094,"title":{},"name":{},"text":{"34":{}},"component":{}}],["sslv3",{"_index":3095,"title":{},"name":{},"text":{"34":{}},"component":{}}],["stabl",{"_index":232,"title":{},"name":{},"text":{"2":{},"7":{},"20":{},"37":{}},"component":{}}],["stack",{"_index":577,"title":{"6-2":{}},"name":{},"text":{"13":{},"33":{},"36":{},"41":{},"72":{}},"component":{}}],["stackoverflow",{"_index":25,"title":{"4-8":{}},"name":{},"text":{"1":{},"4":{},"6":{}},"component":{}}],["stackoverflowerror",{"_index":4209,"title":{},"name":{},"text":{"44":{}},"component":{}}],["stacktrac",{"_index":1139,"title":{},"name":{},"text":{"13":{},"37":{}},"component":{}}],["stage",{"_index":4584,"title":{},"name":{},"text":{"48":{},"59":{},"61":{}},"component":{}}],["stagger",{"_index":6559,"title":{},"name":{},"text":{"66":{}},"component":{}}],["stall",{"_index":4954,"title":{},"name":{},"text":{"49":{},"61":{},"62":{}},"component":{}}],["standalon",{"_index":644,"title":{},"name":{},"text":{"7":{},"14":{},"15":{},"16":{},"18":{},"20":{},"38":{},"41":{},"61":{}},"component":{}}],["standard",{"_index":822,"title":{"13":{},"29":{},"33":{},"55-5":{},"67-1":{}},"name":{"33":{}},"text":{"7":{},"17":{},"19":{},"20":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"45":{},"53":{},"55":{},"56":{},"59":{},"61":{},"66":{},"67":{}},"component":{}}],["standardcharsets.utf_8.encode(content1",{"_index":4995,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["standardcharsets.utf_8.encode(content2",{"_index":4997,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["start",{"_index":671,"title":{"20":{},"38":{},"39":{},"18-4":{},"20-4":{},"38-10":{},"38-15":{},"48-2":{},"53-1":{}},"name":{"39":{}},"text":{"7":{},"8":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"27":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{},"72":{}},"component":{}}],["start.d",{"_index":1388,"title":{},"name":{},"text":{"19":{},"20":{},"25":{},"31":{},"34":{},"36":{},"38":{},"41":{}},"component":{}}],["start.d/http.ini",{"_index":1554,"title":{},"name":{},"text":{"20":{}},"component":{}}],["start.d/sess",{"_index":3562,"title":{},"name":{},"text":{"37":{}},"component":{}}],["start.jar",{"_index":3753,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["start.out",{"_index":5508,"title":{},"name":{},"text":{"56":{}},"component":{}}],["start/stop",{"_index":3853,"title":{"41-2":{}},"name":{},"text":{"41":{}},"component":{}}],["startd",{"_index":3806,"title":{},"name":{},"text":{"38":{}},"component":{}}],["startjarloader@593634ad",{"_index":3965,"title":{},"name":{},"text":{"41":{}},"component":{}}],["startlog",{"_index":3795,"title":{},"name":{},"text":{"38":{}},"component":{}}],["startup",{"_index":2672,"title":{},"name":{},"text":{"33":{},"34":{},"35":{},"37":{},"38":{},"43":{},"56":{},"66":{}},"component":{}}],["state",{"_index":2334,"title":{"33-30":{}},"name":{"72":{}},"text":{"33":{},"41":{},"43":{},"44":{},"46":{},"47":{},"61":{},"66":{},"72":{}},"component":{}}],["statement",{"_index":1177,"title":{},"name":{},"text":{"17":{},"28":{}},"component":{}}],["statetrackinghandl",{"_index":2801,"title":{"72":{},"41-11":{},"61-35":{}},"name":{},"text":{"33":{},"41":{},"61":{},"72":{}},"component":{}}],["statetrackinghandler(new",{"_index":6233,"title":{},"name":{},"text":{"61":{}},"component":{}}],["statetrackinghandler.listen",{"_index":6234,"title":{},"name":{},"text":{"61":{}},"component":{}}],["statetrackinghandler.sethandlercallbacktimeout(5000",{"_index":6232,"title":{},"name":{},"text":{"61":{}},"component":{}}],["statetrackinghandler.threadinfo",{"_index":6236,"title":{},"name":{},"text":{"61":{}},"component":{}}],["static",{"_index":940,"title":{"19-1":{},"61-26":{},"61-40":{}},"name":{},"text":{"8":{},"13":{},"19":{},"20":{},"24":{},"33":{},"34":{},"42":{},"44":{},"48":{},"55":{},"56":{},"61":{}},"component":{}}],["statist",{"_index":2370,"title":{"66-7":{}},"name":{},"text":{"33":{},"44":{},"61":{},"66":{}},"component":{}}],["statisticshandl",{"_index":5887,"title":{"61-30":{}},"name":{},"text":{"61":{}},"component":{}}],["statisticshandler.minimumdataratehandl",{"_index":6132,"title":{},"name":{},"text":{"61":{}},"component":{}}],["statisticshandler.minimumdataratehandler(1024l",{"_index":6136,"title":{},"name":{},"text":{"61":{}},"component":{}}],["statshandl",{"_index":6129,"title":{},"name":{},"text":{"61":{}},"component":{}}],["statshandler.sethandler(contextcollect",{"_index":6131,"title":{},"name":{},"text":{"61":{}},"component":{}}],["statu",{"_index":221,"title":{},"name":{},"text":{"2":{},"25":{},"33":{},"36":{},"48":{},"49":{},"50":{},"53":{},"57":{},"61":{},"62":{},"63":{}},"component":{}}],["stay",{"_index":86,"title":{},"name":{},"text":{"1":{},"37":{},"47":{},"61":{}},"component":{}}],["stderr",{"_index":4030,"title":{},"name":{},"text":{"42":{}},"component":{}}],["stderrappend",{"_index":3238,"title":{},"name":{},"text":{"36":{}},"component":{}}],["steal",{"_index":4477,"title":{},"name":{},"text":{"47":{}},"component":{}}],["step",{"_index":681,"title":{},"name":{},"text":{"7":{},"31":{},"34":{},"37":{},"38":{},"45":{},"48":{},"53":{},"54":{},"56":{},"66":{},"67":{}},"component":{}}],["stick",{"_index":2151,"title":{},"name":{},"text":{"30":{}},"component":{}}],["sticki",{"_index":3344,"title":{"37-45":{},"37-46":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["still",{"_index":1191,"title":{},"name":{},"text":{"17":{},"25":{},"37":{},"44":{},"45":{},"48":{},"49":{},"62":{},"66":{}},"component":{}}],["stone",{"_index":746,"title":{},"name":{},"text":{"7":{}},"component":{}}],["stop",{"_index":1340,"title":{"38-13":{},"38-14":{},"48-3":{},"53-2":{}},"name":{},"text":{"19":{},"20":{},"33":{},"34":{},"37":{},"38":{},"41":{},"43":{},"44":{},"46":{},"47":{},"48":{},"49":{},"50":{},"53":{},"56":{},"57":{},"61":{},"62":{}},"component":{}}],["stop.host",{"_index":3778,"title":{},"name":{},"text":{"38":{}},"component":{}}],["stop.key",{"_index":3780,"title":{},"name":{},"text":{"38":{}},"component":{}}],["stop.key=1ihfs43wtxwjk",{"_index":3782,"title":{},"name":{},"text":{"38":{}},"component":{}}],["stop.port",{"_index":3779,"title":{},"name":{},"text":{"38":{}},"component":{}}],["stop.port=8181",{"_index":3781,"title":{},"name":{},"text":{"38":{}},"component":{}}],["stop.wait",{"_index":3791,"title":{},"name":{},"text":{"38":{}},"component":{}}],["stop.wait=15",{"_index":3792,"title":{},"name":{},"text":{"38":{}},"component":{}}],["stopkey",{"_index":5512,"title":{},"name":{},"text":{"56":{}},"component":{}}],["stopper",{"_index":3823,"title":{},"name":{},"text":{"38":{}},"component":{}}],["stopport",{"_index":5511,"title":{},"name":{},"text":{"56":{}},"component":{}}],["stopwait",{"_index":5517,"title":{},"name":{},"text":{"56":{}},"component":{}}],["storag",{"_index":3364,"title":{},"name":{},"text":{"37":{},"49":{},"61":{},"62":{},"66":{}},"component":{}}],["store",{"_index":1365,"title":{},"name":{},"text":{"19":{},"20":{},"23":{},"25":{},"26":{},"30":{},"33":{},"37":{},"38":{},"39":{},"40":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"53":{},"56":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["store(bytebuff",{"_index":6365,"title":{},"name":{},"text":{"61":{}},"component":{}}],["store.setgraceperiodsec(3600",{"_index":6701,"title":{},"name":{},"text":{"66":{}},"component":{}}],["store.setsaveperiodsec(0",{"_index":6702,"title":{},"name":{},"text":{"66":{}},"component":{}}],["store.setstoredir(new",{"_index":6700,"title":{},"name":{},"text":{"66":{}},"component":{}}],["storedir",{"_index":6686,"title":{},"name":{},"text":{"66":{}},"component":{}}],["storefactori",{"_index":6688,"title":{},"name":{},"text":{"66":{}},"component":{}}],["storefactory.setbackoffms(2000",{"_index":6833,"title":{},"name":{},"text":{"66":{}},"component":{}}],["storefactory.setgraceperiodsec(3600",{"_index":6691,"title":{},"name":{},"text":{"66":{}},"component":{}}],["storefactory.setmaxretries(10",{"_index":6834,"title":{},"name":{},"text":{"66":{}},"component":{}}],["storefactory.setsaveperiodsec(0",{"_index":6692,"title":{},"name":{},"text":{"66":{}},"component":{}}],["storefactory.setstoredir(new",{"_index":6689,"title":{},"name":{},"text":{"66":{}},"component":{}}],["storetyp",{"_index":2138,"title":{},"name":{},"text":{"30":{}},"component":{}}],["straight",{"_index":5415,"title":{},"name":{},"text":{"56":{}},"component":{}}],["straightforward",{"_index":4027,"title":{},"name":{},"text":{"42":{}},"component":{}}],["strategi",{"_index":2121,"title":{"47-1":{},"47-5":{}},"name":{},"text":{"28":{},"37":{},"47":{},"66":{}},"component":{}}],["stream",{"_index":2486,"title":{"53-12":{},"53-14":{},"53-18":{}},"name":{},"text":{"33":{},"34":{},"48":{},"49":{},"50":{},"53":{},"61":{},"62":{},"63":{},"64":{}},"component":{}}],["stream.client.listen",{"_index":5066,"title":{},"name":{},"text":{"50":{}},"component":{}}],["stream.data",{"_index":5005,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["stream.data(new",{"_index":4999,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["stream.demand",{"_index":5015,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["stream.headers(new",{"_index":6433,"title":{},"name":{},"text":{"62":{}},"component":{}}],["stream.listen",{"_index":4985,"title":{},"name":{},"text":{"49":{},"62":{},"63":{}},"component":{}}],["stream.listener.ondataavailable(stream",{"_index":5028,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["stream.push(promisefram",{"_index":6458,"title":{},"name":{},"text":{"62":{}},"component":{}}],["stream.readdata",{"_index":5018,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["stream.reset(http3errorcode.request_cancelled_error.cod",{"_index":5076,"title":{},"name":{},"text":{"50":{}},"component":{}}],["stream.reset(http3errorcode.request_rejected_error.cod",{"_index":6484,"title":{},"name":{},"text":{"63":{}},"component":{}}],["stream.reset(new",{"_index":5035,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["stream.respond(new",{"_index":6481,"title":{},"name":{},"text":{"63":{}},"component":{}}],["stream.server.listen",{"_index":6474,"title":{},"name":{},"text":{"63":{}},"component":{}}],["stream_1",{"_index":4948,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["stream_1'",{"_index":4949,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["stream_2",{"_index":4950,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["stream_2'",{"_index":4951,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["stream_3",{"_index":4952,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["streamcf",{"_index":4990,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["streamcf.get",{"_index":4991,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["streamingannotatedendpoint",{"_index":5247,"title":{},"name":{},"text":{"53":{}},"component":{}}],["streamsendnonblockingendpoint",{"_index":5282,"title":{},"name":{},"text":{"53":{}},"component":{}}],["strength",{"_index":2150,"title":{},"name":{},"text":{"30":{}},"component":{}}],["stress",{"_index":909,"title":{},"name":{},"text":{"8":{}},"component":{}}],["strict",{"_index":2006,"title":{},"name":{},"text":{"26":{},"33":{},"61":{}},"component":{}}],["stricter",{"_index":3140,"title":{},"name":{},"text":{"34":{}},"component":{}}],["strictli",{"_index":310,"title":{},"name":{},"text":{"2":{},"7":{},"59":{}},"component":{}}],["strictquoteescap",{"_index":2106,"title":{},"name":{},"text":{"28":{}},"component":{}}],["string",{"_index":1861,"title":{},"name":{},"text":{"25":{},"28":{},"31":{},"33":{},"36":{},"37":{},"40":{},"41":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["stringrequestcont",{"_index":4622,"title":{},"name":{},"text":{"48":{}},"component":{}}],["stringrequestcontent(\"text/plain",{"_index":4626,"title":{},"name":{},"text":{"48":{}},"component":{}}],["stringrespons",{"_index":4625,"title":{},"name":{},"text":{"48":{}},"component":{}}],["strive",{"_index":2683,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["strong",{"_index":3788,"title":{},"name":{},"text":{"38":{},"56":{}},"component":{}}],["strongli",{"_index":4769,"title":{},"name":{},"text":{"48":{},"53":{},"66":{}},"component":{}}],["structur",{"_index":624,"title":{"7-6":{}},"name":{},"text":{"20":{},"23":{},"31":{},"36":{},"38":{},"41":{},"43":{},"55":{},"61":{}},"component":{}}],["stub",{"_index":1851,"title":{},"name":{},"text":{"25":{},"33":{},"45":{}},"component":{}}],["stuck",{"_index":4024,"title":{},"name":{},"text":{"41":{},"72":{}},"component":{}}],["style",{"_index":625,"title":{"7-7":{}},"name":{},"text":{"13":{},"48":{},"56":{},"57":{}},"component":{}}],["stylesheet",{"_index":6373,"title":{},"name":{},"text":{"61":{}},"component":{}}],["stylist",{"_index":748,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sub",{"_index":1576,"title":{},"name":{},"text":{"20":{},"38":{},"48":{},"53":{},"56":{}},"component":{}}],["sub)network",{"_index":3210,"title":{},"name":{},"text":{"34":{}},"component":{}}],["subclass",{"_index":1422,"title":{},"name":{},"text":{"19":{},"31":{},"32":{},"42":{},"44":{},"45":{},"48":{},"61":{},"66":{}},"component":{}}],["subdirectori",{"_index":692,"title":{},"name":{},"text":{"7":{},"19":{},"32":{},"38":{}},"component":{}}],["subdomain",{"_index":1418,"title":{},"name":{},"text":{"19":{},"30":{},"33":{},"48":{},"61":{}},"component":{}}],["subject",{"_index":2155,"title":{},"name":{},"text":{"30":{},"37":{},"41":{},"61":{}},"component":{}}],["submiss",{"_index":6304,"title":{},"name":{},"text":{"61":{}},"component":{}}],["submit",{"_index":982,"title":{"10":{}},"name":{},"text":{"9":{},"44":{},"47":{},"61":{},"67":{}},"component":{}}],["subpackag",{"_index":2028,"title":{"41-8":{}},"name":{},"text":{"28":{}},"component":{}}],["subprotocol",{"_index":6897,"title":{},"name":{},"text":{"67":{}},"component":{}}],["subprotocols(list.of(\"mi",{"_index":6875,"title":{},"name":{},"text":{"67":{}},"component":{}}],["subprotocols.contains(\"mi",{"_index":6899,"title":{},"name":{},"text":{"67":{}},"component":{}}],["subsect",{"_index":848,"title":{},"name":{},"text":{"7":{}},"component":{}}],["subsequ",{"_index":3437,"title":{},"name":{},"text":{"37":{},"44":{},"47":{},"48":{},"61":{},"66":{}},"component":{}}],["substanti",{"_index":906,"title":{},"name":{},"text":{"8":{}},"component":{}}],["substitution(",{"_index":794,"title":{},"name":{},"text":{"7":{}},"component":{}}],["subsystem",{"_index":4004,"title":{},"name":{},"text":{"41":{}},"component":{}}],["subtl",{"_index":6391,"title":{},"name":{},"text":{"61":{}},"component":{}}],["subtleti",{"_index":6619,"title":{},"name":{},"text":{"66":{}},"component":{}}],["subtre",{"_index":4108,"title":{},"name":{},"text":{"43":{},"56":{}},"component":{}}],["succe",{"_index":4332,"title":{},"name":{},"text":{"44":{},"48":{},"49":{},"52":{},"53":{},"61":{}},"component":{}}],["succeed",{"_index":4207,"title":{},"name":{},"text":{"44":{},"49":{},"50":{},"53":{},"61":{}},"component":{}}],["success",{"_index":696,"title":{},"name":{},"text":{"7":{},"23":{},"37":{},"44":{},"48":{},"52":{},"61":{}},"component":{}}],["successfulli",{"_index":889,"title":{},"name":{},"text":{"8":{},"34":{},"41":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"65":{}},"component":{}}],["successor",{"_index":2928,"title":{},"name":{},"text":{"34":{}},"component":{}}],["such",{"_index":653,"title":{},"name":{},"text":{"7":{},"10":{},"16":{},"18":{},"19":{},"20":{},"25":{},"26":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"68":{}},"component":{}}],["sudden",{"_index":4471,"title":{},"name":{},"text":{"47":{}},"component":{}}],["suffer",{"_index":4447,"title":{},"name":{},"text":{"47":{}},"component":{}}],["suffici",{"_index":1662,"title":{},"name":{},"text":{"23":{},"36":{},"37":{},"53":{},"66":{}},"component":{}}],["suggest",{"_index":559,"title":{},"name":{},"text":{"4":{},"6":{},"41":{},"66":{}},"component":{}}],["suit",{"_index":615,"title":{},"name":{},"text":{"6":{},"23":{},"31":{},"34":{},"38":{},"48":{},"55":{},"61":{}},"component":{}}],["suitabl",{"_index":1501,"title":{},"name":{},"text":{"20":{},"23":{},"26":{},"34":{},"37":{},"48":{},"56":{},"66":{}},"component":{}}],["summarili",{"_index":3412,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["sun.nio.ch.serversocketchannelimpl[/[0:0:0:0:0:0:0:0]:8080",{"_index":3962,"title":{},"name":{},"text":{"41":{}},"component":{}}],["sun.text.resources.cldr.ext",{"_index":3978,"title":{},"name":{},"text":{"41":{}},"component":{}}],["sun.util.resources.cldr.provid",{"_index":3980,"title":{},"name":{},"text":{"41":{}},"component":{}}],["sun.util.resources.provid",{"_index":3979,"title":{},"name":{},"text":{"41":{}},"component":{}}],["super",{"_index":3836,"title":{},"name":{},"text":{"39":{},"45":{},"52":{},"61":{}},"component":{}}],["super(\"jsonhttp",{"_index":6505,"title":{},"name":{},"text":{"65":{}},"component":{}}],["super(endp",{"_index":4227,"title":{},"name":{},"text":{"44":{}},"component":{}}],["super(endpoint",{"_index":4180,"title":{},"name":{},"text":{"44":{},"52":{},"65":{}},"component":{}}],["super(handl",{"_index":6284,"title":{},"name":{},"text":{"61":{}},"component":{}}],["super(servic",{"_index":4415,"title":{},"name":{},"text":{"45":{}},"component":{}}],["super.add(uri",{"_index":4801,"title":{},"name":{},"text":{"48":{}},"component":{}}],["super.dostart",{"_index":4095,"title":{},"name":{},"text":{"43":{}},"component":{}}],["super.dostop",{"_index":4098,"title":{},"name":{},"text":{"43":{}},"component":{}}],["super.failed(x",{"_index":4339,"title":{},"name":{},"text":{"44":{}},"component":{}}],["super.handle(newrequest",{"_index":6294,"title":{},"name":{},"text":{"61":{}},"component":{}}],["super.handle(request",{"_index":6295,"title":{},"name":{},"text":{"61":{}},"component":{}}],["super.onopen",{"_index":4181,"title":{},"name":{},"text":{"44":{},"52":{},"65":{}},"component":{}}],["super.succeed",{"_index":4338,"title":{},"name":{},"text":{"44":{}},"component":{}}],["suppli",{"_index":3489,"title":{},"name":{},"text":{"37":{},"56":{},"66":{}},"component":{}}],["supplier",{"_index":5749,"title":{},"name":{},"text":{"57":{}},"component":{}}],["support",{"_index":76,"title":{"4":{},"45":{},"4-1":{},"4-3":{},"6-5":{},"25-1":{},"25-2":{},"36-12":{},"37-44":{},"45-1":{},"48-18":{},"48-20":{},"48-21":{},"48-22":{},"48-23":{},"48-24":{},"52-2":{},"52-3":{},"56-2":{},"61-50":{}},"name":{"4":{}},"text":{"1":{},"2":{},"4":{},"6":{},"7":{},"11":{},"12":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{},"28":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["supportedpackag",{"_index":5452,"title":{},"name":{},"text":{"56":{}},"component":{}}],["suppos",{"_index":2002,"title":{},"name":{},"text":{"26":{},"56":{},"62":{},"63":{},"65":{},"67":{}},"component":{}}],["suppresssmap",{"_index":2109,"title":{},"name":{},"text":{"28":{}},"component":{}}],["suppresswarnings(\"innerclassmaybestat",{"_index":4329,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sure",{"_index":602,"title":{},"name":{},"text":{"6":{},"9":{},"11":{},"20":{},"31":{},"37":{},"38":{},"41":{},"47":{},"48":{},"53":{},"67":{}},"component":{}}],["suspend",{"_index":4220,"title":{},"name":{},"text":{"44":{},"61":{}},"component":{}}],["suspendtoken",{"_index":5786,"title":{},"name":{},"text":{"57":{}},"component":{}}],["sustain",{"_index":2348,"title":{},"name":{},"text":{"33":{}},"component":{}}],["svc",{"_index":6023,"title":{},"name":{},"text":{"61":{}},"component":{}}],["svn",{"_index":5321,"title":{},"name":{},"text":{"54":{}},"component":{}}],["sweep",{"_index":3403,"title":{},"name":{},"text":{"37":{},"56":{}},"component":{}}],["switch",{"_index":3032,"title":{},"name":{},"text":{"34":{},"44":{},"53":{},"61":{}},"component":{}}],["symbol",{"_index":3297,"title":{},"name":{},"text":{"36":{}},"component":{}}],["sync",{"_index":3397,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["synchron",{"_index":4210,"title":{},"name":{},"text":{"44":{},"48":{},"51":{},"53":{},"61":{}},"component":{}}],["syntax",{"_index":1689,"title":{"42-1":{}},"name":{},"text":{"23":{},"30":{},"32":{},"33":{},"42":{},"56":{},"67":{}},"component":{}}],["synth",{"_index":5482,"title":{},"name":{},"text":{"56":{}},"component":{}}],["synthes",{"_index":3376,"title":{},"name":{},"text":{"37":{},"56":{},"61":{},"66":{}},"component":{}}],["synthet",{"_index":5519,"title":{},"name":{},"text":{"56":{}},"component":{}}],["sysop",{"_index":641,"title":{},"name":{},"text":{"7":{},"14":{},"15":{}},"component":{}}],["sysops/devop",{"_index":1145,"title":{},"name":{},"text":{"14":{}},"component":{}}],["system",{"_index":912,"title":{"37-12":{},"56-28":{},"56-29":{},"56-30":{}},"name":{},"text":{"8":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"28":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"52":{},"54":{},"56":{},"59":{},"61":{},"65":{},"66":{},"71":{}},"component":{}}],["system.err",{"_index":2376,"title":{},"name":{},"text":{"33":{},"36":{},"38":{},"71":{}},"component":{}}],["system.getenv",{"_index":4067,"title":{},"name":{},"text":{"42":{}},"component":{}}],["system.getlogger(\"app\").log(info",{"_index":5152,"title":{},"name":{},"text":{"52":{}},"component":{}}],["system.getlogger(\"connection\").log(info",{"_index":5122,"title":{},"name":{},"text":{"52":{}},"component":{}}],["system.getlogger(\"connection.threshold\").log(system.logger.level.warn",{"_index":4198,"title":{},"name":{},"text":{"44":{}},"component":{}}],["system.getlogger(\"endpoint\").log(info",{"_index":5103,"title":{},"name":{},"text":{"52":{}},"component":{}}],["system.getlogger(\"forwarder\").log(info",{"_index":4704,"title":{},"name":{},"text":{"48":{}},"component":{}}],["system.getlogger(\"http2\").log(info",{"_index":5012,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["system.getlogger(\"http3\").log(info",{"_index":5071,"title":{},"name":{},"text":{"50":{},"63":{}},"component":{}}],["system.getlogger(\"server\").log(info",{"_index":4118,"title":{},"name":{},"text":{"43":{}},"component":{}}],["system.getlogger(\"sink\").log(info",{"_index":4325,"title":{},"name":{},"text":{"44":{}},"component":{}}],["system.getlogger(\"tls\").log(error",{"_index":4780,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["system.getlogger(\"tls\").log(info",{"_index":4777,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["system.getlogger(\"tracktime\").log(info",{"_index":6165,"title":{},"name":{},"text":{"61":{}},"component":{}}],["system.getlogger(\"websocket\").log(system.logger.level.warn",{"_index":5271,"title":{},"name":{},"text":{"53":{}},"component":{}}],["system.getlogger(\"ws.message\").log(info",{"_index":5206,"title":{},"name":{},"text":{"53":{}},"component":{}}],["system.getproperti",{"_index":4065,"title":{},"name":{},"text":{"42":{}},"component":{}}],["system.out",{"_index":2375,"title":{},"name":{},"text":{"33":{},"36":{}},"component":{}}],["system.setproperty(\"javax.net.ssl.truststor",{"_index":4382,"title":{},"name":{},"text":{"45":{}},"component":{}}],["system.setproperty(\"javax.net.ssl.truststorepassword",{"_index":4384,"title":{},"name":{},"text":{"45":{}},"component":{}}],["systemproperti",{"_index":4025,"title":{"42-13":{}},"name":{},"text":{"56":{}},"component":{}}],["systempropertiesfil",{"_index":5454,"title":{},"name":{},"text":{"56":{}},"component":{}}],["t",{"_index":1125,"title":{},"name":{},"text":{"13":{},"48":{}},"component":{}}],["t.tostr",{"_index":1134,"title":{},"name":{},"text":{"13":{}},"component":{}}],["tab",{"_index":1074,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["tabl",{"_index":1703,"title":{},"name":{},"text":{"23":{},"28":{},"33":{},"34":{},"37":{},"61":{},"66":{}},"component":{}}],["table:jettysess",{"_index":6725,"title":{},"name":{},"text":{"66":{}},"component":{}}],["tackl",{"_index":616,"title":{},"name":{},"text":{"6":{}},"component":{}}],["tag",{"_index":26,"title":{"29":{},"32-6":{}},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"8":{},"18":{},"24":{},"28":{},"29":{},"31":{},"32":{},"33":{},"38":{},"48":{},"54":{}},"component":{}}],["taglib",{"_index":2014,"title":{"27":{}},"name":{},"text":{},"component":{}}],["taglibs[^/]*\\.jar|.*jstl[^/]*\\.jar",{"_index":5339,"title":{},"name":{},"text":{"54":{}},"component":{}}],["take",{"_index":667,"title":{},"name":{},"text":{"7":{},"8":{},"17":{},"20":{},"26":{},"28":{},"33":{},"37":{},"41":{},"43":{},"44":{},"47":{},"48":{},"49":{},"50":{},"53":{},"54":{},"56":{},"61":{},"65":{},"66":{}},"component":{}}],["taken",{"_index":876,"title":{},"name":{},"text":{"7":{},"10":{},"17":{},"33":{},"47":{},"48":{},"56":{}},"component":{}}],["talent",{"_index":9,"title":{},"name":{},"text":{"1":{}},"component":{}}],["talk",{"_index":502,"title":{"4-2":{}},"name":{},"text":{"34":{},"37":{}},"component":{}}],["tar.gz",{"_index":960,"title":{},"name":{},"text":{"8":{}},"component":{}}],["target",{"_index":579,"title":{},"name":{},"text":{"6":{},"7":{},"11":{},"14":{},"15":{},"16":{},"19":{},"28":{},"32":{},"42":{},"54":{},"55":{},"56":{},"61":{}},"component":{}}],["target/effect",{"_index":5524,"title":{},"name":{},"text":{"56":{}},"component":{}}],["target/foo",{"_index":5353,"title":{},"name":{},"text":{"54":{}},"component":{}}],["target/foo/web",{"_index":5357,"title":{},"name":{},"text":{"54":{}},"component":{}}],["target/fork",{"_index":5440,"title":{},"name":{},"text":{"56":{}},"component":{}}],["target/html",{"_index":742,"title":{},"name":{},"text":{"7":{}},"component":{}}],["target/jetti",{"_index":5444,"title":{},"name":{},"text":{"56":{}},"component":{}}],["target/web.xml",{"_index":5356,"title":{},"name":{},"text":{"54":{}},"component":{}}],["target/webapp",{"_index":5481,"title":{},"name":{},"text":{"56":{}},"component":{}}],["targetvers",{"_index":5337,"title":{},"name":{},"text":{"54":{}},"component":{}}],["task",{"_index":606,"title":{},"name":{},"text":{"6":{},"33":{},"36":{},"47":{},"61":{}},"component":{}}],["tcp",{"_index":2478,"title":{"44-6":{}},"name":{},"text":{"33":{},"34":{},"38":{},"43":{},"44":{},"48":{},"49":{},"52":{},"53":{},"61":{},"62":{}},"component":{}}],["tcp/ip",{"_index":3143,"title":{},"name":{},"text":{"34":{},"61":{},"65":{}},"component":{}}],["tcp_nodelay",{"_index":2453,"title":{},"name":{},"text":{"33":{}},"component":{}}],["team",{"_index":603,"title":{},"name":{},"text":{"6":{}},"component":{}}],["technic",{"_index":586,"title":{},"name":{},"text":{"6":{},"7":{},"69":{}},"component":{}}],["technolog",{"_index":85,"title":{},"name":{},"text":{"1":{},"21":{},"23":{},"37":{},"66":{}},"component":{}}],["tell",{"_index":792,"title":{},"name":{},"text":{"7":{},"8":{},"27":{},"41":{},"48":{},"49":{},"50":{},"56":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["telnet",{"_index":5135,"title":{},"name":{},"text":{"52":{}},"component":{}}],["telnetconnect",{"_index":5136,"title":{},"name":{},"text":{"52":{}},"component":{}}],["telnetconnection(endpoint",{"_index":5138,"title":{},"name":{},"text":{"52":{}},"component":{}}],["telnetconnection)sslconnection.getsslendpoint().getconnect",{"_index":5161,"title":{},"name":{},"text":{"52":{}},"component":{}}],["tempdirectori",{"_index":5478,"title":{},"name":{},"text":{"56":{}},"component":{}}],["templat",{"_index":1522,"title":{"32-15":{}},"name":{},"text":{"20":{},"23":{},"28":{},"31":{},"33":{},"34":{},"36":{},"38":{},"67":{}},"component":{}}],["template|/ws/chat/{room",{"_index":6917,"title":{},"name":{},"text":{"67":{}},"component":{}}],["temporari",{"_index":1476,"title":{},"name":{},"text":{"19":{},"33":{},"35":{},"38":{},"44":{},"61":{}},"component":{}}],["temporarili",{"_index":3862,"title":{},"name":{},"text":{"41":{},"43":{},"44":{}},"component":{}}],["ten",{"_index":5467,"title":{},"name":{},"text":{"56":{}},"component":{}}],["tenant",{"_index":3590,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["tend",{"_index":2479,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["term",{"_index":834,"title":{},"name":{},"text":{"7":{},"20":{},"38":{}},"component":{}}],["termin",{"_index":1491,"title":{},"name":{},"text":{"20":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"48":{},"53":{},"56":{},"61":{}},"component":{}}],["terminolog",{"_index":3328,"title":{"37-2":{}},"name":{},"text":{"37":{},"67":{}},"component":{}}],["terribl",{"_index":6176,"title":{},"name":{},"text":{"61":{}},"component":{}}],["test",{"_index":887,"title":{"8-5":{},"33-31":{}},"name":{},"text":{"8":{},"23":{},"24":{},"25":{},"26":{},"33":{},"34":{},"37":{},"48":{},"55":{},"56":{},"66":{},"67":{},"71":{}},"component":{}}],["testclass",{"_index":5526,"title":{},"name":{},"text":{"56":{}},"component":{}}],["testclassesdirectori",{"_index":5491,"title":{},"name":{},"text":{"56":{}},"component":{}}],["tester",{"_index":12,"title":{},"name":{},"text":{"1":{}},"component":{}}],["text",{"_index":861,"title":{"34-1":{},"34-4":{},"34-6":{},"61-15":{},"61-17":{}},"name":{},"text":{"7":{},"18":{},"20":{},"22":{},"23":{},"25":{},"28":{},"31":{},"32":{},"33":{},"34":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"52":{},"53":{},"61":{},"64":{},"65":{},"67":{}},"component":{}}],["text/html",{"_index":6279,"title":{},"name":{},"text":{"61":{}},"component":{}}],["text/plain",{"_index":4575,"title":{},"name":{},"text":{"48":{},"57":{},"61":{}},"component":{}}],["text/plain;charset=ascii",{"_index":6501,"title":{},"name":{},"text":{"65":{}},"component":{}}],["textual",{"_index":4884,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["tgz",{"_index":172,"title":{},"name":{},"text":{"2":{}},"component":{}}],["thank",{"_index":74,"title":{},"name":{},"text":{"1":{},"25":{},"39":{},"50":{},"63":{}},"component":{}}],["that’",{"_index":2545,"title":{},"name":{},"text":{"33":{},"42":{}},"component":{}}],["themselv",{"_index":6041,"title":{},"name":{},"text":{"61":{}},"component":{}}],["thencompose(",{"_index":6435,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["thencompose(bytebuff",{"_index":6364,"title":{},"name":{},"text":{"61":{}},"component":{}}],["thencompose(ignor",{"_index":6360,"title":{},"name":{},"text":{"61":{}},"component":{}}],["thencompose(push",{"_index":6463,"title":{},"name":{},"text":{"62":{}},"component":{}}],["thencompose(pushedstream",{"_index":6459,"title":{},"name":{},"text":{"62":{}},"component":{}}],["therefor",{"_index":1267,"title":{},"name":{},"text":{"18":{},"19":{},"25":{},"34":{},"36":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"59":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["there’",{"_index":48,"title":{},"name":{},"text":{"1":{}},"component":{}}],["they’r",{"_index":611,"title":{},"name":{},"text":{"6":{}},"component":{}}],["thing",{"_index":880,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"33":{},"39":{},"48":{},"49":{},"50":{},"66":{},"71":{}},"component":{}}],["think",{"_index":1307,"title":{},"name":{},"text":{"18":{},"47":{},"48":{}},"component":{}}],["third",{"_index":953,"title":{},"name":{},"text":{"8":{},"12":{},"16":{},"17":{},"33":{},"34":{},"37":{},"38":{},"43":{},"48":{},"51":{},"53":{},"61":{},"64":{}},"component":{}}],["thirdpartyrespons",{"_index":4747,"title":{},"name":{},"text":{"48":{}},"component":{}}],["this.callback",{"_index":4331,"title":{},"name":{},"text":{"44":{}},"component":{}}],["this.consum",{"_index":5146,"title":{},"name":{},"text":{"52":{}},"component":{}}],["this.en",{"_index":4401,"title":{},"name":{},"text":{"45":{}},"component":{}}],["this.sess",{"_index":5209,"title":{},"name":{},"text":{"53":{}},"component":{}}],["this.sink",{"_index":4330,"title":{},"name":{},"text":{"44":{}},"component":{}}],["this.sourc",{"_index":4296,"title":{},"name":{},"text":{"44":{}},"component":{}}],["this.threshold",{"_index":4194,"title":{},"name":{},"text":{"44":{}},"component":{}}],["thorough",{"_index":3460,"title":{},"name":{},"text":{"37":{}},"component":{}}],["those",{"_index":1309,"title":{},"name":{},"text":{"18":{},"27":{},"31":{},"36":{},"37":{},"38":{},"39":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["thought",{"_index":4516,"title":{},"name":{},"text":{"48":{}},"component":{}}],["thousand",{"_index":2474,"title":{},"name":{},"text":{"33":{},"41":{}},"component":{}}],["thrash",{"_index":4493,"title":{},"name":{},"text":{"47":{}},"component":{}}],["thread",{"_index":900,"title":{"47":{},"73":{},"17-4":{},"36-11":{},"36-12":{},"47-6":{},"47-7":{},"47-9":{}},"name":{"47":{},"73":{}},"text":{"8":{},"17":{},"21":{},"22":{},"33":{},"36":{},"41":{},"43":{},"44":{},"46":{},"47":{},"48":{},"52":{},"53":{},"61":{},"72":{}},"component":{}}],["threadlessli",{"_index":5031,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["threadpool",{"_index":1273,"title":{"33-32":{},"33-33":{},"33-34":{},"41-3":{}},"name":{},"text":{"18":{},"20":{},"32":{},"33":{},"34":{},"36":{},"38":{},"41":{},"43":{},"47":{},"52":{},"56":{},"61":{}},"component":{}}],["threadpool.ini",{"_index":3316,"title":{},"name":{},"text":{"36":{}},"component":{}}],["threadpool.setname(\"cli",{"_index":5095,"title":{},"name":{},"text":{"52":{}},"component":{}}],["threadpool.setname(\"serv",{"_index":5902,"title":{},"name":{},"text":{"61":{}},"component":{}}],["threadpool.setvirtualthreadsexecutor(executors.newvirtualthreadpertaskexecutor",{"_index":4494,"title":{},"name":{},"text":{"47":{}},"component":{}}],["threadpool.xml",{"_index":2278,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["three",{"_index":638,"title":{},"name":{},"text":{"7":{},"18":{},"26":{},"34":{},"38":{},"56":{},"66":{}},"component":{}}],["threshold",{"_index":4185,"title":{},"name":{},"text":{"44":{}},"component":{}}],["thresholdconnectionlisten",{"_index":4191,"title":{},"name":{},"text":{"44":{}},"component":{}}],["thresholdconnectionlistener(int",{"_index":4193,"title":{},"name":{},"text":{"44":{}},"component":{}}],["throttl",{"_index":6436,"title":{},"name":{},"text":{"62":{},"63":{}},"component":{}}],["through",{"_index":140,"title":{},"name":{},"text":{"1":{},"4":{},"6":{},"7":{},"16":{},"18":{},"25":{},"28":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"44":{},"45":{},"56":{},"59":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["throughout",{"_index":1064,"title":{},"name":{},"text":{"13":{},"66":{}},"component":{}}],["throw",{"_index":1093,"title":{},"name":{},"text":{"13":{},"43":{},"44":{},"48":{},"53":{},"55":{},"57":{},"61":{},"65":{},"67":{}},"component":{}}],["throwabl",{"_index":1124,"title":{},"name":{},"text":{"13":{},"43":{},"44":{},"48":{},"50":{},"53":{},"57":{},"61":{},"65":{}},"component":{}}],["throwable::printstacktrac",{"_index":5223,"title":{},"name":{},"text":{"53":{}},"component":{}}],["thrown",{"_index":4047,"title":{},"name":{},"text":{"42":{},"44":{},"48":{},"49":{},"50":{},"53":{},"61":{},"66":{}},"component":{}}],["thu",{"_index":1970,"title":{},"name":{},"text":{"26":{},"32":{},"36":{},"37":{},"44":{},"48":{},"59":{},"61":{},"66":{}},"component":{}}],["thumb",{"_index":530,"title":{},"name":{},"text":{"4":{},"37":{},"52":{},"61":{}},"component":{}}],["ti",{"_index":2005,"title":{},"name":{},"text":{"26":{},"43":{}},"component":{}}],["tid=54",{"_index":3876,"title":{},"name":{},"text":{"41":{}},"component":{}}],["tid=55",{"_index":3884,"title":{},"name":{},"text":{"41":{}},"component":{}}],["tid=56",{"_index":3887,"title":{},"name":{},"text":{"41":{}},"component":{}}],["tid=57",{"_index":3880,"title":{},"name":{},"text":{"41":{}},"component":{}}],["tidi",{"_index":5557,"title":{},"name":{},"text":{"56":{}},"component":{}}],["tight",{"_index":120,"title":{},"name":{},"text":{"1":{},"33":{}},"component":{}}],["time",{"_index":698,"title":{"10-5":{},"41-7":{}},"name":{},"text":{"7":{},"8":{},"10":{},"17":{},"18":{},"19":{},"23":{},"25":{},"26":{},"28":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"59":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["timed_wait",{"_index":3879,"title":{},"name":{},"text":{"41":{}},"component":{}}],["timeout",{"_index":2440,"title":{},"name":{},"text":{"33":{},"34":{},"37":{},"44":{},"48":{},"49":{},"50":{},"52":{},"53":{},"61":{},"62":{},"63":{},"66":{}},"component":{}}],["timeout(3",{"_index":4590,"title":{},"name":{},"text":{"48":{}},"component":{}}],["timeout(5",{"_index":4578,"title":{},"name":{},"text":{"48":{}},"component":{}}],["timestamp",{"_index":2386,"title":{},"name":{},"text":{"33":{},"36":{}},"component":{}}],["timeunit.second",{"_index":4579,"title":{},"name":{},"text":{"48":{}},"component":{}}],["timezon",{"_index":2379,"title":{},"name":{},"text":{"33":{},"36":{}},"component":{}}],["tip",{"_index":864,"title":{},"name":{},"text":{"7":{}},"component":{}}],["titl",{"_index":5447,"title":{},"name":{},"text":{"56":{}},"component":{}}],["tl",{"_index":1832,"title":{"25-5":{},"33-28":{},"45-4":{},"48-14":{},"48-16":{},"48-17":{}},"name":{},"text":{"25":{},"30":{},"31":{},"33":{},"34":{},"41":{},"44":{},"45":{},"46":{},"48":{},"52":{},"61":{},"65":{}},"component":{}}],["tld",{"_index":2017,"title":{},"name":{},"text":{"27":{},"54":{},"56":{}},"component":{}}],["tldjarnamepattern",{"_index":5338,"title":{},"name":{},"text":{"54":{}},"component":{}}],["tls(ssl",{"_index":2532,"title":{},"name":{},"text":{"33":{}},"component":{}}],["tls+http/1.1",{"_index":3076,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tls+http/2",{"_index":3077,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tls+websocket",{"_index":3080,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tls_rsa_",{"_index":3102,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tlsdetector",{"_index":6494,"title":{},"name":{},"text":{"65":{}},"component":{}}],["tlsv1.0",{"_index":3097,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tlsv1.1",{"_index":3098,"title":{},"name":{},"text":{"34":{},"52":{}},"component":{}}],["tlsv1.2",{"_index":3099,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tlsv1.3",{"_index":3100,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tmp",{"_index":6031,"title":{},"name":{},"text":{"61":{}},"component":{}}],["tmp/jetty.sock",{"_index":6486,"title":{},"name":{},"text":{"65":{}},"component":{}}],["tmp/jvm_cmd_line.txt",{"_index":3749,"title":{},"name":{},"text":{"38":{}},"component":{}}],["to",{"_index":1638,"title":{"22":{}},"name":{},"text":{},"component":{}}],["todo",{"_index":672,"title":{},"name":{},"text":{"7":{},"19":{},"33":{},"44":{},"48":{},"60":{},"61":{},"70":{},"73":{}},"component":{}}],["togeth",{"_index":1241,"title":{},"name":{},"text":{"17":{},"18":{},"26":{},"31":{},"32":{},"37":{},"38":{},"43":{},"61":{},"65":{},"66":{}},"component":{}}],["token",{"_index":5184,"title":{},"name":{},"text":{"53":{}},"component":{}}],["toler",{"_index":4450,"title":{},"name":{},"text":{"47":{}},"component":{}}],["tom",{"_index":1741,"title":{},"name":{},"text":{"23":{}},"component":{}}],["took",{"_index":3225,"title":{},"name":{},"text":{"35":{},"61":{}},"component":{}}],["tool",{"_index":652,"title":{"40":{},"8-6":{}},"name":{},"text":{"7":{},"23":{},"25":{},"26":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"55":{},"56":{},"61":{},"66":{},"69":{}},"component":{}}],["toolchain",{"_index":620,"title":{"7-2":{}},"name":{},"text":{"11":{}},"component":{}}],["top",{"_index":846,"title":{},"name":{},"text":{"7":{},"45":{},"52":{},"61":{}},"component":{}}],["topic",{"_index":587,"title":{"26-5":{}},"name":{},"text":{"6":{}},"component":{}}],["topmost",{"_index":2856,"title":{},"name":{},"text":{"33":{},"41":{}},"component":{}}],["tostr",{"_index":1143,"title":{},"name":{},"text":{"13":{}},"component":{}}],["total",{"_index":697,"title":{},"name":{},"text":{"7":{},"33":{},"48":{},"61":{},"66":{}},"component":{}}],["totaleventshandl",{"_index":6169,"title":{},"name":{},"text":{"61":{}},"component":{}}],["toward",{"_index":1920,"title":{},"name":{},"text":{"25":{},"34":{}},"component":{}}],["trace",{"_index":1108,"title":{},"name":{},"text":{"13":{},"33":{},"36":{},"41":{},"72":{}},"component":{}}],["track",{"_index":925,"title":{"33-30":{}},"name":{"72":{}},"text":{"8":{},"33":{},"41":{},"49":{},"61":{},"62":{},"72":{}},"component":{}}],["tracker",{"_index":29,"title":{},"name":{},"text":{"1":{},"4":{},"6":{}},"component":{}}],["trademark",{"_index":323,"title":{},"name":{},"text":{"2":{}},"component":{}}],["tradit",{"_index":5418,"title":{},"name":{},"text":{"56":{},"61":{}},"component":{}}],["traffic",{"_index":596,"title":{},"name":{},"text":{"6":{},"19":{},"25":{},"34":{},"44":{},"45":{},"53":{},"61":{},"65":{}},"component":{}}],["trailer",{"_index":2609,"title":{},"name":{},"text":{"33":{},"49":{},"50":{},"57":{},"61":{},"62":{},"63":{}},"component":{}}],["trailers.put(\"cont",{"_index":5774,"title":{},"name":{},"text":{"57":{}},"component":{}}],["trailerssuppli",{"_index":5750,"title":{},"name":{},"text":{"57":{}},"component":{}}],["transact",{"_index":1995,"title":{},"name":{},"text":{"26":{},"37":{},"66":{}},"component":{}}],["transaction",{"_index":3635,"title":{},"name":{},"text":{"37":{}},"component":{}}],["transfer",{"_index":2576,"title":{},"name":{},"text":{"33":{},"38":{}},"component":{}}],["transient",{"_index":3647,"title":{},"name":{},"text":{"38":{},"44":{},"61":{}},"component":{}}],["transit",{"_index":1520,"title":{},"name":{},"text":{"20":{},"25":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"61":{},"67":{}},"component":{}}],["translat",{"_index":6344,"title":{},"name":{},"text":{"61":{}},"component":{}}],["transmit",{"_index":6594,"title":{},"name":{},"text":{"66":{}},"component":{}}],["transpar",{"_index":3213,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["transport",{"_index":2755,"title":{"48-12":{},"48-25":{},"48-26":{},"48-27":{},"48-28":{},"48-29":{},"48-30":{},"52-1":{}},"name":{},"text":{"33":{},"34":{},"41":{},"48":{},"49":{},"50":{},"52":{},"53":{},"57":{},"61":{},"63":{}},"component":{}}],["transport(new",{"_index":4735,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["transport(transport",{"_index":4744,"title":{},"name":{},"text":{"48":{}},"component":{}}],["transport.setconnectionpoolfactory(destin",{"_index":4543,"title":{},"name":{},"text":{"48":{}},"component":{}}],["transport.setheadercachesize(16384",{"_index":4897,"title":{},"name":{},"text":{"48":{}},"component":{}}],["transport.setusealpn(tru",{"_index":4901,"title":{},"name":{},"text":{"48":{}},"component":{}}],["transport.tcp_ip",{"_index":5083,"title":{},"name":{},"text":{"52":{}},"component":{}}],["transport.tcpunix",{"_index":5084,"title":{},"name":{},"text":{"52":{}},"component":{}}],["transport.tcpunix(unixdomainpath",{"_index":4736,"title":{},"name":{},"text":{"48":{}},"component":{}}],["treat",{"_index":764,"title":{},"name":{},"text":{"7":{},"44":{},"59":{},"61":{}},"component":{}}],["tree",{"_index":2244,"title":{"68":{}},"name":{},"text":{"31":{},"33":{},"36":{},"41":{},"43":{},"45":{},"46":{},"61":{},"68":{},"72":{}},"component":{}}],["tri",{"_index":785,"title":{},"name":{},"text":{"7":{},"10":{},"20":{},"28":{},"33":{},"34":{},"37":{},"38":{},"39":{},"44":{},"45":{},"48":{},"52":{},"53":{},"57":{},"61":{},"65":{},"66":{},"67":{}},"component":{}}],["triag",{"_index":193,"title":{},"name":{},"text":{"2":{}},"component":{}}],["trial",{"_index":3231,"title":{},"name":{},"text":{"35":{},"47":{}},"component":{}}],["tricki",{"_index":5274,"title":{},"name":{},"text":{"53":{}},"component":{}}],["trigger",{"_index":2092,"title":{},"name":{},"text":{"28":{},"48":{},"49":{},"56":{},"66":{}},"component":{}}],["trim",{"_index":2115,"title":{},"name":{},"text":{"28":{}},"component":{}}],["trimdirectivewhitespac",{"_index":2113,"title":{},"name":{},"text":{"28":{}},"component":{}}],["trimspac",{"_index":2110,"title":{},"name":{},"text":{"28":{}},"component":{}}],["trip",{"_index":5291,"title":{},"name":{},"text":{"53":{}},"component":{}}],["trivial",{"_index":6681,"title":{},"name":{},"text":{"66":{}},"component":{}}],["troubleshoot",{"_index":34,"title":{"41":{},"70":{},"41-10":{}},"name":{},"text":{"1":{},"22":{},"25":{},"33":{},"36":{},"41":{},"43":{},"45":{},"53":{},"61":{},"72":{}},"component":{}}],["troubleshot",{"_index":4009,"title":{},"name":{},"text":{"41":{}},"component":{}}],["true",{"_index":1175,"title":{},"name":{},"text":{"17":{},"23":{},"26":{},"28":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["truli",{"_index":6058,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["truncat",{"_index":5306,"title":{},"name":{},"text":{"53":{}},"component":{}}],["trust",{"_index":1925,"title":{},"name":{},"text":{"25":{},"30":{},"34":{},"45":{},"61":{}},"component":{}}],["trustcacert",{"_index":2182,"title":{},"name":{},"text":{"30":{}},"component":{}}],["truststor",{"_index":1923,"title":{"48-16":{}},"name":{},"text":{"25":{},"33":{},"40":{},"48":{}},"component":{}}],["tryexecutor",{"_index":4458,"title":{},"name":{},"text":{"47":{}},"component":{}}],["tune",{"_index":1877,"title":{},"name":{},"text":{"25":{},"33":{},"37":{},"45":{},"47":{},"61":{}},"component":{}}],["tune.ssl.default",{"_index":3189,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tunnel",{"_index":1831,"title":{"25-3":{},"45-5":{}},"name":{},"text":{"25":{},"34":{},"45":{},"48":{}},"component":{}}],["tupl",{"_index":4520,"title":{},"name":{},"text":{"48":{}},"component":{}}],["turn",{"_index":1272,"title":{},"name":{},"text":{"18":{},"25":{},"35":{},"36":{},"41":{},"44":{},"48":{},"53":{},"56":{}},"component":{}}],["turnaround",{"_index":5899,"title":{},"name":{},"text":{"61":{}},"component":{}}],["tutori",{"_index":5366,"title":{},"name":{},"text":{"55":{}},"component":{}}],["twice",{"_index":1370,"title":{},"name":{},"text":{"19":{}},"component":{}}],["two",{"_index":1028,"title":{},"name":{},"text":{"10":{},"18":{},"20":{},"23":{},"25":{},"26":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"65":{},"66":{},"67":{}},"component":{}}],["two.net",{"_index":3126,"title":{},"name":{},"text":{"34":{}},"component":{}}],["type",{"_index":787,"title":{"42-15":{}},"name":{},"text":{"7":{},"20":{},"23":{},"26":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"53":{},"56":{},"57":{},"61":{},"65":{},"66":{}},"component":{}}],["type=\"int",{"_index":4070,"title":{},"name":{},"text":{"42":{}},"component":{}}],["type=\"integ",{"_index":4071,"title":{},"name":{},"text":{"42":{}},"component":{}}],["type=\"java.lang.integ",{"_index":4072,"title":{},"name":{},"text":{"42":{}},"component":{}}],["type=address",{"_index":3520,"title":{},"name":{},"text":{"37":{}},"component":{}}],["type=uri",{"_index":3523,"title":{},"name":{},"text":{"37":{}},"component":{}}],["typic",{"_index":810,"title":{},"name":{},"text":{"7":{},"18":{},"19":{},"20":{},"25":{},"30":{},"31":{},"32":{},"34":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"61":{},"62":{},"63":{},"64":{},"65":{},"67":{},"68":{}},"component":{}}],["u",{"_index":2549,"title":{},"name":{},"text":{"33":{},"48":{}},"component":{}}],["ubuntu",{"_index":4556,"title":{},"name":{},"text":{"48":{}},"component":{}}],["udp",{"_index":3075,"title":{},"name":{},"text":{"34":{},"44":{},"50":{},"52":{},"61":{},"63":{}},"component":{}}],["ulimit",{"_index":917,"title":{},"name":{},"text":{"8":{}},"component":{}}],["un",{"_index":3637,"title":{},"name":{},"text":{"37":{}},"component":{}}],["unabl",{"_index":6394,"title":{},"name":{},"text":{"61":{},"66":{}},"component":{}}],["unaccept",{"_index":4242,"title":{},"name":{},"text":{"44":{}},"component":{}}],["unassembl",{"_index":5334,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["unauthent",{"_index":1722,"title":{},"name":{},"text":{"23":{}},"component":{}}],["unauthor",{"_index":2604,"title":{},"name":{},"text":{"33":{}},"component":{}}],["unbound",{"_index":2363,"title":{},"name":{},"text":{"33":{},"47":{},"53":{}},"component":{}}],["uncertain",{"_index":3217,"title":{},"name":{},"text":{"35":{}},"component":{}}],["unchang",{"_index":1295,"title":{},"name":{},"text":{"18":{},"28":{},"57":{}},"component":{}}],["uncheck",{"_index":4514,"title":{},"name":{},"text":{"48":{},"53":{}},"component":{}}],["uncom",{"_index":1349,"title":{},"name":{},"text":{"19":{},"20":{},"32":{},"33":{},"37":{},"38":{}},"component":{}}],["uncommon",{"_index":2661,"title":{},"name":{},"text":{"33":{}},"component":{}}],["uncompress",{"_index":1475,"title":{},"name":{},"text":{"19":{},"61":{}},"component":{}}],["uncondition",{"_index":2284,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["uncongest",{"_index":4168,"title":{},"name":{},"text":{"44":{}},"component":{}}],["unconnect",{"_index":4147,"title":{},"name":{},"text":{"44":{}},"component":{}}],["undefin",{"_index":3985,"title":{},"name":{},"text":{"41":{},"61":{}},"component":{}}],["undeploy",{"_index":1355,"title":{},"name":{},"text":{"19":{},"33":{}},"component":{}}],["under",{"_index":833,"title":{},"name":{},"text":{"7":{},"23":{},"26":{},"30":{},"32":{},"34":{},"36":{},"38":{},"41":{},"53":{},"67":{}},"component":{}}],["underli",{"_index":1656,"title":{},"name":{},"text":{"23":{},"34":{},"44":{}},"component":{}}],["underscor",{"_index":1078,"title":{},"name":{},"text":{"13":{},"37":{},"66":{}},"component":{}}],["understand",{"_index":752,"title":{},"name":{},"text":{"7":{},"34":{},"35":{},"52":{},"61":{},"66":{},"71":{}},"component":{}}],["understood",{"_index":4883,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["undesir",{"_index":2353,"title":{},"name":{},"text":{"33":{},"37":{}},"component":{}}],["unencrypt",{"_index":6016,"title":{},"name":{},"text":{"61":{}},"component":{}}],["unexpect",{"_index":1136,"title":{},"name":{},"text":{"13":{},"53":{},"61":{}},"component":{}}],["unfortun",{"_index":1847,"title":{},"name":{},"text":{"25":{},"30":{},"45":{},"59":{},"61":{}},"component":{}}],["unilater",{"_index":4944,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{}}],["uniqu",{"_index":849,"title":{},"name":{},"text":{"7":{},"25":{},"26":{},"32":{},"37":{},"42":{},"66":{}},"component":{}}],["unit",{"_index":2599,"title":{},"name":{},"text":{"33":{},"61":{}},"component":{}}],["unit}t",{"_index":2598,"title":{},"name":{},"text":{"33":{}},"component":{}}],["univers",{"_index":5846,"title":{},"name":{},"text":{"59":{}},"component":{}}],["unix",{"_index":1440,"title":{"52-2":{}},"name":{},"text":{"19":{},"34":{},"44":{},"48":{},"52":{},"61":{},"65":{}},"component":{}}],["unix/window",{"_index":1308,"title":{},"name":{},"text":{"18":{}},"component":{}}],["unixdomain",{"_index":5581,"title":{},"name":{},"text":{"57":{}},"component":{}}],["unixdomainpath",{"_index":4716,"title":{},"name":{},"text":{"48":{}},"component":{}}],["unixdomainserverconnector",{"_index":1441,"title":{},"name":{},"text":{"19":{},"44":{},"48":{},"61":{},"65":{}},"component":{}}],["unixdomainserverconnector(serv",{"_index":5956,"title":{},"name":{},"text":{"61":{},"65":{}},"component":{}}],["unixsocket",{"_index":5580,"title":{},"name":{},"text":{"57":{}},"component":{}}],["unknown",{"_index":4326,"title":{},"name":{},"text":{"44":{},"45":{}},"component":{}}],["unless",{"_index":1372,"title":{},"name":{},"text":{"19":{},"38":{},"41":{},"44":{},"45":{},"47":{},"61":{},"65":{},"66":{}},"component":{}}],["unlik",{"_index":3407,"title":{},"name":{},"text":{"37":{}},"component":{}}],["unlimit",{"_index":2367,"title":{},"name":{},"text":{"33":{}},"component":{}}],["unload",{"_index":2086,"title":{},"name":{},"text":{"28":{}},"component":{}}],["unmanag",{"_index":3983,"title":{},"name":{},"text":{"41":{},"43":{}},"component":{}}],["unmodifi",{"_index":3092,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["unnecessari",{"_index":2494,"title":{},"name":{},"text":{"33":{},"53":{}},"component":{}}],["unpack",{"_index":1369,"title":{},"name":{},"text":{"19":{},"20":{},"35":{},"54":{},"56":{}},"component":{}}],["unread",{"_index":3345,"title":{"37-47":{}},"name":{},"text":{"37":{},"66":{}},"component":{}}],["unrecogn",{"_index":2933,"title":{},"name":{},"text":{"34":{}},"component":{}}],["unregist",{"_index":4134,"title":{},"name":{},"text":{"43":{},"45":{}},"component":{}}],["unrel",{"_index":4278,"title":{},"name":{},"text":{"44":{},"47":{},"48":{}},"component":{}}],["unsaf",{"_index":2695,"title":{},"name":{},"text":{"33":{}},"component":{}}],["unsecur",{"_index":3815,"title":{},"name":{},"text":{"38":{}},"component":{}}],["unset",{"_index":6728,"title":{},"name":{},"text":{"66":{}},"component":{}}],["unspecifi",{"_index":1377,"title":{},"name":{},"text":{"19":{}},"component":{}}],["until",{"_index":2461,"title":{},"name":{},"text":{"33":{},"34":{},"37":{},"38":{},"44":{},"45":{},"48":{},"49":{},"50":{},"53":{},"56":{},"61":{},"62":{},"66":{}},"component":{}}],["untouch",{"_index":3559,"title":{},"name":{},"text":{"37":{}},"component":{}}],["unus",{"_index":6574,"title":{},"name":{},"text":{"66":{}},"component":{}}],["unwant",{"_index":3519,"title":{},"name":{},"text":{"37":{}},"component":{}}],["unwrap",{"_index":5023,"title":{},"name":{},"text":{"49":{},"52":{},"62":{}},"component":{}}],["up",{"_index":711,"title":{"56-1":{},"67-2":{},"67-7":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"17":{},"18":{},"20":{},"23":{},"24":{},"25":{},"26":{},"33":{},"37":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"52":{},"55":{},"56":{},"59":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["updat",{"_index":145,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"11":{},"19":{},"23":{},"31":{},"33":{},"37":{},"38":{},"41":{},"57":{},"59":{},"61":{},"66":{}},"component":{}}],["updates=0",{"_index":3957,"title":{},"name":{},"text":{"41":{}},"component":{}}],["upgrad",{"_index":1288,"title":{"67-4":{}},"name":{},"text":{"18":{},"33":{},"34":{},"48":{},"53":{},"59":{},"61":{},"67":{}},"component":{}}],["upgradedrespons",{"_index":4930,"title":{},"name":{},"text":{"48":{}},"component":{}}],["upgraderequest",{"_index":6919,"title":{},"name":{},"text":{"67":{}},"component":{}}],["upgraderespons",{"_index":6920,"title":{},"name":{},"text":{"67":{}},"component":{}}],["upload",{"_index":3578,"title":{},"name":{},"text":{"37":{},"48":{},"53":{},"61":{},"66":{}},"component":{}}],["upon",{"_index":1005,"title":{},"name":{},"text":{"10":{},"37":{},"45":{},"48":{},"62":{},"63":{}},"component":{}}],["upper",{"_index":4002,"title":{},"name":{},"text":{"41":{},"47":{}},"component":{}}],["uri",{"_index":1263,"title":{"59-2":{}},"name":{},"text":{"18":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"48":{},"49":{},"50":{},"53":{},"57":{},"59":{},"61":{},"62":{},"63":{},"65":{},"67":{}},"component":{}}],["uri(\"http://domain.com/secur",{"_index":4873,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uri(\"http://mydomain.com/secur",{"_index":4823,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uri(\"http://otherdomain.com/admin",{"_index":4829,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uri(\"http://proxy.net:8080",{"_index":4867,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uri.create(\"http://domain.com",{"_index":4792,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uri.create(\"http://domain.com/secur",{"_index":4838,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uri.create(\"ws://domain.com/path",{"_index":5173,"title":{},"name":{},"text":{"53":{}},"component":{}}],["uri.create(\"wss://domain.com/path",{"_index":5178,"title":{},"name":{},"text":{"53":{}},"component":{}}],["uri.gethost().endswith(\"google.com",{"_index":4800,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uri1",{"_index":4822,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uri2",{"_index":4828,"title":{},"name":{},"text":{"48":{}},"component":{}}],["uricompli",{"_index":2716,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["uricompliance.default",{"_index":5866,"title":{},"name":{},"text":{"59":{}},"component":{}}],["uricompliance.from(\"rfc3986",{"_index":5870,"title":{},"name":{},"text":{"59":{}},"component":{}}],["uricompliance.from(str",{"_index":2718,"title":{},"name":{},"text":{"33":{},"59":{}},"component":{}}],["uricompliance.rfc3986",{"_index":2724,"title":{},"name":{},"text":{"33":{}},"component":{}}],["uricompliance.viol",{"_index":5865,"title":{},"name":{},"text":{"59":{}},"component":{}}],["uricompliance.violation.ambiguous_path_separ",{"_index":2721,"title":{},"name":{},"text":{"33":{}},"component":{}}],["uritemplatepathspec",{"_index":6921,"title":{},"name":{},"text":{"67":{}},"component":{}}],["uritemplatepathspec)upgraderequest.getattribute(pathspec.class.getnam",{"_index":6922,"title":{},"name":{},"text":{"67":{}},"component":{}}],["url",{"_index":843,"title":{},"name":{},"text":{"7":{},"23":{},"28":{},"32":{},"33":{},"37":{},"38":{},"41":{},"48":{},"56":{},"59":{},"61":{},"66":{}},"component":{}}],["urlclassload",{"_index":3761,"title":{},"name":{},"text":{"38":{}},"component":{}}],["urlencod",{"_index":6312,"title":{},"name":{},"text":{"61":{}},"component":{}}],["urlencoder.encode(\"bar;baz",{"_index":4814,"title":{},"name":{},"text":{"48":{}},"component":{}}],["us",{"_index":114,"title":{"39":{},"55":{},"56":{},"2-1":{},"34-11":{},"34-20":{},"53-4":{},"53-5":{},"55-1":{},"56-21":{},"56-25":{},"61-20":{},"61-44":{},"61-47":{},"67-8":{},"67-9":{}},"name":{},"text":{"1":{},"2":{},"4":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"71":{}},"component":{}}],["usabl",{"_index":3802,"title":{},"name":{},"text":{"38":{}},"component":{}}],["usag",{"_index":324,"title":{"38-16":{},"48-7":{}},"name":{},"text":{"2":{},"7":{},"20":{},"28":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"44":{},"48":{},"53":{},"57":{},"61":{},"72":{}},"component":{}}],["use=0/0,pooled/acquires=0/0(nan%),non",{"_index":3892,"title":{},"name":{},"text":{"41":{}},"component":{}}],["usebean",{"_index":2071,"title":{},"name":{},"text":{"28":{}},"component":{}}],["useldaps=\"tru",{"_index":1754,"title":{},"name":{},"text":{"23":{}},"component":{}}],["useprovidedscop",{"_index":5329,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["user",{"_index":15,"title":{"4-6":{}},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"13":{},"18":{},"19":{},"20":{},"23":{},"25":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"45":{},"48":{},"49":{},"50":{},"55":{},"56":{},"61":{},"66":{}},"component":{}}],["user.countri",{"_index":3683,"title":{},"name":{},"text":{"38":{}},"component":{}}],["user.dir",{"_index":3680,"title":{},"name":{},"text":{"38":{}},"component":{}}],["user.email",{"_index":997,"title":{},"name":{},"text":{"10":{}},"component":{}}],["user.languag",{"_index":3681,"title":{},"name":{},"text":{"38":{}},"component":{}}],["user1",{"_index":4373,"title":{},"name":{},"text":{"45":{}},"component":{}}],["user2",{"_index":4374,"title":{},"name":{},"text":{"45":{}},"component":{}}],["userbasedn=\"ou=people,dc=alcatel",{"_index":1755,"title":{},"name":{},"text":{"23":{}},"component":{}}],["userfield=\"myus",{"_index":1713,"title":{},"name":{},"text":{"23":{}},"component":{}}],["useridattribute=\"cn",{"_index":1757,"title":{},"name":{},"text":{"23":{}},"component":{}}],["userident",{"_index":1822,"title":{},"name":{},"text":{"24":{}},"component":{}}],["usernam",{"_index":1705,"title":{},"name":{},"text":{"23":{},"24":{},"25":{},"26":{},"37":{},"40":{},"48":{}},"component":{}}],["username/password",{"_index":1900,"title":{},"name":{},"text":{"25":{},"48":{}},"component":{}}],["username1",{"_index":4827,"title":{},"name":{},"text":{"48":{}},"component":{}}],["userobjectclass=\"inetorgperson",{"_index":1761,"title":{},"name":{},"text":{"23":{}},"component":{}}],["userpasswordattribute=\"userpassword",{"_index":1759,"title":{},"name":{},"text":{"23":{}},"component":{}}],["userrdnattribute=\"uid",{"_index":1756,"title":{},"name":{},"text":{"23":{}},"component":{}}],["userrolerolefield=\"myrol",{"_index":1717,"title":{},"name":{},"text":{"23":{}},"component":{}}],["userroletable=\"myuserrol",{"_index":1715,"title":{},"name":{},"text":{"23":{}},"component":{}}],["userroleuserfield=\"myus",{"_index":1716,"title":{},"name":{},"text":{"23":{}},"component":{}}],["users.access",{"_index":4371,"title":{},"name":{},"text":{"45":{}},"component":{}}],["users.password",{"_index":4375,"title":{},"name":{},"text":{"45":{}},"component":{}}],["usertable=\"myus",{"_index":1712,"title":{},"name":{},"text":{"23":{}},"component":{}}],["usertransact",{"_index":1999,"title":{},"name":{},"text":{"26":{},"39":{}},"component":{}}],["user’",{"_index":534,"title":{},"name":{},"text":{"4":{}},"component":{}}],["usetestscop",{"_index":5493,"title":{},"name":{},"text":{"56":{}},"component":{}}],["usual",{"_index":1913,"title":{},"name":{},"text":{"25":{},"26":{},"28":{},"33":{},"34":{},"35":{},"36":{},"37":{},"40":{},"45":{},"48":{},"54":{},"56":{},"66":{}},"component":{}}],["us}t",{"_index":2601,"title":{},"name":{},"text":{"33":{}},"component":{}}],["utc",{"_index":3262,"title":{},"name":{},"text":{"36":{},"41":{}},"component":{}}],["utf",{"_index":3027,"title":{},"name":{},"text":{"34":{},"48":{},"53":{},"57":{}},"component":{}}],["utf8",{"_index":2083,"title":{},"name":{},"text":{"28":{}},"component":{}}],["utf8stringbuild",{"_index":4303,"title":{},"name":{},"text":{"44":{}},"component":{}}],["utf_8",{"_index":5634,"title":{},"name":{},"text":{"57":{}},"component":{}}],["utf_8.encode(\"hello",{"_index":5766,"title":{},"name":{},"text":{"57":{},"61":{}},"component":{}}],["util",{"_index":1789,"title":{},"name":{},"text":{"24":{},"37":{},"38":{},"40":{},"41":{},"48":{},"53":{},"56":{},"57":{},"61":{}},"component":{}}],["util.jar",{"_index":2249,"title":{},"name":{},"text":{"31":{}},"component":{}}],["v",{"_index":836,"title":{},"name":{},"text":{"7":{},"30":{}},"component":{}}],["v1",{"_index":3155,"title":{},"name":{},"text":{"34":{}},"component":{}}],["v2",{"_index":3156,"title":{},"name":{},"text":{"34":{}},"component":{}}],["v3",{"_index":262,"title":{},"name":{},"text":{"2":{}},"component":{}}],["valid",{"_index":1022,"title":{},"name":{},"text":{"10":{},"25":{},"28":{},"30":{},"32":{},"33":{},"34":{},"35":{},"38":{},"45":{},"48":{},"56":{},"59":{},"66":{},"67":{}},"component":{}}],["validatedrespons",{"_index":4750,"title":{},"name":{},"text":{"48":{}},"component":{}}],["valu",{"_index":915,"title":{},"name":{},"text":{"8":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"42":{},"45":{},"47":{},"48":{},"53":{},"54":{},"56":{},"57":{},"61":{},"66":{}},"component":{}}],["valuabl",{"_index":4352,"title":{},"name":{},"text":{"45":{}},"component":{}}],["value’",{"_index":3158,"title":{},"name":{},"text":{"34":{}},"component":{}}],["var",{"_index":4037,"title":{},"name":{},"text":{"42":{},"48":{}},"component":{}}],["var/www/wordpress",{"_index":3059,"title":{},"name":{},"text":{"34":{},"48":{}},"component":{}}],["varchar",{"_index":3482,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["vari",{"_index":4433,"title":{},"name":{},"text":{"46":{},"59":{},"61":{}},"component":{}}],["variabl",{"_index":726,"title":{},"name":{},"text":{"7":{},"33":{},"34":{},"37":{},"38":{},"42":{},"66":{}},"component":{}}],["variant",{"_index":1424,"title":{},"name":{},"text":{"19":{}},"component":{}}],["variat",{"_index":1029,"title":{},"name":{},"text":{"10":{}},"component":{}}],["varieti",{"_index":199,"title":{},"name":{},"text":{"2":{}},"component":{}}],["variou",{"_index":949,"title":{},"name":{},"text":{"8":{},"16":{},"37":{},"38":{},"43":{},"48":{},"53":{},"56":{},"57":{},"66":{},"71":{}},"component":{}}],["various",{"_index":757,"title":{},"name":{},"text":{"7":{}},"component":{}}],["varnam",{"_index":2579,"title":{},"name":{},"text":{"33":{}},"component":{}}],["varname}",{"_index":2581,"title":{},"name":{},"text":{"33":{}},"component":{}}],["varname}c",{"_index":2578,"title":{},"name":{},"text":{"33":{}},"component":{}}],["varname}i",{"_index":2584,"title":{},"name":{},"text":{"33":{}},"component":{}}],["varname}o",{"_index":2587,"title":{},"name":{},"text":{"33":{}},"component":{}}],["varname}ti",{"_index":2608,"title":{},"name":{},"text":{"33":{}},"component":{}}],["varname}to",{"_index":2610,"title":{},"name":{},"text":{"33":{}},"component":{}}],["vast",{"_index":4937,"title":{},"name":{},"text":{"49":{},"50":{},"62":{},"63":{}},"component":{}}],["vastli",{"_index":5784,"title":{},"name":{},"text":{"57":{}},"component":{}}],["vendor",{"_index":3118,"title":{},"name":{},"text":{"34":{},"37":{},"61":{},"66":{}},"component":{}}],["vener",{"_index":272,"title":{},"name":{},"text":{"2":{}},"component":{}}],["ventil",{"_index":626,"title":{"7-8":{}},"name":{},"text":{"7":{}},"component":{}}],["verbos",{"_index":1120,"title":{},"name":{},"text":{"13":{},"30":{},"71":{}},"component":{}}],["veri",{"_index":1106,"title":{},"name":{},"text":{"13":{},"17":{},"25":{},"33":{},"37":{},"41":{},"42":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["verifi",{"_index":988,"title":{},"name":{},"text":{"9":{},"18":{},"30":{},"34":{},"37":{},"38":{},"48":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["versa",{"_index":3063,"title":{},"name":{},"text":{"34":{}},"component":{}}],["versatil",{"_index":110,"title":{},"name":{},"text":{"1":{}},"component":{}}],["version",{"_index":155,"title":{"2-1":{},"2-2":{},"2-3":{},"7-9":{},"7-10":{},"7-11":{},"11-2":{},"32-19":{},"34-16":{},"57-1":{},"58-1":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"8":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"32":{},"33":{},"34":{},"37":{},"38":{},"42":{},"45":{},"47":{},"48":{},"52":{},"53":{},"54":{},"56":{},"57":{},"59":{},"61":{},"64":{},"65":{},"66":{},"67":{}},"component":{}}],["version(httpversion.http_1_1",{"_index":4925,"title":{},"name":{},"text":{"48":{}},"component":{}}],["version(httpversion.http_2",{"_index":4927,"title":{},"name":{},"text":{"48":{}},"component":{}}],["version(httpversion.http_3",{"_index":4929,"title":{},"name":{},"text":{"48":{}},"component":{}}],["version.txt",{"_index":181,"title":{},"name":{},"text":{"2":{}},"component":{}}],["version=1",{"_index":4803,"title":{},"name":{},"text":{"48":{}},"component":{}}],["version=42.6.0",{"_index":3653,"title":{},"name":{},"text":{"38":{}},"component":{}}],["version?=42.6.0",{"_index":2316,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["versions.txt",{"_index":1004,"title":{},"name":{},"text":{"10":{}},"component":{}}],["version}.jar",{"_index":2306,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["version}.jar:/my/custom/class",{"_index":3557,"title":{},"name":{},"text":{"37":{}},"component":{}}],["version}.jar:[oth",{"_index":3546,"title":{},"name":{},"text":{"37":{}},"component":{}}],["version}.jar:infinispan",{"_index":3544,"title":{},"name":{},"text":{"37":{}},"component":{}}],["version}.jar:jetti",{"_index":3543,"title":{},"name":{},"text":{"37":{}},"component":{}}],["version}|lib/postgresql",{"_index":2304,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["versu",{"_index":6335,"title":{},"name":{},"text":{"61":{}},"component":{}}],["vhost",{"_index":3597,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["via",{"_index":365,"title":{"25-3":{},"45-5":{},"65-3":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"12":{},"19":{},"20":{},"23":{},"25":{},"26":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{}},"component":{}}],["viabl",{"_index":6552,"title":{},"name":{},"text":{"66":{}},"component":{}}],["vibrant",{"_index":95,"title":{},"name":{},"text":{"1":{}},"component":{}}],["vice",{"_index":3062,"title":{},"name":{},"text":{"34":{}},"component":{}}],["view",{"_index":715,"title":{},"name":{},"text":{"7":{},"8":{},"40":{},"53":{},"61":{}},"component":{}}],["violat",{"_index":2686,"title":{},"name":{},"text":{"33":{},"59":{},"61":{}},"component":{}}],["violation.ambiguous_path_separ",{"_index":5868,"title":{},"name":{},"text":{"59":{}},"component":{}}],["violation.multiple_content_length",{"_index":5842,"title":{},"name":{},"text":{"59":{}},"component":{}}],["violation.reserved_names_not_dollar_prefix",{"_index":5877,"title":{},"name":{},"text":{"59":{}},"component":{}}],["virtual",{"_index":899,"title":{"19-7":{},"19-8":{},"19-9":{},"19-10":{},"33-33":{},"33-34":{},"36-12":{},"47-9":{}},"name":{},"text":{"8":{},"19":{},"20":{},"21":{},"22":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"41":{},"45":{},"47":{},"53":{},"56":{},"61":{},"66":{},"72":{}},"component":{}}],["virtual,http",{"_index":3318,"title":{},"name":{},"text":{"36":{}},"component":{}}],["virtual.ini",{"_index":3319,"title":{},"name":{},"text":{"36":{}},"component":{}}],["virtual_host",{"_index":6069,"title":{},"name":{},"text":{"61":{}},"component":{}}],["virtualhost",{"_index":3445,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["visibl",{"_index":1942,"title":{},"name":{},"text":{"26":{},"37":{},"42":{},"57":{},"66":{}},"component":{}}],["visual",{"_index":868,"title":{},"name":{},"text":{"7":{},"45":{}},"component":{}}],["vm",{"_index":2055,"title":{},"name":{},"text":{"28":{},"38":{},"41":{}},"component":{}}],["vm://localhost?broker.persistent=fals",{"_index":1976,"title":{},"name":{},"text":{"26":{}},"component":{}}],["vmarg",{"_index":1929,"title":{},"name":{},"text":{"25":{},"45":{}},"component":{}}],["void",{"_index":1088,"title":{},"name":{},"text":{"13":{},"20":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"57":{},"58":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["vs",{"_index":1315,"title":{"19-1":{},"34-4":{},"56-8":{}},"name":{},"text":{"56":{}},"component":{}}],["vulner",{"_index":3096,"title":{},"name":{},"text":{"34":{},"61":{}},"component":{}}],["w3c",{"_index":5828,"title":{},"name":{},"text":{"59":{}},"component":{}}],["wait",{"_index":1224,"title":{},"name":{},"text":{"17":{},"30":{},"33":{},"38":{},"44":{},"47":{},"48":{},"52":{},"53":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["wait/notifi",{"_index":4606,"title":{},"name":{},"text":{"48":{}},"component":{}}],["wake",{"_index":2425,"title":{},"name":{},"text":{"33":{}},"component":{}}],["walk",{"_index":1151,"title":{},"name":{},"text":{"16":{}},"component":{}}],["want",{"_index":560,"title":{"6-4":{}},"name":{},"text":{"4":{},"6":{},"7":{},"10":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"52":{},"53":{},"56":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["war",{"_index":1150,"title":{"19-12":{},"20-6":{},"54-3":{},"55-9":{},"56-11":{},"56-15":{},"56-21":{},"56-22":{},"56-23":{}},"name":{},"text":{"16":{},"19":{},"20":{},"33":{},"34":{},"35":{},"54":{},"55":{},"56":{},"61":{}},"component":{}}],["war.out",{"_index":5516,"title":{},"name":{},"text":{"56":{}},"component":{}}],["warn",{"_index":866,"title":{},"name":{},"text":{"7":{},"33":{},"34":{},"36":{},"41":{},"61":{},"66":{}},"component":{}}],["wast",{"_index":1282,"title":{},"name":{},"text":{"18":{}},"component":{}}],["watch",{"_index":2389,"title":{"34-19":{}},"name":{},"text":{"33":{},"56":{}},"component":{}}],["way",{"_index":371,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"12":{},"18":{},"19":{},"20":{},"24":{},"25":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"42":{},"44":{},"45":{},"47":{},"48":{},"52":{},"55":{},"56":{},"61":{},"62":{},"63":{},"65":{},"66":{},"67":{}},"component":{}}],["weather",{"_index":6177,"title":{},"name":{},"text":{"61":{}},"component":{}}],["web",{"_index":645,"title":{"19":{},"35":{},"19-11":{},"20-5":{},"55-8":{},"56-19":{}},"name":{},"text":{"7":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"41":{},"42":{},"43":{},"48":{},"52":{},"55":{},"56":{},"57":{},"61":{},"67":{}},"component":{}}],["web.xml",{"_index":1174,"title":{"19-13":{}},"name":{},"text":{"17":{},"19":{},"20":{},"23":{},"26":{},"28":{},"35":{},"37":{},"54":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["web.xml,web",{"_index":5527,"title":{},"name":{},"text":{"56":{}},"component":{}}],["web_inf/lib",{"_index":6263,"title":{},"name":{},"text":{"61":{}},"component":{}}],["webapp",{"_index":966,"title":{"17-3":{},"23-3":{},"33-7":{},"34-11":{},"55-5":{},"56-8":{},"56-25":{},"56-26":{}},"name":{},"text":{"8":{},"17":{},"19":{},"20":{},"23":{},"26":{},"27":{},"29":{},"32":{},"33":{},"35":{},"37":{},"54":{},"55":{},"56":{},"57":{},"61":{},"66":{},"67":{}},"component":{}}],["webapp,/ee10",{"_index":1614,"title":{},"name":{},"text":{"20":{}},"component":{}}],["webapp.getsessionhandl",{"_index":6775,"title":{},"name":{},"text":{"66":{}},"component":{}}],["webapp.jar",{"_index":5473,"title":{},"name":{},"text":{"56":{}},"component":{}}],["webapp.xml",{"_index":1595,"title":{},"name":{},"text":{"20":{}},"component":{}}],["webapp/,a=available,h=oeje10s.sessionhandler@6f15d60e{started}}{/path/to/jetty.hom",{"_index":1620,"title":{},"name":{},"text":{"20":{}},"component":{}}],["webappa",{"_index":6059,"title":{},"name":{},"text":{"61":{}},"component":{}}],["webappb",{"_index":6062,"title":{},"name":{},"text":{"61":{}},"component":{}}],["webappclassload",{"_index":6267,"title":{},"name":{},"text":{"61":{}},"component":{}}],["webappcontext",{"_index":1185,"title":{"61-39":{}},"name":{},"text":{"17":{},"19":{},"27":{},"42":{},"56":{},"61":{},"66":{},"67":{}},"component":{}}],["webappcontext(\"/path/to/webapp",{"_index":6857,"title":{},"name":{},"text":{"67":{}},"component":{}}],["webappcontext.setconfigurationdiscovered(fals",{"_index":1181,"title":{},"name":{},"text":{"17":{}},"component":{}}],["webappcontext.setextractwar(tru",{"_index":3233,"title":{},"name":{},"text":{"35":{}},"component":{}}],["webappi",{"_index":5536,"title":{},"name":{},"text":{"56":{}},"component":{}}],["webappsourcedirectori",{"_index":5317,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{}}],["webappx",{"_index":5533,"title":{},"name":{},"text":{"56":{}},"component":{}}],["webapp’",{"_index":1219,"title":{},"name":{},"text":{"17":{},"26":{},"35":{},"37":{},"56":{}},"component":{}}],["webdefault.xml",{"_index":2039,"title":{},"name":{},"text":{"28":{},"56":{}},"component":{}}],["webfilt",{"_index":1164,"title":{},"name":{},"text":{"17":{},"56":{}},"component":{}}],["webinfincludejarpattern",{"_index":5490,"title":{},"name":{},"text":{"56":{}},"component":{}}],["webinitparam",{"_index":1166,"title":{},"name":{},"text":{"17":{}},"component":{}}],["weblisten",{"_index":1165,"title":{},"name":{},"text":{"17":{},"56":{}},"component":{}}],["webservlet",{"_index":1163,"title":{},"name":{},"text":{"17":{},"56":{}},"component":{}}],["websit",{"_index":1419,"title":{},"name":{},"text":{"19":{},"38":{},"48":{},"61":{}},"component":{}}],["websocket",{"_index":99,"title":{"53":{},"67":{},"34-8":{},"34-9":{},"34-10":{},"34-11":{},"53-8":{},"53-9":{},"53-10":{},"53-15":{},"57-11":{},"58-2":{},"67-4":{},"67-10":{}},"name":{"53":{},"67":{}},"text":{"1":{},"2":{},"16":{},"18":{},"21":{},"33":{},"34":{},"44":{},"51":{},"53":{},"57":{},"58":{},"61":{},"64":{},"67":{}},"component":{}}],["websocket(autodemand",{"_index":5198,"title":{},"name":{},"text":{"53":{}},"component":{}}],["websocket*listen",{"_index":5788,"title":{},"name":{},"text":{"57":{}},"component":{}}],["websocketcli",{"_index":4186,"title":{"53-1":{},"53-2":{}},"name":{},"text":{"44":{},"53":{},"57":{}},"component":{}}],["websocketclient(httpcli",{"_index":5169,"title":{},"name":{},"text":{"53":{}},"component":{}}],["websocketclient.connect",{"_index":5176,"title":{},"name":{},"text":{"53":{}},"component":{}}],["websocketclient.connect(clientendpoint",{"_index":5175,"title":{},"name":{},"text":{"53":{}},"component":{}}],["websocketclient.setmaxtextmessagesize(8",{"_index":5165,"title":{},"name":{},"text":{"53":{}},"component":{}}],["websocketclient.start",{"_index":5166,"title":{},"name":{},"text":{"53":{}},"component":{}}],["websocketcr",{"_index":5815,"title":{},"name":{},"text":{"58":{},"67":{}},"component":{}}],["websockethandl",{"_index":6887,"title":{},"name":{},"text":{"67":{}},"component":{}}],["websocketservlet",{"_index":5812,"title":{},"name":{},"text":{"58":{}},"component":{}}],["websocketupgradefilt",{"_index":6849,"title":{"67-5":{}},"name":{},"text":{"67":{}},"component":{}}],["websocketupgradehandl",{"_index":6850,"title":{"67-8":{}},"name":{},"text":{"67":{}},"component":{}}],["websocketupgradehandler(contain",{"_index":6903,"title":{},"name":{},"text":{"67":{}},"component":{}}],["websocketupgradehandler.from(serv",{"_index":6888,"title":{},"name":{},"text":{"67":{}},"component":{}}],["webtid",{"_index":503,"title":{"4-2":{}},"name":{},"text":{"4":{},"6":{},"12":{}},"component":{}}],["webxml",{"_index":5319,"title":{},"name":{},"text":{"54":{}},"component":{}}],["webxmlfrag",{"_index":5315,"title":{},"name":{},"text":{"54":{}},"component":{}}],["week",{"_index":1016,"title":{},"name":{},"text":{"10":{},"61":{}},"component":{}}],["weight",{"_index":6843,"title":{},"name":{},"text":{"66":{}},"component":{}}],["welcom",{"_index":51,"title":{},"name":{},"text":{"1":{},"10":{},"12":{},"61":{}},"component":{}}],["well",{"_index":614,"title":{"33-35":{}},"name":{},"text":{"6":{},"20":{},"23":{},"25":{},"33":{},"34":{},"38":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"52":{},"53":{},"54":{},"56":{},"61":{}},"component":{}}],["went",{"_index":3133,"title":{},"name":{},"text":{"34":{},"67":{}},"component":{}}],["we’v",{"_index":612,"title":{},"name":{},"text":{"6":{}},"component":{}}],["whatev",{"_index":5363,"title":{},"name":{},"text":{"55":{},"56":{}},"component":{}}],["what’",{"_index":3997,"title":{},"name":{},"text":{"41":{}},"component":{}}],["whencomplete((ignor",{"_index":6349,"title":{},"name":{},"text":{"61":{}},"component":{}}],["whencomplete(biconsum",{"_index":6313,"title":{},"name":{},"text":{"61":{}},"component":{}}],["whenev",{"_index":784,"title":{},"name":{},"text":{"7":{},"34":{},"37":{},"66":{}},"component":{}}],["wherea",{"_index":5417,"title":{},"name":{},"text":{"56":{}},"component":{}}],["wherebi",{"_index":3418,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["whether",{"_index":41,"title":{},"name":{},"text":{"1":{},"13":{},"20":{},"23":{},"28":{},"33":{},"34":{},"36":{},"37":{},"41":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"52":{},"53":{},"54":{},"56":{},"57":{},"61":{},"62":{},"65":{},"66":{},"67":{},"72":{}},"component":{}}],["whichev",{"_index":1683,"title":{},"name":{},"text":{"23":{},"24":{}},"component":{}}],["whilst",{"_index":1661,"title":{},"name":{},"text":{"23":{},"37":{}},"component":{}}],["whitespac",{"_index":2111,"title":{},"name":{},"text":{"28":{}},"component":{}}],["whole",{"_index":2855,"title":{},"name":{},"text":{"33":{},"41":{},"43":{},"44":{},"49":{},"53":{},"61":{},"62":{}},"component":{}}],["wholeheartedli",{"_index":996,"title":{},"name":{},"text":{"10":{}},"component":{}}],["whose",{"_index":1011,"title":{},"name":{},"text":{"10":{},"17":{},"32":{},"33":{},"34":{},"37":{},"39":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"53":{},"61":{},"66":{}},"component":{}}],["wide",{"_index":112,"title":{},"name":{},"text":{"1":{},"33":{},"61":{}},"component":{}}],["widen",{"_index":3404,"title":{},"name":{},"text":{"37":{}},"component":{}}],["widget",{"_index":1003,"title":{},"name":{},"text":{"10":{}},"component":{}}],["wiki",{"_index":984,"title":{},"name":{},"text":{"9":{},"19":{},"42":{}},"component":{}}],["wiki.properti",{"_index":1385,"title":{},"name":{},"text":{"19":{}},"component":{}}],["wiki.war",{"_index":1392,"title":{},"name":{},"text":{"19":{}},"component":{}}],["wiki.xml",{"_index":1383,"title":{},"name":{},"text":{"19":{},"26":{}},"component":{}}],["wildcard",{"_index":1247,"title":{},"name":{},"text":{"17":{},"19":{},"45":{}},"component":{}}],["will",{"_index":6226,"title":{},"name":{},"text":{"61":{}},"component":{}}],["wind",{"_index":5460,"title":{},"name":{},"text":{"56":{}},"component":{}}],["window",{"_index":1492,"title":{},"name":{},"text":{"20":{},"33":{},"49":{},"56":{},"62":{},"63":{}},"component":{}}],["window_upd",{"_index":4953,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{}}],["wire",{"_index":2243,"title":{},"name":{},"text":{"31":{},"34":{},"41":{},"45":{},"61":{},"66":{},"69":{}},"component":{}}],["wish",{"_index":3369,"title":{},"name":{},"text":{"37":{},"56":{}},"component":{}}],["within",{"_index":654,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"13":{},"18":{},"19":{},"24":{},"25":{},"26":{},"27":{},"30":{},"34":{},"37":{},"38":{},"42":{},"43":{},"44":{},"48":{},"49":{},"53":{},"61":{},"62":{},"66":{},"67":{}},"component":{}}],["without",{"_index":1102,"title":{"37-46":{},"56-23":{}},"name":{},"text":{"13":{},"16":{},"18":{},"19":{},"23":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"53":{},"55":{},"56":{},"61":{},"62":{},"66":{},"67":{},"71":{}},"component":{}}],["withstand",{"_index":5967,"title":{},"name":{},"text":{"61":{}},"component":{}}],["wonderland",{"_index":1902,"title":{},"name":{},"text":{"25":{}},"component":{}}],["won’t",{"_index":2237,"title":{},"name":{},"text":{"31":{},"36":{},"38":{}},"component":{}}],["word",{"_index":2119,"title":{},"name":{},"text":{"28":{},"32":{}},"component":{}}],["wordpress",{"_index":2876,"title":{"34-13":{}},"name":{},"text":{"34":{},"48":{},"51":{}},"component":{}}],["wordpress.originalpath",{"_index":3067,"title":{},"name":{},"text":{"34":{}},"component":{}}],["wordpress.originalqueri",{"_index":3068,"title":{},"name":{},"text":{"34":{}},"component":{}}],["work",{"_index":118,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"10":{},"11":{},"12":{},"16":{},"18":{},"19":{},"25":{},"30":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"51":{},"53":{},"54":{},"56":{},"61":{},"64":{},"66":{},"67":{}},"component":{}}],["worker",{"_index":4452,"title":{},"name":{},"text":{"47":{}},"component":{}}],["workernam",{"_index":3377,"title":{},"name":{},"text":{"37":{},"66":{}},"component":{}}],["workername=node0",{"_index":1625,"title":{},"name":{},"text":{"20":{}},"component":{}}],["world",{"_index":4993,"title":{"61-42":{}},"name":{},"text":{"49":{},"50":{},"55":{},"57":{},"61":{}},"component":{}}],["worri",{"_index":4677,"title":{},"name":{},"text":{"48":{}},"component":{}}],["wors",{"_index":3145,"title":{},"name":{},"text":{"34":{}},"component":{}}],["worth",{"_index":3368,"title":{},"name":{},"text":{"37":{},"38":{},"61":{}},"component":{}}],["wouldn’t",{"_index":737,"title":{},"name":{},"text":{"7":{}},"component":{}}],["wrap",{"_index":2934,"title":{"65-2":{}},"name":{},"text":{"34":{},"38":{},"44":{},"45":{},"47":{},"48":{},"52":{},"53":{},"61":{},"65":{}},"component":{}}],["wrapper",{"_index":4358,"title":{},"name":{},"text":{"45":{},"61":{}},"component":{}}],["writabl",{"_index":4166,"title":{},"name":{},"text":{"44":{}},"component":{}}],["write",{"_index":580,"title":{"7":{},"10-2":{},"61-48":{},"61-52":{},"65-4":{}},"name":{},"text":{"6":{},"7":{},"16":{},"31":{},"32":{},"33":{},"36":{},"37":{},"38":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"56":{},"57":{},"61":{},"62":{},"64":{},"65":{},"66":{},"67":{},"71":{}},"component":{}}],["writecallback",{"_index":5790,"title":{},"name":{},"text":{"57":{}},"component":{}}],["writeline(str",{"_index":5147,"title":{},"name":{},"text":{"52":{}},"component":{}}],["writependingexcept",{"_index":5006,"title":{},"name":{},"text":{"49":{},"50":{},"53":{}},"component":{}}],["writer",{"_index":14,"title":{},"name":{},"text":{"1":{},"6":{},"7":{}},"component":{}}],["written",{"_index":640,"title":{},"name":{},"text":{"7":{},"19":{},"20":{},"33":{},"36":{},"37":{},"44":{},"48":{},"52":{},"57":{},"61":{},"66":{}},"component":{}}],["wrong",{"_index":3134,"title":{},"name":{},"text":{"34":{},"44":{},"48":{},"61":{},"67":{}},"component":{}}],["wrong.org",{"_index":3130,"title":{},"name":{},"text":{"34":{}},"component":{}}],["wrongautodemandlistenerendpoint",{"_index":5211,"title":{},"name":{},"text":{"53":{}},"component":{}}],["wrongwrite(content.sink",{"_index":4310,"title":{},"name":{},"text":{"44":{}},"component":{}}],["wrote",{"_index":1278,"title":{},"name":{},"text":{"18":{}},"component":{}}],["ws",{"_index":6874,"title":{},"name":{},"text":{"67":{}},"component":{}}],["ws/[0",{"_index":6916,"title":{},"name":{},"text":{"67":{}},"component":{}}],["ws/chat",{"_index":6915,"title":{},"name":{},"text":{"67":{}},"component":{}}],["wss",{"_index":3079,"title":{},"name":{},"text":{"34":{}},"component":{}}],["www",{"_index":4820,"title":{},"name":{},"text":{"48":{},"61":{}},"component":{}}],["www.domain.com",{"_index":2161,"title":{},"name":{},"text":{"30":{}},"component":{}}],["www.foo.com",{"_index":1431,"title":{},"name":{},"text":{"19":{}},"component":{}}],["www.hostname.com",{"_index":1425,"title":{},"name":{},"text":{"19":{}},"component":{}}],["www.mywebapp.com",{"_index":1452,"title":{},"name":{},"text":{"19":{}},"component":{}}],["www.mywebapp.net",{"_index":1454,"title":{},"name":{},"text":{"19":{}},"component":{}}],["www.other.foo.com",{"_index":1433,"title":{},"name":{},"text":{"19":{}},"component":{}}],["www.xn—​integr",{"_index":1449,"title":{},"name":{},"text":{"19":{}},"component":{}}],["www.√integral.com",{"_index":1444,"title":{},"name":{},"text":{"19":{}},"component":{}}],["x",{"_index":1128,"title":{},"name":{},"text":{"13":{},"28":{},"33":{},"34":{},"38":{},"44":{},"48":{},"52":{},"53":{},"56":{},"61":{},"67":{}},"component":{}}],["x.printstacktrac",{"_index":5289,"title":{},"name":{},"text":{"53":{}},"component":{}}],["x00",{"_index":4889,"title":{},"name":{},"text":{"48":{}},"component":{}}],["x01",{"_index":4888,"title":{},"name":{},"text":{"48":{}},"component":{}}],["x04",{"_index":4891,"title":{},"name":{},"text":{"48":{}},"component":{}}],["x08",{"_index":4890,"title":{},"name":{},"text":{"48":{}},"component":{}}],["x0b",{"_index":4894,"title":{},"name":{},"text":{"48":{}},"component":{}}],["x0c",{"_index":4893,"title":{},"name":{},"text":{"48":{}},"component":{}}],["x11",{"_index":3305,"title":{},"name":{},"text":{"36":{},"48":{}},"component":{}}],["x509",{"_index":2205,"title":{},"name":{},"text":{"30":{},"34":{}},"component":{}}],["x509=x509@132e0cc(jetti",{"_index":2915,"title":{},"name":{},"text":{"34":{}},"component":{}}],["x509=x509@1b7c473a(jetti",{"_index":2944,"title":{},"name":{},"text":{"34":{}},"component":{}}],["x509=x509@4d9ac0b4(jetti",{"_index":3009,"title":{},"name":{},"text":{"34":{}},"component":{}}],["x509=x509@78641d23(jetti",{"_index":3172,"title":{},"name":{},"text":{"34":{}},"component":{}}],["x86_64",{"_index":3306,"title":{},"name":{},"text":{"36":{},"48":{}},"component":{}}],["xll",{"_index":4892,"title":{},"name":{},"text":{"48":{}},"component":{}}],["xlm",{"_index":1688,"title":{},"name":{},"text":{"23":{}},"component":{}}],["xlog:gc",{"_index":3656,"title":{},"name":{},"text":{"38":{}},"component":{}}],["xlog:gc*,gc+stats=off:file=logs/gc.log:time,level,tag",{"_index":3663,"title":{},"name":{},"text":{"38":{}},"component":{}}],["xml",{"_index":1055,"title":{"42":{},"19-5":{},"26-9":{},"32-13":{},"42-1":{},"56-19":{}},"name":{},"text":{"13":{},"17":{},"19":{},"20":{},"23":{},"24":{},"26":{},"27":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"56":{},"66":{}},"component":{}}],["xmlconfigur",{"_index":3746,"title":{},"name":{},"text":{"38":{}},"component":{}}],["xmlhttprequest",{"_index":6214,"title":{},"name":{},"text":{"61":{}},"component":{}}],["xmx",{"_index":2318,"title":{},"name":{},"text":{"32":{},"38":{}},"component":{}}],["xmx1g",{"_index":3662,"title":{},"name":{},"text":{"38":{}},"component":{}}],["xpoweredbi",{"_index":2116,"title":{},"name":{},"text":{"28":{}},"component":{}}],["xrefr:og",{"_index":5419,"title":{},"name":{},"text":{"56":{}},"component":{}}],["xsp",{"_index":2036,"title":{},"name":{},"text":{"28":{}},"component":{}}],["xx",{"_index":3659,"title":{},"name":{},"text":{"38":{}},"component":{}}],["xxx",{"_index":1984,"title":{},"name":{},"text":{"26":{},"37":{}},"component":{}}],["xxxx",{"_index":3428,"title":{},"name":{},"text":{"37":{}},"component":{}}],["xyz",{"_index":1681,"title":{},"name":{},"text":{"23":{}},"component":{}}],["y",{"_index":1129,"title":{},"name":{},"text":{"13":{},"56":{}},"component":{}}],["year",{"_index":215,"title":{},"name":{},"text":{"2":{}},"component":{}}],["yet/another/fold",{"_index":5549,"title":{},"name":{},"text":{"56":{}},"component":{}}],["yield",{"_index":2586,"title":{},"name":{},"text":{"33":{},"34":{},"41":{},"44":{},"47":{},"56":{},"66":{}},"component":{}}],["younger",{"_index":4130,"title":{},"name":{},"text":{"43":{}},"component":{}}],["yourself",{"_index":531,"title":{},"name":{},"text":{"4":{},"35":{},"66":{}},"component":{}}],["you’ll",{"_index":685,"title":{},"name":{},"text":{"7":{},"10":{},"35":{}},"component":{}}],["you’r",{"_index":42,"title":{},"name":{},"text":{"1":{},"20":{},"37":{}},"component":{}}],["yyyi",{"_index":3239,"title":{},"name":{},"text":{"36":{}},"component":{}}],["yyyy_mm_dd",{"_index":3295,"title":{},"name":{},"text":{"36":{},"61":{}},"component":{}}],["z",{"_index":1130,"title":{},"name":{},"text":{"13":{}},"component":{}}],["zero",{"_index":2045,"title":{},"name":{},"text":{"28":{},"33":{},"38":{},"44":{},"47":{},"56":{},"61":{},"66":{}},"component":{}}],["zip",{"_index":171,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["zombi",{"_index":3533,"title":{},"name":{},"text":{"37":{}},"component":{}}],["zone",{"_index":5921,"title":{},"name":{},"text":{"61":{}},"component":{}}],["zzz|gmt}t",{"_index":2551,"title":{},"name":{},"text":{"33":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"The Eclipse Jetty community is a melting pot of talent, comprising developers, testers, documentation writers, and users. Collaboration is at the heart of everything they do, with the primary communication channels being mailing lists, frequently on the StackOverflow 'jetty' tag, and the GitHub issue tracker for Jetty. These channels serve as hubs for sharing ideas, troubleshooting issues, and coordinating development efforts. One of the defining characteristics of the Jetty community is its inclusivity. Whether you’re a seasoned Java developer or a newcomer eager to learn, there’s a place for you in the Jetty community. Beginners are welcomed with open arms, encouraged to ask questions, and guided by experienced members who are passionate about nurturing the next generation of contributors. The Jetty project is known for its commitment to innovation and agility. New features and enhancements are introduced regularly, thanks to the collaborative efforts of the community. Whether it’s support for the latest Java specifications, improvements in performance and scalability, or integrations with cutting-edge technologies, Jetty stays ahead of the curve by embracing change and embracing feedback from users and contributors. In addition to core development, the Jetty community fosters a vibrant ecosystem of extensions, plugins, and integrations. From WebSocket support, HTTP/2 and HTTP/3 implementations to integration with popular frameworks like Spring and Apache Camel, Jetty’s extensibility makes it a versatile platform for a wide range of use cases. The Jetty community is more than just a group of developers working on a shared codebase; it’s a tight-knit community bound by a shared passion for technology and collaboration. Regular meetups, conferences, and hackathons provide opportunities for members to connect in person, share insights, and forge lasting friendships. Furthermore, the Jetty community is committed to giving back to the broader open-source ecosystem. Whether through code contributions, bug fixes, or documentation updates, Jetty developers actively participate in projects beyond their own, embodying the spirit of cooperation and mutual support that defines the open-source movement.","title":"Community","component":"ROOT","version":"","name":"community","url":"/community.html","titles":[{"text":"Community Dynamics","hash":"community-dynamics","id":1},{"text":"Continuous Innovation","hash":"continuous-innovation","id":2},{"text":"Community Engagement","hash":"community-engagement","id":3}]},"2":{"id":2,"text":"The latest releases of Eclipse Jetty are listed below. You can find earlier releases by browsing Maven Central. Release Assets Links 12.0.10 .zip .tgz Release Notes / API Docs 11.0.21 (EOCS) .zip .tgz Release Notes / API Docs 10.0.21 (EOCS) .zip .tgz Release Notes / API Docs 9.4.54.v20240208 (EOCS) .zip .tgz Release Notes / API Docs Release notes are in the VERSION.txt file included with the distribution and on the GitHub Releases page for the Jetty project. Release notes are also made available on the jetty-announce@eclipse.org mailing list. Jetty 12 is currently the community-supported version of Jetty. This means that Jetty 12 is the actively developed and supported version of Jetty for the open-source community. Issues filed for Jetty 12 at the GitHub repository are actively triaged and we work to resolve and release fixes for these releases. While many people continue to use older versions of Jetty like 11/10/9 for a variety of reasons including requirements for specific Java versions, we recommend using Jetty 12. Professional support is available for releases marked as End of Community Support (EOCS) and we encourage you to check out the Professional Services offered. January 1st, 2024 marked the end of community support for the Jetty 10 and 11 releases. Version Years Home Min JVM Servlet JSP Status Protocols 12 2023- Eclipse 17 [1] 3.1 4.0 5.0 6.0 2.3 3.0 3.1 Stable HTTP/1.1 (RFC 7230), HTTP/2 (RFC 7540), WebSocket (RFC 6455, JSR 356), FastCGI, JakartaEE Namespace [2], JavaEE Namespace [3] 11 2020- Eclipse 11 [1] 5.0 3.0 Stable (Notice) HTTP/1.1 (RFC 7230), HTTP/2 (RFC 7540), WebSocket (RFC 6455, JSR 356), FastCGI, JakartaEE Namespace [2] 10 2020- Eclipse 11 [1] 4.0 2.3 Stable (Notice) HTTP/1.1 (RFC 7230), HTTP/2 (RFC 7540), WebSocket (RFC 6455, JSR 356), FastCGI 9.4 2016- Eclipse 1.8 3.1 2.3 Stable (Notice) HTTP/1.1 (RFC 7230), HTTP/2 (RFC 7540), WebSocket (RFC 6455, JSR 356), FastCGI 9.3 2015-2020 Eclipse 1.8 [4] 3.1 2.3 Deprecated HTTP/1.1 (RFC 7230), HTTP/2 (RFC 7540), WebSocket (RFC 6455, JSR 356), FastCGI 9.2 2014-2018 Eclipse 1.7 [4] 3.1 2.3 Deprecated HTTP/1.1 (RFC 2616), javax.websocket, SPDY v3 9.1 2013-2014 Eclipse 1.7 [4] 3.1 2.3 Deprecated HTTP/1.1 (RFC 2616) 9.0 2013-2013 Eclipse 1.7 [4] 3.1-beta 2.3 Deprecated HTTP/1.1 (RFC 2616) 8 2009-2014 Eclipse / Codehaus 1.6 [4] 3.0 2.2 Venerable HTTP/1.1 (RFC 2616), WebSocket RFC 6455, SPDY v3 7 2008-2014 Eclipse / Codehaus 1.5 2.5 2.1 Venerable HTTP/1.1 (RFC 2616), WebSocket RFC 6455, SPDY v3 6 2006-2010 Codehaus 1.4-1.5 2.5 2.0 Antique HTTP/1.1 (RFC 2616) 5 2003-2009 Sourceforge 1.2-1.5 2.4 2.0 Relic HTTP/1.1 (RFC 2616) 4 2001-2006 Sourceforge 1.2, J2ME 2.3 1.2 Ancient HTTP/1.1 (RFC 2616) 3 1999-2002 Sourceforge 1.2 2.2 1.1 Fossilized HTTP/1.1 (RFC 2068) 2 1998-2000 Mortbay 1.1 2.1 1.0 Legendary HTTP/1.0 (RFC 1945) 1 1995-1998 Mortbay 1.0 - - Mythical HTTP/1.0 (RFC 1945) The canonical repository for Jetty is Maven Central. You can browse for all Jetty releases at here. This provisioning address is not for general use and is provided strictly for OSGI users. Composite Jetty 9 P2 Provisioning: http://download.eclipse.org/jetty/updates/jetty-bundles-9.x 1. JPMS module support is optional. 2. Due to Oracle’s ownership of the “Java” trademark, usage of the javax.* namespace has been restricted, and the jakarta.* namespace was adopted by the Eclipse Foundation. 3. Only for Java EE 8 (Servlet 4.0, JSP 2.3) support, using the javax.* namespace. 4. JDK9 and newer is not supported if using MultiRelease JAR Files, or Bytecode / Annotation scanning.","title":"Jetty Downloads","component":"ROOT","version":"","name":"download","url":"/download.html","titles":[{"text":"What Version Do I Use?","hash":"what-version-do-i-use","id":1},{"text":"Version History","hash":"version-history","id":2},{"text":"Prior Versions","hash":"prior-versions","id":3},{"text":"Jetty P2 Provisioning","hash":"jetty-p2-provisioning","id":4}]},"3":{"id":3,"text":"There are a couple of avenues for reporting security issues to the Jetty project. If the issue is directly related to Jetty itself, then reporting to the Jetty developers is encouraged. The most direct method is to mail security@jetty.org or security@webtide.com. We are flexible in how we work with reporters of security issues but reserve the right to act in the interests of the Jetty project in all circumstances. If the issue is related to Eclipse or its Jetty integration, we would like to encourage you to reach out to security@eclipse.org. If the issue is related to integrations with Jetty, we are happy to work with you to identify the proper entity, and either of the approaches above is okay. We prefer that security issues be reported directly to Jetty developers via email instead of GitHub issues since it has no facility to tag issues as private. We will actively delete issues that are opened in this way. For more information on how we handle security issues, please refer to our Security Policy. Date ID Exploit Severity Affects Fixed Version 4/18/2023 CVE-2023-26049 Low Low ⇐9.4.50, ⇐10.013, ⇐11.0.13, ⇐12.0.0.alpha3 9.4.51, 10.0.14, 11.0.14, 12.0.0.beta0 4/18/2023 CVE-2023-26048 Med Med ⇐9.4.50, ⇐10.0.13, ⇐11.0.13 9.4.51, 10.0.14, 11.0.14 7/5/2022 CVE-2022-2191 Med High ⇐ 10.0.9, ⇐ 11.0.9 10.0.10, 11.0.10 7/5/2022 CVE-2022-2047 Low Low ⇐ 9.4.46, ⇐ 10.0.9, ⇐ 11.0.9 9.4.47, 10.0.10, 11.0.10 7/5/2022 CVE-2022-2048 Med High ⇐ 9.4.46, ⇐ 10.0.9, ⇐ 11.0.9 9.4.47, 10.0.10, 11.0.10 7/15/2021 CVE-2021-34429 Med Med 9.4.37 - 9.4.42, 10.0.1 - 10.0.5, 11.0.1 - 11.0.5 9.4.43, 10.0.6, 11.0.6 6/22/2021 CVE-2021-34428 Low Low ⇐ 9.4.40, ⇐ 10.0.2, ⇐ 11.0.2 9.4.41, 10.0.3, 11.0.3 6/8/2021 CVE-2021-28169 Med Med ⇐ 9.4.40, ⇐ 10.0.2, ⇐ 11.0.2 9.4.41, 10.0.3, 11.0.3 4/1/2021 CVE-2021-28165 Med High 7.2.2 - 9.4.38, 10.0.0.alpha0 - 10.0.1, 11.0.0.alpha0 - 11.0.1 9.4.39, 10.0.2, 11.0.2 4/1/2021 CVE-2021-28164 Med Med 9.4.37, 9.4.38 9.4.39 4/1/2021 CVE-2021-28163 Med Med 9.4.32 - 9.4.38, 10.0.0.beta2 - 10.0.1, 11.0.0.beta2 - 11.0.1 9.4.39, 10.0.2, 11.0.2 2/26/2021 CVE-2020-27223 Med Med 9.4.6.v20170531 - 9.4.36.v20210114, 10.0.0, 11.0.0 9.4.37, 10.0.1, 11.0.1 11/17/2020 CVE-2020-27218 Med Med 9.4.0.RC0 - 9.4.34, 10.0.0.alpha0 - 10.0.0.beta2, 11.0.0.alpha0 - 11.0.0.beta2 9.4.35, 10.0.0.beta3, 11.0.0.beta3 10/19/2020 CVE-2020-27216 Med High = 9.4.27, = 9.4.21, = 9.4.0, = 9.3.0, =9.2.3 <9.2.9 9.2.9 12/29/2011 CVE-2011-4461 high medium All versions 7.6.0.RCO 11/5/2009 CVE-2009-3555 medium high JVM 1.6u19 7.01, 6.1.22 12/22/2007 CVE-2007-6672 high medium 6.1.rc0-6.1.6 6.1.7 11/5/2007 CVE-2007-5614 low low <6.1.6 6.1.6rc1 11/5/2007 CVE-2007-5613 low low 6.1.6 6.1.6rc0 11/3/2007 CVE-2007-5615 medium medium <6.1.6 6.1.6rc0 11/22/2006 CVE-2006-6969 low high <6.1.0, <6.0.2, <5.1.12, <4.2.27 6.1.0pre3, 6.0.2, 5.1.12, 4.2.27 6/1/2006 CVE-2006-2759 medium medium <6.0.+, <6.0.0Beta17 6.0.0Beta17 11/18/2005 CVE-2006-2758 medium medium <5.1.6 5.1.6, 6.0.0Beta4","title":"Jetty Security","component":"ROOT","version":"","name":"security","url":"/security.html","titles":[{"text":"Reporting Security Issues","hash":"reporting-security-issues","id":1},{"text":"Jetty Security Reports","hash":"jetty-security-reports","id":2}]},"4":{"id":4,"text":"Professional support is available for the open-source releases of the Eclipse Jetty project through Webtide. Webtide fully funds the ongoing development of the open-source project through services and support from members of the Jetty community. As 100% developer-owned and operated, working with Webtide is the best way to support and ensure the future of the open-source Jetty project. If you are interested in learning more about commercial support for Eclipse Jetty you can book an appointment now with a Jetty committer. Mailing lists are an excellent way to interact with the community and have the best chance of achieving a resolution for a particular class of issues. A few mailing lists are available for the Jetty project. When choosing between the developer and user lists, a good rule of thumb is to ask yourself who the audience is. If your question is broadly interesting to the community, you can just use the user’s list. The dev list might be better if your question or comment is narrowly focused on Jetty internals or minutiae. Join - https://dev.eclipse.org/mailman/listinfo/jetty-dev Archives - http://dev.eclipse.org/mhonarc/lists/jetty-dev/ Join - https://dev.eclipse.org/mailman/listinfo/jetty-users Archives - http://dev.eclipse.org/mhonarc/lists/jetty-users/ Join - https://dev.eclipse.org/mailman/listinfo/jetty-announce Archives - http://dev.eclipse.org/mhonarc/lists/jetty-announce/ From a simple support perspective, it is hard to beat StackOverflow when interacting with a Jetty community. Numerous users have asked and been answered on the platform by other users and developers alike. Check out the general jetty tag! The embedded-jetty tag is also popular for questions on Jetty internals. While not necessarily a support channel for solving a specific user problem, the issue tracker for Eclipse Jetty is a great location for addressing issues or suggesting features you want to see (or ideally contribute) in Jetty. When you file a GitHub Issue in the Eclipse Jetty project, several labels are available, and we would like to encourage you to use them appropriately. Issues at Github We have additionally identified and labeled many issues that may be appropriate for users of different levels of expertise who might want to contribute to Jetty but not have a specific goal or issue in mind. Help Wanted","title":"Support","component":"ROOT","version":"","name":"support","url":"/support.html","titles":[{"text":"Commercial Support","hash":"commercial-support","id":1},{"text":"Talk with Webtide","hash":"talk-with-webtide","id":2},{"text":"Open Source Support","hash":"open-source-support","id":3},{"text":"Mailing Lists","hash":"mailing-lists","id":4},{"text":"Jetty Developers List","hash":"jetty-developers-list","id":5},{"text":"Jetty Users List","hash":"jetty-users-list","id":6},{"text":"Jetty Announcements List","hash":"jetty-announcements-list","id":7},{"text":"StackOverflow","hash":"stackoverflow","id":8},{"text":"Github: Issues and Features","hash":"github-issues-and-features","id":9}]},"5":{"id":5,"text":"The documentation for the latest Jetty releases can be found on this site. Documentation for earlier releases are available in Maven Central. Release Version Guides Resources Jetty 12 Operations Guide Programming Guide api / source Jetty 11 Operations Guide Programming Guide api / source Jetty 10 Operations Guide Programming Guide api / source","title":"Jetty Documentation","component":"docs","version":"","name":"index","url":"/docs/index.html","titles":[]},"6":{"id":6,"text":"The Eclipse Jetty Contribution Guide targets developers and writers who want to make contributions to the Jetty project by contributing code, writing documentation, or engaging in the larger community. One of the easiest ways to get involved is via our mailing lists: Jetty Users (jetty-users, archives) is for discussion and questions that are of broad interest to the community of Jetty users. Jetty Developers (jetty-dev, archives) is more narrowly focused on technical topics and discussion regarding Jetty internals. Jetty Announcements (jetty-announce, archives) is for announcements about new releases and other updates from the project’s maintainers. Another great resource, both for Jetty novices who need help and Jetty experts who want to contribute, is StackOverflow. In particular, the jetty and embedded-jetty tags see regular traffic. You can flag potential bugs or suggest new Jetty features on our issue tracker. Before filing a new issue, check the tracker to see if it’s already been filed by someone else. If you do file an issue, make sure to label it appropriately, as this will help the development team (and other users) find it more easily. If you want to contribute to Jetty but don’t have a specific task or goal in mind, consider looking through our \"Help Wanted\" issue backlog. These tasks range from the simple to the complex, but they’re all ones we’ve identified as being particularly well-suited for new contributors to tackle. Webtide is the company behind Jetty that provides services and support for the Jetty Project. Contact Webtide.","title":"Participation and Contribution","component":"contribution-guide","version":"","name":"index","url":"/docs/contribution-guide/index.html","titles":[{"text":"Mailing Lists","hash":"cg-intro-mailing-lists","id":1},{"text":"Stack Overflow","hash":"cg-intro-stack-overflow","id":2},{"text":"Filing Issues","hash":"cg-intro-filing-issues","id":3},{"text":"Help Wanted","hash":"cg-intro-help-wanted","id":4},{"text":"Commercial Support","hash":"cg-intro-commercial-support","id":5}]},"7":{"id":7,"text":"Another great way to contribute to Jetty is to help us write and maintain our documentation. Jetty’s documentation is grouped into three guides, each written for a different target audience. Operations Guide Targets sysops, devops, and developers who want to run Jetty as a standalone web server. Programming Guide Targets developers who want to use the Jetty libraries in their applications. Contribution Guide Targets developers and writers who want to make contributions to the Jetty project. Jetty follows a \"docs as code\" philosophy, meaning we use the same tools to write and build our code and docs. As such, the docs are maintained directly within the Jetty codebase at documentation/jetty-documentation/src/main/asciidoc/. Our docs are written in AsciiDoc, a markup language for writing technical content. AsciiDoc supports many advanced features, such as robust linking across different documentation sets, while remaining human-readable. Although Jetty takes advantage of many of these features, you don’t need to be an AsciiDoc expert to contribute to our documentation. If you are interested in learning the ins and outs of AsciiDoc, the official language documentation is a good place to start. TODO UPDATE FOR ANTORA In addition to using Maven to build the Jetty codebase, we use it to build our docs. During a build, Maven converts AsciiDoc-formatted docs into the HTML pages that you are reading right now. Asciidoctor is the tool that actually performs this compilation step. Maven integrates with Asciidoctor via the asciidoctor-maven-plugin. TODO UPDATE FOR ANTORA Since Jetty’s docs are maintained in git alongside the rest of the Jetty codebase, you’ll need to check out a local copy of the code to contribute to the docs. The docs are maintained as a separate module within Jetty, which means you can build the docs separately from the rest of the project. To do so, run mvn clean install from the documentation/jetty-documentation subdirectory. $ cd jetty.project/documentation $ mvn install [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 9.272 s [INFO] Finished at: 2018-04-09T13:06:10-05:00 [INFO] Final Memory: 74M/247M [INFO] ------------------------------------------------------------------------ == You’ll see a lot of files getting downloaded during the build process. This is Maven setting up the execution environment, which it uses to generate the docs. == When the build completes, you can view the generated docs in your preferred web browser by opening file:///path/to/jetty.project/documentation/jetty-documentation/target/html/index.html on your local filesystem. TODO UPDATE FOR ANTORA The documentation root is documentation/jetty-documentation/. Within this root directory are some files and subdirectories of note: src/main/asciidoc The primary root for all documentation content. src/main/asciidoc/config.adoc This file contains metadata and global variables shared across all the documentation guides. This configuration is used by Asciidoctor to correctly render the final docs. src/main/asciidoc/*-guide Secondary root directories for each individual documentation guide. src/main/asciidoc/*-guide/index.adoc Asciidoctor’s \"point of entry\" for each guide. Content is pulled into the guide via the include:: directives in these index files. Also, guide-specific metadata and variables that wouldn’t belong in the root config.adoc can also be defined here. target/ The final build destination for any docs generated by Maven. By default, docs are generated into target/html, but other formats (e.g., pdf and epub) are available. This directory is not checked into git. The following conventions are not set in stone, but you are encouraged to follow them where possible. Stylistically consistency helps keep the docs easy to both understand and maintain. In markup, each sentence should be on its own line with a hard return at the end of the line. This practice is known variously as ventilated prose or semantic linefeeds. This practice makes for more readable file diffs, and also makes it easier to comment out individual lines or to move sentences around. == AsciiDoc treats a single line breaks just like a space, so it will render ventilated prose naturally. == TODO UPDATE FOR ANTORA AND FORTHCOMING EE11 Jetty 12 features many parallel modules with similar names and functionality, but which target different versions of Jakarta EE. For instance, the ee8-deploy, ee9-deploy, and ee10-deploy modules all behave similarly, except they target Jakarta EE8, EE9, and EE10, respectively. Whenever possible, try to consolidate these types of parallel references. For instance, you can quickly refer to all three of the aforementioned modules as a group by writing ee{8,9,10}-deploy or eeN-deploy. Another approach is to write your docs targeting one specific module, and tell the reader what substitution(s) they would need to make to target a different module. == When targeting a specific version in your docs for demonstration purposes, you should prefer to use the most recent version number. For the example above, this would mean targeting ee12-deploy. == Consolidating parallel references saves readers from having to sift through repetitive material, and helps us avoid maintaining multiple versions of nearly identical docs. Instead of referencing multiple versions in your code and command-line examples, it’s generally better to target one specific version, typically the latest (currently ee12): $ java -jar $JETTY_HOME/start.jar --add-modules=ee12-deploy This will work when copy-pasted into the command line. == You may want to remind the reader to change the 10 in the command to their preferred target version — although doing so isn’t strictly necessary for a simple example like above. == Each .adoc file should contain the license block that exists in the index.adoc file. For reference, here is a standard license header: // // ==================================== // Copyright (c) 1995 Mort Bay Consulting Pty Ltd and others. // // This program and the accompanying materials are made available under the // terms of the Eclipse Public License v. 2.0 which is available at // https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0 // which is available at https://www.apache.org/licenses/LICENSE-2.0. // // SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 // ==================================== // TODO UPDATE FOR ANTORA We rely heavily on custom IDs for generating stable documentation URLs and linking within docs. At minimum, every chapter and top-level section should have its own custom ID; however, best practice is to give each subsection its own custom ID, too. == Custom IDs share a single global namespace, which means they must be unique across all documentation guides. To help deal with this constraint, we used different ID prefixes in each guide: Operations Guide: og- Programming Guide: pg- Contribution Guide: cg- == Images should live in the images/ directory of the guide they appear in. Use the image:: directive to include an image, like so: image::small_powered_by.gif[image,width=145] Admonitions (or \"callout blocks\") are useful for flagging information that doesn’t belong in the natural flow of text. Asciidoc supports five levels of admonition: [NOTE] [IMPORTANT] [TIP] [CAUTION] [WARNING] Each admonition’s visual appearance and typical usage situation are as follows: == A note about the previous case to be aware of. == == Important notes are marked with an icon. == == Tips that make your life easier. == == Places where you have to be careful what you are doing. == == Where extreme care has to be taken. Data corruption or other nasty things may occur if these warnings are ignored. ==","title":"Writing Documentation","component":"contribution-guide","version":"","name":"index","url":"/docs/contribution-guide/documentation/index.html","titles":[{"text":"Documentation guides","hash":"cg-documentation-guides","id":1},{"text":"The documentation toolchain","hash":"cg-documentation-toolchain","id":2},{"text":"AsciiDoc","hash":"cg-documentation-asciidoc","id":3},{"text":"Maven and Asciidoctor","hash":"cg-documentation-asciidoctor","id":4},{"text":"Building the docs","hash":"cg-documentation-build","id":5},{"text":"Documentation project structure","hash":"cg-documentation-build-structure","id":6},{"text":"Style guide","hash":"cg-documentation-style","id":7},{"text":"Ventilated prose","hash":"cg-documentation-style-prose","id":8},{"text":"Documenting versions","hash":"cg-documentation-versions","id":9},{"text":"Documenting multiple versions at once","hash":"cg-documentation-versions-multiple","id":10},{"text":"Dealing with multiple versions in code examples","hash":"cg-documentation-versions-multiple-example","id":11},{"text":"License blocks","hash":"cg-documentation-license","id":12},{"text":"AsciiDoc conventions","hash":"cg-documentation-asciidoc-conventions","id":13},{"text":"Custom IDs","hash":"cg-documentation-asciidoc-conventions-ids","id":14},{"text":"Images","hash":"cg-documentation-asciidoc-conventions-images","id":15},{"text":"Admonitions","hash":"cg-documentation-asciidoc-conventions-admonitions","id":16}]},"8":{"id":8,"text":"Jetty’s uses Apache Maven for builds. To successfully build the project, you will also need a recent version of the Java Development Kit (JDK). Here are the minimum Maven and JDK version build requirements for each actively maintained branch. Build versioning requirements by branch |== | Branch | Maven Version | Minimum JDK | Recommended JDK | jetty-12.0.x | Maven 3.9.2+ | OpenJDK 17+ | OpenJDK 19 | jetty-11.0.x | Maven 3.8.6+ | OpenJDK 11+ | OpenJDK 17 | jetty-10.0.x | Maven 3.8.6+ | OpenJDK 11+ | OpenJDK 17 |== To build the Jetty documentation, OpenJDK 19+ is required due to the use of the virtual thread APIs. To get started with Jetty as quickly as possible, navigate to your local copy of the Jetty repo and run: mvn -Pfast clean install The -Pfast flag tells Maven to bypass running tests and other checks. To build Jetty and automatically run all tests, run: mvn clean install The full build takes substantial time and memory, as it runs hundreds of test cases — many of which spin up embedded instances of Jetty itself. The build also runs stress tests that may require you (depending on your hardware or operating system) to set you file descriptor limit to a value greater than 2048. You can view or set your file descriptor limit by running: $ ulimit -n [new_value] Flagging flaky tests == Not all test cases are as timing independent as they should be, which can result in intermittent test failures. You can help us track these flaky tests by opening an issue when you come across one. == Per default, the build is using the Maven Build Cache extension this means you will use your local build cache, To disable it you can use the property $ mvn clean install -Dmaven.build.cache.enabled=false Jetty uses Junit5’s parallel execution to run test cases in parallel. This behavior is configurable via flags passed to Maven, like so: mvn install -Djunit.jupiter.execution.parallel.enabled=false Here are the available configuration flags: -Djunit.jupiter.execution.parallel.enabled=[BOOLEAN] Disables parallel execution of tests. -Djunit.jupiter.execution.parallel.config.fixed.parallelism=[NUMBER] Configures the number of tests to be executed in parallel. == Certain tests cannot be run in parallel because they access or modify static fields, and are tagged in the codebase with this annotation: @Isolated(\"Access static field of Configurations\") Maven will run these tests in isolation even when parallel execution is explicitly enabled. == Graphviz: used by Asciidoctor in the jetty-documentation module to produce various PlantUML graphs. Docker: used to run some integration tests for testing third party integrations. Once the build is complete, you can find the built Jetty Maven artifacts in your Maven local repository, along with the following locations of note: |== | Branch(es) | Location | Description | all | jetty-home/target/jetty-home-.tar.gz | The Jetty Home distribution | jetty-12.0.x | jetty-ee10/jetty-ee10-runner/target/jetty-ee10-runner-.jar | The Jetty Runner distribution for EE10/Servlet 6 (jakarta.servlet) webapps | jetty-12.0.x | jetty-ee9/jetty-ee9-runner/target/jetty-ee9-runner-.jar | The Jetty Runner distribution for EE9/Servlet 5 (jakarta.servlet) webapps | jetty-12.0.x | jetty-ee8/jetty-ee8-runner/target/jetty-ee8-runner-.jar | The Jetty Runner distribution for EE8/Servlet 4 (javax.servlet) webapps | jetty-11.0.x | jetty-runner/target/jetty-runner-.jar | The Jetty Runner distribution for EE9/Servlet 5 (jakarta.servlet) webapps | jetty-10.0.x | jetty-runner/target/jetty-runner-.jar | The Jetty Runner distribution for EE8/Servlet 4 (javax.servlet) webapps |==","title":"Building Jetty","component":"contribution-guide","version":"","name":"index","url":"/docs/contribution-guide/build/index.html","titles":[{"text":"Maven and JDK requirements","hash":"cg-build-requirements","id":1},{"text":"Running a fast build","hash":"cg-build-fast","id":2},{"text":"Running a full build","hash":"cg-build-full","id":3},{"text":"Maven Build Cache","hash":"cg-build-cache","id":4},{"text":"Executing tests in parallel","hash":"cg-build-parallel","id":5},{"text":"Optional build tools","hash":"cg-build-optional-tools","id":6},{"text":"Build artifacts","hash":"cg-build-artifacts","id":7}]},"9":{"id":9,"text":"Since Jetty is a member of the Eclipse Foundation, all contributors must first sign the Eclipse Contributor Agreement (ECA) before their code changes can be merged into source. The Eclipse Foundation maintains an ECA FAQ with more information about the ECA’s provisions. Before you set up your local development environment, we recommend creating an account at eclipse.org and submitting your signed ECA. Follow the instructions on the Eclipse wiki for details on how to create your account and sign the ECA. Make sure your emails match == The email address you use to sign the ECA must be the same as the email you use to sign your git commits. == Jetty’s build process has a git hook that verifies each incoming pull request is signed with an email address with an active ECA. If the git hook cannot verify your email, the Jetty committers cannot do anything to accept your commit.","title":"The Eclipse Contributor Agreement","component":"contribution-guide","version":"","name":"index","url":"/docs/contribution-guide/eca/index.html","titles":[]},"10":{"id":10,"text":"We wholeheartedly welcome contributions to Jetty. While not every contribution will be accepted, our commitment is to work with interested parties on the things they care about. The email in your git commits must match the email you used to sign the Eclipse Contributor Agreement. As such, you’ll likely want to configure user.email in git accordingly. See this guide on GitHub for details on how to do so. If your pull request addresses a particular issue in our repository, then the commit message should reference the issue. Specifically, the message should follow the form Issue # : $ git commit -s -m \"Issue #123 resolving the issue by adding widget\" Using this format will ensure that the commit will be included in VERSIONS.txt upon new releases of Jetty. You should sign off on every commit in your pull request using git’s signoff feature (git commit -s). Please see GitHub’s documentation for creating pull requests. We do our best to process contributions in a timely fashion. Please note that we can only handle pull requests with actively engaged parties. We reserve the right to abandon pull requests whose authors do not respond in a timely fashion. We will generally adhere to the following time frames for contributions: Invalid Pull Requests - 1 week These pull requests do not follow the contribution requirements for some reason — e.g., a missing contributor agreement or mismatched email signature. We will try and follow up with the pull request author to resolve the issue. If we do not hear from the contributor after a week we will close the pull request. Valid Pull Requests - 2 weeks If the pull request can be immediately merged, we will do so. Otherwise, we will follow up with the author in a comment to discuss what additional actions must be taken before the change can be landed. If the original contributor does not respond within two weeks, we may close the commit, or make some variation of the commit ourselves.","title":"Submitting Patches","component":"contribution-guide","version":"","name":"index","url":"/docs/contribution-guide/patches/index.html","titles":[{"text":"Configuring git","hash":"cg-patches-git-config","id":1},{"text":"Writing commit messages","hash":"cg-patches-git-commit-messages","id":2},{"text":"Signing the commit","hash":"cg-patches-git-commit-signing","id":3},{"text":"Creating pull requests","hash":"cg-patches-pull-requests","id":4},{"text":"Time frames","hash":"cg-patches-time-frames","id":5}]},"11":{"id":11,"text":"Jetty’s source is maintained on GitHub at https://github.com/eclipse/jetty.project, where it is managed by the Eclipse Foundation. You can clone a copy of the Jetty repo onto your local machine by running: git clone https://github.com/eclipse/jetty.project.git In addition to the Jetty code repository, we maintain a number of related repositories: Non-Eclipse Jetty Repositories https://github.com/jetty-project Build Toolchain https://github.com/eclipse/jetty.toolchain If you plan to work on a specific issue within Jetty, make sure to target the correct branch for your pull request. Active Jetty branches |== | jetty-12.0.x | Development (default branch) | Servlet 6.0 | Java 17+ | jetty-11.0.x | Maintenance | Servlet 5.0 | Java 11+ | jetty-10.0.x | Maintenance | Servlet 4.0 | Java 11+ | jetty-9.4.x | End of Community Support | Servlet 3.1 | Java 8+ |== Maintenance branches are periodically merged into active development branches. Older branches are only updated if they get specifically targeted by a pull request. Also, changes to older branches aren’t regularly merged forward — although an individual change may be cherry-picked forward, depending on the nature of the fix.","title":"Getting the source code","component":"contribution-guide","version":"","name":"index","url":"/docs/contribution-guide/source/index.html","titles":[{"text":"Related repositories","hash":"cg-source-repositories","id":1},{"text":"Version branches","hash":"cg-source-branches","id":2}]},"12":{"id":12,"text":"There are a number of ways to report security issues to the Jetty project. If the issue is directly related to Jetty itself then you are encouraged to report to the Jetty developers directly at security@webtide.com. Webtide employs the active committers of the Jetty project, so this is the preferred reporting method. == We prefer you report any security issues directly to the Jetty developers via email rather than via GitHub Issues, as GitHub does not support private issues. == If the issue is related to Eclipse or its Jetty integration then we encourage you to reach out to security@eclipse.org. If the issue is related to some third party integration, we are happy to work with you to identify the proper reporting entity and work with them to properly address the issue. In this case, you are welcome to contact either of the above outreach addresses. We are generally flexible in how we work with reporters of security issues from an attribution perspective, but reserve the right to act in the interests of the Jetty project in all circumstances.","title":"Security","component":"contribution-guide","version":"","name":"index","url":"/docs/contribution-guide/security/index.html","titles":[]},"13":{"id":13,"text":"IntelliJ IDE An IntelliJ code style XML file is available in the source repo at /build-resources/jetty-codestyle-intellij.xml Follow IntelliJ’s documentation to import these settings into your IDE. Eclipse IDE An Eclipse code style XML file is available in the source repo at /build-resources/jetty-codestyle-eclipse-ide.xml. The following code sample shows some basic Java styles and conventions used throughout the Jetty codebase: import some.exact.ClassName; // GOOD import some.wildcard.package.*; // BAD! package org.always.have.a.package; /** * All classes should have a javadoc */ class MyClassName { // Use 4 spaces to indent. // The code must format OK with default tab size of 8. private static final int ALL_CAPS_FOR_PUBLIC_CONSTANTS = 1; // Prefix fields with one underscore (_). This // convention is not mandatory, but the chosen style // should be used consistently within a single class. private Object _privateField; // Use getters and setters rather than public fields. // Braces always on new line. public void setPrivateField(Object privateField) { _privateField = privateField; } public Object getPrivateField() { return _privateField; } public void doSomething() throws SomeException { Object local_variable = _privateField; // Braces always on new line. if (local_variable = null) { // do Something } } } When deciding when and what to log, bear in mind a few things: Never use LOG.debug() without a preceding if (LOG.isDebugEnabled()). Avoid polluting the log with very long stack traces. Don’t routinely produce logging events in response to data sent by a user. Only call one LOG method for a given event, to avoid generating confusingly interleaved log messages. Never call LOG.warn() right before throwing an exception, as this will likely result in double logging the exception. Avoid calling LOG.debug() right before throwing an exception, as this will make debug logs verbose while adding little information. When interacting with a request or other client-provided data that result in an exception, use DEBUG-level logging: catch (Throwable t) { if (LOG.isDebugEnabled()) LOG.debug(\"Something happened {} {} {}\",x, y, z, t); } When calling into application code that throws an exception, use INFO-level logging, and gate the log with LOG.isDebugEnabled() to reduce the size of logging stack traces: catch (Throwable t) { if (LOG.isDebugEnabled()) LOG.info(\"Something happened {} {} {}\", x, y, z, t); else LOG.info(\"Something happened {} {} {} {}\", x, y, z, t.toString()); } When exceptions happen in Jetty code, and if the exception is (1) not entirely unexpected, (2) can happen relatively frequently, or (3) can potentially have a very long stack trace, you can use LOG.isDebugEnabled() to cut down on the size of the logging of the stacktrace: catch (Throwable t) { if (LOG.isDebugEnabled()) LOG.warn(\"Something happened {} {} {}\", x, y, z, t); else LOG.warn(\"Something happened {} {} {} {}\", x, y, z, t.toString()); } == By default, Jetty’s logger outputs a full stacktrace whether you call it like LOG.warn(\"Something happened\", t) or LOG.warn(\"Something happened {}\", t). If you only want the log message but not the stack trace, you need to do call .toString() on the caught exception, e.g., LOG.warn(\"Something happened {}\", t.toString()). ==","title":"Code Standards","component":"contribution-guide","version":"","name":"index","url":"/docs/contribution-guide/standards/index.html","titles":[{"text":"Configuring your IDE","hash":"cg-code-standards-ide","id":1},{"text":"Java conventions","hash":"cg-code-standards-java","id":2},{"text":"Logging conventions","hash":"cg-code-standards-logging","id":3}]},"14":{"id":14,"text":"This section of the site contains the documentation for Eclipse Jetty 12. The Eclipse Jetty Operations Guide targets sysops, devops, and developers who want to install Eclipse Jetty as a standalone server to deploy web applications. The Eclipse Jetty Programming Guide targets developers who want to use the Eclipse Jetty libraries in their applications, and advanced sysops/devops that want to customize the deployment of web applications.","title":"Eclipse Jetty 12","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/index.html","titles":[{"text":"Operations Guide","hash":"operations-guide","id":1},{"text":"Programming Guide","hash":"programming-guide","id":2}]},"15":{"id":15,"text":"The Eclipse Jetty Operations Guide targets sysops, devops, and developers who want to install Eclipse Jetty as a standalone server to deploy web applications.","title":"Jetty 12 Operations Guide","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/index.html","titles":[]},"16":{"id":16,"text":"The Eclipse Jetty Programming Guide targets developers who want to use the Jetty libraries in their applications. The Jetty libraries provide the client-side and server-side APIs to work with various web protocols such as HTTP/1.1, HTTP/2, HTTP/3, WebSocket and FastCGI. You may use the Jetty client-side library in your application to make calls to third party REST services, or to other REST microservices in your system. Likewise, you may use the Jetty server-side library to quickly create an HTTP or REST service without having to create a web application archive file (a *.war file) and without having to deploy it to a Jetty standalone server that you would have to download and install. This guide will walk you through the design of the Jetty libraries and how to use its classes to write your applications.","title":"Jetty 12 Programming Guide","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/programming-guide/index.html","titles":[]},"17":{"id":17,"text":"Enable the ee{8,9,10}-annotations module if your webapp - or any of its third party libraries - uses any of the following: Annotations: @Resource @Resources @PostConstruct @PreDestroy @DeclaredRoles @RunAs @MultipartConfig @WebServlet @WebFilter @WebListener @WebInitParam @ServletSecurity, @HttpConstraint, @HttpMethodConstraint @HandlesTypes javax.servlet.ServletContainerInitializers or jakarta.servlet.ServletContainerInitializers JSP According to more recent versions of the Jakarta Servlet Specification, the web.xml file can contain the attribute metadata-complete. If this is set to true, then no annotation scanning takes place, and your descriptor must contain the equivalent xml statements of any annotations. If it is metadata-complete=false, or your web.xml predates the inclusion of this attribute, annotation scanning is required to take place. To prevent annotation scanning you can use the WebAppContext.setConfigurationDiscovered(false) method. Here’s an example context XML file that calls this method: (1) false (2) 1 Configures a WebAppContext, which is the Jetty component that represents a standard Servlet web application. 2 Specifies that scanning should not take place. However, despite metadata-complete=true, scanning of classes may still occur because of ServletContainerInitializer. Classes implementing this interface are found by Jetty using the javax.util.ServiceLoader mechanism, and if one is present and it includes the @HandlesTypes annotation, then Jetty must scan the class hierarchy of the web application. This may be very time-consuming if you have many jars. Jetty can reduce the time taken by limiting the jars that are scanned. By default, Jetty will not scan any classes that are on the container’s classpath. Sometimes, you may have third party libraries on the container’s classpath that you need to be scanned. In this case, use the org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern context attribute to define which container jars and class directories to scan. The value of this attribute is a regular expression. Here’s an example from a context XML file that includes any jar whose name starts with foo- or bar-, or a directory named classes: (1) (2) org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern (3) .*/foo-[^/]*\\.jar$|.*/bar-[^/]*\\.jar$|.*/classes/.* (4) 1 Configures a WebAppContext, which is the Jetty component that represents a standard Servlet web application. 2 Specifies a context attribute. 3 Specifies the name of the context attribute. 4 Specifies the value of the context attribute. Note that the order of the patterns defines the ordering of the scanning of the jars or class directories. By default, Jetty will scan all classes from WEB-INF/classes and all jars from WEB-INF/lib according to the order, if any, established by absolute or relative ordering clauses in web.xml. If your webapp contains many jar files that you know do not contain any annotations, you can significantly speed up deployment by omitting them from scanning. However, be careful if your webapp uses a ServletContainerInitializer with a @HandlesTypes annotation that you don’t exclude jars that contain classes matching the annotation. Use the org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern context attribute to define a regular expression for jars and class directories to select for scanning. Here’s an example of a context XML file that sets a pattern that matches any jar on the webapp’s classpath that starts with \"spring-\": (1) (2) org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern (3) .*/spring-[^/]*\\.jar$ (4) 1 Configures a WebAppContext, which is the Jetty component that represents a standard Servlet web application. 2 Specifies a context attribute. 3 Specifies the name of the context attribute. 4 Specifies the value of the context attribute. By default, Jetty performs annotation scanning in a multi-threaded manner in order to complete it in the minimum amount of time. If you don’t want multi-threaded scanning, you can configure Jetty to revert to single-threaded scanning. There are several options to configure this: Set the context attribute org.eclipse.jetty.annotations.multiThreaded to false Set the Server attribute org.eclipse.jetty.annotations.multiThreaded to false Set the System property org.eclipse.jetty.annotations.multiThreaded to false Method 1 will only affect the current webapp. Method 2 will affect all webapps deployed to the same Server instance. Method 3 will affect all webapps deployed in the same JVM. By default, Jetty will wait a maximum of 60 seconds for all of the scanning threads to complete. You can set this to a higher or lower number of seconds by doing one of the following: Set the context attribute org.eclipse.jetty.annotations.maxWait Set the Server attribute org.eclipse.jetty.annotations.maxWait Set the System property org.eclipse.jetty.annotations.maxWait Method 1 will only affect the current webapp. Method 2 will affect all webapps deployed to the same Server instance. Method 3 will affect all webapps deployed in the same JVM. The ServletContainerInitializer class can exist in: the container’s classpath, the webapp’s WEB-INF/classes directory, the webapp’s WEB-INF/lib jars, or any external extraClasspath that you have configured on the webapp. The Jakarta Servlet Specification does not define any order in which a ServletContainerInitializer must be called when the webapp starts. By default, Jetty will call them in the following order: ServletContainerInitializers from the container’s classpath ServletContainerInitializers from WEB-INF/classes ServletContainerInitializers from WEB-INF/lib jars in the order established in web.xml, or in the order that the SCI is returned by the javax.util.ServiceLoader if there is no ordering. By default, as according to the Jakarta Servlet Specification, all ServletContainerInitializer instances that are discovered are invoked. Sometimes, depending on your requirements, you may need to prevent some being called at all. In this case, you can define the org.eclipse.jetty.containerInitializerExclusionPattern context attribute. This is a regular expression that defines patterns of classnames that you want to exclude. Here’s an example of setting the context attribute in a context XML file: (1) (2) org.eclipse.jetty.containerInitializerExclusionPattern (3) com.acme.*|com.corp.SlowContainerInitializer (4) 1 Configures a WebAppContext, which is the Jetty component that represents a standard Servlet web application. 2 Specifies a context attribute. 3 Specifies the name of the context attribute. 4 Specifies the value of the context attribute. In this example we exclude all ServletContainerInitializer instances in the com.acme package, and the specific class com.corp.SlowContainerInitializer. It is possible to use exclusion and ordering together to control ServletContainerInitializer invocation - the exclusions will be applied before the ordering. If you need ServletContainerInitializer classes called in a specific order, you can use the context attribute org.eclipse.jetty.containerInitializerOrder. Set it to a list of comma separated ServletContainerInitializer class names in the order that you want them applied. You may optionally use the wildcard character * once in the list. It will match all ServletContainerInitializer classes not explicitly named in the list. Here is an example context XML file that ensures the com.example.PrioritySCI will be called first, followed by the com.acme.FooSCI, then all other SCIs: (1) (2) org.eclipse.jetty.containerInitializerOrder (3) org.eclipse.jetty.websocket.javax.server.JavaxWebSocketServletContainerInitializer, com.acme.FooSCI, * (4) 1 Configures a WebAppContext, which is the Jetty component that represents a standard Servlet web application. 2 Specifies a context attribute. 3 Specifies the name of the context attribute. 4 Specifies the value of the context attribute.","title":"Annotations","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/annotations/index.html","titles":[{"text":"Annotation Scanning","hash":"scanning","id":1},{"text":"The container classpath","hash":"og-container-include-jar-pattern","id":2},{"text":"The webapp classpath","hash":"og-web-inf-include-jar-pattern","id":3},{"text":"Multi-threading","hash":"multi-threading","id":4},{"text":"ServletContainerInitializers","hash":"scis","id":5},{"text":"Exclusions","hash":"exclusions","id":6},{"text":"Ordering","hash":"ordering","id":7}]},"18":{"id":18,"text":"Jetty is an HTTP server and Servlet Container, and supports deployments of web applications. The Jetty server listens on one or more network ports using one or more protocol connectors. Clients send HTTP requests for specific URIs, such as https://host/store/cart. The HTTP requests arrive to the connectors through the network; the Jetty server processes the requests and, based on their URIs, forwards them to the appropriate deployed web application. There are three main concepts on which the Jetty standalone server is based: The Jetty module system, where Jetty modules provides Jetty features. The $JETTY_BASE directory, that provides a place where you configure which Jetty modules you want to enable, configure the properties of each enabled module, and therefore configure the features you need for your web applications. The Jetty start mechanism, that starts a JVM that runs Jetty with the configuration you specified. After installing Jetty, you will want to set up a $JETTY_BASE directory where you configure Jetty modules. The Jetty standalone server is made of Java components that are assembled together, configured and started to provide different features. A Jetty module provides one or more components that work together to provide typically one feature, although they may provide more than one feature. A Jetty module is nothing more than Jetty components assembled together like you would do using Java APIs, just done in a declarative way using configuration files. What you can do in Java code to assemble Jetty components can be done using Jetty modules. A Jetty module may be dependent on other Jetty modules: for example, the http Jetty module depends on the server Jetty module which in turn depends on the threadpool and logging Jetty modules. Every feature in a Jetty server is enabled by enabling the corresponding Jetty module(s). For example, if you enable only the http Jetty module, then your Jetty standalone server will only be able to listen to a network port for clear-text HTTP requests. It will not be able to process secure HTTP (i.e. https) requests, it will not be able to process WebSocket, or HTTP/2, or HTTP/3 or any other protocol because the correspondent modules have not been enabled. You can even start a Jetty server without listening on a network port — for example because you have enabled a custom module you wrote that provides the features you need. This allows the Jetty standalone server to be as small as necessary: modules that are not enabled are not loaded, don’t waste memory, and you don’t risk a client using a module that you did not know was even there. For more detailed information about the Jetty module system, see this section. Instead of managing multiple Jetty distributions out of many locations, it is possible to maintain a separation between the binary installation of the standalone Jetty, known as $JETTY_HOME, and the customizations for your specific environment(s), known as $JETTY_BASE. This separation between the binary installation directory and the specific configuration directory allows managing multiple, different, server configurations, and allows for quick, drop-in upgrades of Jetty. There should always only be one $JETTY_HOME (per version of Jetty), but there can be many $JETTY_BASE directories that reference it. This separation between $JETTY_HOME and $JETTY_BASE allows Jetty upgrades without affecting your web applications. $JETTY_HOME contains the Jetty runtime and libraries and the default configuration, while a $JETTY_BASE contains your web applications and any override of the default configuration. For example, with the $JETTY_HOME installation the default value for the network port for clear-text HTTP is 8080. However, you may want that port to be 6060, because Jetty is behind a load balancer that is configured to forward to the backend on port 6060. In this case, you configure the clear-text HTTP port in $JETTY_BASE, not in $JETTY_HOME. When you upgrade Jetty, you will upgrade only the files in $JETTY_HOME, and all the configuration in $JETTY_BASE will remain unchanged, keeping your clear-text HTTP port at 6060. Installing the Jetty runtime and libraries in $JETTY_HOME also allows you to leverage file system permissions: $JETTY_HOME may be owned by an administrator user (so that only administrators can upgrade it), while $JETTY_BASE directories may be owned by a less privileged user. If you had changed the default configuration in $JETTY_HOME, when you upgrade Jetty, say from version 10.0.0 to version 10.0.1, your changes would be lost. Maintaining all the changes in $JETTY_HOME, and having to reconfigure these with each upgrade results in a massive commitment of time and effort. To recap: $JETTY_HOME This is the location for the Jetty binaries. $JETTY_BASE This is the location for your configurations and customizations to the Jetty binaries. The Jetty start mechanism provides two features: The mean to configure your $JETTY_BASE by enabling the desired modules, and to display the configuration of your $JETTY_BASE. The mean to start Jetty itself, by starting a JVM that reads the Jetty configuration in $JETTY_BASE, which is then executed to assemble and start the Jetty components. The Jetty start mechanism is invoked by executing $JETTY_HOME/start.jar from within your $JETTY_BASE, and you can think of it as the Jetty command line program, similar to many Unix/Windows command line programs. For example, you can ask for help: $ java -jar $JETTY_HOME/start.jar --help Or you can list all available modules (or only those with a specific tag): # List all the modules. $ java -jar $JETTY_HOME/start.jar --list-modules=* # List all the modules tagged as \"demo\". $ java -jar $JETTY_HOME/start.jar --list-modules=demo You can enable a module, for example the http module: $ java -jar $JETTY_HOME/start.jar --add-modules=http Once you have one or more module enabled, you can display the current configuration, to verify that the configuration is correct: $ java -jar $JETTY_HOME/start.jar --list-config You can enable a Jetty demo module, which will deploy a demo web application: $ java -jar $JETTY_HOME/start.jar --add-modules=demo-simple Finally, you can start Jetty: $ java -jar $JETTY_HOME/start.jar Read more information at the Jetty start mechanism section.","title":"Architecture Overview","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/arch/index.html","titles":[{"text":"Main Concepts","hash":"concepts","id":1},{"text":"Jetty Modules","hash":"modules","id":2},{"text":"$JETTY_HOME and $JETTY_BASE","hash":"jetty-base","id":3},{"text":"Start Mechanism","hash":"start","id":4}]},"19":{"id":19,"text":"Most of the time you want to be able to customize the deployment of your web applications, for example by changing the contextPath, or by adding JNDI entries, or by configuring virtual hosts, etc. Jetty supports the deployment of each web application to a specific environment. The available environments are: Java EE 8 — Supports Servlet 4.0 (and associated specifications) in the javax.* packages. Jakarta EE 9 — Supports Servlet 5.0 (and associated specifications) in the jakarta.* packages. Jakarta EE 10 — Supports Servlet 6.0 (and associated specifications) in the jakarta.* packages. Jetty Core — Supports web applications written against the Jetty Handler APIs, without any Servlet dependencies. This means that you can simultaneously deploy an old Java EE 8 web application, say old-ee8.war, alongside a new Jakarta EE 10 web application, say new-ee10.war, alongside a web application that only uses the Jetty Handler APIs, say app-jetty.xml. The customization of the deployment (for example, web application context path, etc.) is performed by processing Jetty context XML files. The deploy module contains the DeploymentManager component that scans the $JETTY_BASE/webapps directory for changes, following the deployment rules described in this section. For each specific environment there is a specific deploy module that you must enable: For Java EE 8, ee8-deploy For Java EE 9, ee9-deploy For Java EE 10, ee10-deploy For Jetty Core, core-deploy Each of these modules provide the environment specific features, and depend on the deploy module that provides the scanning features. The DeploymentManager scans the $JETTY_BASE/webapps directory for changes every N seconds, where N is configured via the jetty.deploy.scanInterval property. By default, the scan interval is 0 seconds, which means static deployment, and the DeploymentManager will not scan the $JETTY_BASE/webapps directory for changes. This means that to deploy/redeploy/undeploy a web application you will need to stop and restart Jetty. Setting the scan interval to a value of 1 second (or greater) means that hot deployment is enabled: if a file is added/changed/removed from the $JETTY_BASE/webapps directory, the DeploymentManager will notice the change and respectively deploy/redeploy/undeploy the web application. The following command line enables hot deployment by specifying the jetty.deploy.scanInterval property on the command line, and therefore only for this particular run: $ java -jar $JETTY_HOME/start.jar jetty.deploy.scanInterval=1 To make hot deployment persistent, you need to edit the appropriate -deploy module configuration file, $JETTY_BASE/start.d/-deploy.ini (eg: ee10-deploy.ini), uncomment the module property jetty.deploy.scanInterval and change the value to 1 second (or greater): -deploy.ini --module=deploy jetty.deploy.scanInterval=1 ... Adding a *.war file, a *.war directory, a Jetty context XML file or a normal directory to $JETTY_BASE/webapps causes the DeploymentManager to deploy the new web application. Updating a *.war file or a Jetty context XML file causes the DeploymentManager to redeploy the web application, which means that the Jetty context component representing the web application is stopped, then reconfigured, and then restarted. Removing a *.war file, a *.war directory, a Jetty context XML file or a normal directory from $JETTY_BASE/webapps causes the DeploymentManager to undeploy the web application, which means that the Jetty context component representing the web application is stopped and removed from the Jetty server. When a file or directory is added to $JETTY_BASE/webapps, the DeploymentManager derives the web application contextPath from the file or directory name, with the following rules: If the directory name is, for example, mywebapp/, it is deployed as a standard web application if it contains a WEB-INF/ subdirectory, otherwise it is deployed as a web application of static content. The contextPath would be /mywebapp (that is, the web application is reachable at http://localhost:8080/mywebapp/). If the directory name is ROOT, case-insensitive, the contextPath is / (that is, the web application is reachable at http://localhost:8080/). If the directory name ends with .d, for example config.d/, it is ignored, although it may be referenced to configure other web applications (for example to store common files). If the *.war file name is, for example, mywebapp.war, it is deployed as a standard web application with the context path /mywebapp (that is, the web application is reachable at http://localhost:8080/mywebapp/). If the file name is ROOT.war, case-insensitive, the contextPath is / (that is, the web application is reachable at http://localhost:8080/). If both the mywebapp.war file and the mywebapp/ directory exist, only the file is deployed. This allows the directory with the same name to be the *.war file unpack location and avoid that the web application is deployed twice. A Jetty context XML file named mywebapp.xml is deployed as a web application by processing the directives contained in the XML file itself, which must set the contextPath, which could be different from the name of the XML file. If both mywebapp.xml and mywebapp.war exist, only the XML file is deployed. This allows the XML file to reference the *.war file and avoid that the web application is deployed twice. A web application is always deployed to a specific environment, which is either configured for the deployed application or set to the default environment. If only a single specific deployer module is enabled, for example ee10-deploy, then it is the default environment and applications will be deployed to it without any additional configuration. If multiple deployer modules are enabled, then the default environment is: The most recent Jakarta EE environment of the ee{8,9,10}-deploy modules that are enabled. Otherwise, the core environment, if the core-deploy module is enabled. Otherwise, no deployer environment has been enabled, and therefore no application can be deployed. For example, if core-deploy, ee9-deploy and the ee10-deploy modules are enabled, then ee10 is the default environment, to which applications will be deployed unless otherwise configured (see below). To configure a specific environment for an application, you add a *.properties file with the same name of the web application. For example, an application deployed to $JETTY_BASE/webapps/my-ee9-app.war is configured with the file $JETTY_BASE/webapps/my-ee9-app.properties, with the following content: my-ee9-app.properties environment=ee9 In case of simultaneous multiple deployer environments, it is good practice to always specify the *.properties file for your web applications. If you do not specify the *.properties file for your web applications, then the deployer for the default environment will be used. For example, if you have enabled the deployer Jetty module for all Jakarta EE versions, and you deploy an EE 9 web application without the *.properties file, then it will be deployed by the EE 10 deployer, with unspecified results. This unspecified deployment may not work as the EE 9 web application may use APIs that have been removed in EE 10, causing an error at runtime. A Jetty context XML file is a Jetty XML file that allows you to customize the deployment of web applications. Recall that the DeploymentManager component of the Jetty deploy module gives priority to Jetty context XML files over *.war files or directories. To deploy a web application using a Jetty context XML file, simply place the file in the $JETTY_BASE/webapps directory. A simple Jetty context XML file, for example named wiki.xml is the following: wiki.xml (1) /wiki (2) /opt/myapps/myapp.war (3) 1 Configures a WebAppContext, which is the Jetty component that represents a standard Servlet web application. 2 Specifies the web application contextPath, which may be different from the *.war file name. 3 Specifies the file system path of the *.war file. The Jetty content XML file may be accompanied by a *.properties file that specifies the environment to use for the deployment: wiki.properties environment=ee10 Refer to this section for more information about specifying the environment. The $JETTY_BASE directory would look like this: $JETTY_BASE ├── resources │ └── jetty-logging.properties ├── start.d │ ├── deploy.ini │ └── http.ini └── webapps ├── wiki.properties └── wiki.xml The *.war file may be placed anywhere in the file system and does not need to be placed in the $JETTY_BASE/webapps directory. If you place both the Jetty context XML file and the *.war file in the $JETTY_BASE/webapps directory, remember that they must have the same file name, for example wiki.xml and wiki.war, so that the DeploymentManager deploys the web application only once using the Jetty context XML file (and not the *.war file). You can use the features of Jetty XML files to avoid to hard-code file system paths or other configurations in your Jetty context XML files, for example by using system properties: wiki.xml /wiki /myapp.war Note how the *.war file path is now obtained by resolving the system property myapps.dir that you can specify on the command line when you start Jetty: $ java -jar $JETTY_HOME/start.jar -Dmyapps.dir=/opt/myapps A web application may reference a JNDI entry, such as a JDBC DataSource from the web application web.xml file. The JNDI entry must be defined in a Jetty XML file, for example a context XML like so: mywebapp.xml /mywebapp /opt/webapps/mywebapp.war jdbc/myds jdbc:mysql://localhost:3306/databasename user password For more information and examples on how to use JNDI in Jetty, refer to the JNDI feature section. Class com.mysql.cj.jdbc.MysqlConnectionPoolDataSource is present in the MySQL JDBC driver file, mysql-connector-java-.jar, which must be available on the server’s classpath . If the class is instead present within the web application, then the JNDI entry must be declared in a WEB-INF/jetty-env.xml file - see the JNDI feature section for more information and examples. A virtual host is an internet domain name, registered in the Domain Name Server (DNS), for an IP address such that multiple virtual hosts will resolve to the same IP address of a single server instance. If you have multiple web applications deployed on the same Jetty server, by using virtual hosts you will be able to target a specific web application. For example, you may have a web application for your business and a web application for your hobbies , both deployed in the same Jetty server. By using virtual hosts, you will be able to have the first web application available at http://domain.biz/, and the second web application available at http://hobby.net/. Another typical case is when you want to use different subdomains for different web application, for example a project website is at http://project.org/ and the project documentation is at http://docs.project.org. Virtual hosts can be used with any context that is a subclass of ContextHandler. Jetty supports the following variants to be specified as virtual host names: www.hostname.com A fully qualified domain name. It is important to list all variants as a site may receive traffic for both www.hostname.com and hostname.com. *.hostname.com A wildcard domain name which will match only one level of arbitrary subdomains. *.foo.com will match www.foo.com and m.foo.com, but not www.other.foo.com. 10.0.0.2 An IP address may be set as a virtual host to indicate that a web application should handle requests received on the network interface with that IP address for protocols that do not indicate a host name such as HTTP/0.9 or HTTP/1.0. @ConnectorName A Jetty server Connector name to indicate that a web application should handle requests received on the server Connector with that name, and therefore received on a specific socket address (either an IP port for ServerConnector, or a Unix-Domain path for UnixDomainServerConnector). A server Connector name can be set via https://eclipse.dev/jetty/javadoc/jetty-12/org/eclipse/jetty/server/AbstractConnector.html#setName(java.lang.String). www.√integral.com Non-ASCII and IDN domain names can be set as virtual hosts using Puny Code equivalents that may be obtained from a Punycode/IDN converters. For example if the non-ASCII domain name www.√integral.com is given to a browser, then the browser will make a request that uses the domain name www.xn—​integral-7g7d.com, which is the name that should be added as the virtual host name. If you have a web application mywebapp.war you can configure its virtual hosts in this way: /mywebapp /opt/webapps/mywebapp.war mywebapp.com www.mywebapp.com mywebapp.net www.mywebapp.net Your web application will be available at: http://mywebapp.com/mywebapp http://www.mywebapp.com/mywebapp http://mywebapp.net/mywebapp http://www.mywebapp.net/mywebapp You configured the contextPath of your web application to /mywebapp. As such, a request to http://mywebapp.com/other will not match your web application because the contextPath does not match. Likewise, a request to http://other.com/mywebapp will not match your web application because the virtual host does not match. If you want to deploy different web applications to the same context path, typically the root context path /, you must use virtual hosts to differentiate among web applications. You have domain.war that you want to deploy at http://domain.biz/ and hobby.war that you want to deploy at http://hobby.net. To achieve this, you simply use the same context path of / for each of your webapps, while specifying different virtual hosts for each of your webapps: domain.xml / /opt/webapps/domain.war domain.biz hobby.xml / /opt/webapps/hobby.war hobby.net Sometimes it is required to serve different web applications from different socket addresses (either different IP ports, or different Unix-Domain paths), and therefore from different server Connectors. For example, you want requests to http://localhost:8080/ to be served by one web application, but requests to http://localhost:9090/ to be served by another web application. This configuration may be useful when Jetty sits behind a load balancer. In this case, you want to configure multiple connectors, each with a different name, and then reference the connector name in the web application virtual host configuration: domain.xml / /opt/webapps/domain.war @port8080 hobby.xml / /opt/webapps/hobby.war @port9090 Web application domain.war has a virtual host of @port8080, where port8080 is the name of a Jetty connector. Likewise, web application hobby.war has a virtual host of @port9090, where port9090 is the name of another Jetty connector. See this section for further information about how to configure connectors. By default, *.war files are uncompressed and its content extracted in a temporary directory. The web application resources are served by Jetty from the files extracted in the temporary directory, not from the files within the *.war file, for performance reasons. If you do not want Jetty to extract the *.war files, you can disable this feature, for example: mywebapp.xml /mywebapp /opt/webapps/mywebapp.war false You can configure an additional web.xml that complements the web.xml file that is present in the web application *.war file. This additional web.xml is processed after the *.war file web.xml. This allows you to add host specific configuration or server specific configuration without having to extract the web application web.xml, modify it, and repackage it in the *.war file. mywebapp.xml /mywebapp /opt/webapps/mywebapp.war /opt/webapps/mywebapp-web.xml The format of the additional web.xml is exactly the same as a standard web.xml file, for example: mywebapp-web.xml my-servlet host 192.168.0.13 In the example above, you configured the my-servlet Servlet (defined in the web application web.xml), adding a host specific init-param with the IP address of the host. TODO","title":"Web Application Deployment","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/deploy/index.html","titles":[{"text":"Hot vs Static Deployment","hash":"hot-static","id":1},{"text":"Deployment Rules","hash":"rules","id":2},{"text":"Context Path Resolution","hash":"rules-context-path","id":3},{"text":"Environment Resolution","hash":"rules-environment","id":4},{"text":"Deploying Jetty Context XML Files","hash":"jetty","id":5},{"text":"Configuring JNDI Entries","hash":"jndi","id":6},{"text":"Configuring Virtual Hosts","hash":"virtual-hosts","id":7},{"text":"Virtual Host Names","hash":"virtual-hosts-names","id":8},{"text":"Virtual Hosts Configuration","hash":"virtual-hosts-config","id":9},{"text":"Same Context Path, Different Virtual Hosts","hash":"virtual-hosts-same-context","id":10},{"text":"Different Port, Different Web Application","hash":"virtual-hosts-port","id":11},{"text":"Configuring *.war File Extraction","hash":"extract-war","id":12},{"text":"Overriding web.xml","hash":"jetty-override-web-xml","id":13},{"text":"Configuring init-params","hash":"init-params","id":14}]},"20":{"id":20,"text":"If you are new to Eclipse Jetty, read on to download, install, start and deploy web applications to Jetty. Jetty is distributed in an artifact that expands in a directory called $JETTY_HOME, which should not be modified. Configuration for Jetty is typically done in a directory called $JETTY_BASE. There may be more than one $JETTY_BASE directories with different configurations. Jetty supports the deployment of EE8, EE9 and EE10 standard web applications, as well as the deployment of Jetty-specific web applications. For example, the following commands can be used to set up a $JETTY_BASE directory that supports deployment of EE10 *.war files and a clear-text HTTP connector: $ export JETTY_HOME=/path/to/jetty-home $ mkdir /path/to/jetty-base $ cd /path/to/jetty-base $ java -jar $JETTY_HOME/start.jar --add-modules=server,http,ee10-deploy The last command creates a $JETTY_BASE/start.d/ directory and other directories that contain the configuration of the server, including the $JETTY_BASE/webapps/ directory, in which standard EE10 *.war files can be deployed. To deploy Jetty’s demo web applications, run this command: $ java -jar $JETTY_HOME/start.jar --add-module=demos Now you can start the Jetty server with: $ java -jar $JETTY_HOME/start.jar Point your browser at http://localhost:8080 to see the demo web applications deployed in Jetty. The Jetty server can be stopped with ctrl+c in the terminal window. The following sections will guide you in details about downloading, installing and starting Jetty, and deploying your web applications to Jetty. Read the Jetty architecture section for more information about Jetty modules, $JETTY_HOME, $JETTY_BASE and how to customize and start Jetty. The Jetty distribution is a file of the form jetty-home-., available for download from https://eclipse.dev/jetty/download.php The Jetty distribution is available in both zip and gzip formats; download the one most appropriate for your system, typically zip for Windows and gzip for other operating systems. After the download, unpacking Jetty will extract the files into a directory called jetty-home-, where is the version of Jetty that you downloaded. For example, installing Jetty 12.0.10-SNAPSHOT will create a directory called jetty-home-12.0.10-SNAPSHOT. It is important that only stable release versions are used in production environments. Versions that have been deprecated or are released as Milestones (M), Alpha, Beta or Release Candidates (RC) are not suitable for production as they may contain security flaws or incomplete/non-functioning feature sets. Unpack Jetty file into a convenient location, such as /opt. The rest of the instructions in this documentation will refer to this location as $JETTY_HOME, or ${jetty.home}. For Windows users, you should unpack Jetty to a path that does not contain spaces. If you are new to Jetty, you should read the Jetty architecture section to become familiar with the terms used in this documentation. Otherwise, you can jump to the section on starting Jetty. Jetty as a standalone server has no graphical user interface; configuring and running the server is done from the command line. First, create a $JETTY_BASE directory. $ JETTY_BASE=/path/to/jetty.base $ mkdir $JETTY_BASE $ cd $JETTY_BASE You will typically start Jetty by executing $JETTY_HOME/start.jar from this directory. However, if you try to start Jetty from an empty $JETTY_BASE, it will complain that you haven’t enabled any modules: $ java -jar $JETTY_HOME/start.jar ERROR : No enabled jetty modules found! INFO : ${jetty.home} = /path/to/jetty.home INFO : ${jetty.base} = /path/to/jetty.home-base ERROR : Please create and/or configure a ${jetty.base} directory. Usage: java -jar $JETTY_HOME/start.jar [options] [properties] [configs] java -jar $JETTY_HOME/start.jar --help # for more information Jetty uses a module system to configure and assemble the server; these modules are enabled and configured in $JETTY_BASE. Since the $JETTY_BASE directory you just created is empty, Jetty has no configuration it can use to assemble the server. See the architecture section of this document for more information on the design of Jetty’s module system. You can explore what modules are available with the --list-modules flag: $ java -jar $JETTY_HOME/start.jar --list-modules=* Now try to enable the http module. If you want to enable support for protocols like secure HTTP/1.1 or HTTP/2 or HTTP/3, or want to configure Jetty behind a load balancer, read this section. $ java -jar $JETTY_HOME/start.jar --add-modules=http INFO : mkdir ${jetty.base}/start.d INFO : server transitively enabled, ini template available with --add-modules=server INFO : logging-jetty transitively enabled INFO : http initialized in ${jetty.base}/start.d/http.ini INFO : resources transitively enabled INFO : threadpool transitively enabled, ini template available with --add-modules=threadpool INFO : logging/slf4j dynamic dependency of logging-jetty INFO : bytebufferpool transitively enabled, ini template available with --add-modules=bytebufferpool INFO : mkdir ${jetty.base}/resources INFO : copy ${jetty.home}/modules/logging/jetty/resources/jetty-logging.properties to ${jetty.base}/resources/jetty-logging.properties INFO : Base directory was modified When Jetty enables the http module, it also automatically enables a number of transitive dependencies of the http module, such as the server module, the logging-jetty module, and so on. You can now start Jetty: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:06.594:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:06.614:INFO :oejs.AbstractConnector:main: Started ServerConnector@351d00c0{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} 2024-06-05 07:38:06.624:INFO :oejs.Server:main: Started oejs.Server@4ac3c60d{STARTING}[12.0.11-SNAPSHOT,sto=5000] @547ms Jetty is listening on port 8080 for clear-text HTTP/1.1 connections. But since it has no web applications deployed, it will just reply with 404 Not Found to every request. Before you deploy your first web application, take a moment to see what happened to the $JETTY_BASE directory once you enabled the http module: $JETTY_BASE ├── resources │ └── jetty-logging.properties (1) └── start.d (2) └── http.ini (3) 1 The resources/jetty-logging.properties file configures the server’s logging level; this file was auto-generated when the jetty-logging module was activated as a transitive dependency of the http module. 2 The start.d/ directory contains the *.ini configuration files for any modules you have explicitly activated. 3 The start.d/http.ini file is the http module configuration file, where you can specify values for the http module properties. By default, Jetty does not generate *.ini configuration files in start.d/ for modules activated as transitive dependencies. To manually configure such modules, you should activate them directly via Jetty’s --add-modules flag. In the http.ini file you can find the following (among other contents): http.ini --module=http (1) # jetty.http.port=8080 (2) ... 1 This line enables the http module and should not be modified. 2 This commented line specifies the default value for the jetty.http.port property, which is the network port that Jetty uses to listen for clear-text HTTP connections. Try changing the default port. Open http.ini, uncomment the line containing jetty.http.port=, and change its value to 9999: http.ini --module=http jetty.http.port=9999 ... If you restart Jetty, it will use this new value: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:07.539:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:07.550:INFO :oejs.AbstractConnector:main: Started ServerConnector@351d00c0{HTTP/1.1, (http/1.1)}{0.0.0.0:9999} 2024-06-05 07:38:07.557:INFO :oejs.Server:main: Started oejs.Server@4ac3c60d{STARTING}[12.0.11-SNAPSHOT,sto=5000] @466ms You can also specify the value of a module property when you start up Jetty. A property value specified on the command-line in this way will override the value configured in a module’s *.ini file. $ java -jar $JETTY_HOME/start.jar jetty.http.port=8080 2024-06-05 07:38:08.546:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:08.567:INFO :oejs.AbstractConnector:main: Started ServerConnector@351d00c0{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} 2024-06-05 07:38:08.578:INFO :oejs.Server:main: Started oejs.Server@4ac3c60d{STARTING}[12.0.11-SNAPSHOT,sto=5000] @541ms For more detailed information about the Jetty start mechanism, you can read the Jetty start mechanism section. You can deploy two types of web application resources with Jetty: Standard Web Application Archives, in the form of *.war files or web application directories, defined by the Servlet specification. Their deployment is described in this section. Jetty context XML files, that allow you to customize the deployment of standard web applications, and also allow you to use Jetty components — and possibly custom components written by you — to assemble and deploy your web applications. Their deployment is described in this section. Jetty supports the deployment of both standard web applications and Jetty context XML files in a specific EE environment, such as the old Java EE 8, or Jakarta EE 9, or Jakarta EE 10. Jetty supports simultaneous deployment of web applications each to a possibly different environment, for example an old Java EE 8 web application alongside a new Jakarta EE 10 web application. Refer to the section about deployment for further information about how to deploy to different environments. In the following sections you can find simple examples of deployments of Jakarta EE 10 web applications. A standard Servlet web application is packaged in either a *.war file or in a directory with the structure of a *.war file. Recall that the structure of a *.war file is as follows: mywebapp.war ├── index.html (1) └── WEB-INF (2) ├── classes/ (3) ├── lib/ (4) └── web.xml (5) 1 Publicly accessible resources such as *.html, *.jsp, *.css, *.js files, etc. are placed in *.war or in sub-directories of the *.war. 2 WEB-INF is a special directory used to store anything related to the web application that must not be publicly accessible, but may be accessed by other resources. 3 WEB-INF/classes stores the web application’s compiled *.class files 4 WEB-INF/lib stores the web application’s *.jar files 5 WEB-INF/web.xml is the web application deployment descriptor, which defines the components and the configuration of your web application. To deploy a standard web application, you need to enable the ee10-deploy module. The following examples assume you’re deploying a Jakarta EE 10 application; for other versions of Jakarta EE, make sure to activate the corresponding ee{8,9,10}-deploy module. Refer to the section about deployment for further information about how to deploy to different environments. $ java -jar $JETTY_HOME/start.jar --add-modules=ee10-deploy INFO : sessions transitively enabled, ini template available with --add-modules=sessions INFO : security transitively enabled INFO : ee10-deploy initialized in ${jetty.base}/start.d/ee10-deploy.ini INFO : ee10-security transitively enabled INFO : ee-webapp transitively enabled, ini template available with --add-modules=ee-webapp INFO : ee10-webapp transitively enabled, ini template available with --add-modules=ee10-webapp INFO : ee10-servlet transitively enabled INFO : deploy transitively enabled INFO : mkdir ${jetty.base}/webapps INFO : Base directory was modified The ee10-deploy module creates $JETTY_BASE/webapps, which is the directory where Jetty looks for any *.war files or web application directories to deploy. Activating one of Jetty’s ee{8,9,10}-deploy modules enables web application deployment. Whether these web applications are served via clear-text HTTP/1.1, or secure HTTP/1.1, or secure HTTP/2, or HTTP/3 (or even all of these protocols) depends on whether the correspondent Jetty protocol modules have been enabled. Refer to the section about protocols for further information. Now you’re ready to copy a web application to the $JETTY_BASE/webapps directory. You can use one of the demos shipped with Jetty: $ java -jar $JETTY_HOME/start.jar --add-modules=ee10-demo-simple The $JETTY_BASE directory is now: $JETTY_BASE ├── resources │ └── jetty-logging.properties ├── start.d │ ├── deploy.ini │ ├── ee10-demo-simple.ini │ └── http.ini └── webapps └── ee10-demo-simple.war Now start Jetty: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:10.579:WARN :oejx.XmlConfiguration:main: Deprecated method public static void org.eclipse.jetty.ee.WebAppClassLoading.addHiddenClasses(org.eclipse.jetty.util.Attributes,java.lang.String[]) in file:///path/to/jetty.home/etc/jetty-ee-webapp.xml 2024-06-05 07:38:10.609:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:10.617:INFO :oejdp.ScanningAppProvider:main: Deployment monitor ee10 in [file:///path/to/jetty.home-base/webapps/] at intervals 0s 2024-06-05 07:38:10.619:INFO :oejd.DeploymentManager:main: addApp: App@2a266d09[ee10,null,/path/to/jetty.home-base/webapps/ee10-demo-simple.war] 2024-06-05 07:38:10.677:INFO :oejew.StandardDescriptorProcessor:main: NO JSP Support for /ee10-demo-simple, did not find org.eclipse.jetty.ee10.jsp.JettyJspServlet 2024-06-05 07:38:10.684:INFO :oejsh.ContextHandler:main: Started oeje10w.WebAppContext@7857fe2{EE10 Demo Simple WebApp,/ee10-demo-simple,b=file:///path/to/jetty.home-base/work/jetty-0_0_0_0-8080-ee10-demo-simple_war-_ee10-demo-simple-any-/webapp/,a=AVAILABLE,h=oeje10s.SessionHandler@6f15d60e{STARTED}}{/path/to/jetty.home-base/webapps/ee10-demo-simple.war} 2024-06-05 07:38:10.691:INFO :oejes.ServletContextHandler:main: Started oeje10w.WebAppContext@7857fe2{EE10 Demo Simple WebApp,/ee10-demo-simple,b=file:///path/to/jetty.home-base/work/jetty-0_0_0_0-8080-ee10-demo-simple_war-_ee10-demo-simple-any-/webapp/,a=AVAILABLE,h=oeje10s.SessionHandler@6f15d60e{STARTED}}{/path/to/jetty.home-base/webapps/ee10-demo-simple.war} 2024-06-05 07:38:10.692:INFO :oejs.DefaultSessionIdManager:main: Session workerName=node0 2024-06-05 07:38:10.696:INFO :oejs.AbstractConnector:main: Started ServerConnector@1f760b47{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} 2024-06-05 07:38:10.702:INFO :oejs.Server:main: Started oejs.Server@1ce24091{STARTING}[12.0.11-SNAPSHOT,sto=5000] @703ms Note the highlighted line that logs the deployment of ee10-demo-simple.war. Now you can access the web application by pointing your browser to http://localhost:8080/ee10-demo-simple. If you want to customize the deployment of your web application — for example, by specifying a contextPath different from the file/directory name, or by specifying JNDI entries, or by specifying virtual hosts — read this section.","title":"Getting Started","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/begin/index.html","titles":[{"text":"Quick Setup","hash":"quick-setup","id":1},{"text":"Downloading Jetty","hash":"download","id":2},{"text":"Installing Jetty","hash":"install","id":3},{"text":"Starting Jetty","hash":"start","id":4},{"text":"Deploying Web Applications","hash":"deploy","id":5},{"text":"Deploying *.war Files","hash":"deploy-war","id":6},{"text":"Advanced Deployment","hash":"deploy-war-advanced","id":7}]},"21":{"id":21,"text":"If you know Eclipse Jetty already, jump to a feature: Protocols HTTP/1.1 Support HTTP/2 Support HTTP/3 Support WebSocket Support Technologies Servlet Annotations JAAS JNDI JSP JMX Monitoring & Management Clustering HTTP Session Caching and Clustering Performance Virtual Threads Faster Web Application Deployment","title":"Eclipse Jetty Features","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/features/index.html","titles":[]},"22":{"id":22,"text":"Configure Clear-Text HTTP/1.1 Configure Secure HTTP/1.1 (https) Configure Clear-Text HTTP/2 Configure Secure HTTP/2 Configure HTTP/3 Configure Jetty Behind a Load Balancer or Reverse Proxy Configure Jetty Logging Configure Jetty Thread Pool and Virtual Threads Troubleshooting","title":"Eclipse Jetty How-Tos","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/howtos/index.html","titles":[]},"23":{"id":23,"text":"JAAS implements a Java version of the standard Pluggable Authentication Module (PAM) framework. JAAS can be used for two purposes: for authentication of users, to reliably and securely determine who is currently executing Java code, regardless of whether the code is running as an application, an applet, a bean, or a servlet for authorization of users to ensure they have the access control rights (permissions) required to do the actions performed JAAS authentication is performed in a pluggable fashion. This permits applications to remain independent from underlying authentication technologies. New or updated authentication technologies can be plugged under an application without requiring modifications to the application itself. See Java Authentication and Authorization Service (JAAS) Reference Guide for more information about JAAS. The Jetty JAAS support aims to dictate as little as possible whilst providing a sufficiently flexible infrastructure to allow users to drop either one of the JAAS Login Modules that ships with Jetty, or their own custom LoginModules. Enable the ee{8,9,10}-jaas module appropriate for your EE platform: # DO NOT EDIT THIS FILE - See: https://eclipse.dev/jetty/documentation/ [description] Enables JAAS for deployed web applications. [depend] security [before] deploy [xml] etc/jetty-jaas.xml [ini-template] ## The file location (relative to $jetty.base) for the ## JAAS \"java.security.auth.login.config\" system property # jetty.jaas.login.conf=etc/login.conf The configurable items in the resulting $jetty.base/start.d/jaas.ini file are: jetty.jaas.login.conf This is the location of the file that will be referenced by the system property java.security.auth.login.config: Jetty sets this system property for you based on the value of this property. The value of this property is assumed to be relative to $JETTY_BASE. The default value is etc/login.conf, which resolves to $JETTY_BASE/etc/login.conf. If you don’t want to put your login module configuration file here, you can change this property to point to where it is. See more about the contents of this file in the Configuring JAAS section. The in web.xml will be used to identify the org.eclipse.jetty.security.jaas.JAASLoginService declaration that integrates JAAS with Jetty. For example, this web.xml contains a realm called Test JAAS Realm: FORM Test JAAS Realm (1) /login/login /login/error 1 The name of the realm, which must be identical to the name of an org.eclipse.jetty.security.jaas.JAASLoginService declaration. We now need to declare an org.eclipse.jetty.security.jaas.JAASLoginService that references the realm name of Test JAAS Realm. Here’s an example of a suitable XML snippet: Test JAAS Realm (1) xyz (2) 1 The name is the same as that declared in the in web.xml. 2 The name that identifies a set of javax.security.auth.spi.LoginModule configurations that comprise the JAAS config file identified in the jetty.jaas.login.conf property of the jaas module. The org.eclipse.jetty.security.jaas.JAASLoginService can be declared in a couple of different places, pick whichever suits your purposes best: If you have more than one webapp that you would like to use the same security infrastructure, then you can declare your org.eclipse.jetty.security.jaas.JAASLoginService as a bean that is added to the org.eclipse.jetty.server.Server. The file in which you declare this needs to be on Jetty’s execution path. The recommended procedure is to create a file in your $jetty.base/etc directory and then ensure it is on the classpath either by adding it to the Jetty start command line, or more conveniently to a custom module. Here’s an example of this type of XML file: Test JAAS Realm xyz Alternatively, if you want to use JAAS with a specific webapp only, you declare your org.eclipse.jetty.security.jaas.JAASLoginService in a context XLM file specific to that webapp: Test JAAS Realm xyz We now need to setup the contents of the file we specified as the jetty.jaas.login.conf property when we configured the jaas module. Refer to the syntax rules of this file for a full description. Remembering the example we set up previously, the contents of the $jetty.base/etc/login.conf file could look as follows: xyz { (1) com.acme.SomeLoginModule required debug=true; (2) com.other.OtherLoginModule optional; (3) }; 1 The name of the configuration exactly as specified in your org.eclipse.jetty.security.jaas.JAASLoginService declaration. 2 The first LoginModule declaration, containing the classname of the LoginModule and its configuration properties. 3 A second LoginModule declaration. You can provide as many LoginModule alternatives as you like, with a minimum of one. Refer to the JAAS documentation for more information on the standard configuration properties, and how JAAS interprets this file. org.eclipse.jetty.security.jaas.spi.JDBCLoginModule org.eclipse.jetty.security.jaas.spi.PropertyFileLoginModule org.eclipse.jetty.security.jaas.spi.DataSourceLoginModule org.eclipse.jetty.security.jaas.ldap.LdapLoginModule Passwords can be obfuscated using the Jetty Password tool. The org.eclipse.jetty.security.jaas.spi.JDBCLoginModule stores user passwords and roles in a database accessed via JDBC calls. You can configure the JDBC connection information, as well as the names of the table and columns storing the username and credential, and the names of the table and columns storing the roles. Here is an example login module configuration file entry for it using an HSQLDB driver: jdbc { (1) org.eclipse.jetty.security.jaas.spi.JDBCLoginModule required (2)(3) dbUrl=\"jdbc:hsqldb:.\" (4) dbUserName=\"sa\" (5) dbDriver=\"org.hsqldb.jdbcDriver\" (6) userTable=\"myusers\" (7) userField=\"myuser\" (8) credentialField=\"mypassword\" (9) userRoleTable=\"myuserroles\" (10) userRoleUserField=\"myuser\" (11) userRoleRoleField=\"myrole\"; (12) }; 1 The name of the configuration. 2 The name of the LoginModule class. 3 A standard JAAS flag making successful authentication via this LoginModule mandatory. 4 The JDBC url used to connect to the database. 5 The name of the JDBC user to use for the connection. 6 The name of the JDBC Driver class. 7 The name of the table holding the user authenication information. 8 The name of the column holding the user name. 9 The name of the column holding the user credential. 10 The name of the table holding the user authorization information. 11 The name of the column holding the user name. 12 The name of the column holding the user role. The properties 7-12 are used to format the following queries: select from where =? select from where =? Credential and role information is lazily read from the database when a previously unauthenticated user requests authentication. Note that this information is only cached for the length of the authenticated session. When the user logs out or the session expires, the information is flushed from memory. Note that passwords can be stored in the database in plain text or encoded formats — see the note on \"Passwords/Credentials\" above. Similar to the org.eclipse.jetty.security.jaas.spi.JDBCLoginModule, but using a javax.sql.DataSource to connect to the database instead of a JDBC driver. The javax.sql.DataSource is obtained at runtime by performing a JNDI lookup on java:comp/env/${dnJNDIName}. A sample login module configuration for this LoginModule: ds { (1) org.eclipse.jetty.security.jaas.spi.DataSourceLoginModule required (2)(3) dbJNDIName=\"ds\" (4) userTable=\"myusers\" (5) userField=\"myuser\" (6) credentialField=\"mypassword\" (7) userRoleTable=\"myuserroles\" (8) userRoleUserField=\"myuser\" (9) userRoleRoleField=\"myrole\"; (10) }; 1 The name of the configuration. 2 The name of the LoginModule class. 3 A standard JAAS flag making successful authentication via this LoginModule mandatory. 4 The JNDI name, relative to java:comp/env/ to lookup to obtain the javax.sql.DataSource. 5 The name of the table holding the user authenication information. 6 The name of the column holding the user name. 7 The name of the column holding the user credential. 8 The name of the table holding the user authorization information. 9 The name of the column holding the user name. 10 The name of the column holding the user role. With this login module implementation, the authentication and role information is read from a property file. props { (1) org.eclipse.jetty.security.jaas.spi.PropertyFileLoginModule required (2)(3) file=\"/somewhere/somefile.props\"; (4) }; 1 The name of the configuration. 2 The name of the LoginModule class. 3 A standard JAAS flag making successful authentication via this LoginModule mandatory. 4 The location of a properties file containing the authentication and authorization information. The property file must be of the format: : [, ...] Here’s an example: fred: OBF:1xmk1w261u9r1w1c1xmq,user,admin harry: changeme,user,developer tom: MD5:164c88b302622e17050af52c89945d44,user dick: CRYPT:adpexzg3FUZAk,admin The contents of the file are fully read in and cached in memory the first time a user requests authentication. The org.eclipse.jetty.security.jaas.spi.LdapLoginModule uses LDAP to access authentication and authorization information stored in a directory. The LDAP connection information and structure of the authentication/authorization data can be configured. Here’s an example: example { (1) org.eclipse.jetty.security.jaas.spi.LdapLoginModule required (2)(3) contextFactory=\"com.sun.jndi.ldap.LdapCtxFactory\" (4) hostname=\"ldap.example.com\" (5) port=\"389\" (6) bindDn=\"cn=Directory Manager\" (7) bindPassword=\"directory\" (8) authenticationMethod=\"simple\" (9) useLdaps=\"true\" (10) userBaseDn=\"ou=people,dc=alcatel\" (11) userRdnAttribute=\"uid\" (12) userIdAttribute=\"cn\" (13) userPasswordAttribute=\"userPassword\" (14) userObjectClass=\"inetOrgPerson\" (15) roleBaseDn=\"ou=groups,dc=example,dc=com\" (16) roleNameAttribute=\"cn\" (17) roleMemberAttribute=\"uniqueMember\" (18) roleObjectClass=\"groupOfUniqueNames\"; (19) forceBindingLogin=\"false\" (20) debug=\"false\" (21) }; 1 The name of the configuration. 2 The name of the LoginModule class. 3 A standard JAAS flag making successful authentication via this LoginModule mandatory. 4 The name of the context factory to use for the LDAP connection. 5 The hostname for the LDAP connection. Optional. 6 The port for the LDAP connection. Optional. 7 The caller security Principal. Optional. 8 The caller security credential. Optional. 9 The security level for the LDAP connection environment. Optional. 10 If true, use ldaps instead of ldap for the connection url. 11 The distinguished name of the directory to search for user information. 12 The name of the attribute for the user roles. 13 The name of the attribute for the user id. 14 The name of the attribute for the user password. 15 The ObjectClass for users. 16 The distinguished name of the directory to search for role information. 17 The name of the attribute for roles. 18 The name of the attribute storing the user for the roles ObjectClass. 19 The name of the ObjectClass for roles. 20 If true, the authentication proceeds on the basis of a successful LDAP binding using the username and credential provided by the user. If false, then authentication proceeds based on username and password information retrieved from LDAP. 21 If true, failed login attempts are logged on the server.","title":"JAAS","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/jaas/index.html","titles":[{"text":"Configuration","hash":"configuration","id":1},{"text":"The jaas module","hash":"module","id":2},{"text":"Configure the webapp for JAAS","hash":"webapp","id":3},{"text":"Configure JAAS","hash":"loginconf","id":4},{"text":"Provided LoginModules","hash":"loginmodules","id":5},{"text":"JDBCLoginModule","hash":"jdbcloginmodule","id":6},{"text":"DataSourceLoginModule","hash":"datasourceloginmodule","id":7},{"text":"PropertyFileLoginModule","hash":"propertyfileloginmodule","id":8},{"text":"LdapLoginModule","hash":"ldaploginmodule","id":9}]},"24":{"id":24,"text":"Enabling this module allows Jetty to utilize authentication modules that implement the Jakarta Authentication (JASPI) specification. JASPI provides an SPI (Service Provider Interface) for pluggable, portable, and standardized authentication modules. Compatible modules are portable between servers that support the JASPI specification. This module provides a bridge from Jakarta Authentication to the Jetty Security framework. Only modules conforming to the \"Servlet Container Profile\" with the ServerAuthModule interface within the JakartaAuthentication are supported. These modules must be configured before start-up. Operations for runtime registering or de-registering authentication modules are not supported. Enable the jaspi module: # DO NOT EDIT THIS FILE - See: https://eclipse.dev/jetty/documentation/ [description] Enables JASPI authentication for deployed web applications. [environment] ee10 [tags] security [depend] ee10-security auth-config-factory [ini] ee10.jakarta.authentication.api.version?=3.0.0 [lib] lib/jetty-ee10-jaspi-${jetty.version}.jar lib/ee10-jaspi/jakarta.authentication-api-${ee10.jakarta.authentication.api.version}.jar [xml] etc/jaspi/jetty-ee10-jaspi-authmoduleconfig.xml [files] basehome:etc/jaspi/jetty-ee10-jaspi-authmoduleconfig.xml|etc/jaspi/jetty-ee10-jaspi-authmoduleconfig.xml Activate either the ee9-jaspi or ee10-jaspi module, whichever matches your EE platform version. $ java -jar $JETTY_HOME/start.jar --add-modules=ee10-jaspi You can then register a AuthConfigProvider onto the static AuthConfigFactory obtained with AuthConfigFactory.getFactory(). This registration can be done in the XML configuration file which will be copied to $JETTY_BASE/etc/jaspi/jaspi-authmoduleconfig.xml when the module is enabled. The ee9-jaspi-demo and ee10-jaspi-demo modules illustrate setting up HTTP Basic Authentication using the EE9 and EE 10 Jakarta Authentication modules that come packaged with Jetty. The following example uses Jetty’s EE 10 implementation of AuthConfigProvider to register a ServerAuthModule directly. org.eclipse.jetty.ee10.security.jaspi.provider.JaspiAuthConfigProvider ServerAuthModule org.eclipse.jetty.ee10.security.jaspi.modules.BasicAuthenticationAuthModule org.eclipse.jetty.ee10.security.jaspi.modules.RealmName Test Realm HttpServlet server /test A simple provider using HTTP BASIC authentication. Other custom or 3rd party modules that are compatible with the ServerAuthModule interface in JASPI can be registered in the same way. To integrate with Jetty authentication mechanisms you must add a LoginService to your context. The LoginService provides a way for you to obtain a UserIdentity from a username and credentials. JASPI can interact with this Jetty LoginService by using the PasswordValidationCallback. The CallerPrincipalCallback and GroupPrincipalCallback do not require use of a Jetty LoginService. The principal from the CallerPrincipalCallback will be used directly with the IdentityService to produce a UserIdentity. Jetty provides an implementation of the AuthConfigFactory interface which is used to register AuthConfigProviders. This can be replaced by a custom implementation by adding a custom module which provides auth-config-factory. This custom module must reference an XML file which sets a new instance of the AuthConfigFactory with the static method AuthConfigFactory.setFactory(). For an example of this see the ee10-jaspi-default-auth-config-factory module, which provides the default implementation used by Jetty. # DO NOT EDIT THIS FILE - See: https://eclipse.dev/jetty/documentation/ [description] Provides a DefaultAuthConfigFactory for jaspi [environment] ee10 [tags] security [depend] ee10-security [provide] auth-config-factory [xml] etc/jaspi/jetty-ee10-jaspi-default.xml","title":"JASPI","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/jaspi/index.html","titles":[{"text":"Configuration","hash":"configuration","id":1},{"text":"The jaspi module","hash":"module","id":2},{"text":"Configure JASPI","hash":"xml","id":3},{"text":"JASPI Demo","hash":"jaspi-demo","id":4},{"text":"Integration with Jetty Authentication Mechanisms","hash":"integration-with-jetty-authentication-mechanisms","id":5},{"text":"Replacing the Jetty DefaultAuthConfigFactory","hash":"replacing-the-jetty-defaultauthconfigfactory","id":6}]},"25":{"id":25,"text":"Monitoring and management of a Jetty server is important because it allows you to monitor the status of the server (\"Is the server processing requests?\") and to manage — i.e. read and possibly change — its configuration. The ability to read and change the Jetty configuration is very important for troubleshooting Jetty — please refer to the troubleshooting section for more information. Jetty relies on the Java Management Extensions (JMX) APIs included in OpenJDK to provide monitoring and management. The JMX APIs support a JVM-local MBeanServer, accessible only from within the JVM itself (or by tools that can attach to a running JVM), and a way to expose the MBeanServer to remote clients via Java’s RMI (Remote Method Invocation). As with many other Jetty features, local JMX support is enabled with the jmx Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=jmx With the jmx Jetty module enabled, Jetty components will be exported as JMX MBeans to the JVM platform MBeanServer, so that they can be accessed by JMX compliant tools. Each Jetty component will export to its correspondent MBean relevant configuration parameters, so that a JMX tool can read and possibly change the component configuration through the MBean. Note that the Jetty MBeans are registered into the platform MBeanServer, but are not available to remote clients: they are local to the JVM. This configuration is useful when you develop and test your Jetty server locally. JMX compliant tools such as Java Mission Control (JMC) can be started locally on your machine and can attach to other JVMs running on your machine, showing you the registered MBeans among which you will find the Jetty MBeans. Enabling only the local JMX support is the most secure option for monitoring and management, but only users that have local access to the JVM will be able to browse the MBeans. If you need to access the MBeans from a remote machine, read this section. There are two ways to configure a Jetty server so that it is possible to access the JVM platform MBeans from remote clients: Use the com.sun.management.jmxremote and related system properties when starting Jetty. Unfortunately, this solution does not work well with firewalls, and will not be discussed further. Use the jmx-remote Jetty module. Both ways use Java’s Remote Method Invocation (RMI) to communicate between the client and the server. Refresher: How RMI Works A server application that wants to make an object available to remote clients must export the object. Exporting an object creates an RMI stub that contains the host/port of the RMI server that accepts incoming invocations from clients and forwards them to the object. During the creation of the RMI stub, the host stored in the RMI stub is retrieved from the local name resolution system (for example, in Linux, from /etc/hosts). The RMI stub is then sent, along with a name that uniquely identifies the object, to the RMI registry. The RMI registry is a service that maps names to RMI stubs; it may be external to both clients and server, although often it is part of the server JVM. When a client application wants to connect to the server object using RMI, it first connects to the RMI registry to download the RMI stub for the RMI server; recall that the RMI stub contains the host/port to connect to the RMI server. Then, the client uses the RMI stub to connect to the RMI server, typically to a host/port that may be different from the RMI registry host/port (in particular, by default the RMI server port will be different from the RMI registry port). Remote access to the platform MBeans, and therefore the Jetty MBeans, is enabled by the jmx-remote Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=jmx-remote This command creates the jmx-remote.ini file: JETTY_BASE └── start.d └── jmx-remote.ini Enabling the jmx-remote module transitively enables the jmx module as well. The configuration for the RMI registry and the RMI server is specified by a JMXServiceURL. The string format of an RMI JMXServiceURL is the following: service:jmx:rmi://:/jndi/rmi://:/jmxrmi Below you can find examples of JMXServiceURLs: service:jmx:rmi:///jndi/rmi:///jmxrmi where: rmi_server_host = local host address rmi_server_port = randomly chosen rmi_registry_host = local host address rmi_registry_port = 1099 service:jmx:rmi://0.0.0.0:1099/jndi/rmi://0.0.0.0:1099/jmxrmi where: rmi_server_host = any address rmi_server_port = 1099 rmi_registry_host = any address rmi_registry_port = 1099 service:jmx:rmi://localhost:1100/jndi/rmi://localhost:1099/jmxrmi where: rmi_server_host = loopback address rmi_server_port = 1100 rmi_registry_host = loopback address rmi_registry_port = 1099 The default JMXServiceURL configured by the jmx-remote module is the following: service:jmx:rmi://localhost:1099/jndi/rmi://localhost:1099/jmxrmi With the default configuration, only clients that are local to the server machine can connect to the RMI registry and RMI server - this is done for security reasons. However, even with this local-only configuration, it would still be possible to access the MBeans from remote using an SSH tunnel, as explained in this section. By specifying an appropriate JMXServiceURL, you can fine tune the network address the RMI registry and the RMI server bind to, and the ports that the RMI registry and the RMI server listen to. The RMI server and RMI registry hosts and ports can be the same (as in the default configuration) because RMI is able to multiplex traffic arriving to one port to multiple RMI objects. If you need to allow JMX remote access through a firewall, you must open both the RMI registry and the RMI server ports. The default configuration simplifies the firewall configuration because you only need to open port 1099. When Jetty is started with the jmx-remote module enabled, the RMI stub of the Jetty component that provides access to the MBeans is exported to the RMI registry. The RMI stub contains the host/port to connect to the RMI server, but the host is typically the machine host name, not the host specified in the JMXServiceURL (the latter is only used to specify the network address the RMI server binds to). To control the host stored in the RMI stub you need to set the system property java.rmi.server.hostname with the desired value in the module configuration file, jmx-remote.ini. If your client cannot connect to the server, the most common cause is a mismatch between the RMI server host of the JMXServiceURL and the RMI server host of the RMI stub. You can customize the RMI server host/port, the RMI registry host/port and the system property java.rmi.server.hostname by editing the jmx-remote.ini configuration file. Further information about the jmx-remote module configuration can be found here. You can access JMX MBeans on a remote machine when the RMI ports are not open, for example because of firewall policies, but you have SSH access to the machine, using local port forwarding via an SSH tunnel. In this case you want to configure the JMXServiceURL that binds the RMI server and the RMI registry to the loopback interface only and to the same port: service:jmx:rmi://localhost:1099/jndi/rmi://localhost:1099/jmxrmi You must set the system property -Djava.rmi.server.hostname=localhost so that the RMI stub contains localhost as the host name to connect to. This is, incidentally, the default configuration of the jmx-remote module. Then you set up the local port forwarding with the SSH tunnel: $ ssh -L 1099:localhost:1099 @ Thanks to the local port forwarding of the SSH tunnel, when the client connects to localhost:1099 on your local computer, the traffic will be forwarded to machine_host and when there, the SSH daemon will forward the traffic to localhost:1099 on machine_host, which is exactly where the RMI server and the RMI registry listens to. The client first contacts the RMI registry, so it connects to localhost:1099 on your local computer; the traffic is forwarded to machine_host through the SSH tunnel, connects to the RMI registry and the RMI stub is downloaded to the client. Then the client uses the RMI stub to connect to the RMI server. The RMI stub contains localhost as the RMI server host because that is what you have configured with the system property java.rmi.server.hostname. The client will connect again to localhost:1099 on your local computer, this time to contact the RMI server; the traffic is forwarded to machine_host through the SSH tunnel, arrives to machine_host and connects to the RMI server. The standard javax.management.remote.JMXConnectorServer class, used by the jmx-remote module to provide remote JMX access to Jetty MBeans, provides several options to authenticate and authorize users. For a complete guide to controlling authentication and authorization in JMX, see the official JMX documentation. The simplest way to control JMX authentication and authorization is to specify two files: one contains username and password pairs, and the other contains username and permission pairs. This is achieved by enabling the jmx-remote-auth Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=jmx-remote-auth Enabling the jmx-remote-auth Jetty module creates the following files: $JETTY_BASE ├── etc │ ├── jmxremote.access │ ├── jmxremote.password │ └── jmx-remote-auth.xml └── start.d ├── jmx-remote-auth.ini └── jmx-remote.ini Then you edit the $JETTY_BASE/etc/jmxremote.password file, adding the username/password pairs that you need: $JETTY_BASE/etc/jmxremote.password # The file format is: alice wonderland bob marley You must also edit the $JETTY_BASE/etc/jmxremote.access file to give permissions to your users: $JETTY_BASE/etc/jmxremote.access # The file format is: alice readwrite bob readonly The above files define user alice with password wonderland to have readwrite access, and user bob with password marley to have readonly access. The JMX communication via RMI happens by default in clear-text, but it is possible to secure the JMX communication via RMI with TLS. If you want to reuse the configuration that you are using for the https module, you can just enable the jmx-remote-ssl.xml Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=jmx-remote-ssl The jmx-remote-ssl Jetty module depends on the ssl Jetty module that in turn requires a KeyStore (read this section for more information). The KeyStore must contain a valid certificate signed by a Certification Authority. Having certificates signed by a Certification Authority simplifies by a lot the configuration needed to get the RMI communication over TLS working properly. The RMI mechanic is the usual one: the RMI client (typically a monitoring console) will connect first to the RMI registry (using TLS), download the RMI stub that contains the address and port of the RMI server to connect to, then connect to the RMI server (using TLS). This also mean that if the RMI registry and the RMI server are on different hosts, the RMI client must have available the cryptographic material to validate the certificates from both hosts. This is where having certificates signed by a Certification Authority simplifies the configuration: if they are signed by a well known Certification Authority, the client does not need any extra configuration — everything will be handled by the Java runtime. If the certificates are not signed by a Certification Authority (for example the certificate is self-signed), then you need to specify the TLS system properties that allow RMI (especially when acting as an RMI client) to retrieve the cryptographic material necessary to establish the TLS connection. When the RMI server exports the JMXConnectorServer it acts as an RMI client towards the RMI registry, and as such you must specify the TLS system properties as detailed below. You must edit the $JETTY_BASE/start.d/jmx-remote-ssl.ini file and add the TrustStore path and password: $JETTY_BASE/start.d/jmx-remote-ssl.ini --module=jmx-remote-ssl # System properties necessary for non-trusted certificates. -Djavax.net.ssl.trustStore=/path/to/trustStore.p12 -Djavax.net.ssl.trustStorePassword=password The TrustStore must contain the certificate you want to trust. If you are using self-signed certificates, the KeyStore already contains the self-signed certificate and therefore the KeyStore can be used as a TrustStore, and the system properties above can refer to the KeyStore path and password. JMX compliant tools that offer a graphical user interface also must be started specifying the TrustStore path and password. For example, to launch Java Mission Control (JMC): $ jmc -vmargs -Djavax.net.ssl.trustStore=/path/to/trustStore.p12 -Djavax.net.ssl.trustStorePassword=password","title":"JMX Monitoring & Management","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/jmx/index.html","titles":[{"text":"Enabling Local JMX Support","hash":"local","id":1},{"text":"Enabling Remote JMX Support","hash":"remote","id":2},{"text":"Remote JMX Access with Port Forwarding via SSH Tunnel","hash":"remote-ssh-tunnel","id":3},{"text":"Remote JMX Access Authentication & Authorization","hash":"remote-auth","id":4},{"text":"Securing Remote JMX Access with TLS","hash":"remote-secure","id":5}]},"26":{"id":26,"text":"For each specific Jakarta EE environment there is a specific plus module that you must enable in order to use JNDI resources in your webapp: For Java EE 8, ee8-plus For Java EE 9, ee9-plus For Java EE 10, ee10-plus If you have already enabled an annotations module suitable for your EE environment, an appropriate plus module will already have been enabled and you do not need to explicitly enable a plus module. If you have extra jars associated with your JNDI resources, eg database drivers etc, that are not located inside your webapp then you must ensure they are on either the container classpath or a Jakarta EE environment classpath. You can enable the ext module and place your jars in ${jetty.base}/lib/ext to make them visible on the container classpath. To make them visible on an EE environment classpath you should create a custom, EE environment-specific module. You can now declare JNDI resources and reference them within your webapps. You must declare the objects you want bound so that you can then hook them into your webapp via env-entry, resource-ref and resource-env-refs in web.xml, web-fragment.xml or override-web.xml. You make these declarations in Jetty XML files that are either external or internal to your webapp. A server or context XML file is external to your webapp. The special WEB-INF/jetty-env.xml file is internal to your webapp. See the section on Jetty XML files for more information on how to choose in which XML file to place your declarations. Regardless of its location, the XML file contains declarations of JNDI resources that can be referenced later within your webapp. The declarations are new instances of the following types: org.eclipse.jetty.plus.jndi.EnvEntry Used for env-entry type of entries org.eclipse.jetty.plus.jndi.Resource Used for most other type of resources org.eclipse.jetty.plus.jndi.Transaction For a JTA manager org.eclipse.jetty.plus.jndi.Link For the link between a web.xml resource name and a naming entry Declarations of each of these types follow a similar pattern: wiki.xml (1) (2) (3) (4) 1 Defines a resource to Jetty. 2 Specifies the scope of the resource. 3 Specifies the name of the resource which will be looked up by the webapp relative to the java:comp/ or java:comp/env namespace. 4 Specifies the value of the resource. Sometimes it is useful to pass configuration information to a webapp at runtime that you either cannot or cannot conveniently code into a web.xml . In such cases, you can use the org.eclipse.jetty.plus.jndi.EnvEntry class, and optionally even override an entry of the same name in web.xml. Here’s an example that defines the equivalent of an env-entry called mySpecialValue with value 4000 that overrides an declaration of the same name in web.xml: wiki.xml (1) (2) mySpecialValue (3) 4000 (4) true (5) 1 Define an EnvEntry that corresponds to an . 2 Scoped at the JVM level. 3 The name of the entry, corresponding to a lookup by the webapp of java:comp/env/mySpecialValue. 4 The value of the entry, in this case the integer value 4000. 5 true means to override the value of an of the same name in web.xml. Note that if you don’t want to override the web.xml value, simply omit the last argument, or set it to false. The Servlet Specification allows binding only the following object types to an env-entry: java.lang.String java.lang.Integer java.lang.Float java.lang.Double java.lang.Long java.lang.Short java.lang.Character java.lang.Byte java.lang.Boolean Jetty is a little more flexible and allows you to also bind: custom POJOs javax.naming.References javax.naming.Referenceables Be aware that if you take advantage of this feature, your web application is not portable. You can configure any type of resource that you want to refer to in web.xml via a resource-ref or resource-env-ref by using the org.eclipse.jetty.plus.jndi.Resource type of naming entry. You provide the scope, the name of the object (relative to java:comp/env) and a POJO, javax.naming.Reference or javax.naming.Referenceable instance. This example configures a Derby DataSource named jdbc/myds: wiki.xml jdbc/myds test create This would be linked into the webapp’s JNDI namespace via an entry in a web.xml like so: jdbc/myds javax.sql.DataSource Container When configuring Resources, ensure that the type of object you configure matches the type of object you expect to look up in java:comp/env. For database connection factories, this means that the object you register as a Resource must implement the javax.sql.DataSource interface. Also note that the J2EE Specification recommends storing DataSources relative to jdbc/ and thus looked up by the application as java:comp/env/jdbc/xxx. Eg The Datasource bound in Jetty as jdbc/users would be looked up by the application as java:comp/env/jdbc/users Jetty can bind any implementation of the JMS destinations and connection factories. Here is an example of binding an ActiveMQ in-JVM connection factory: wiki.xml jms/connectionFactory vm://localhost?broker.persistent=false The corresponding entry in web.xml to bind the ConnectionFactory into the webapp’s JNDI namespace would be: wiki.xml jms/connectionFactory javax.jms.ConnectionFactory Container The J2EE Specification recommends storing JMS connection factories under jms/. Eg The ConnectionFactory bound in Jetty as jms/inqueue would be looked up by the application as java:comp/env/jms/inqueue. To configure access to javax.mail.Session from within a webapp, declare an org.eclipse.jetty.plus.jndi.Resource with an org.eclipse.jetty.ee{8,9,10}.jndi.factories.MailSessionReference that will hold the mail configuration and create the instance of the Session when it is referenced: wiki.xml mail/Session (1) fred (2) OBF:1xmk1w261z0f1w1c1xmq (3) (4) XXX me@me true 1 Use the org.eclipse.jetty.ee10.factories.MailSessionReference class to hold the configuration. 2 Set the username for the mail instance. 3 Set the password for the mail instance — use the Jetty Password tool to obfuscate the password. 4 Set all other applicable properties. The webapp performs a lookup for java:comp/env/mail/Session at runtime and obtains a javax.mail.Session that has the correct configuration to permit it to send email via SMTP. Jetty does not provide the javax.mail and javax.activation jars. Note also that the J2EE Specification recommends storing JavaMail connection factories under mail/. Eg The MailSessionReference bound to jetty as mail/smtp would be looked up by the application as java:comp/env/mail/smtp. To perform distributed transactions with your resources, a transaction manager that supports the JTA interfaces is required. The transaction manager is looked up by the application as java:comp/UserTransaction. Jetty does not ship with a JTA manager, but does provide the infrastructure to plug in the JTA manager of your choice. If your JTA library’s implementation of UserTransaction implements javax.naming.Reference, then you should use the org.eclipse.jetty.plus.jndi.Transaction object in a Jetty XML file to register it in JNDI: wiki.xml If your JTA library’s implementation of UserTransaction does not implement javax.naming.Reference, then you should use the Jakarta EE specific Jetty class to register it in JNDI: wiki.xml Jetty will automatically bind this JTA manager to the webapp’s JNDI namespace at java:comp/UserTransaction. Usually, the name you provide for the org.eclipse.jetty.plus.jndi.Resource is the same name you reference in web.xml. This ensures that the two are linked together and thus accessible to your webapp. However, if the names cannot be the same, then it is possible to effectively alias one to another using an org.eclipse.jetty.plus.jndi.Link. Supposing you have a declaration for a Datasource named jdbc/workforce in a Jetty context XML file, but your web.xml wants to link to a named jdbc/employees, and you cannot edit the web.xml. You can create a WEB-INF/jetty-env.xml file with an org.eclipse.jetty.plus.jndi.Link that ties together the names jdbc/workforce and jdbc/employees: The context XML file declares jdbc/workforce: wiki.xml jdbc/workforce test create The web.xml refers to it as jdbc/employees: wiki.xml jdbc/employees javax.sql.DataSource Container Create a WEB-INF/jetty-env.xml file with a org.eclipse.jetty.plus.jndi.Link to link these names together: wiki.xml jdbc/employees (1) jdbc/workforce (2) 1 The name as referenced in the web.xml file. 2 The name as referenced in the context XML file. You can define naming resources in three places: Server XML file Naming resources defined in a server XML file are scoped at the JVM, org.eclipse.jetty.server.Server or environment level. Note that the classes for the resource must be visible at the point in time that the XML executes. For example, environment level resources should be declared in an XML file that is referenced by a custom module that contains an [environment] clause at the matching environment level to ensure the classpath for that environment is available. Context XML file Entries in a context XML file should be scoped at the level of the webapp to which they apply (it is possible to use a less strict scoping level of Server or JVM, but not recommended). As a context XML file executes before the webapp’s classes are available, the classes for your resource must be external to the webapp and on either the container or environment classpath. WEB-INF/jetty-env.xml Naming resources in a WEB-INF/jetty-env.xml file are scoped to the webapp in which the file resides. The resources defined here may use classes from inside your webapp. Naming resources within Jetty belong to different scopes, in increasing order of restrictiveness: JVM scope: The name is unique across the JVM instance, and is visible to all application code. This scope is represented by a null first parameter to the resource declaration. For example: wiki.xml (1) jms/connectionFactory vm://localhost?broker.persistent=false 1 Empty first arg equates to JVM scope for the object bound to name jms/connectionFactory. Environment scope: The name is unique within a Jetty environment. It is represented by referencing the name of the Jakarta EE environment as the first parameter to the resource declaration. For example: wiki.xml ee10 (1) jms/connectionFactory vm://localhost?broker.persistent=false Webapp scope: The name is unique to the org.eclipse.jetty.ee{8,9,10}.webapp.WebAppContext instance, and is only visible to that application. This scope is represented by referencing the instance as the first parameter to the resource declaration. For example: wiki.xml (1) jms/connectionFactory vm://localhost?broker.persistent=false","title":"JNDI","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/jndi/index.html","titles":[{"text":"Declaring resources","hash":"declaring-resources","id":1},{"text":"org.eclipse.jetty.plus.jndi.EnvEntry","hash":"env","id":2},{"text":"org.eclipse.jetty.plus.jndi.Resource","hash":"resource","id":3},{"text":"DataSources","hash":"datasources","id":4},{"text":"JMS Queues, Topics and ConnectionFactories","hash":"jms-queues-topics-and-connectionfactories","id":5},{"text":"Mail","hash":"mail","id":6},{"text":"org.eclipse.jetty.plus.jndi.Transaction","hash":"tx","id":7},{"text":"org.eclipse.jetty.plus.jndi.Link","hash":"link","id":8},{"text":"Jetty XML files","hash":"xml","id":9},{"text":"Resource scoping","hash":"scope","id":10}]},"27":{"id":27,"text":"If you want to use JSF with your webapp, you should copy the relevant jars from your implementation of choice into your $JETTY_BASE directory, ideally into $JETTY_BASE/lib/ext. If that directory does not exist, enable the ext module, which will create the directory and ensure all jars within it are put onto the container classpath. Then you will need to tell Jetty which of those jars contains the *.tld files. To accomplish that, you need to specify either the name of the file or a pattern that matches the name/s of the file/s as the org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern context attribute. You will need to preserve the existing value of the attribute, and add in your extra pattern. Here’s an example of using a context xml file to add in a pattern to match files starting with jsf-, which contain the *.tld files: (1) (2) org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern (3) .*/jetty-servlet-api-[^/]*\\.jar$|.*/javax.servlet.jsp.jstl-.*\\.jar$|.*/org.apache.taglibs.taglibs-standard-impl-.*\\.jar$|.*/jsf-[^/]*\\.jar$ (4) 1 Configures a WebAppContext, which is the Jetty component that represents a standard Servlet web application. 2 Specifies a context attribute. 3 Specifies the name of the context attribute. 4 Adds the additional pattern .*/jsf-[^/]*\\.jar$ to those already existing.","title":"JavaServer Faces TagLibs","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/jsf-taglibs/index.html","titles":[]},"28":{"id":28,"text":"Jetty supports JSP via the ee{8,9,10}-jsp modules, which are based on Apache Jasper: # DO NOT EDIT THIS FILE - See: https://eclipse.dev/jetty/documentation/ [description] Enables JSP for all web applications deployed on the server. [environment] ee10 [depend] ee10-servlet ee10-annotations ee10-apache-jsp Logging has been bridged to Jetty logging, so you can enable logging for the org.apache.jasper package, subpackages and classes as usual. The org.eclipse.jetty.jsp.JettyJspServlet is the servlet responsible for serving JSPs. It is configured as the default jsp servlet in the $JETTY_HOME/etc/webdefault.xml file. Notice that Jetty identifies the jsp servlet by the presence of the id=\"jsp\" attribute in the declaration. That file maps the org.eclipse.jetty.jsp.JettyJspServlet to the following partial urls: *.jsp *.jspf *.jspx *.xsp *.JSP *.JSPF *.JSPX *.XSP You can change to a different servlet, change or add s or add extra s in your web.xml file. Here’s an example of adding an to augment the definitions from the standard webdefault.xml file: (1) jsp (2) keepgenerated (3) true (4) 1 This identifies this servlet as the jsp servlet to Jetty. 2 This identifies this declaration as augmenting the already-defined servlet called jsp. 3 This init param controls whether the jsp servlet retains the *.java files generated during jsp compilation. 4 This sets the value of the init param Another element you might consider adding to the default setup is async-supported: (1) jsp (2) true (3) 1 This identifies this servlet as the jsp servlet to Jetty. 2 This identifies this declaration as augmenting the already-defined servlet called jsp. 3 By default, the jsp servlet does not support async. There are many configuration parameters for the Apache Jasper JSP Servlet, here are some of them: Table 1. JSP Servlet Parameters init param Description Default webdefault.xml checkInterval If non-zero and development is false, background jsp recompilation is enabled. This value is the interval in seconds between background recompile checks. 0 – classpath The classpath is dynamically generated if the context has a URL classloader. The org.apache.catalina.jsp_classpath context attribute is used to add to the classpath, but if this is not set, this classpath configuration item is added to the classpath instead.` - – classdebuginfo Include debugging info in class file. true – compilerClassName If not set, defaults to the Eclipse jdt compiler. - – compiler Used if the Eclipse jdt compiler cannot be found on the classpath. It is the classname of a compiler that Ant should invoke. – – compilerTargetVM Target vm to compile for. 1.8 1.8 compilerSourceVM Sets source compliance level for the jdt compiler. 1.8 1.8 development If true recompilation checks occur at the frequency governed by modificationTestInterval. true – displaySourceFragment Should a source fragment be included in exception messages true – dumpSmap Dump SMAP JSR45 info to a file. false – enablePooling Determines whether tag handler pooling is enabled. true – engineOptionsClass Allows specifying the Options class used to configure Jasper. If not present, the default EmbeddedServletOptions will be used. - – errorOnUseBeanInvalidClassAttribute Should Jasper issue an error when the value of the class attribute in an useBean action is not a valid bean class true – fork Only relevant if you use Ant to compile JSPs: by default Jetty will use the Eclipse jdt compiler. true - genStrAsCharArray Option for generating Strings as char arrays. false – ieClassId The class-id value to be sent to Internet Explorer when using tags. clsid:8AD9C840-044E-11D1-B3E9-00805F499D93 – javaEncoding Pass through the encoding to use for the compilation. UTF8 – jspIdleTimeout The amount of time in seconds a JSP can be idle before it is unloaded. A value of zero or less indicates never unload. -1 – keepgenerated Do you want to keep the generated Java files around? true – mappedFile Support for mapped Files. Generates a servlet that has a print statement per line of the JSP file true – maxLoadedJsps The maximum number of JSPs that will be loaded for a web application. If more than this number of JSPs are loaded, the least recently used JSPs will be unloaded so that the number of JSPs loaded at any one time does not exceed this limit. A value of zero or less indicates no limit. -1 – modificationTestInterval If development=true, interval between recompilation checks, triggered by a request. 4 – quoteAttributeEL When EL is used in an attribute value on a JSP page, should the rules for quoting of attributes described in JSP.1.6 be applied to the expression true - recompileOnFail If a JSP compilation fails should the modificationTestInterval be ignored and the next access trigger a re-compilation attempt? Used in development mode only and is disabled by default as compilation may be expensive and could lead to excessive resource usage. false – scratchDir Directory where servlets are generated. The default is the value of the context attribute javax.servlet.context.tempdir, or the system property java.io.tmpdir if the context attribute is not set. – – strictQuoteEscaping Should the quote escaping required by section JSP.1.6 of the JSP specification be applied to scriplet expression. true - suppressSmap Generation of SMAP info for JSR45 debugging. false – trimSpaces Should template text that consists entirely of whitespace be removed from the output (true), replaced with a single space (single) or left unchanged (false)? Note that if a JSP page or tag file specifies a trimDirectiveWhitespaces value of true, that will take precedence over this configuration setting for that page/tag. trimmed? false – xpoweredBy Generate an X-Powered-By response header. false false If the value you set doesn’t take effect, try using all lower case instead of camel case, or capitalizing only some of the words in the name, as Jasper is inconsistent in its parameter naming strategy.","title":"Java Server Pages","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/jsp/index.html","titles":[{"text":"Configuration of the JSP Servlet","hash":"configuration-of-the-jsp-servlet","id":1}]},"29":{"id":29,"text":"The JavaServer Pages Standard Tag Library (JSTL) is part of the Jetty distribution, and is available via the ee{8,9,10}-jstl modules: # DO NOT EDIT THIS FILE - See: https://eclipse.dev/jetty/documentation/ [description] Enables JSTL for all web applications deployed on the server. [environment] ee10 [depend] ee10-jsp ee10-glassfish-jstl When enabled, Jetty will make the JSTL tags available for your webapps.","title":"JavaServer Pages Standard Tag Libraries","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/jstl/index.html","titles":[]},"30":{"id":30,"text":"A KeyStore is a file on the file system that contains a private key and a public certificate, along with the certificate chain of the certificate authorities that issued the certificate. The private key, the public certificate and the certificate chain, but more generally the items present in a KeyStore, are typically referred to as \"cryptographic material\". Keystores may encode the cryptographic material with different encodings, the most common being PKCS12, and are typically protected by a password. Refer to the secure protocols section for more information about how to configure a secure connector using a KeyStore. KeyStores are created with the JDK tool $JAVA_HOME/bin/keytool. The following command creates a KeyStore file containing a private key and a self-signed certificate: keytool -genkeypair (1) -alias mykey (2) -validity 90 (3) -keyalg RSA (4) -keysize 2048 (5) -keystore /path/to/keystore.p12 (6) -storetype pkcs12 (7) -dname \"CN=domain.com, OU=Unit, O=Company, L=City, S=State, C=Country\" (8) -ext san=dns:www.domain.com,dns:domain.org (9) -v (10) 1 the command to generate a key and certificate pair 2 the alias name of the key and certificate pair 3 specifies the number of days after which the certificate expires 4 the algorithm must be RSA (the DSA algorithm does not work for web sites) 5 indicates the strength of the key 6 the KeyStore file 7 the KeyStore type, stick with the standard PKCS12 8 the distinguished name (more below) — customize it with your values for CN, OU, O, L, S and C 9 the extension with the subject alternative names (more below) 10 verbose output The command prompts for the KeyStore password that you must choose to protect the access to the KeyStore. The important parts of the command above are the Common Name (CN) part of the distinguished name, and the subject alternative names (SAN). The CN value must be the main domain you own and that you want to use for your web applications. For example, if you have bought domains domain.com and domain.org, you want to specify CN=domain.com as your main domain. Furthermore, to specify additional domains or subdomains within the same certificate, you must specify the SAN extension. In the example above, san=dns:www.domain.com,dns:domain.org specifies www.domain.com and domain.org as alternative names for your web applications (that you can configure using virtual hosts). In rare cases, you may want to specify IP addresses, rather than domains, in the SAN extension. The syntax in such case is san=ip:127.0.0.1,ip:[::1], which specifies as subject alternative names IPv4 127.0.0.1 and IPv6 [::1]. A single KeyStore may contain multiple key/certificate pairs. This is useful when you need to support multiple domains on the same Jetty server (typically accomplished using virtual hosts). You can create multiple key/certificate pairs as detailed in the previous section, provided that you assign each one to a different alias. Compliant TLS clients will send the TLS SNI extension when creating new connections, and Jetty will automatically choose the right certificate by matching the SNI name sent by the client with the CN or SAN of certificates present in the KeyStore. Self-signed certificates are not trusted by browsers and generic clients: you need to establish a trust chain by having your self-signed certificate signed by a certificate authority (CA). Browsers and generic clients (e.g. Java clients) have an internal list of trusted certificate authorities root certificates; they use these trusted certificates to verify the certificate they received from the server when they connect to your web applications. To have your self-signed certificate signed by a certificate authority you first need to produce a certificate signing request (CSR): keytool -certreq (1) -file domain.com.csr (2) -keystore keystore.p12 (3) 1 the command to generate a certificate signing request 2 the file to save the CSR 3 the keystore that contains the self-signed certificate Then, you have to send the CSR file to the certificate authority of your choice, and wait for their reply (they will probably require a proof that you really own the domains indicated in your certificate). Eventually, the certificate authority will reply to you with one or more files containing the CA certificate chain, and your certificate signed by their certificate chain. The file you receive from the CA is typically in PEM format, and you must import it back into the same KeyStore file you used to generate the CSR. You must import both the certificate chain and your signed certificate. First, import the certificate chain: keytool -importcert (1) -alias ca (2) -file chain_from_ca.pem (3) -keystore keystore.p12 (4) -trustcacerts (5) -v (6) 1 the command to import certificates 2 use the ca alias to differentiate from the alias of the server certificate 3 the file containing the certificate chain received from the CA 4 your KeyStore file 5 specify that you trust CA certificates 6 verbose output Then, import the signed certificate: keytool -importcert -file signed_certificate.pem -keystore keystore.p12 -trustcacerts -v Now you have a trusted certificate in your KeyStore that you can use for the domains of your web applications. Refer to the section about configuring secure protocols to configure the secure connector with your newly created KeyStore. For the majority of secure web sites, it is the client (typically the browser) that validates the certificate sent by the server (by verifying the certificate chain). This is the server domain certificate. However, the TLS protocol supports a mutual authentication mode where also the client must send a certificate to the server, that the server validates. You typically want to sign the client certificate(s) with a server certificate that you control, and you must distribute the client certificate(s) to all the clients that need it, and redistribute the client certificates when they expire. The server authentication certificate may be different from the server domain certificate, but it’s typically stored in the same KeyStore for simplicity (although under a different alias). First, you want to create the private key and server authentication certificate that you will use to sign client certificates: keytool -genkeypair -alias server_authn (1) -validity 90 -keyalg RSA -keysize 2048 -keystore keystore.p12 (2) -storetype pkcs12 -dname \"CN=server_authn, OU=Unit, O=Company, L=City, S=State, C=Country\" (3) -ext bc=ca:true (4) -v 1 use the server_authn alias to differentiate from the alias of the server certificate 2 the KeyStore file 3 the CN is not that important, since this certificate will not be validated by clients 4 the extension with the basic constraints (more below) The important difference with the creation of a server certificate is the basic constraints extension (bc) that indicates that this certificates acts as a certificate authority (ca:true). Now you want to export both the private key and server authentication certificate. Unfortunately, the keytool program cannot export private keys, so you need to use a different command line program like openssl, or a graphical program like KeyStore Explorer. Let’s use openssl to export the server authentication private key: openssl pkcs12 -in keystore.p12 -nodes -nocerts -out server_authn.key Now let’s export the server authentication certificate: keytool -exportcert -keystore keystore.p12 -rfc -file server_authn.crt -v At this point, you want to create a client KeyStore, so that you can sign the client certificate with the server authentication cryptographic material: keytool -genkeypair -validity 90 -keyalg RSA -keysize 2048 -keystore client_keystore.p12 (1) -storetype pkcs12 -dname \"CN=client, OU=Unit, O=Company, L=City, S=State, C=Country\" (2) -v 1 the client KeyStore file 2 the CN is not that important, since it will not be validated by the server Now produce a certificate signing request (CSR): keytool -certreq -file client.csr -keystore client_keystore.p12 Now you need to sign the CSR, but again the keytool program does not have this functionality, and you must resort again to use openssl: openssl x509 -req -days 90 -in client.csr -CA server_authn.crt -CAkey server_authn.key -CAcreateserial -sha256 -out signed.crt Now you need to import the server authentication certificate and the signed client certificate into the client KeyStore. First, the server authentication certificate: keytool -importcert -alias ca -file server_authn.crt -keystore client_keystore.p12 -v Then, the signed client certificate: keytool -importcert -file signed.crt -keystore client_keystore.p12 -v Now you can distribute client_keystore.p12 to your client(s). Refer to the section about configuring secure protocols to configure the secure connector to require client authentication.","title":"Configuring SSL/TLS KeyStores","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/keystore/index.html","titles":[{"text":"Creating a KeyStore","hash":"create","id":1},{"text":"KeyStores with Multiple Entries","hash":"create-many","id":2},{"text":"Creating a Certificate Signing Request","hash":"csr","id":3},{"text":"Importing the Signed Certificate","hash":"csr-import","id":4},{"text":"Creating a KeyStore for Client Certificate Authentication","hash":"client-authn","id":5}]},"31":{"id":31,"text":"In addition to the modules that come packaged with Jetty, you can create your own custom modules. Make sure you have read the Jetty modules section if you are not familiar with the concepts used in this section. Custom modules can be used for a number of reasons — they can extend Jetty features, or add new features, or make additional libraries available to the server, etc. The standard Jetty modules typically come with a number of configurable properties that can be easily customized without the need of writing a custom module. However, there may be cases where the customization is more complex than a simple property, and a custom module is necessary. For example, let’s assume that you want to modify the order of the TLS cipher suites offered by the server when a client connects, using the OpenSSL cipher list format. The Jetty class that handles the TLS configuration is SslContextFactory, and it already has a method setCipherComparator(Comparator); however, you need to pass your custom implementation, which cannot be represented with a simple module property. The SslContextFactory component is already allocated by the standard Jetty module ssl, so what you need to do is the following: Write the custom cipher Comparator and package it into a *.jar file (exercise left to reader). Write a custom Jetty XML file that calls the SslContextFactory.setCipherComparator(Comparator) method. Write a custom Jetty module file that depends on the standard ssl module. Start with the custom Jetty XML file, $JETTY_BASE/etc/custom-ssl.xml: custom-ssl.xml (1) (2) (3) (4) ECDH+AESGCM:ECDH+AES256:!aNULL:!MD5:!DSS:!ADH 1 Reference the existing SslContextFactory object created by the standard ssl module using its id. 2 Call the setCipherComparator() method. 3 Instantiate your custom cipher comparator. 4 Pass to the constructor the ordering string in OpenSSL format, reading it from the module property com.acme.ssl.cipherList. The cipher list used above may not be secure — it’s just an example. Then write your custom module in the $JETTY_BASE/modules/custom-ssl.mod file: custom-ssl.mod [description] Customizes the standard ssl module. [tags] (1) acme [depends] (2) ssl [lib] (3) lib/custom-cipher-comparator.jar [xml] (4) etc/custom-ssl.xml [ini-template] (5) ## The cipher list in OpenSSL format. # com.acme.ssl.cipherList=ECDH+AESGCM:ECDH+AES256:!aNULL:!MD5:!DSS:!ADH 1 A tag that characterizes this custom module (see here). 2 This custom module depends on the standard ssl module. 3 The custom cipher comparator class is compiled and packaged into this *.jar file. 4 The custom Jetty XML file from above. 5 The text that will be copied in the custom-ssl.ini file when this custom module will be enabled. Now you can enable the custom module with the following command issued from the $JETTY_BASE directory: $ java -jar $JETTY_HOME/start.jar --add-modules=https,custom-ssl The command above will produce the following $JETTY_BASE directory structure: $JETTY_BASE ├── etc │ └── custom-ssl.xml ├── modules │ └── custom-ssl.mod ├── resources │ └── jetty-logging.properties └── start.d ├── https.ini └── custom-ssl.ini In the custom XML file you have used a custom module property to parametrize your custom cipher comparator. This custom module property was then referenced in the [ini-template] section of the custom module file, so that when the custom module is enabled, a correspondent custom-ssl.ini file is created. In this way, updating the cipher list won’t require you to update the XML file, but just the custom-ssl.ini file. In the cases where you need to enhance Jetty with a custom functionality, you can write a new Jetty module that provides it. For example, let’s assume that you need to add a custom auditing component that integrates with the auditing tools used by your company. This custom auditing component should measure the HTTP request processing times and record them (how they are recorded is irrelevant here — could be in a local log file or sent via network to an external service). The Jetty libraries already provide a way to measure HTTP request processing times via EventsHandler: you write a custom EventsHandler subclass that overrides the methods corresponding to the events you are interested in. The steps to create a Jetty module are similar to those necessary to modify an existing module: Write the auditing component and package it into a *.jar file. Write a custom Jetty XML file that wires the auditing component to the Handler tree. Write a custom Jetty module file that puts everything together. Let’s start with the auditing component, sketched below: package com.acme.audit; public class AuditingEventsHandler extends EventsHandler { // Auditing is implemented here. } Let’s assume that this class is compiled and packaged into acme-audit.jar, and that it has a dependency on acme-util.jar. Both *.jar files will be put in the $JETTY_BASE/lib/ directory. Next, let’s write the Jetty XML file that wires the auditing component to the ServerConnector, $JETTY_BASE/etc/acme-audit.xml: acme-audit.xml (1) (2) (3) (4) 1 Reference Server instance. 2 Call insertHandler() on the Server so that the auditing component will be inserted just after the Server and just before its child Handler. 3 Instantiate the auditing component. 4 Configure the auditing component with a property. The last step is to create the custom Jetty module file for the auditing component, $JETTY_BASE/modules/acme-audit.mod: acme-audit.mod [description] Adds ACME auditing to the Jetty Server. [tags] (1) acme audit [depends] (2) server [libs] (3) lib/acme-audit.jar lib/acme-util.jar [xml] (4) etc/acme-audit.xml [ini-template] (5) ## An auditing property. # com.acme.audit.some.property=42 1 The tags that characterize this custom module (see here). 2 This custom module depends on the standard server module. 3 The *.jar files that contains the custom auditing component, and its dependencies. 4 The custom Jetty XML file from above. 5 The text that will be copied in the acme-audit.ini file when this custom module will be enabled. Now you can enable the custom auditing module with the following command issued from the $JETTY_BASE directory: $ java -jar $JETTY_HOME/start.jar --add-modules=http,acme-audit The command above will produce the following $JETTY_BASE directory structure: $JETTY_BASE ├── etc │ └── acme-audit.xml ├── modules │ └── acme-audit.mod ├── resources │ └── jetty-logging.properties └── start.d ├── http.ini └── acme-audit.ini Enabling the custom auditing component will create the $JETTY_BASE/start.d/acme-audit.ini module configuration file that you can edit to configure auditing properties.","title":"Custom Jetty Modules","component":"jetty","version":"12","name":"custom","url":"/docs/jetty/12/operations-guide/modules/custom.html","titles":[{"text":"Modifying an Existing Module","hash":"modify","id":1},{"text":"Creating a New Module","hash":"create","id":2}]},"32":{"id":32,"text":"A Jetty module provides one or more Java components that work together to implement one or more features. Such features could be listening for clear-text HTTP/1.1 requests, exposing Jetty components to JMX, provide hot-deployment of web applications, etc. Every Jetty feature is provided by a Jetty module. A Jetty module is defined in a .mod file, where is the module name (see also the section about module names). Jetty module files are read from the typical configuration source directories, under the modules/ subdirectory; from higher priority to lower priority: The $JETTY_BASE/modules/ directory. If a directory is specified with the --add-config-dir option, its modules/ subdirectory. The $JETTY_HOME/modules/ directory. The standard Jetty modules that Jetty provides out-of-the-box are under $JETTY_HOME/modules/. Custom Jetty modules should be put under $JETTY_BASE/modules/. A Jetty module has a unique name. The module name is by default derived from the file name, so module file acme.mod identifies a module named acme. However, a module file may specify a >] directive for a virtual module, so that many modules may provide a different implementation for the same feature. For example, among the standard modules provided by Jetty, the server module depends on the logging module, but there is no correspondent logging.mod file. However, the logging-jetty.mod file has, among others, this section: logging-jetty.mod [provides] logging|default This section means that the logging-jetty.mod file provides the virtual module logging, and it is the default provider. The logging-log4j2.mod file has a similar section: logging-log4j2.mod [provides] logging If there are no enabled modules that provide the logging virtual module, either explicitly or transitively, then the default provider is used, in this case logging-jetty.mod. Otherwise, a module that provides the logging virtual module is explicitly or transitively enabled, and the default provider is not used. A Jetty module may provide one or more Java components that implement a feature. These Java components are nothing more than regular Java classes that are instantiated and configured via Jetty XML files. The Jetty XML file of a Jetty module may instantiate and assemble together its own components, or reference existing components from other Jetty modules to enhance or reconfigure them. The Jetty module’s XML files are read from the typical configuration source directories, under the etc/ subdirectory; from higher priority to lower priority: The $JETTY_BASE/etc/ directory. If a directory is specified with the --add-config-dir option, its etc/ subdirectory. The $JETTY_HOME/etc/ directory. The standard Jetty modules XML files that Jetty provides out-of-the-box are under $JETTY_HOME/etc/. For example, a Jetty XML file that allocates Jetty’s QueuedThreadPool could be as simple as: jetty-threadpool.xml Note how the Jetty XML file above is allocating (with the element) a QueuedThreadPool instance, giving it the unique id of threadPool (so that other modules can reference it, if they need to). It is then calling the setter method QueuedThreadPool.setMaxThreads(int) with the value defined by the module property jetty.threadPool.maxThreads; if the property value is not defined, it will have the default value of 256. This is nothing more than Java code in XML format with configurable properties support that can be leveraged by the Jetty start mechanism. The Jetty module’s XML files make easy to instantiate and assemble Java components (just write the equivalent Java code in XML format), and make easy to configure them by declaring module properties that can be easily customized elsewhere (for example, in *.ini files as described in this section, or on the command line as described in this section). Remember that the standard Jetty XML files in $JETTY_HOME/etc/ should not be modified. Even if you need to modify a standard Jetty component, write a new Jetty XML file, save it under $JETTY_BASE/etc/, and create a custom Jetty module so that it gets processed when Jetty starts. A Jetty module property is declared in the module XML file(s) via the element. Modules properties are used to parametrize Jetty components so that you can customize their values when Jetty starts, rather than hard-coding it in the XML files. You can declare your own properties, but the jetty.* namespace is reserved. A module property can be given a value in a Jetty module [ini] section (see here), in a *.ini file as described in this section, or on the command line as described in this section. The syntax to specify a property value is the following: = Sets the property value unconditionally. += Appends the value to the existing value. This is useful to append a value to properties that accept a comma separated list of values, for example: jetty.webapp.addProtectedClasses+=,com.acme ?= Sets the property value only if it is not already set. This is useful to define default values, for example for \"version\" properties, where the \"version\" property can be explicitly configured to a newer version, but if it is not explicitly configured it will have a default version (see also here). For example: conscrypt.version?=2.5.1 jetty.sslContext.provider?=Conscrypt Lines that start with # are comments. A text that describes the module. This text will be shown by the Jetty start mechanism when using the --list-modules command. A list of words that characterize the module. Modules that have the same tags will be shown by the Jetty start mechanism when using the --list-modules= command. example.mod [tags] demo webapp jsp A module name with an optional default specifier. As explained in the module name section, there can be many module files each providing a different implementation for the same feature. The format is: [provides] [|default] where the |default part is optional and specifies that the module is the default provider. A list of module names that this module depends on. For example, the standard module http depends on module server. Enabling the http module also enables, transitively, the server module, since the http module cannot work without the server module; when the server module is transitively enabled, the modules it depends on will be transitively enabled, and so on recursively. The [depends] directive establishes a partial order relationship among modules so that enabled modules can be sorted and organized in a graph. Circular dependencies are not allowed. The order of the enabled modules is used to determine the processing of the configuration, for example the order of processing of the >] section, the order of processing of XML files defined in the >] section, etc. This directive indicates that this module is ordered after the listed module names, if they are enabled. For example, module https is [after] module http2. Enabling the https module does not enable the http2 module. However, if the http2 module is enabled (explicitly or transitively), then the https module is sorted after the http2 module. In this way, you are guaranteed that the https module is processed after the http2 module. This directive indicates that this module is ordered before the listed module names, if they are enabled. One use of this directive is to create a prerequisite module without the need to modify the depends directive of an existing module. For example, to create a custom org.eclipse.jetty.server.Server subclass instance to be used by the standard server module, without modifying the existing server.mod file nor the jetty.xml file that it uses. This can be achieved by creating the custom-server Jetty custom module: custom-server.mod [description] This module creates a custom Server subclass instance. [before] server [xml] etc/custom-server.xml The custom-server.xml file is the following: custom-server.xml The presence of the [before] directive in custom-server.mod causes the processing of the custom-server.xml file to happen before the processing of the standard jetty.xml file referenced by the standard server.mod Jetty module. Thus, the instance assigned to the Server identifier is your custom com.acme.server.CustomJettyServer instance from the custom-server.xml file; this instance is then used while processing the jetty.xml file. A list of paths (directories and/or files) that are necessary for the module, created or resolved when the module is enabled. Each path may be of the following types: Path Name A path name representing a file, or a directory if the path name ends with /, such as webapps/. The file or directory will be created relative to $JETTY_BASE, if not already present. For example: [files] logs/ Maven Artifact An URI representing a Maven artifact to be downloaded from Maven Central, if not already present. Property expansion is supported. The format is: [files] maven:////[/]| where is optional, and after the | is the path under $JETTY_BASE where the downloaded file should be saved. For example: [files] maven://org.postgresql/postgresql/${postgresql-version}|lib/postgresql-${postgresql-version}.jar BaseHome An URI representing a $JETTY_HOME resource to be copied in $JETTY_BASE, if not already present. URIs of this type are typically only used by standard Jetty modules; custom modules should not need to use it. The format is: [files] basehome:| For example: [files] basehome:modules/demo.d/demo-moved-context.xml|webapps/demo-moved-context.xml HTTP URL An http:// or https:// URL to be downloaded, if not already present. The format is: [files] | For example: [files] https://acme.com/favicon.ico|webapps/acme/favicon.ico A list of paths, relative to the configuration source directories, of *.jar library files and/or directories that are added to the server class-path (or module-path when running in JPMS mode). The [libs] section if often used in conjunction with the [files] section. For example: [files] maven://org.postgresql/postgresql/${postgresql-version}|lib/postgresql-${postgresql-version}.jar [libs] lib/postgresql-${postgresql-version}.jar The postgresql-.jar artifact is downloaded from Maven Central, if not already present, into the $JETTY_BASE/lib/ directory when the module is enabled. When Jetty starts, the $JETTY_BASE/lib/postgresql-.jar will be in the server class-path (or module-path). A list of paths, relative to the configuration source directories, of Jetty *.xml files that are passed as program arguments to be processed when Jetty starts (see the section about assembling Jetty components). Jetty XML files are read from the typical configuration source directories, under the etc/ subdirectory. Standard Jetty XML files are under $JETTY_HOME/etc/, while custom Jetty XML files are typically under $JETTY_BASE/etc/. For example: [xml] etc/custom/components.xml A list of program arguments to pass to the command line when Jetty is started. The program arguments may include any command line option (see here for the list of command line options), module properties and/or module XML files. A property defined in the [ini] section is available in the *.mod module file for property expansion, for example: [ini] postgresql-version?=42.6.0 [lib] lib/postgresql-${postgresql-version}.jar In the example above, the [lib] section contains ${postgresql-version}, a reference to property postgresql-version whose value is defined in the [ini] section. The expression ${} expands the property replacing the expression with the property value. See also the JPMS section for additional examples about the [ini] section. A list of properties to be copied in the *.ini file generated when the module is enabled. The list of properties is derived from the module XML file(s) that declare them. The properties are typically assigned their default value and commented out, so that it is evident which properties have been uncommented and customized with a non-default value. A list of JVM command line options and/or system properties passed to a forked JVM. When the [exec] section is present, the JVM running the Jetty start mechanism will fork another JVM, passing the JVM command line options and system properties listed in the [exec] sections of the enabled modules. This is necessary because JVM options such as -Xmx (that specifies the max JVM heap size) cannot be changed in a running JVM. For an example, see this section. You can avoid that the Jetty start mechanism forks the second JVM, as explained in this section. A list of JVM command line options related to the Java Module System. This section is processed only when Jetty is started in JPMS mode. The directives are: add-modules Equivalent to the JVM option --add-modules. The format is: [jpms] add-modules: (,)* where module is a JPMS module name. patch-module Equivalent to the JVM option --patch-module. The format is: [jpms] patch-module: =(:)* where module is a JPMS module name. add-opens Equivalent to the JVM option --add-opens. The format is: [jpms] add-opens: /=(,)* where module and target-module are a JPMS module names. add-exports Equivalent to the JVM option --add-exports. The format is: [jpms] add-exports: /=(,)* where module and target-module are a JPMS module names. add-reads Equivalent to the JVM option --add-exports. The format is: [jpms] add-reads: =(,)* where module and target-module are a JPMS module names. The license under which the module is released. A Jetty module may be released under a license that is different from Jetty’s, or use libraries that require end-users to accept their licenses in order to be used. You can put the license text in the [license] section, and when the Jetty module is enabled the license text will be printed on the terminal, and the user prompted to accept the license. If the user does not accept the license, the module will not be enabled. For example: [license] Acme Project is an open source project hosted on GitHub and released under the Apache 2.0 license. https://www.apache.org/licenses/LICENSE-2.0.txt The minimum Jetty version for which this module is valid. For example, a module may only be valid for Jetty 10 and later, but not for earlier Jetty versions (because it references components that have been introduced in Jetty 10). For example: [version] 10.0 A Jetty module with such a section will only work for Jetty 10.0.x or later.","title":"Jetty Modules","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/modules/index.html","titles":[{"text":"Module Names","hash":"names","id":1},{"text":"Module Components","hash":"components","id":2},{"text":"Module Properties","hash":"properties","id":3},{"text":"Module Directives","hash":"directives","id":4},{"text":"[description]","hash":"directive-description","id":5},{"text":"[tags]","hash":"directive-tags","id":6},{"text":"[provides]","hash":"directive-provides","id":7},{"text":"[depends]","hash":"directive-depends","id":8},{"text":"[after]","hash":"directive-after","id":9},{"text":"[before]","hash":"directive-before","id":10},{"text":"[files]","hash":"directive-files","id":11},{"text":"[libs]","hash":"directive-libs","id":12},{"text":"[xml]","hash":"directive-xml","id":13},{"text":"[ini]","hash":"directive-ini","id":14},{"text":"[ini-template]","hash":"directive-ini-template","id":15},{"text":"[exec]","hash":"directive-exec","id":16},{"text":"[jpms]","hash":"directive-jpms","id":17},{"text":"[license]","hash":"directive-license","id":18},{"text":"[version]","hash":"directive-version","id":19}]},"33":{"id":33,"text":"The alpn module enables support for the ALPN negotiation mechanism of the TLS protocol. You can configure the list of application protocols negotiated by the ALPN mechanism, as well as the default protocol to use if the ALPN negotiation fails (for example, the client does not support ALPN). The module properties are: ## Specifies the ordered list of application protocols supported by the server. ## The default list is specified by the list of the protocol modules that have ## been enabled, and the order is specified by the module dependencies. # jetty.alpn.protocols=h2,http/1.1 ## Specifies the protocol to use when the ALPN negotiation fails. # jetty.alpn.defaultProtocol=http/1.1 The bytebufferpool module allows you to configure the server-wide ByteBuffer pool. Pooling ByteBuffers results in less memory usage and less pressure on the Garbage Collector. ByteBuffers are pooled in buckets; each bucket as a capacity that is a multiple of a capacity factor that you can configure. For example, if a request for a ByteBuffer of capacity 2000 is requested, and the capacity factor is 1024, then the pool will allocate a buffer from the second bucket, of capacity 2048 (1024 * 2). Applications that need to sustain many concurrent requests — or load spikes — may require many buffers during peak load. These buffers will remain pooled once the system transitions to a lighter load (or becomes idle), and it may be undesirable to retain a lot of memory for an idle system. It is possible to configure the max heap memory and the max direct memory that the pool retains. Excess buffers will not be pooled and will be eventually garbage collected. The module file is $JETTY_HOME/modules/bytebufferpool.mod: [description] Configures the ByteBufferPool used by ServerConnectors. The bucket sizes increase linearly. Use module \"bytebufferpool-quadratic\" for a pool that holds more coarse sized buffers. [depends] logging [xml] etc/jetty-bytebufferpool.xml [ini-template] ## Minimum capacity of a single ByteBuffer. #jetty.byteBufferPool.minCapacity=0 ## Maximum capacity of a single ByteBuffer. ## Requests for ByteBuffers larger than this value results ## in the ByteBuffer being allocated but not pooled. #jetty.byteBufferPool.maxCapacity=65536 ## Bucket capacity factor. ## ByteBuffers are allocated out of buckets that have ## a capacity that is multiple of this factor. #jetty.byteBufferPool.factor=4096 ## Maximum size for each bucket (-1 for unbounded). #jetty.byteBufferPool.maxBucketSize=-1 ## Maximum heap memory held idle by the pool (0 for heuristic, -1 for unlimited). #jetty.byteBufferPool.maxHeapMemory=0 ## Maximum direct memory held idle by the pool (0 for heuristic, -1 for unlimited). #jetty.byteBufferPool.maxDirectMemory=0 ## Whether statistics are enabled. #jetty.byteBufferPool.statisticsEnabled=false Among the configurable properties, the most relevant are: jetty.byteBufferPool.maxHeapMemory This property allows you to cap the max heap memory retained by the pool. jetty.byteBufferPool.maxDirectMemory This property allows you to cap the max direct memory retained by the pool. The console-capture module captures System.out and System.err output and appends it to a rolling file. The file is rolled every day at the midnight of the configured timezone. Old, rolled files are kept for the number of days specified by the jetty.console-capture.retainDays property. The module properties are: ## Logging directory (relative to $JETTY_BASE). # jetty.console-capture.dir=./logs ## Whether to append to existing file. # jetty.console-capture.append=true ## How many days to retain old log files. # jetty.console-capture.retainDays=90 ## Timezone ID of the log timestamps, as specified by java.time.ZoneId. # jetty.console-capture.timezone=GMT This module enables webapp deployment from the $JETTY_BASE/webapps directory. Deployment is managed via a DeploymentManager component that watches a directory for changes. See how to deploy web applications for more information. TODO The cross-origin module provides support for the CORS protocol implemented by browsers when performing cross-origin requests. This module installs the CrossOriginHandler in the Handler tree; CrossOriginHandler inspects cross-origin requests and adds the relevant CORS response headers. CrossOriginHandler should be used when an application performs cross-origin requests to your domain, to protect from cross-site request forgery attacks. The module properties are: ## Whether cross-origin requests can include credentials such as cookies or authentication headers. # jetty.crossorigin.allowCredentials=false ## A comma-separated list of headers allowed in cross-origin requests. # jetty.crossorigin.allowedHeaders=Content-Type ## A comma-separated list of HTTP methods allowed in cross-origin requests. # jetty.crossorigin.allowedMethods=GET,POST,HEAD ## A comma-separated list of origins regex patterns allowed in cross-origin requests. # jetty.crossorigin.allowedOriginPatterns= ## A comma-separated list of timing origins regex patterns allowed in cross-origin requests. # jetty.crossorigin.allowedTimingOriginPatterns= ## Whether preflight requests are delivered to the child Handler of CrossOriginHandler. # jetty.crossorigin.deliverPreflightRequests=false ## Whether requests whose origin is not allowed are delivered to the child Handler of CrossOriginHandler. # jetty.crossorigin.deliverNonAllowedOriginRequests=true ## Whether WebSocket upgrade requests whose origin is not allowed are delivered to the child Handler of CrossOriginHandler. # jetty.crossorigin.deliverNonAllowedOriginWebSocketUpgradeRequests=false ## A comma-separated list of headers allowed in cross-origin responses. # jetty.crossorigin.exposedHeaders= ## How long the preflight results can be cached by browsers, in seconds. # jetty.crossorigin.preflightMaxAge=60 You must configure at least the property jetty.crossorigin.allowedOriginPatterns to allow one or more origins. It is recommended that you consider configuring also the property jetty.crossorigin.allowCredentials. When set to true, clients send cookies and authentication headers in cross-origin requests to your domain. When set to false, cookies and authentication headers are not sent. This module enables webapp deployment from the $JETTY_BASE/webapps directory. Deployment is managed via a DeploymentManager component that watches a directory for changes. See how to deploy web applications for more information. Adding files or directories to this monitored directory will cause the DeploymentManager to deploy them as web applications; updating files already existing in this monitored directory will cause the DeploymentManager to re-deploy the corresponding web application; removing files in this monitored directory will cause the DeploymentManager to \"undeploy\" the corresponding web application. (You can find a more detailed discussion of these rules in the deployment rules section.) Multiple versions of this module exist (ee{8,9,10}-deploy) to support each Jakarta EE platform’s version of the Java Servlet specification. Jetty’s configuration properties are nearly identical across these versions; the configuration properties for the ee10-deploy Jetty module are: ## Monitored directory name (relative to $jetty.base) # jetty.deploy.monitoredDir=webapps ## Defaults Descriptor for all deployed webapps # jetty.deploy.defaultsDescriptorPath=${jetty.base}/etc/webdefault-ee10.xml ## Monitored directory scan period (seconds) # jetty.deploy.scanInterval=0 ## Whether to extract *.war files # jetty.deploy.extractWars=true ## Whether to give the parent classloader priority # jetty.deploy.parentLoaderPriority=true ## Comma separated list of configuration classes to set. # jetty.deploy.configurationClasses= ## Pattern to select jars from the container classloader to be scanned (or null to scan no jars) # jetty.deploy.containerScanJarPattern=.*/jakarta.servlet-api-[^/]*\\.jar$|.*jakarta.servlet.jsp.jstl-.*\\.jar$ ## Pattern to select jars from the container classloader to be scanned (or null to scan all jars). # jetty.deploy.webInfScanJarPattern= ## Pattern to exclude discovered ServletContainerInitializers # jetty.deploy.servletContainerInitializerExclusionPattern= ## Order of discovered ServletContainerInitializers # jetty.deploy.servletContainerInitializerOrder= Among the configurable properties, the most relevant are: jetty.deploy.monitoredDir The name of the monitored directory. jetty.deploy.scanInterval The scan period in seconds, that is how frequently the DeploymentManager wakes up to scan the monitored directory for changes. Setting jetty.deploy.scanInterval=0 disabled hot deployment so that only static deployment will be possible (see also here for more information). This module enables deployment of Java Servlet web applications. Multiple versions of this module exist (ee{8,9,10}-webapp) to support each Jakarta EE platform’s version of the Java Servlet specification. Jetty’s configuration properties are identical across all versions of this module, and are as follows: ## Add to the environment wide default jars and packages protected or hidden from webapps. ## Protected (aka System) classes cannot be overridden by a webapp. ## Hidden (aka Server) classes cannot be seen by a webapp ## Lists of patterns are comma separated and may be either: ## + a qualified classname e.g. 'com.acme.Foo' ## + a package name e.g. 'net.example.' ## + a jar file e.g. '${jetty.base.uri}/lib/dependency.jar' ## + a directory of jars,resource or classes e.g. '${jetty.base.uri}/resources' ## + A pattern preceded with a '-' is an exclusion, all other patterns are inclusions ## ## The +=, operator appends to a CSV list with a comma as needed. ## #jetty.webapp.addProtectedClasses+=,org.example. #jetty.webapp.addHiddenClasses+=,org.example. The http module provides the clear-text connector and support for the clear-text HTTP/1.1 protocol, and depends on the server module. The module properties to configure the clear-text connector are: ### Clear-Text HTTP Connector Configuration ## The host/address to bind the connector to. # jetty.http.host=0.0.0.0 ## The port the connector listens on. # jetty.http.port=8080 ## The connector idle timeout, in milliseconds. # jetty.http.idleTimeout=30000 ## The number of acceptors (-1 picks a default value based on number of cores). # jetty.http.acceptors=1 ## The number of selectors (-1 picks a default value based on number of cores). # jetty.http.selectors=-1 ## The ServerSocketChannel accept queue backlog (0 picks the platform default). # jetty.http.acceptQueueSize=0 ## The thread priority delta to give to acceptor threads. # jetty.http.acceptorPriorityDelta=0 ## Whether to enable the SO_REUSEADDR socket option. # jetty.http.reuseAddress=true ## Whether to enable the SO_REUSEPORT socket option. # jetty.http.reusePort=false ## Whether to enable the TCP_NODELAY socket option on accepted sockets. # jetty.http.acceptedTcpNoDelay=true ## The SO_RCVBUF socket option to set on accepted sockets. ## A value of -1 indicates that the platform default is used. # jetty.http.acceptedReceiveBufferSize=-1 ## The SO_SNDBUF socket option to set on accepted sockets. ## A value of -1 indicates that the platform default is used. # jetty.http.acceptedSendBufferSize=-1 Among the configurable properties, the most relevant are: jetty.http.port The network port that Jetty listens to for clear-text HTTP/1.1 connections — default 8080. jetty.http.idleTimeout The amount of time a connection can be idle (i.e. no bytes received and no bytes sent) until the server decides to close it to save resources — default 30 seconds. jetty.http.acceptors The number of threads that compete to accept connections — default 1. Use -1 to let the accept heuristic decides the value; the current heuristic calculates a value based on the number of cores). Refer to this section for more information about acceptor threads. jetty.http.selectors The number of NIO selectors (with an associated thread) that manage connections — default -1 (i.e. a select heuristic decides the value; the current heuristic calculates a value based on the number of cores). Accepting connections from remote clients may be configured as a blocking operation, or a non-blocking operation. When accepting connections is configured as a blocking operation (the number of acceptors is greater than zero), a thread is blocked in the accept() call until a connection is accepted, and other acceptor threads (if any) are blocked on the lock acquired by the accepting thread just before the accept() call. When the accepting thread accepts a connection, it performs a little processing of the just accepted connection, before forwarding it to other components. During this little processing other connections may be established; if there is only one accepting thread, the newly established connections are waiting for the accepting thread to finish the processing of the previously accepted connection and call again accept(). Servers that manage a very high number of connections that may (naturally) come and go, or that handle inefficient protocols that open and close connections very frequently (such as HTTP/1.0) may benefit of an increased number of acceptor threads, so that when one acceptor thread processes a just accepted connection, another acceptor thread can immediately take over accepting connections. When accepting connections is configured as a non-blocking operation (the number of acceptors is zero), then the server socket is set in non-blocking mode and added to a NIO selector. In this way, no dedicated acceptor threads exist: the work of accepting connections is performed by the selector thread. Performing a NIO select() call is a blocking operation, where the selecting thread is blocked in the select() call until at least one connection is ready to be processed for an I/O operation. There are 4 I/O operations: ready to be accepted, ready to be connected, ready to be read and ready to be written. A single NIO selector can manage thousands of connections, with the assumption that not many of them will be ready at the same time. For a single NIO selector, the ratio between the average number of selected connections over the total number of connections for every select() call depends heavily on the protocol but also on the application. Multiplexed TCP protocols such as HTTP/2 tend to be busier than duplex protocols such as HTTP/1.1, leading to a higher ratio. REST applications that exchange many little JSON messages tend to be busier than file server applications, leading to a higher ratio. The higher the ratio, the higher the number of selectors you want to have, compatibly with the number of cores — there is no point in having 64 selector threads on a single core hardware. The http2 module enables support for the secure HTTP/2 protocol. The module properties are: ## Specifies the maximum number of concurrent requests per session. # jetty.http2.maxConcurrentStreams=128 ## Specifies the initial stream receive window (client to server) in bytes. # jetty.http2.initialStreamRecvWindow=524288 ## Specifies the initial session receive window (client to server) in bytes. # jetty.http2.initialSessionRecvWindow=1048576 ## Specifies the maximum number of keys in all SETTINGS frames received by a session. # jetty.http2.maxSettingsKeys=64 ## Specifies the maximum number of bad frames and pings per second, ## after which a session is closed to avoid denial of service attacks. # jetty.http2.rateControl.maxEventsPerSecond=50 The jetty.http2.rateControl.maxEventsPerSecond property controls the number of \"bad\" or \"unnecessary\" frames that a client may send before the server closes the connection (with code ENHANCE_YOUR_CALM) to avoid a denial of service. For example, an attacker may send empty SETTINGS frames to a server in a tight loop. While the SETTINGS frames don’t change the server configuration and each of them is somehow harmless, the server will be very busy processing them because they are sent by the attacker one after the other, causing a CPU spike and eventually a denial of service (as all CPUs will be busy processing empty SETTINGS frames). The same attack may be performed with PRIORITY frames, empty DATA frames, PING frames, etc. The http2c module enables support for the clear-text HTTP/2 protocol. The module properties are: ## Specifies the maximum number of concurrent requests per session. # jetty.http2c.maxConcurrentStreams=128 ## Specifies the initial stream receive window (client to server) in bytes. # jetty.http2c.initialStreamRecvWindow=524288 ## Specifies the initial session receive window (client to server) in bytes. # jetty.http2c.initialSessionRecvWindow=1232896 ## Specifies the maximum number of keys in all SETTINGS frames received by a session. # jetty.http2c.maxSettingsKeys=64 ## Specifies the maximum number of bad frames and pings per second, ## after which a session is closed to avoid denial of service attacks. # jetty.http2c.rateControl.maxEventsPerSecond=50 The jetty.http2.rateControl.maxEventsPerSecond property controls the number of \"bad\" or \"unnecessary\" frames that a client may send before the server closes the connection (with code ENHANCE_YOUR_CALM) to avoid a denial of service. For example, an attacker may send empty SETTINGS frames to a server in a tight loop. While the SETTINGS frames don’t change the server configuration and each of them is somehow harmless, the server will be very busy processing them because they are sent by the attacker one after the other, causing a CPU spike and eventually a denial of service (as all CPUs will be busy processing empty SETTINGS frames). The same attack may be performed with PRIORITY frames, empty DATA frames, PING frames, etc. The http3 module enables support for the HTTP/3 protocol. The module properties are: ## The host/address to bind the connector to. # jetty.quic.host=0.0.0.0 ## The port the connector listens on. # jetty.quic.port=8444 ## The connector idle timeout, in milliseconds. # jetty.quic.idleTimeout=30000 ## Specifies the maximum number of concurrent requests per session. # jetty.quic.maxBidirectionalRemoteStreams=128 ## Specifies the session receive window (client to server) in bytes. # jetty.quic.sessionRecvWindow=4194304 ## Specifies the stream receive window (client to server) in bytes. # jetty.quic.bidirectionalStreamRecvWindow=2097152 ## Specifies the stream idle timeout, in milliseconds. # jetty.http3.streamIdleTimeout=30000 The http-forwarded module provides support for processing the Forwarded HTTP header (defined in RFC 7239) and the now obsoleted X-Forwarded-* HTTP headers. The module properties are: ### ForwardedRequestCustomizer Configuration ## Whether to process only the RFC7239 \"Forwarded\" header. ## \"X-Forwarded-*\" headers are not processed. # jetty.httpConfig.forwardedOnly=false ## Whether the address obtained from \"Forwarded: by=\" or ## \"X-Forwarded-Server\" is used in the request authority. # jetty.httpConfig.forwardedProxyAsAuthority=false ## Whether the \"X-Forwarded-Port\" header is used in the request authority, ## or else it is the remote client port. # jetty.httpConfig.forwardedPortAsAuthority=true ## The name of the RFC 7239 HTTP header. # jetty.httpConfig.forwardedHeader=Forwarded ## The name of the obsolete forwarded host HTTP header. # jetty.httpConfig.forwardedHostHeader=X-Forwarded-Host ## The name of the obsolete forwarded server HTTP header. # jetty.httpConfig.forwardedServerHeader=X-Forwarded-Server ## The name of the obsolete forwarded scheme HTTP header. # jetty.httpConfig.forwardedProtoHeader=X-Forwarded-Proto ## The name of the obsolete forwarded for HTTP header. # jetty.httpConfig.forwardedForHeader=X-Forwarded-For ## The name of the obsolete forwarded port HTTP header. # jetty.httpConfig.forwardedPortHeader=X-Forwarded-Port ## The name of the obsolete forwarded https HTTP header. # jetty.httpConfig.forwardedHttpsHeader=X-Proxied-Https ## The name of the obsolete forwarded SSL session ID HTTP header. # jetty.httpConfig.forwardedSslSessionIdHeader=Proxy-ssl-id ## The name of the obsolete forwarded SSL cipher HTTP header. # jetty.httpConfig.forwardedCipherSuiteHeader=Proxy-auth-cert The https module provides the HTTP/1.1 protocol to the ssl module. The module file is $JETTY_HOME/modules/https.mod: # DO NOT EDIT THIS FILE - See: https://eclipse.dev/jetty/documentation/ [description] Adds HTTPS protocol support to the TLS(SSL) Connector. [tags] connector https http ssl [depend] ssl [after] alpn http2 http-forwarded [xml] etc/jetty-https.xml This module enables deployment of Java Servlet web applications. This configuration is useful for local development and testing. If you need to enable remote access, use the jmx-remote module. The jmx-remote module provides remote access to JMX clients. The module properties to configure remote JMX connector are: ## The host/address to bind the RMI server to. # jetty.jmxremote.rmiserverhost=localhost ## The port the RMI server listens to (0 means a random port is chosen). # jetty.jmxremote.rmiserverport=1099 ## The host/address to bind the RMI registry to. # jetty.jmxremote.rmiregistryhost=localhost ## The port the RMI registry listens to. # jetty.jmxremote.rmiregistryport=1099 ## The host name exported in the RMI stub. -Djava.rmi.server.hostname=localhost The system property java.rmi.server.hostname is specified with the usual notation, prepending a -D in front of the system property name. The system property java.rmi.server.hostname is uncommented because it is necessary in the default configuration — most systems do not have the local name resolution configured properly for remote access. As an example, in a Linux machine named beryl, the /etc/hosts file may contain these entries: 127.0.0.1 localhost 127.0.1.1 beryl If the system property java.rmi.server.hostname is not specified, the RMI implementation uses the host name beryl to figure out the IP address to store in the RMI stub, in this case 127.0.1.1. However, we the RMI server is configured to bind to localhost, i.e. 127.0.0.1. If the system property java.rmi.server.hostname is not specified, the RMI client will try to connect to 127.0.1.1 (because that’s what in the RMI stub) and fail because nothing is listening on that address. The requestlog module provides HTTP request/response logging in the standard NCSA format, or in a custom format of your choice. The module properties are: ## Format string # jetty.requestlog.formatString=%{client}a - %u %{dd/MMM/yyyy:HH:mm:ss ZZZ|GMT}t \"%r\" %s %O \"%{Referer}i\" \"%{User-Agent}i\" ## Logging directory (relative to $jetty.base) # jetty.requestlog.dir=logs ## File path # jetty.requestlog.filePath=${jetty.requestlog.dir}/yyyy_mm_dd.request.log ## Date format for rollovered files (uses SimpleDateFormat syntax) # jetty.requestlog.filenameDateFormat=yyyy_MM_dd ## How many days to retain old log files # jetty.requestlog.retainDays=90 ## Whether to append to existing file # jetty.requestlog.append=false ## Timezone of the log file rollover # jetty.requestlog.timezone=GMT The property jetty.requestlog.formatString can be customized using format codes. Format codes are specified with the syntax %MODIFIERS{PARAM}CODE as follows: MODIFIERS Optional list of comma separated HTTP status codes which may be preceded by a single \"!\" to indicate negation. If the status code is not in the list the literal string \"-\" will be logged instead of the resulting value from the percent code. {PARAM} Parameter string which may be optional depending on the percent code used. CODE A one or two character code specified by the table of format codes below. Format Codes Format String Description X The X character. %% The percent character. %{format}a The address or host name. Valid format values are: \"server\", \"client\", \"local\", \"remote\". The format parameter is optional and defaults to \"server\". Values \"server\" and \"client\" are the logical addresses which can be modified in the request headers, while \"local\" and \"remote\" are the physical addresses so may be the addresses of a proxy between the end-user and the server. %{format}p The port. Valid format values are: \"server\", \"client\", \"local\", \"remote\". The format parameter is optional and defaults to \"server\". Values \"server\" and \"client\" are the logical ports which can be modified in the request headers, while \"local\" and \"remote\" are the physical ports so may be the ports of a proxy between the end-user and the server. %{CLF}I The size of request in bytes, excluding HTTP headers. The parameter is optional. When the parameter value is \"CLF\" the Common Log Format is used, i.e. a {@code -} rather than a {@code 0} when no bytes are present. %{CLF}O The size of response in bytes, excluding HTTP headers. The parameter is optional. When the parameter value is \"CLF\" the Common Log Format is used, i.e. a {@code -} rather than a {@code 0} when no bytes are present. %{CLF}S The bytes transferred (received and sent). This is the combination of {@code %I} and {@code %O}. The parameter is optional. When the parameter value is \"CLF\" the Common Log Format is used, i.e. a {@code -} rather than a {@code 0} when no bytes are present. %{VARNAME}C The value of the request cookie VARNAME. The parameter is optional. Only version 0 cookies are fully supported. When the parameter is missing, all request cookies will be logged. %D The time taken to serve the request, in microseconds. %{VARNAME}e The value of the environment variable VARNAME. %f The file system path of the requested resource. %H The name and version of the request protocol, such as \"HTTP/1.1\". %{VARNAME}i The value of the VARNAME request header. %k The number of requests handled on a connection. The initial request on a connection yields a value 0, the first request after the initial on the same connection yields the value 1, the second request on the same connection yields the value 2, etc. %m The HTTP request method. %{VARNAME}o The value of the VARNAME response header. %q The query string, prepended with a ? if a query string exists, otherwise an empty string. %r First line of an HTTP/1.1 request (or equivalent information for HTTP/2 or later). %R The name of the Handler or Servlet generating the response (if any). %s The HTTP response status code. %{format|timeZone|locale}t The time at which the request was received. The parameter is optional and may have the following values: {format}, {format|timeZone} or {format|timeZone|locale}. format Default is e.g. [18/Sep/2011:19:18:28 -0400] where the last number indicates the timezone offset from GMT. Must be in a format supported by the {@code java.time} package. timeZone Default is GMT. Must be in a format supported by the {@code java.time} package. locale Default is the JVM default locale. Must be in a format supported by {@code java.util.Locale.forLanguageTag()}. %{UNIT}T The time taken to serve the request. The parameter UNIT is optional and defaults to \"s\". The parameter UNIT indicates the unit of time: \"s\" for seconds, \"ms\" for milliseconds, \"us\" for microseconds. %{us}T is identical to {@code %D}. %{d}u The remote user if the request was authenticated with servlet authentication. May be an invalid value if response status code ({@code %s}) is 401 (unauthorized). The parameter is optional. When the parameter value is \"d\", deferred authentication will also be checked. %U The URL path requested, not including any query string. %X The connection status when response is completed: X The connection is aborted before the response completed. + The connection may be kept alive after the response is sent. - The connection will be closed after the response is sent. %{VARNAME}ti The value of the VARNAME request trailer. %{VARNAME}to The value of the VARNAME response trailer. This module adds the $JETTY_BASE/resources directory to the server’s classpath. A common use-case for this module is to provide resources for third-party libraries via the server classpath. For instance, many logging libraries (including Log4j2 and Logback) look for their configuration files on the classpath. Jetty provides a logging library implementation — enabled via the logging-jetty module — whose configuration file is $JETTY_BASE/resources/jetty-logging.properties. The rewrite module inserts the RewriteHandler at the beginning of the Handler chain, providing URI-rewriting features similar to the Apache’s mod_rewrite or the Nginx rewrite module. The module properties are: ## Request attribute name used to store the original request path. # jetty.rewrite.originalPathAttribute=jetty.rewrite.originalRequestPath A common use of the rewrite module is to redirect/rewrite old URI paths that have been renamed, for example from /old/* to /new/*; in this way, the old paths will not result in a 404 response, but rather be redirected/rewritten to the new paths. RewriteHandler matches incoming requests against a set of rules that you can specify in the $JETTY_BASE/etc/jetty-rewrite-rules.xml file. Rules can be matched against request data such as the request URI or the request headers; if there is a match, the rule is applied. The rule file $JETTY_BASE/etc/jetty-rewrite-rules.xml is initially empty, but contains commented examples of rules that you can add. The list of available rules can be found here. An example of jetty-rewrite-rules.xml is the following: jetty-rewrite-rules.xml 301 /old/(.*) /new/$1 Rules can be scoped to a specific virtual host. In the example below, the rule will only be evaluated if the virtual host matches example.com: jetty-rewrite-rules.xml example.com /advice /support The server module provides generic server support, and configures generic HTTP properties that apply to all HTTP protocols, the scheduler properties and the server specific properties. The server module depends on the threadpool module, the bytebufferpool module and the logging module. The server module configures the shared parameters for generic HTTP handling, but does not enable any specific network protocol. You have to explicitly enable the protocols you want to support by enabling, for example, the http module for clear-text HTTP/1.1 support, or the http2 module for secure HTTP/2 support, etc. See also the protocols section for more information about the supported protocols. The module properties to configure generic HTTP properties are listed below. Mostly they frequently apply to HTTP/1, HTTP/2 and HTTP/3, but some parameters are version specific: ### Common HTTP configuration ## Scheme to use to build URIs for secure redirects # jetty.httpConfig.secureScheme=https ## Port to use to build URIs for secure redirects # jetty.httpConfig.securePort=8443 ## Response content buffer size (in bytes) # jetty.httpConfig.outputBufferSize=32768 ## Max response content write length that is buffered (in bytes) # jetty.httpConfig.outputAggregationSize=8192 ## If HTTP/1.x persistent connections should be enabled # jetty.httpConfig.persistentConnectionsEnabled=true ## Max request headers size (in bytes) # jetty.httpConfig.requestHeaderSize=8192 ## Max response headers size (in bytes) # jetty.httpConfig.responseHeaderSize=8192 ## Whether to send the Server: header # jetty.httpConfig.sendServerVersion=true ## Whether to send the Date: header # jetty.httpConfig.sendDateHeader=false ## Max per-connection header cache size (in nodes) # jetty.httpConfig.headerCacheSize=1024 ## Whether, for requests with content, delay dispatch until some content has arrived # jetty.httpConfig.delayDispatchUntilContent=true ## Maximum number of error dispatches to prevent looping # jetty.httpConfig.maxErrorDispatches=10 ## Relative Redirect Locations allowed # jetty.httpConfig.relativeRedirectAllowed=true ## Whether to use direct ByteBuffers for reading or writing # jetty.httpConfig.useInputDirectByteBuffers=true # jetty.httpConfig.useOutputDirectByteBuffers=true Among the configurable properties, the most relevant are: jetty.httpConfig.headerCacheSize The header cache is used when parsing HTTP/1 to more efficiently handle fields that are repeated in every request on a connection. If the server does not receive persistent connection or infrequent repeated fields, then there may be a performance gain in reducing the cache size. If large fields are frequently repeated, then a large cache may be beneficial. jetty.httpConfig.delayDispatchUntilContent It is not uncommon for the network packets containing a request header to arrive before packets that contain the data of any request body. In such cases it may be beneficial for overall performance to delay dispatching the request to be handled until the first data packet arrives, as this may avoid blocking the handling thread. However, if minimum latency for receiving the request without content is important, then this parameter can be set to false. jetty.httpConfig.sendServerVersion Whether you want to send the Server header in every HTTP response: HTTP/1.1 200 OK Content-Length: 0 Server: Jetty(12.0.10-SNAPSHOT) The module properties to configure the Jetty server are: ### Server configuration ## Whether ctrl+c on the console gracefully stops the Jetty server # jetty.server.stopAtShutdown=true ## Timeout in ms to apply when stopping the server gracefully # jetty.server.stopTimeout=5000 ## Dump the state of the Jetty server, components, and webapps after startup # jetty.server.dumpAfterStart=false ## The temporary directory used by the Jetty server and as a root for its contexts # jetty.server.tempDirectory= ## Dump the state of the Jetty server, components, and webapps before shutdown # jetty.server.dumpBeforeStop=false Among the configurable properties, the most relevant are: jetty.server.dumpAfterStart Whether to perform a Server.dump() operation after the Server has started. The output of the dump operation is sent to System.err. See also the Jetty Server Dump section for more information. jetty.server.dumpBeforeStop Whether to perform a Server.dump() operation before the Server stops. The output of the dump operation is sent to System.err. See also the Jetty Server Dump section for more information. jetty.server.stopAtShutdown Whether to call Server.stop() through a JVM shutdown hook when the JVM exits. The Jetty server strives to keep up with the latest IETF RFCs for compliance with internet specifications, which are periodically updated. When possible, Jetty will support backwards compatibility by providing compliance modes that can be configured to allow violations of the current specifications that may have been allowed in obsoleted specifications. The module properties to configure the Jetty server compliance are: ## HTTP Compliance: RFC7230, RFC7230_LEGACY, RFC2616, RFC2616_LEGACY, LEGACY # jetty.httpConfig.compliance=RFC7230 ## URI Compliance: DEFAULT, LEGACY, RFC3986, RFC3986_UNAMBIGUOUS, UNSAFE # jetty.httpConfig.uriCompliance=DEFAULT ## Cookie compliance mode for parsing request Cookie headers: RFC6265_STRICT, RFC6265, RFC6265_LEGACY, RFC2965, RFC2965_LEGACY # jetty.httpConfig.requestCookieCompliance=RFC6265 ## Cookie compliance mode for generating response Set-Cookie: RFC2965, RFC6265 # jetty.httpConfig.responseCookieCompliance=RFC6265 Among the configurable properties, the most relevant are: jetty.httpConfig.compliance Configures the compliance to HTTP specifications. The value could be: One of the predefined HttpCompliance constants, such as RFC7230 or RFC2616. For example: jetty.httpConfig.compliance=RFC2616. A comma-separated list of violations to allow or forbid, as specified by the HttpCompliance.from(String) method. For example, jetty.httpConfig.compliance=RFC7230,MULTIPLE_CONTENT_LENGTHS means that the HTTP compliance is that defined by RFC7230, but also allows the HttpCompliance.Violation.MULTIPLE_CONTENT_LENGTHS, so that requests that have multiple Content-Length headers are accepted (they would be rejected when using just HttpCompliance.RFC7230). For more information about HttpCompliance see also this section. jetty.httpConfig.uriCompliance Configures the compliance to URI specifications. The value could be: One of the predefined UriCompliance constants, such as DEFAULT or RFC3986. For example: jetty.httpConfig.compliance=RFC3986. A comma-separated list of violations to allow or forbid, as specified by the UriCompliance.from(String) method. For example, jetty.httpConfig.uriCompliance=RFC3986,-AMBIGUOUS_PATH_SEPARATOR means that the URI compliance is that defined by RFC3986, but also does not allow the UriCompliance.Violation.AMBIGUOUS_PATH_SEPARATOR, so that requests that have URIs such as /foo/bar%2Fbaz (where %2F is the URL-encoded / character) are rejected (they would be accepted when using just UriCompliance.RFC3986). For more information about UriCompliance see also this section. jetty.httpConfig.requestCookieCompliance jetty.httpConfig.responseCookieCompliance Configures the compliance to HTTP cookie specifications. The value could be: One of the predefined CookieCompliance constants, such as RFC6265. For example: jetty.httpConfig.compliance=RFC6265. A comma-separated list of violations to allow or forbid, as specified by the CookieCompliance.from(String) method. For example, jetty.httpConfig.requestCookieCompliance=RFC6265,-RESERVED_NAMES_NOT_DOLLAR_PREFIXED means that the cookie compliance is that defined by RFC6265, but also does not allow the CookieCompliance.Violation.RESERVED_NAMES_NOT_DOLLAR_PREFIXED, so that requests that have cookie headers such as Cookie: $foo=bar are rejected (they would be accepted when using just CookieCompliance.RFC6265). For more information about CookieCompliance see also this section. The module properties to configure the Jetty server scheduler are: ### Server Scheduler Configuration ## The scheduler thread name, defaults to \"Scheduler-{hashCode()}\" if blank. # jetty.scheduler.name= ## Whether the server scheduler threads are daemon. # jetty.scheduler.daemon=false ## The number of server scheduler threads. # jetty.scheduler.threads=1 The ssl module provides the secure connector, and allows you to configure the KeyStore properties and the TLS parameters, and depends on the server module. The module properties to configure the secure connector are: ### TLS (SSL) Connector Configuration ## The host/address to bind the connector to. # jetty.ssl.host=0.0.0.0 ## The port the connector listens on. # jetty.ssl.port=8443 ## The connector idle timeout, in milliseconds. # jetty.ssl.idleTimeout=30000 ## The number of acceptors (-1 picks a default value based on number of cores). # jetty.ssl.acceptors=1 ## The number of selectors (-1 picks a default value based on number of cores). # jetty.ssl.selectors=-1 ## The ServerSocketChannel accept queue backlog (0 picks the platform default). # jetty.ssl.acceptQueueSize=0 ## The thread priority delta to give to acceptor threads. # jetty.ssl.acceptorPriorityDelta=0 ## Whether to enable the SO_REUSEADDR socket option. # jetty.ssl.reuseAddress=true ## Whether to enable the SO_REUSEPORT socket option. # jetty.ssl.reusePort=false ## Whether to enable the TCP_NODELAY socket option on accepted sockets. # jetty.ssl.acceptedTcpNoDelay=true ## The SO_RCVBUF socket option to set on accepted sockets. ## A value of -1 indicates that the platform default is used. # jetty.ssl.acceptedReceiveBufferSize=-1 ## The SO_SNDBUF socket option to set on accepted sockets. ## A value of -1 indicates that the platform default is used. # jetty.ssl.acceptedSendBufferSize=-1 ## Whether client SNI data is required for all secure connections. ## When SNI is required, clients that do not send SNI data are rejected with an HTTP 400 response. # jetty.ssl.sniRequired=false ## Whether client SNI data is checked to match CN and SAN in server certificates. ## When SNI is checked, if the match fails the connection is rejected with an HTTP 400 response. # jetty.ssl.sniHostCheck=true ## The max age, in seconds, for the Strict-Transport-Security response header. # jetty.ssl.stsMaxAgeSeconds=31536000 ## Whether to include the subdomain property in any Strict-Transport-Security header. # jetty.ssl.stsIncludeSubdomains=true Among the configurable properties, the most relevant are: jetty.ssl.port The network port that Jetty listens to for secure connections — default 8443. jetty.ssl.idleTimeout The amount of time a connection can be idle (i.e. no bytes received and no bytes sent) until the server decides to close it to save resources — default 30000 milliseconds. jetty.ssl.acceptors The number of threads that compete to accept connections — default 1. Use -1 to let the accept heuristic decides the value; the current heuristic calculates a value based on the number of cores). Refer to this section for more information about acceptor threads. jetty.ssl.selectors The number of NIO selectors (with an associated thread) that manage connections — default -1 (i.e. a select heuristic decides the value; the current heuristic calculates a value based on the number of cores). Refer to this section for more information about selector threads. The module properties to configure the KeyStore and TLS parameters are: ### SslContextFactory Configuration ## Note that OBF passwords are not secure, just protected from casual observation. ## Whether client SNI data is required for all secure connections. ## When SNI is required, clients that do not send SNI data are rejected with a TLS handshake error. # jetty.sslContext.sniRequired=false ## The Endpoint Identification Algorithm. ## Same as javax.net.ssl.SSLParameters#setEndpointIdentificationAlgorithm(String). # jetty.sslContext.endpointIdentificationAlgorithm= ## The JSSE Provider. # jetty.sslContext.provider= ## The KeyStore file path, either an absolute path or a relative path to $JETTY_BASE. # jetty.sslContext.keyStorePath=etc/keystore.p12 ## The TrustStore file path, either an absolute path or a relative path to $JETTY_BASE. # jetty.sslContext.trustStorePath=etc/keystore.p12 ## The KeyStore password. # jetty.sslContext.keyStorePassword= ## The Keystore type. # jetty.sslContext.keyStoreType=PKCS12 ## The KeyStore provider. # jetty.sslContext.keyStoreProvider= ## The KeyManager password. # jetty.sslContext.keyManagerPassword= ## The TrustStore password. # jetty.sslContext.trustStorePassword= ## The TrustStore type. # jetty.sslContext.trustStoreType=PKCS12 ## The TrustStore provider. # jetty.sslContext.trustStoreProvider= ## Whether client certificate authentication is required. # jetty.sslContext.needClientAuth=false ## Whether client certificate authentication is desired, but not required. # jetty.sslContext.wantClientAuth=false ## Whether cipher order is significant. # jetty.sslContext.useCipherSuitesOrder=true ## The SSLSession cache size. # jetty.sslContext.sslSessionCacheSize=-1 ## The SSLSession cache timeout (in seconds). # jetty.sslContext.sslSessionTimeout=-1 ## Whether TLS renegotiation is allowed. # jetty.sslContext.renegotiationAllowed=true ## The max number of TLS renegotiations per connection. # jetty.sslContext.renegotiationLimit=5 Among the configurable properties, the most relevant are: jetty.sslContext.keyStorePath The KeyStore path on the file system, either an absolute path or a relative path to $JETTY_BASE — defaults to $JETTY_BASE/etc/keystore.p12. jetty.sslContext.keyStorePassword The KeyStore password, which you want to explicitly configure. The password may be obfuscated with the Jetty Password tool. If you need to configure client certificate authentication, you want to configure one of these properties (they are mutually exclusive): jetty.sslContext.needClientAuth Whether client certificate authentication should be required. jetty.sslContext.wantClientAuth Whether client certificate authentication should be requested. If you configure client certificate authentication, you need to configure and distribute a client KeyStore as explained in this section. The ssl-reload module provides a periodic scanning of the directory where the KeyStore file resides. When the scanning detects a change to the KeyStore file, the correspondent SslContextFactory.Server component is reloaded with the new KeyStore configuration. The module properties are: # Monitored directory scan period, in seconds. # jetty.sslContext.reload.scanInterval=1 The state-tracking Jetty module inserts the StateTrackingHandler at the beginning of the Handler chain. StateTrackingHandler is a troubleshooting Handler that tracks usages of Handler/Request/Response asynchronous APIs, and logs at warning level invalid usages of the APIs that may lead to blockages, deadlocks, or missing completion of Callbacks. This module can be enabled to troubleshoot web applications that do not behave as expected, for example: That consume a lot of threads (possibly because they block). That do not send responses (or send only partial responses) to clients. That timeout when apparently they have received or have sent all data. The module properties are: ## The timeout in ms for the completion of the handle() callback. # jetty.stateTracking.handlerCallbackTimeout=0 ## Whether the handle() callback is completed in case of timeout. # jetty.stateTracking.completeHandlerCallbackAtTimeout=false ## The timeout in ms for the execution of the demand callback. # jetty.stateTracking.demandCallbackTimeout=0 ## The timeout in ms for the execution of a response write. # jetty.stateTracking.writeTimeout=0 ## The timeout in ms for the execution of the response write callback. # jetty.stateTracking.writeCallbackTimeout=0 The test-keystore module creates on-the-fly a KeyStore containing a self-signed certificate for domain localhost. The KeyStore file is automatically deleted when the JVM exits, and re-created when you restart Jetty, to enforce the fact that it is a test KeyStore that should not be reused if not for testing. The module file is $JETTY_HOME/modules/test-keystore.mod: [description] Test keystore with self-signed SSL Certificate. DO NOT USE IN PRODUCTION!!! [tags] demo ssl [before] ssl [files] maven://org.bouncycastle/bcpkix-jdk15to18/${bouncycastle.version}|lib/bouncycastle/bcpkix-jdk15to18-${bouncycastle.version}.jar maven://org.bouncycastle/bcprov-jdk15to18/${bouncycastle.version}|lib/bouncycastle/bcprov-jdk15to18-${bouncycastle.version}.jar maven://org.bouncycastle/bcutil-jdk15to18/${bouncycastle.version}|lib/bouncycastle/bcutil-jdk15to18-${bouncycastle.version}.jar [lib] lib/jetty-keystore-${jetty.version}.jar lib/bouncycastle/bcpkix-jdk15to18-${bouncycastle.version}.jar lib/bouncycastle/bcprov-jdk15to18-${bouncycastle.version}.jar lib/bouncycastle/bcutil-jdk15to18-${bouncycastle.version}.jar [xml] etc/jetty-test-keystore.xml [ini] bouncycastle.version?=1.78.1 jetty.webapp.addHiddenClasses+=,${jetty.base.uri}/lib/bouncycastle/ jetty.sslContext.keyStorePath?=etc/test-keystore.p12 jetty.sslContext.keyStoreType?=PKCS12 jetty.sslContext.keyStorePassword?=OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4 Note how properties jetty.sslContext.keyStorePath and jetty.sslContext.keyStorePassword are configured, only if not already set (via the ?= operator), directly in the module file, rather than in a *.ini file. This is done to avoid that these properties accidentally overwrite a real KeyStore configuration. The threadpool module allows you to configure the server-wide thread pool. The thread pool creates threads on demand up to maxThreads, and idles them out if they are not used. Since Jetty uses the thread pool internally to execute critical tasks, it is not recommended to constrain the thread pool to small values of maxThreads with the purpose of limiting HTTP request concurrency, as this could very likely cause a server lockup when Jetty needs to run a critical task but there are no threads available. Start with the default value of maxThreads, and tune for larger values if needed. The module properties to configure the thread pool are: ## Thread name prefix. #jetty.threadPool.namePrefix=qtp ## Minimum number of pooled threads. #jetty.threadPool.minThreads=10 ## Maximum number of pooled threads. #jetty.threadPool.maxThreads=200 ## Number of reserved threads (-1 for heuristic). #jetty.threadPool.reservedThreads=-1 ## Whether to use virtual threads, if the runtime supports them. ## Deprecated, use Jetty module 'threadpool-virtual' instead. #jetty.threadPool.useVirtualThreads=false ## Thread idle timeout (in milliseconds). #jetty.threadPool.idleTimeout=60000 ## The max number of idle threads that are evicted in one idleTimeout period. #jetty.threadPool.maxEvictCount=1 ## Whether to output a detailed dump. #jetty.threadPool.detailedDump=false Among the configurable properties, the most relevant are: jetty.threadPool.namePrefix The name prefix to use for the thread names. jetty.threadPool.detailedDump Whether the thread pool should dump the whole stack trace of each thread, or just the topmost stack frame — defaults to false. jetty.threadPool.idleTimeout The time, in milliseconds, after which an idle thread is released from the pool — defaults to 60000, i.e. 60 seconds. jetty.threadPool.maxThreads The max number of threads pooled by the thread pool — defaults to 200. If you want to use virtual threads, introduced as a preview feature in Java 19 and Java 20, and become an official feature since Java 21, use the following modules: The threadpool-virtual Jetty module for Java 21 or later. The threadpool-virtual-preview Jetty module for Java 19 and Java 20. See also the section about configuring the thread pool. The threadpool-virtual module allows you to configure the server-wide thread pool, similarly to what you can do with the threadpool Jetty module, but also specify to use virtual threads, introduced as an official feature since Java 21. Only use this module if you are using Java 21 or later. If you are using Java 19 or Java 20, use the threadpool-virtual-preview Jetty module instead. Refer to the threadpool Jetty module for the general features provided by that Jetty module that also this Jetty module provides. The module properties to configure the thread pool are: ## Platform threads name prefix. #jetty.threadPool.namePrefix=qtp ## Minimum number of pooled threads. #jetty.threadPool.minThreads=10 ## Maximum number of pooled threads. #jetty.threadPool.maxThreads=200 ## Number of reserved threads (-1 for heuristic). #jetty.threadPool.reservedThreads=-1 ## Thread idle timeout (in milliseconds). #jetty.threadPool.idleTimeout=60000 ## The max number of idle threads that can be evicted in one idleTimeout period. #jetty.threadPool.maxEvictCount=1 ## Whether to output a detailed dump. #jetty.threadPool.detailedDump=false ## Virtual threads name prefix. #jetty.threadPool.virtual.namePrefix=qtp-virtual- ## Whether virtual threads inherits the values of inheritable thread locals. #jetty.threadPool.virtual.inheritInheritableThreadLocals=true The specific properties to configure virtual threads are: jetty.threadPool.virtual.namePrefix The name prefix to use for the virtual thread names. jetty.threadPool.virtual.inheritInheritableThreadLocals Whether virtual threads inherit the values of InheritableThreadLocal variables. The threadpool-virtual-preview module allows you to configure the server-wide thread pool, similarly to what you can do with the threadpool Jetty module, but also specify to use virtual threads, introduced as a preview feature in Java 19 and in Java 20. Only use this module if you are using Java 19 or Java 20. If you are using Java 21 or later, use the threadpool-virtual Jetty module instead. To enable preview features, this module needs to specify the --enable-preview command line option using the [exec] directive, and as such it will fork another JVM. Refer to the threadpool Jetty module for the general features provided by that Jetty module that also this Jetty module provides. The module properties to configure the thread pool are: ## Platform threads name prefix. #jetty.threadPool.namePrefix=qtp ## Minimum number of pooled threads. #jetty.threadPool.minThreads=10 ## Maximum number of pooled threads. #jetty.threadPool.maxThreads=200 ## Number of reserved threads (-1 for heuristic). #jetty.threadPool.reservedThreads=-1 ## Thread idle timeout (in milliseconds). #jetty.threadPool.idleTimeout=60000 ## The max number of idle threads that can be evicted in one idleTimeout period. #jetty.threadPool.maxEvictCount=1 ## Whether to output a detailed dump. #jetty.threadPool.detailedDump=false ## Virtual threads name prefix. #jetty.threadPool.virtual.namePrefix=qtp-virtual- ## Whether virtual threads are allowed to set thread locals. #jetty.threadPool.virtual.allowSetThreadLocals=true ## Whether virtual threads inherits the values of inheritable thread locals. #jetty.threadPool.virtual.inheritInheritableThreadLocals=true The specific properties to configure virtual threads are: jetty.threadPool.virtual.namePrefix The name prefix to use for the virtual thread names. jetty.threadPool.virtual.allowSetThreadLocals Whether virtual threads are allowed to set thread locals. jetty.threadPool.virtual.inheritInheritableThreadLocals Whether virtual threads inherit the values of InheritableThreadLocal variables. The well-known Jetty module creates a ResourceHandler deployed at the /.well-known context path which serves files from a directory. By default, the directory created at $JETTY_BASE/.well-known is used, but it can be configured from well-known.ini to anywhere in the filesystem. Note that the .well-known directory may be seen as a hidden directory by the filesystem. The concept of well-known URIs has been defined in RFC5785. This module can be used for things like the automatic renewal of Let’s Encrypt certificates. See IANA Well-Known URIs for more possible examples of how this can be used. The module properties are: ## Well Known Directory (relative to $JETTY_BASE if relative path, otherwise it is an absolute path). # jetty.wellknown.dir=.well-known ## Allow contents of the well-known directory to be listed. # jetty.wellknown.listDirectories=false","title":"Standard Modules","component":"jetty","version":"12","name":"standard","url":"/docs/jetty/12/operations-guide/modules/standard.html","titles":[{"text":"Module alpn","hash":"alpn","id":1},{"text":"Module bytebufferpool","hash":"bytebufferpool","id":2},{"text":"Module console-capture","hash":"console-capture","id":3},{"text":"Module core-deploy","hash":"core-deploy","id":4},{"text":"Module cross-origin","hash":"cross-origin","id":5},{"text":"Module ee{8,9,10}-deploy","hash":"eeN-deploy","id":6},{"text":"Module ee{8,9,10}-webapp","hash":"eeN-webapp","id":7},{"text":"Module http","hash":"http","id":8},{"text":"Configuration of Acceptors","hash":"http-acceptors","id":9},{"text":"Configuration of Selectors","hash":"http-selectors","id":10},{"text":"Module http2","hash":"http2","id":11},{"text":"Module http2c","hash":"http2c","id":12},{"text":"Module http3","hash":"http3","id":13},{"text":"Module http-forwarded","hash":"http-forwarded","id":14},{"text":"Module https","hash":"https","id":15},{"text":"Module jmx","hash":"jmx","id":16},{"text":"Module jmx-remote","hash":"jmx-remote","id":17},{"text":"Module requestlog","hash":"requestlog","id":18},{"text":"Module resources","hash":"resources","id":19},{"text":"Module rewrite","hash":"rewrite","id":20},{"text":"Module server","hash":"server","id":21},{"text":"HTTP Configuration Properties","hash":"server-http-config","id":22},{"text":"Server Configuration Properties","hash":"server-config","id":23},{"text":"Server Compliance Properties","hash":"server-compliance","id":24},{"text":"Server Scheduler Configuration Properties","hash":"scheduler-config","id":25},{"text":"Module ssl","hash":"ssl","id":26},{"text":"Secure Connector Properties","hash":"ssl-connector","id":27},{"text":"KeyStore Properties and TLS Properties","hash":"ssl-keystore-tls","id":28},{"text":"Module ssl-reload","hash":"ssl-reload","id":29},{"text":"Module state-tracking","hash":"state-tracking","id":30},{"text":"Module test-keystore","hash":"test-keystore","id":31},{"text":"Module threadpool","hash":"threadpool","id":32},{"text":"Module threadpool-virtual","hash":"threadpool-virtual","id":33},{"text":"Module threadpool-virtual-preview","hash":"threadpool-virtual-preview","id":34},{"text":"Module well-known","hash":"well-known","id":35}]},"34":{"id":34,"text":"Connectors are the network components through which Jetty accepts incoming network connections. Each connector listens on a network port and can be configured with ConnectionFactory components that understand one or more network protocols. Understanding a protocol means that the connector is able to interpret incoming network bytes (for example, the bytes that represent an HTTP/1.1 request) and convert them into more abstract objects (for example an HttpServletRequest object) that are then processed by applications. Conversely, an abstract object (for example an HttpServletResponse) is converted into the correspondent outgoing network bytes (the bytes that represent an HTTP/1.1 response). Like other Jetty components, connectors are enabled and configured by enabling and configuring the correspondent Jetty module. Recall that you must always issue the commands to enable Jetty modules from within the $JETTY_BASE directory, and that the Jetty module configuration files are in the $JETTY_BASE/start.d/ directory. You can obtain the list of connector-related modules in this way: $ java -jar $JETTY_HOME/start.jar --list-modules=connector Clear text HTTP/1.1 is enabled with the http Jetty module with the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=http 2024-06-05 07:38:12.309:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:12.322:INFO :oejs.AbstractConnector:main: Started ServerConnector@6302bbb1{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} 2024-06-05 07:38:12.328:INFO :oejs.Server:main: Started oejs.Server@27ce24aa{STARTING}[12.0.11-SNAPSHOT,sto=5000] @449ms After having enabled the http module, the $JETTY_BASE directory looks like this: JETTY_BASE ├── resources │ └── jetty-logging.properties └── start.d └── http.ini The http.ini file is the file that you want to edit to configure network and protocol parameters — for more details see this section. Note that the http Jetty module depends on the server Jetty module. Some parameters that you may want to configure are in fact common HTTP parameters that are applied not only for clear-text HTTP/1.1, but also for secure HTTP/1.1 or for clear-text HTTP/2 or for encrypted HTTP/2, or for HTTP/3, and these configuration parameters may be present in the server module configuration file. You can force the creation of the server.ini file via: $ java -jar $JETTY_HOME/start.jar --add-modules=server Now the $JETTY_BASE directory looks like this: JETTY_BASE ├── resources │ └── jetty-logging.properties └── start.d ├── http.ini └── server.ini Now you can edit the server.ini file — for more details see this section. Secure HTTP/1.1 is enabled with both the ssl and https Jetty modules with the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=ssl,https INFO : mkdir ${jetty.base}/start.d INFO : server transitively enabled, ini template available with --add-modules=server INFO : logging-jetty transitively enabled INFO : resources transitively enabled INFO : https initialized in ${jetty.base}/start.d/https.ini INFO : ssl initialized in ${jetty.base}/start.d/ssl.ini INFO : threadpool transitively enabled, ini template available with --add-modules=threadpool INFO : logging/slf4j transitive provider of logging/slf4j for logging-jetty INFO : logging/slf4j dynamic dependency of logging-jetty INFO : bytebufferpool transitively enabled, ini template available with --add-modules=bytebufferpool INFO : mkdir ${jetty.base}/resources INFO : copy ${jetty.home}/modules/logging/jetty/resources/jetty-logging.properties to ${jetty.base}/resources/jetty-logging.properties INFO : Base directory was modified The command above enables the ssl module, that provides the secure network connector, the KeyStore configuration and TLS configuration — for more details see this section. Then, the https module adds HTTP/1.1 as the protocol secured by TLS. The $JETTY_BASE directory looks like this: $JETTY_BASE ├── resources │ └── jetty-logging.properties └── start.d ├── https.ini └── ssl.ini Note that the KeyStore file is missing, because you have to provide one with the cryptographic material you want (read this section to create your own KeyStore). You need to configure these two properties by editing ssl.ini: jetty.sslContext.keyStorePath jetty.sslContext.keyStorePassword As a quick example, you can enable the test-keystore module, that creates on-the-fly a KeyStore containing a self-signed certificate: $ java -jar $JETTY_HOME/start.jar --add-modules=test-keystore INFO : test-keystore initialized in ${jetty.base}/start.d/test-keystore.ini INFO : mkdir ${jetty.base}/lib/bouncycastle INFO : copy /path/to/maven.repository/org/bouncycastle/bcpkix-jdk15to18/1.78.1/bcpkix-jdk15to18-1.78.1.jar to ${jetty.base}/lib/bouncycastle/bcpkix-jdk15to18-1.78.1.jar INFO : copy /path/to/maven.repository/org/bouncycastle/bcprov-jdk15to18/1.78.1/bcprov-jdk15to18-1.78.1.jar to ${jetty.base}/lib/bouncycastle/bcprov-jdk15to18-1.78.1.jar INFO : copy /path/to/maven.repository/org/bouncycastle/bcutil-jdk15to18/1.78.1/bcutil-jdk15to18-1.78.1.jar to ${jetty.base}/lib/bouncycastle/bcutil-jdk15to18-1.78.1.jar INFO : Base directory was modified The $JETTY_BASE directory is now: ├── etc │ └── test-keystore.p12 ├── resources │ └── jetty-logging.properties └── start.d ├── https.ini ├── ssl.ini └── test-keystore.ini Starting Jetty yields: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:14.742:WARN :oejk.KeystoreGenerator:main: Generating Test Keystore: DO NOT USE IN PRODUCTION! 2024-06-05 07:38:15.158:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:15.183:INFO :oejus.SslContextFactory:main: x509=X509@132e0cc(jetty-test-keystore,h=[localhost],a=[],w=[]) for Server@7b205dbd[provider=null,keyStore=file:///path/to/jetty.home-base/etc/test-keystore.p12,trustStore=null] 2024-06-05 07:38:15.228:INFO :oejs.AbstractConnector:main: Started ServerConnector@32f232a5{SSL, (ssl, http/1.1)}{0.0.0.0:8443} 2024-06-05 07:38:15.236:INFO :oejs.Server:main: Started oejs.Server@488d1cd7{STARTING}[12.0.11-SNAPSHOT,sto=5000] @1141ms Note how Jetty is listening on port 8443 for the secure HTTP/1.1 protocol. If you point your browser at https://localhost:8443/ you will get a warning from the browser about a \"potential security risk ahead\", or that \"your connection is not private\", or similar message depending on the browser. This is normal because the certificate contained in test-keystore.p12 is self-signed — and as such not signed by a recognized certificate authority — and therefore browsers do not trust it. HTTP/2 is the successor of the HTTP/1.1 protocol, but it is quite different from HTTP/1.1: where HTTP/1.1 is a duplex, text-based protocol, HTTP/2 is a multiplex, binary protocol. Because of these fundamental differences, a client and a server need to negotiate what version of the HTTP protocol they speak, based on what versions each side supports. To ensure maximum compatibility, and reduce the possibility that an intermediary that only understands HTTP/1.1 will close the connection when receiving unrecognized HTTP/2 bytes, HTTP/2 is typically deployed over secure connections, using the TLS protocol to wrap HTTP/2. Browsers only support secure HTTP/2. The protocol negotiation is performed by the ALPN TLS extension: the client advertises the list of protocols it can speak, and the server communicates to the client the protocol chosen by the server. For example, you can have a client that only supports HTTP/1.1 and a server that supports both HTTP/1.1 and HTTP/2: Nowadays, it’s common that both clients and servers support HTTP/2, so servers prefer HTTP/2 as the protocol to speak: When you configure a connector with the HTTP/2 protocol, you typically want to also configure the HTTP/1.1 protocol. The reason to configure both protocols is that you typically do not control the clients: for example an old browser that does not support HTTP/2, or a monitoring console that performs requests using HTTP/1.1, or a heartbeat service that performs a single HTTP/1.0 request to verify that the server is alive. Deciding whether you want to configure Jetty with secure HTTP/2 or clear-text HTTP/2 depends on your use case. You want to configure secure HTTP/2 when Jetty is exposed directly to browsers, because browsers only support secure HTTP/2. You may configure clear-text HTTP/2 (mostly for performance reasons) if you offload TLS at a load balancer (for example, HAProxy) or at a reverse proxy (for example, nginx). You may configure clear-text HTTP/2 (mostly for performance reasons) to call microservices deployed to different Jetty servers (although you may want to use secure HTTP/2 for confidentiality reasons). When you enable secure HTTP/2 you typically want to enable also secure HTTP/1.1, for backwards compatibility reasons: in this way, old browsers or other clients that do not support HTTP/2 will be able to connect to your server. You need to enable: the ssl Jetty module, which provides the secure connector and the KeyStore and TLS configuration the http2 Jetty module, which adds ALPN handling and adds the HTTP/2 protocol to the secured connector optionally, the https Jetty module, which adds the HTTP/1.1 protocol to the secured connector Use the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=ssl,http2,https As when enabling the https Jetty module, you need a valid KeyStore (read this section to create your own KeyStore). As a quick example, you can enable the test-keystore module, that creates on-the-fly a KeyStore containing a self-signed certificate: $ java -jar $JETTY_HOME/start.jar --add-modules=test-keystore Starting Jetty yields: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:16.609:WARN :oejk.KeystoreGenerator:main: Generating Test Keystore: DO NOT USE IN PRODUCTION! 2024-06-05 07:38:16.893:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:16.911:INFO :oejus.SslContextFactory:main: x509=X509@1b7c473a(jetty-test-keystore,h=[localhost],a=[],w=[]) for Server@5e4bd84a[provider=null,keyStore=file:///path/to/jetty.home-base/etc/test-keystore.p12,trustStore=null] 2024-06-05 07:38:16.940:INFO :oejs.AbstractConnector:main: Started ServerConnector@2d1dee39{SSL, (ssl, alpn, h2, http/1.1)}{0.0.0.0:8443} 2024-06-05 07:38:16.943:INFO :oejs.Server:main: Started oejs.Server@66c92293{STARTING}[12.0.11-SNAPSHOT,sto=5000] @946ms Note how Jetty is listening on port 8443 and the protocols supported are the sequence (ssl, alpn, h2, http/1.1). The (ordered) list of protocols after alpn are the application protocols, in the example above (h2, http/1.1). When a new connection is accepted by the connector, Jetty first interprets the TLS bytes, then it handles the ALPN negotiation knowing that the application protocols are (in order) h2 and then http/1.1. You can customize the list of application protocols and the default protocol to use in case the ALPN negotiation fails by editing the alpn module properties. The HTTP/2 protocol parameters can be configured by editing the http2 module properties. When you enable clear-text HTTP/2 you typically want to enable also clear-text HTTP/1.1, for backwards compatibility reasons and to allow clients to upgrade from HTTP/1.1 to HTTP/2. You need to enable: the http Jetty module, which provides the clear-text connector and adds the HTTP/1.1 protocol to the clear-text connector the http2c Jetty module, which adds the HTTP/2 protocol to the clear-text connector $ java -jar $JETTY_HOME/start.jar --add-modules=http,http2c Starting Jetty yields: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:18.243:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:18.263:INFO :oejs.AbstractConnector:main: Started ServerConnector@6f4a47c7{HTTP/1.1, (http/1.1, h2c)}{0.0.0.0:8080} 2024-06-05 07:38:18.274:INFO :oejs.Server:main: Started oejs.Server@6302bbb1{STARTING}[12.0.11-SNAPSHOT,sto=5000] @584ms Note how Jetty is listening on port 8080 and the protocols supported are HTTP/1.1 and h2c (i.e. clear-text HTTP/2). With this configuration, browsers and client applications will be able to connect to port 8080 using: HTTP/1.1 directly (e.g. curl --http1.1 http://localhost:8080): GET / HTTP/1.1 Host: localhost:8080 HTTP/1.1 with upgrade to HTTP/2 (e.g. curl --http2 http://localhost:8080): GET / HTTP/1.1 Host: localhost:8080 Connection: Upgrade, HTTP2-Settings Upgrade: h2c HTTP2-Settings: HTTP/2 directly (e.g. curl --http2-prior-knowledge http://localhost:8080): 50 52 49 20 2a 20 48 54 54 50 2f 32 2e 30 0d 0a 0d 0a 53 4d 0d 0a 0d 0a 00 00 12 04 00 00 00 00 00 00 03 00 00 00 64 00 04 40 00 00 00 00 02 00 00 00 00 00 00 1e 01 05 00 00 00 01 82 84 86 41 8a a0 e4 1d 13 9d 09 b8 f0 1e 07 7a 88 25 b6 50 c3 ab b8 f2 e0 53 03 2a 2f 2a The HTTP/2 protocol parameters can be configured by editing the http2c module properties. When you enable support for the HTTP/3 protocol, by default the secure HTTP/2 protocol is also enabled, so that browsers or clients that do not support HTTP/3 will be able to connect to your server. You need to enable: the ssl Jetty module, which provides the KeyStore and TLS configuration the http3 Jetty module, which adds the HTTP/3 protocol on the HTTP/3 connector Use the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=ssl,http3 Enabling any module Jetty module that supports secure network communication requires a valid KeyStore (read this section to create your own KeyStore), that, as a quick example, you can enable with the test-keystore module, that creates on-the-fly a KeyStore containing a self-signed certificate: $ java -jar $JETTY_HOME/start.jar --add-modules=test-keystore Starting Jetty yields: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:19.601:WARN :oejk.KeystoreGenerator:main: Generating Test Keystore: DO NOT USE IN PRODUCTION! 2024-06-05 07:38:19.867:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:19.884:INFO :oejus.SslContextFactory:main: x509=X509@4d9ac0b4(jetty-test-keystore,h=[localhost],a=[],w=[]) for Server@130dca52[provider=null,keyStore=file:///path/to/jetty.home-base/etc/test-keystore.p12,trustStore=null] 2024-06-05 07:38:19.913:INFO :oejs.AbstractConnector:main: Started ServerConnector@aafcffa{SSL, (ssl, alpn, h2)}{0.0.0.0:8443} 2024-06-05 07:38:19.925:INFO :oejqs.QuicServerConnectionFactory:main: HTTP/3+QUIC support is experimental and not suited for production use. 2024-06-05 07:38:19.925:INFO :oejs.AbstractConnector:main: Started QuicServerConnector@68044f4{h3, (h3)}{0.0.0.0:8444} 2024-06-05 07:38:19.928:INFO :oejs.Server:main: Started oejs.Server@6c0d9d86{STARTING}[12.0.11-SNAPSHOT,sto=5000] @887ms Note how Jetty is listening on port 8443 for HTTP/2 and on port 8444 for HTTP/3. The HTTP/3 protocol parameters can be configured by editing the http3 module properties. WebSocket is a network protocol for bidirectional data communication initiated via the HTTP/1.1 upgrade mechanism. WebSocket provides a simple, low-level, framing protocol layered over TCP. One or more WebSocket frames compose a WebSocket message that is either a UTF-8 text message or binary message. Jetty provides an implementation of the following standards and specifications. RFC-6455 - The WebSocket Protocol Jetty supports version 13 of the released and final specification. JSR-356 - The Java WebSocket API (javax.websocket) This is the official Java API for working with WebSockets. RFC-7692 - WebSocket Per-Message Deflate Extension This is the replacement for perframe-compression, switching the compression to being based on the entire message, not the individual frames. RFC-8441 - Bootstrapping WebSockets with HTTP/2 Allows a single stream of an HTTP/2 connection to be upgraded to WebSocket. This allows one TCP connection to be shared by both protocols and extends HTTP/2’s more efficient use of the network to WebSockets. Jetty provides two WebSocket implementations: one based on the Java WebSocket APIs defined by JSR 356, provided by module websocket-javax, and one based on Jetty specific WebSocket APIs, provided by module websocket-jetty. The Jetty websocket module enables both implementations, but each implementation can be enabled independently. Remember that a WebSocket connection is always initiated from the HTTP protocol (either an HTTP/1.1 upgrade or an HTTP/2 connect), therefore to enable WebSocket you need to enable HTTP. To enable WebSocket support, you also need to decide what version of the HTTP protocol you want WebSocket to be initiated from, and whether you want secure HTTP. For example, to enable clear-text WebSocket from HTTP/1.1, use the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=http,websocket To enable secure WebSocket from HTTP/2, use the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=http2,websocket When enabling secure protocols you need a valid KeyStore (read this section to create your own KeyStore). As a quick example, you can enable the test-keystore module, that creates on-the-fly a KeyStore containing a self-signed certificate: $ java -jar $JETTY_HOME/start.jar --add-modules=test-keystore To enable WebSocket on both HTTP/1.1 and HTTP/2, both clear-text and secure, use the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=http,https,http2c,http2,websocket Enabling the WebSocket Jetty modules comes with a startup cost because Jetty must perform two steps: Scan web applications *.war files (and all the jars and classes inside it) looking for WebSocket EndPoints classes (either annotated with WebSocket API annotations or extending/implementing WebSocket API classes/interfaces). This can be a significant cost if your web application contains a lot of classes and/or jar files. Configure and wire WebSocket EndPoints so that WebSocket messages are delivered to the correspondent WebSocket EndPoint. WebSocket support is by default enabled for all web applications. For a specific web application, you can disable step 2 for Java WebSocket support (i.e. when the websocket-javax module is enabled) by setting the context attribute org.eclipse.jetty.websocket.javax to false: org.eclipse.jetty.websocket.javax false ... Furthermore, for a specific web application, you can disable step 1 (and therefore also step 2) as described in the annotations processing section. Web applications may need to use a WebSocket client to communicate with third party WebSocket services. If the web application uses the Java WebSocket APIs, the WebSocket client APIs are provided by the Servlet Container and are available to the web application by enabling the WebSocket server APIs, and therefore you must enable the websocket-javax Jetty module. However, the Java WebSocket Client APIs are quite limited (for example, they do not support secure WebSocket). For this reason, web applications may want to use the Jetty WebSocket Client APIs. When using the Jetty WebSocket Client APIs, web applications should include the required jars and their dependencies in the WEB-INF/lib directory of the *.war file. Alternatively, when deploying your web applications in Jetty, you can enable the websocket-jetty-client Jetty module to allow web applications to use the Jetty WebSocket Client APIs provided by Jetty, without the need to include jars and their dependencies in the *.war file. FastCGI is a network protocol primarily used by a web server to communicate to a FastCGI server. FastCGI servers are typically used to serve web content generated by dynamic web languages, primarily PHP, but also Python, Ruby, Perl and others. Web servers that supports FastCGI are, among others, Apache, Nginx, and Jetty. Web servers typically act as reverse proxies, converting HTTP requests that they receive from clients (browsers) to FastCGI requests that are forwarded to the FastCGI server. The FastCGI server spawns the dynamic web language interpreter, passing it the information contained in the FastCGI request and a dynamic web language script is executed, producing web content, typically HTML. The web content is then formatted into a FastCGI response that is returned to the web server, which converts it to an HTTP response that is then returned to the client. The most well known FastCGI server is the PHP FastCGI Process Manager, or php-fpm. In the following we will assume that php-fpm is used as FastCGI server. This is a diagram of what described above: Jetty can be configured to act as a web server that supports FastCGI, replacing the functionality that is normally provided by Apache or Nginx. This allows users to leverage Jetty features such as the support for HTTP/1.1, HTTP/2 and HTTP/3, Jetty’s scalability, and of course Jetty’s native support for Java Web Standards such as Servlets, JSPs, etc. With such configuration, users can not only deploy their Java Web Applications in Jetty, but also serve their WordPress site or blog or their Drupal site without having to install and manage multiple web servers. This section explains how to configure Jetty to serve your WordPress site. The prerequisites are: Have php-fpm installed on your server host, and configured to listen either on a Unix-Domain socket (such as /run/php/php-fpm.sock), or on a TCP socket (such as localhost:9000). Have WordPress installed on your server host, for example under /var/www/wordpress. For more information about how to install WordPress and the necessary PHP modules, please refer to the WordPress Installation Guide. Then, the secure HTTP and/or the secure HTTP/2 Jetty modules should be enabled to allow browsers to connect to Jetty. Lastly, enable the fcgi-proxy module to provide FastCGI support (to convert HTTP requests from browsers to FastCGI for php-fpm and vice versa), and the core-deploy module to deploy your WordPress web application as a Jetty context XML file. For example: $ java -jar $JETTY_HOME/start.jar --add-modules=ssl,https,fcgi-proxy,core-deploy The https Jetty module requires a KeyStore. If you do not already have one configured, you can add the test-keystore Jetty module to the command line above to create a KeyStore on-the-fly. Now you can deploy a Jetty context XML file that represents your WordPress web application. Use the following file as example, copy it as $JETTY_BASE/webapps/wordpress.xml and customize it as necessary: /var/www/wordpress (1) / (2) wordpress.originalPath wordpress.originalQuery $path /index.php *.php (3) (https?)://([^/]+)(.*) (4) http://localhost:9000$3 (5) wordpress.originalPath wordpress.originalQuery (.+?\\\\.php) true /run/php/php-fpm.sock (6) / (7) /index.php REHANDLE false 1 Specify the WordPress installation path. 2 Specify the context path of your web application. 3 The FastCGIProxyHandler forwards requests whose URI path matches *.php to php-fpm. 4 The client URI regex pattern to match. 5 The URI used to forward the request to php-fpm, where $3 is the 3rd matching group of the client URI regex pattern (int this example, the client URI path). If php-fpm is configured to listen on a TCP socket, the host and port must match the listening TCP socket. If php-fpm is configured to listen on a Unix-Domain socket, the host and port values are ignored but must be present. 6 If php-fpm is configured to listen on a Unix-Domain socket, specify the Unix-Domain socket path, otherwise omit this line. 7 The ResourceHandler serves static files from WordPress, such as *.css, *.js and image files. Now you can start Jetty and navigate to http://localhost:8080 with your browser to enjoy WordPress: $ java -jar $JETTY_HOME/start.jar Secure protocols are normal protocols such as HTTP/1.1, HTTP/2 or WebSocket that are wrapped by the TLS protocol. Any network protocol based on TCP can be wrapped with TLS. QUIC, the protocol based on UDP that transports HTTP/3, uses TLS messages but not the TLS protocol framing. The https scheme used in URIs really means tls+http/1.1 (or tls+http/2, or quic+http/3) and similarly the wss scheme used in URIs really means tls+websocket, etc. Senders wrap the underlying protocol bytes (e.g. HTTP bytes or WebSocket bytes) with the TLS protocol, while receivers first interpret the TLS protocol to obtain the underlying protocol bytes, and then interpret the wrapped bytes. The ssl Jetty module allows you to configure a secure network connector; if other modules require encryption, they declare a dependency on the ssl module. It is the job of other Jetty modules to configure the wrapped protocol. For example, it is the https module that configures the wrapped protocol to be HTTP/1.1. Similarly, it is the http2 module that configures the wrapped protocol to be HTTP/2. If you enable both the https and the http2 module, you will have a single secure connector that will be able to interpret both HTTP/1.1 and HTTP/2. Recall from the section about modules, that only modules that are explicitly enabled get their module configuration file (*.ini) saved in $JETTY_BASE/start.d/, and you want $JETTY_BASE/start.d/ssl.ini to be present so that you can configure the connector properties, the KeyStore properties and the TLS properties. Secure protocols have a slightly more complicated configuration since they require to configure a KeyStore. Refer to the KeyStore section for more information about how to create and manage a KeyStore. For simple cases, you only need to configure the KeyStore path and KeyStore password as explained in this section. For more advanced configuration you may want to configure the TLS protocol versions, or the ciphers to include/exclude, etc. The correct way of doing this is to create a custom Jetty XML file and reference it in $JETTY_BASE/start.d/ssl.ini: ssl.ini jetty.sslContext.keyStorePassword=my_passwd! (1) etc/tls-config.xml (2) 1 Configures the jetty.sslContext.keyStorePassword property with the KeyStore password. 2 References your newly created $JETTY_BASE/etc/tls-config.xml. The ssl.ini file above only shows the lines that are not commented out (you can leave the lines that are commented unmodified for future reference). You want to create the $JETTY_BASE/etc/tls-config.xml with the following template content: tls-config.xml ... (1) 1 Here goes your advanced configuration. The tls-config.xml file references the sslContextFactory component (created by the ssl Jetty module) that configures the KeyStore and TLS parameters, so that you can now call its APIs via XML, and you will have full flexibility for any advanced configuration you want (see below for few examples). Refer to the SslContextFactory.Server javadocs for the list of methods that you can call through the Jetty XML file. Use module properties whenever possible, and only resort to use a Jetty XML file for advanced configuration that you cannot do using module properties. By default, the SSL protocols (SSL, SSLv2, SSLv3, etc.) are already excluded because they are vulnerable. To explicitly add the exclusion of TLSv1.0 and TLSv1.1 (that are also vulnerable — which leaves only TLSv1.2 and TLSv1.3 available), you want to use this XML: tls-config.xml TLSv1.0 TLSv1.1 You can precisely set the list of excluded ciphers, completely overriding Jetty’s default, with this XML: tls-config.xml ^TLS_RSA_.*$ ^.*_RSA_.*_(MD5|SHA|SHA1)$ ^.*_DHE_RSA_.*$ SSL_RSA_WITH_DES_CBC_SHA SSL_DHE_RSA_WITH_DES_CBC_SHA SSL_DHE_DSS_WITH_DES_CBC_SHA SSL_RSA_EXPORT_WITH_RC4_40_MD5 SSL_RSA_EXPORT_WITH_DES40_CBC_SHA SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA Note how each array item specifies a regular expression that matches multiple ciphers, or specifies a precise cipher to exclude. You can choose to create multiple XML files, and reference them all from $JETTY_BASE/start.d/ssl.ini, or put all your custom configurations in a single XML file. When you create a certificate, you must specify for how many days it is valid. The typical validity is 90 days, and while this period may seem short, it has two advantages: Reduces the risk in case of compromised/stolen keys. Encourages automation, i.e. certificate renewal performed by automated tools (rather than manually) at scheduled times. To renew a certificate, you must go through the same steps you followed to create the certificate the first time, and then you can reload the KeyStore without the need to stop Jetty. Jetty can be configured to monitor the directory of the KeyStore file, and reload the SslContextFactory component if the KeyStore file changed. This feature can be enabled by activating the ssl-reload Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=ssl-reload For more information about the configuration of the ssl-reload Jetty module, see this section. If not explicitly configured, the TLS implementation is provided by the JDK you are using at runtime. OpenJDK’s vendors may replace the default TLS provider with their own, but you can also explicitly configure an alternative TLS provider. The standard TLS provider from OpenJDK is implemented in Java (no native code), and its performance is not optimal, both in CPU usage and memory usage. A faster alternative, implemented natively, is Google’s Conscrypt, which is built on BoringSSL, which is Google’s fork of OpenSSL. As Conscrypt eventually binds to a native library, there is a higher risk that a bug in Conscrypt or in the native library causes a JVM crash, while the Java implementation will not cause a JVM crash. To use Conscrypt as the TLS provider just enable the conscrypt Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=conscrypt Server Name Indication (SNI) is a TLS extension that clients send to indicate what domain they want to connect to during the initial TLS handshake. Modern TLS clients (e.g. browsers) always send the SNI extension; however, older TLS clients may not send the SNI extension. Being able to handle the SNI is important when you have virtual hosts and a KeyStore with multiple certificates, one for each domain. For example, you may have deployed over a secure connector two web applications, both at context path /, one at virtual host one.com and one at virtual host two.net. The KeyStore contains two certificates, one for one.com and one for two.net. There are three ssl module properties that control the SNI behavior on the server: one that works at the TLS level, and two that works at the HTTP level. The property that works at the TLS level is: jetty.sslContext.sniRequired Whether SNI is required at the TLS level, defaults to false. Its behavior is explained by the following table: Table 1. Behavior of the jetty.sslContext.sniRequired property sniRequired=false sniRequired=true SNI = null client receives default certificate client receives TLS failure SNI = wrong.org client receives default certificate client receives TLS failure SNI = one.com client receives one.com certificate client receives one.com certificate The default certificate is the certificate returned by the TLS implementation in case there is no SNI match, and you should not rely on this certificate to be the same across Java vendors and versions, or Jetty versions, or TLS provider vendors and versions. In the example above it could be either the one.com certificate or the two.net certificate. When jetty.sslContext.sniRequired=true, clients that don’t send a valid SNI receive a TLS failure, and their attempt to connect to the server fails. The details of this failure may not be reported and could be difficult to figure out that the failure is related to an invalid SNI. For this reason, other two properties are defined at the HTTP level, so that clients can received an HTTP 400 response with more details about what went wrong while trying to connect to the server: jetty.ssl.sniRequired Whether SNI is required at the HTTP level, defaults to false. Its behavior is similar to the jetty.sslContext.sniRequired property above, and is explained by the following table: Table 2. Behavior of the jetty.ssl.sniRequired property sniRequired=false sniRequired=true SNI = null Accept Reject: 400 Bad Request SNI = wrong.org Accept Reject: 400 Bad Request SNI = one.com Accept Accept When jetty.ssl.sniRequired=true, the SNI is matched against the certificate sent to the client, and only if there is a match the request is accepted. When the request is accepted, there could be an additional check controlled by the following property: jetty.ssl.sniHostCheck Whether the certificate sent to the client matches the Host header, defaults to true. Its behavior is explained by the following table: Table 3. Behavior of the jetty.ssl.sniHostCheck property sniHostCheck=false sniHostCheck=true certificate = one.com Host: wrong.org Accept Reject: 400 Bad Request certificate = one.com Host: one.com Accept Accept In the normal case with the default server configuration, for a TLS clients that sends SNI, and then sends an HTTP request with the correct Host header, Jetty will pick the correct certificate from the KeyStore based on the SNI received from the client, and accept the request. Accepting the request does not mean that the request is responded with an HTTP 200 OK, but just that the request passed successfully the SNI checks and will be processed by the server. If the request URI is for a resource that does not exist, the response will likely be a 404 Not Found. You may modify the default values of the SNI properties if you want stricter control over old/broken TLS clients or bad HTTP requests. You may need to configure one or more Jetty instances behind an intermediary, typically a load balancer such as HAProxy, or a reverse proxy such as Apache HTTP Server or Nginx. HAProxy can communicate either HTTP/1.1 or HTTP/2 to backend servers such as Jetty. Apache HTTP Server and Nginx can only speak HTTP/1.1 to backend servers such as Jetty, and have no plans to support HTTP/2 towards backend servers. In these setups, typically the proxy performs TLS offloading, and the communication with backend servers happens in clear-text. It is possible, however, to configure the proxy so that all the bytes arriving from the client are tunnelled opaquely to the backend Jetty server (that therefore needs to perform the TLS offloading) and vice versa the bytes arriving from the Jetty server are tunnelled opaquely to the client. Also in these setups, the TCP/IP connection terminating on the Jetty servers does not originate from the client, but from the proxy, so that the remote IP address and port number may be reported incorrectly in backend server logs, or worse applications may not work because they need to be able to differentiate different clients based on the client IP address. For this reason, intermediaries typically implement at least one of several de facto standards to communicate information about the original client connection to the backend Jetty server. Jetty supports two methods to process client information sent by intermediaries: The Forwarded HTTP header, defined in RFC 7239 and replacing the old X-Forwarded-* headers, defined in this section. The Proxy Protocol, defined in this section. In both methods, web applications that call HttpServletRequest.getRemoteAddr() will receive the remote client IP address as specified by the client information sent by the intermediary, not the physical IP address of TCP connection with the intermediary. Likewise, HttpServletRequest.getRemotePort() will return the remote client IP port as specified by the client information sent by the intermediary, and HttpServletRequest.isSecure() will return whether the client made a secure request using the https scheme as specified by the client information sent by the intermediary. The Forwarded HTTP header is added by the intermediary with information about the client and the client request, for example: GET / HTTP/1.1 Host: domain.com Forwarded: for=2.36.72.144:21216;proto=https In the example above, the intermediary added the Forwarded header specifying that the client remote address is 2.36.72.144:21216 and that the request was made with the https scheme. Let’s assume you have already configured Jetty with the HTTP/1.1 protocol with the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=http Support for the Forwarded HTTP header (and its predecessor X-Forwarded-* headers) is enabled with the http-forwarded Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=http-forwarded INFO : http-forwarded initialized in ${jetty.base}/start.d/http-forwarded.ini INFO : Base directory was modified With the http-forwarded Jetty module enabled, Jetty interprets the Forwarded header and makes its information available to web applications via the standard Servlet APIs. For further information about configuring the http-forwarded Jetty module, see this section. The Proxy Protocol is the de facto standard, introduced by HAProxy, to communicate client information to backend servers via the TCP connection, rather than via HTTP headers. The information about the client connection is sent as a small data frame on each newly established connection. This mechanism is therefore independent of any protocol, so it can be used for TLS, HTTP/1.1, HTTP/2, etc. There are 2 versions of the proxy protocol: v1 and v2, both supported by Jetty. Proxy protocol v1 is human readable, but it only carries information about the client TCP connection (IP address and IP port). Proxy protocol v2 has a binary format, carries the information about the client TCP connection, and can carry additional arbitrary information encoded in pairs (type, value) where type is a single byte that indicates the value’s meaning, and value is a variable length byte array that can encode user-defined data. Support for the proxy protocol can be enabled for the clear-text connector or for the secure connector (or both). Let’s assume you have already configured Jetty with the HTTP/1.1 clear-text protocol with the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=http To enable proxy protocol support for the clear-text connector, enable the proxy-protocol Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=proxy-protocol INFO : proxy-protocol initialized in ${jetty.base}/start.d/proxy-protocol.ini INFO : Base directory was modified Starting Jetty yields: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:22.161:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:22.174:INFO :oejs.AbstractConnector:main: Started ServerConnector@4c583ecf{[proxy], ([proxy], http/1.1)}{0.0.0.0:8080} 2024-06-05 07:38:22.181:INFO :oejs.Server:main: Started oejs.Server@68999068{STARTING}[12.0.11-SNAPSHOT,sto=5000] @419ms Note how in the example above the list of protocols for the clear-text connector is first proxy and then http/1.1. For every new TCP connection, Jetty first interprets the proxy protocol bytes with the client information; after this initial proxy protocol processing, Jetty interprets the incoming bytes as HTTP/1.1 bytes. Enabling proxy protocol support for the secure connector is similar. Let’s assume you have already configured Jetty with the HTTP/1.1 secure protocol and the test KeyStore with the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=https,test-keystore Enable the proxy-protocol-ssl Jetty module with the following command (issued from within the $JETTY_BASE directory): $ java -jar $JETTY_HOME/start.jar --add-modules=proxy-protocol-ssl INFO : proxy-protocol-ssl initialized in ${jetty.base}/start.d/proxy-protocol-ssl.ini INFO : Base directory was modified Starting Jetty yields: $ java -jar $JETTY_HOME/start.jar 2024-06-05 07:38:24.237:WARN :oejk.KeystoreGenerator:main: Generating Test Keystore: DO NOT USE IN PRODUCTION! 2024-06-05 07:38:24.486:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:24.502:INFO :oejus.SslContextFactory:main: x509=X509@78641d23(jetty-test-keystore,h=[localhost],a=[],w=[]) for Server@74589991[provider=null,keyStore=file:///path/to/jetty.home-base/etc/test-keystore.p12,trustStore=null] 2024-06-05 07:38:24.529:INFO :oejs.AbstractConnector:main: Started ServerConnector@b1712f3{[proxy], ([proxy], ssl, http/1.1)}{0.0.0.0:8443} 2024-06-05 07:38:24.533:INFO :oejs.Server:main: Started oejs.Server@1bd39d3c{STARTING}[12.0.11-SNAPSHOT,sto=5000] @941ms Note how in the example above the list of protocols for the secure connector is first proxy, then ssl and then http/1.1. HAProxy is an open source solution that offers load balancing and proxying for TCP and HTTP based application, and can be used as a replacement for Apache or Nginx when these are used as reverse proxies. The deployment proposed here has HAProxy playing the role that Apache and Nginx usually do: to perform the TLS offloading (that is, decrypt incoming bytes and encrypt outgoing bytes) and then forwarding the now clear-text traffic to a backend Jetty server, speaking either HTTP/1.1 or HTTP/2. Since HAProxy’s TLS offloading is based on OpenSSL, it is much more efficient than the Java implementation shipped with OpenJDK. After you have installed HAProxy on your system, you want to configure it so that it can perform TLS offloading. HAProxy will need a single file containing the X509 certificates and the private key, all in PEM format, with the following order: The site certificate; this certificate’s Common Name refers to the site domain (for example: CN=*.webtide.com) and is signed by Certificate Authority #1. The Certificate Authority #1 certificate; this certificate may be signed by Certificate Authority #2. The Certificate Authority #2 certificate; this certificate may be signed by Certificate Authority #3; and so on until the Root Certificate Authority. The Root Certificate Authority certificate. The private key corresponding to the site certificate. Refer to the section about KeyStores for more information about generating the required certificates and private key. Now you can create the HAProxy configuration file (in Linux it’s typically /etc/haproxy/haproxy.cfg). This is a minimal configuration: haproxy.cfg global tune.ssl.default-dh-param 1024 defaults timeout connect 10000ms timeout client 60000ms timeout server 60000ms frontend fe_http (1) mode http bind *:80 # Redirect to https redirect scheme https code 301 frontend fe_https (2) mode tcp bind *:443 ssl no-sslv3 crt /path/to/domain.pem ciphers TLSv1.2 alpn h2,http/1.1 default_backend be_http backend be_http (3) mode tcp server domain 127.0.0.1:8282 send-proxy-v2 1 The fe_http front-end accepts connections on port 80 and redirects them to use the https scheme. 2 The fe_https front-end accepts connections on port 443, and it is where the TLS decryption/encryption happens. You must specify the path to the PEM file containing the TLS key material (the crt /path/to/domain.pem part), the ciphers that are suitable for HTTP/2 (ciphers TLSv1.2), and the ALPN protocols supported (alpn h2,http/1.1). This front-end then forwards the now decrypted bytes to the backend in mode tcp. The mode tcp says that HAProxy will not try to interpret the bytes but instead opaquely forwards them to the backend. 3 The be_http backend will forward (again in mode tcp) the clear-text bytes to a Jetty connector that talks clear-text HTTP/2 and HTTP/1.1 on port 8282. The send-proxy-v2 directive sends the proxy protocol v2 bytes to the backend server. On the Jetty side, you need to enable the following modules: $ java -jar $JETTY_HOME/start.jar --add-modules=proxy-protocol,http2c,http,deploy You need to specify the host (127.0.0.1) and port (8282) you have configured in HAProxy when you start Jetty: $ java -jar $JETTY_HOME/start.jar jetty.http.host=127.0.0.1 jetty.http.port=8282 You want the Jetty connector that listens on port 8282 to be available only to HAProxy, and not to remote clients. For this reason, you want to specify the jetty.http.host property on the command line (or in $JETTY_BASE/start.d/http.ini to make this setting persistent) to bind the Jetty connector only on the loopback interface (127.0.0.1), making it available to HAProxy but not to remote clients. If your Jetty instance runs on a different machine and/or on a different (sub)network, you may want to adjust both the back-end section of the HAProxy configuration file and the jetty.http.host property to match accordingly. With this configuration for HAProxy and Jetty, browsers supporting HTTP/2 will connect to HAProxy, which will decrypt the traffic and send it to Jetty. Likewise, HTTP/1.1 clients will connect to HAProxy, which will decrypt the traffic and send it to Jetty. The Jetty connector, configured with the http2c and the http modules is able to distinguish whether the incoming bytes are HTTP/2 or HTTP/1.1 and will handle the request accordingly. The response is relayed back to HAProxy, which will encrypt it and send it back to the remote client. This configuration offers you efficient TLS offloading, HTTP/2 support and transparent fallback to HTTP/1.1 for clients that don’t support HTTP/1.1.","title":"Jetty Connectors and Protocols","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/protocols/index.html","titles":[{"text":"Clear-Text HTTP/1.1","hash":"http","id":1},{"text":"Secure HTTP/1.1","hash":"https","id":2},{"text":"Configuring HTTP/2","hash":"http2","id":3},{"text":"Secure vs Clear-Text HTTP/2","hash":"secure-vs-clear-text-http2","id":4},{"text":"Secure HTTP/2","hash":"http2s","id":5},{"text":"Clear-Text HTTP/2","hash":"http2c","id":6},{"text":"HTTP/3","hash":"http3","id":7},{"text":"WebSocket","hash":"websocket","id":8},{"text":"Configuring WebSocket","hash":"websocket-configure","id":9},{"text":"Selectively Disabling WebSocket","hash":"websocket-disable","id":10},{"text":"Using WebSocket Client in WebApps","hash":"websocket-webapp-client","id":11},{"text":"FastCGI","hash":"fcgi","id":12},{"text":"Configuring WordPress","hash":"fcgi-configure","id":13},{"text":"Configuring Secure Protocols","hash":"ssl","id":14},{"text":"Customizing KeyStore and SSL/TLS Configuration","hash":"ssl-customize","id":15},{"text":"Customizing SSL/TLS Protocol Versions","hash":"ssl-customize-versions","id":16},{"text":"Customizing SSL/TLS Ciphers","hash":"ssl-customize-ciphers","id":17},{"text":"Renewing the Certificates","hash":"ssl-renew","id":18},{"text":"Watching and Reloading the KeyStore","hash":"ssl-reload","id":19},{"text":"Using Conscrypt as SSL/TLS Provider","hash":"ssl-conscrypt","id":20},{"text":"Configuring SNI","hash":"ssl-sni","id":21},{"text":"Jetty Behind a Load Balancer or Reverse Proxy","hash":"proxy","id":22},{"text":"Configuring the Forwarded Header","hash":"proxy-forwarded","id":23},{"text":"Configuring the Proxy Protocol","hash":"proxy-protocol","id":24},{"text":"HAProxy and Jetty with HTTP/1.1 and HTTP/2","hash":"proxy-haproxy","id":25}]},"35":{"id":35,"text":"The auto discovery features of the Servlet Specification can make deployments slow and uncertain. Auto discovery of web application configuration can be useful during the development as it allows new features and frameworks to be enabled simply by dropping in a jar file. However for production deployment, the need to scan the contents of many jars can have a significant impact at startup time. The quickstart module allows a webapp to be pre-scanned, making startup predictable and faster. During scanning all declarative configuration (ie from web.xml, web-fragment.xml and annotations) are encoded into an effective web.xml, called WEB-INF/quickstart-web.xml, which can be inspected to understand what will be deployed. Programmatic configuration is not encoded into the generated quickstart-web.xml file. With quickstart, webapps that took many seconds to scan and deploy can now be deployed in a few hundred milliseconds. Enable the quickstart module for your jetty base: $ cd $JETTY-BASE $ java -jar $JETTY_HOME/start.jar --add-modules=quickstart The $JETTY-BASE/start.d/quickstart.ini file contains these configurable parameters: jetty.quickstart.mode The values are: AUTO Allows jetty to run either with or without a quickstart-web.xml file. If jetty detects the file, then it will be used, otherwise the app is started normally. GENERATE In this mode, jetty will generate a quickstart-web.xml file and then terminate. Use this mode first before changing to either AUTO or QUICKSTART. QUICKSTART In this mode, if jetty does not detect a quickstart-web.xml file then jetty will not start. jetty.quickstart.origin Use this parameter to set the name of the attribute in the quickstart-web.xml file that contains the origin of each element. Knowing the descriptor or annotation from which each element derives can be useful for debugging. Note that the origin attribute does not conform to the web xml schema, so if you deploy with xml validation, you’ll see errors. It is probably best to do a few trial runs with the attribute set, then turn it off for final generation. jetty.quickstart.xml Use this parameter to change the name of the generated file. By default this is quickstart-web.xml in the webapp’s WEB-INF directory. The file named by this parameter will always be interpreted relative to WEB-INF. If your webapp is a war file, you will need to either first unpack it yourself, or use a context xml file (or code equivalent) that calls WebAppContext.setExtractWAR(true). If you allow Jetty to do the unpacking, it will use the usual mechanisms to find the location to which to unpack. Note that by default Jetty unpacks to a temporary location which is not reused between executions. So either specify the directory to which to unpack, or make a work directory in your base to ensure the unpacked war is preserved and reused across restarts.","title":"Faster Web Application Deployment","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/quickstart/index.html","titles":[{"text":"Enabling","hash":"enabling","id":1}]},"36":{"id":36,"text":"The Jetty Server object is the central component that links protocol connectors to web applications. The Server component is defined by the server Jetty module, that in turn depends on other Jetty modules that provide key functionalities, in particular: Logging ByteBuffer pooling Thread pooling You can configure two types of logging in Jetty: server logging and request logging. Server logging refers to the console output produced by Jetty itself. Request logging refers to the information that Jetty can capture about incoming HTTP requests and responses. Jetty uses the SLF4J API for its logging. SLF4J is a generic abstraction layer that is supported by many different logging frameworks (or SLF4J bindings). Jetty provides a default binding via the jetty-slf4j-impl Maven artifact, but you can plug in the SLF4J binding of your choice provided by other logging frameworks. Jetty’s server logging is enabled by default with the logging Jetty module. You typically won’t have to enable the logging module directly, since it is a transitive dependency of the server module, and thus pulled in by many of the most commonly used modules. The logging module is a virtual module and its default implementation is provided by the logging-jetty Jetty module, which uses the Jetty SLF4J binding. Jetty’s default SLF4J binding uses an appender (org.eclipse.jetty.logging.StdErrAppender) to format a logging message with metadata (like a timestamp) before sending it to System.err. The default StdErrAppender format is: :::: where is a timestamp with the format yyyy-MM-dd HH:mm:ss.SSS. You can configure the appender via a file named jetty-logging.properties, which must be found in the server class-path. When you enable the logging-jetty module — either directly or by transitive dependency, as in the following example — Jetty automatically generates a jetty-logging.properties file in $JETTY_BASE/resources/: $ java -jar $JETTY_HOME/start.jar --add-modules=http INFO : mkdir ${jetty.base}/start.d INFO : server transitively enabled, ini template available with --add-modules=server INFO : logging-jetty transitively enabled INFO : http initialized in ${jetty.base}/start.d/http.ini INFO : resources transitively enabled INFO : threadpool transitively enabled, ini template available with --add-modules=threadpool INFO : logging/slf4j dynamic dependency of logging-jetty INFO : bytebufferpool transitively enabled, ini template available with --add-modules=bytebufferpool INFO : mkdir ${jetty.base}/resources INFO : copy ${jetty.home}/modules/logging/jetty/resources/jetty-logging.properties to ${jetty.base}/resources/jetty-logging.properties INFO : Base directory was modified You can specify the following configuration options in jetty-logging.properties: org.eclipse.jetty.LEVEL= Sets the logging level for the logger tree based at org.eclipse.jetty. You can specify any of the usual SLF4J logging levels — TRACE, DEBUG, INFO (default), WARN and ERROR — plus two additional levels: ALL (an alias for TRACE) and OFF (disables logging entirely). You can also configure a default logging level for specific loggers, or arbitrary logger trees: com.example.MyComponent.LEVEL=DEBUG (sets logging level of logger com.example.MyComponent to DEBUG) com.example.LEVEL=DEBUG (sets logging level of tree com.example.* to DEBUG) com.example.STACKS= Specifies whether to hide stack traces for some arbitrary logger tree com.example.*. The exception type and message are logged normally; only stack traces are hidden. Default value is false org.eclipse.jetty.logging.appender.NAME_CONDENSE= Specifies whether to condense logger names, so that for example org.eclipse.jetty.util.QueuedThreadPool becomes oeju.QueuedThreadPool. Default value is true. org.eclipse.jetty.logging.appender.MESSAGE_ALIGN= Specifies the column at which the logging should be printed. The value 0 specifies no alignment. Default value is 0. org.eclipse.jetty.logging.appender.MESSAGE_ESCAPE= Specifies whether to escape ISO control characters such as \\r or \\n present in the message. Character \\r is replaced with Specifies the timezone ID (such as PST, or America/Los_Angeles or GMT-8:00) for the part of the logging line. The empty string specifies the UTC timezone. Default value is the local timezone. When using the Jetty SLF4J binding, the logging levels can be dynamically changed via JMX, see the troubleshooting section for more information. Logging to System.err may be fine at development time, but you will typically want to capture logs on disk for later inspection, or if you don’t have a terminal access (for example, if you started Jetty as a service). The console-capture Jetty module allows you to capture what is written to System.out and System.err and write it to a log file. By default, console-capture logs to a file in the $JETTY_BASE/logs/ directory. See the console-capture module documentation for details on configuring how logs are written to the log directory. The console-capture Jetty module should be used only in conjunction with the logging-jetty module, as other SLF4J bindings such as LogBack or Log4j2 have their own, more sophisticated, rolling file appenders. You can use a different SLF4J binding if you are more familiar with other logging libraries, or if you need custom logging appenders. There are a number of out-of-the-box Jetty modules that you can use: logging-logback, to use the LogBack binding logging-log4j2, to use the Log4j2 binding logging-log4j1, to use the Log4j1 binding (note that Log4j 1.x is end-of-life) logging-jul, to use the java.util.logging binding logging-noop, to use the SLF4J no-operation binding (discards all logging) To enable the logging-logback module, run: $ java -jar $JETTY_HOME/start.jar --add-modules=logging-logback,http Since LogBack is released under a license that is different from Jetty’s, you will be prompted to accept the LogBack license. Once you accept the LogBack license, your $JETTY_BASE directory will have the following structure. $JETTY_BASE ├── lib │ └── logging │ ├── logback-classic-.jar │ └── logback-core-.jar ├── resources │ └── logback.xml └── start.d ├── http.ini └── logging-logback.ini Jetty downloaded the required LogBack *.jar files, and created a $JETTY_BASE/resources/logback.xml file for configuring your LogBack logging. Please refer to the LogBack configuration manual for more information about how to configure LogBack. To enable the logging-log4j2 module, run: $ java -jar $JETTY_HOME/start.jar --add-modules=logging-log4j2,http After accepting the Log4j2 license, you will have the following directory structure: $JETTY_BASE ├── lib │ └── logging │ ├── log4j-api-.jar │ ├── log4j-core-.jar │ └── log4j-slf4j2-impl-.jar ├── resources │ └── log4j2.xml └── start.d ├── http.ini └── logging-log4j2.ini Jetty downloaded the required Log4j2 *.jar files, and created a $JETTY_BASE/resources/log4j2.xml file that you can configure to customize your Log4j2 logging. Please refer to the Log4j2 configuration manual for more information about how to configure Log4j2. When you use libraries that provide the features you need (for example, JDBC drivers), it may be possible that those libraries use a different logging framework than SLF4J. SLF4J provides bridges for legacy logging APIs that allows you to bridge logging from one of these legacy logging frameworks to SLF4J. Once the logging is bridged to SLF4J, you can use Jetty’s default configuration or a custom configuration so that your logging is centralized in one place. Jetty provides the logging-jul-capture module for bridging from java.util.logging to SLF4J. The modules logging-jcl-capture and logging-log4j1-capture similarly provide bridges from Jakarta Commons Logging (JCL) and Apache Log4j, respectively; however, these modules are obsolete and should not be used anymore. For libraries that use java.util.logging as their logging framework, you can enable Jetty’s logging-jul-capture module: $ java -jar $JETTY_HOME/start.jar --add-modules=logging-jul-capture The logging-jul-capture module implies --exec and therefore spawns a second JVM because it needs to provide the system property java.util.logging.config.file (so that java.util.logging can read the configuration from the specified file), and because it needs to make available on the System ClassLoader the class org.slf4j.bridge.SLF4JBridgeHandler. For example, a library that uses java.util.logging as its logging library is the Postgresql JDBC driver. With the logging-jul-capture Jetty module, the logging follows this diagram: Note how Jetty logs directly to SLF4J, while the Postgresql JDBC driver logs to SLF4J through the SLF4JBridgeHandler. They both arrive to the SLF4J binding, in this case the Jetty SLF4J binding (but could be any other SLF4J binding such as LogBack). HTTP requests and responses can be logged to provide data that can be later analyzed with other tools, that can provide information such as the most frequently accessed request URIs, the response status codes, the request/response content lengths, geographical information about the clients, etc. Request logging is enabled by enabling the requestlog Jetty module. In the example below, both the http Jetty module and the requestlog module are enabled, so that you can make HTTP requests to the server and have them logged: $ cd $JETTY_BASE $ java -jar $JETTY_HOME/start.jar --add-modules=http,requestlog The $JETTY_BASE directory looks like this: $JETTY_BASE ├── logs ├── resources │ └── jetty-logging.properties └── start.d ├── http.ini └── requestlog.ini The $JETTY_BASE/start.d/requestlog.ini file is the Jetty module configuration file that allows you to configure the requestlog module, see this section for more details. By default the requestlog Jetty module produces the $JETTY_BASE/logs/yyyy_MM_dd.request.log, where the pattern yyyy_MM_dd is replaced with the current date, for example 2020_01_31. The format of the request log lines is the result of a format string that uses formatting symbols to log relevant request/response data. The default format is the NCSA Format extended with referrer data and user-agent data. A typical log line looks like this: 192.168.0.100 - - [31/Jan/2020:20:30:40 +0000] \"GET / HTTP/1.1\" 200 6789 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\" The line above (that uses fake values) shows 192.168.0.100 for the client IP address, a hard-coded - for the identity, - for the authenticated user name, [31/Jan/2020:20:30:40 +0000] for the date and time with timezone, \"GET / HTTP/1.1\" for the HTTP request line, 200 for the HTTP response status code, 6789 for the HTTP response content length, \"-\" for the referrer and \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\" for the user-agent. The format string can be customized as described in this section. Request log files are rolled every day, and retained for customizable number of days, by default 90 days. When Jetty is behind a load balancer, you want to log the remote client IP address, not the load balancer IP address. Refer to this section to configure the load balancer and Jetty to retain the remote client IP address information. Jetty uses thread pooling to efficiently execute tasks that provide Jetty functionalities. Like any other component, the Jetty thread pool is configured and enabled via the threadpool Jetty module, that is transitively enabled by the server Jetty module which, in turn, is transitively enabled by a protocol module such as the http Jetty module: $ java -jar $JETTY_HOME/start.jar --add-modules=http The command above gives you the default configuration for the thread pool. If you want to explicitly configure the thread pool, it is enough to explicitly specify the threadpool module: $ java -jar $JETTY_HOME/start.jar --add-modules=threadpool,http After the command above, the $JETTY_BASE directory looks like this: $JETTY_BASE ├── resources │ └── jetty-logging.properties └── start.d ├── http.ini └── threadpool.ini Now you can customize the threadpool.ini file to explicitly configure the thread pool. Virtual threads have been introduced as a preview feature in Java 19 and Java 20, and have become an official feature since Java 21. The threadpool-virtual-preview Jetty module provides support for virtual threads in Java 19 and Java 20, and it is mutually exclusive with the threadpool Jetty module. The threadpool-virtual Jetty module provides support for virtual threads in Java 21 or later, and it is mutually exclusive with the threadpool Jetty module. If you have already enabled the threadpool Jetty module, it is sufficient to remove it by removing the $JETTY_BASE/start.d/threadpool.ini file. When using Java 21 or later, you can enable the threadpool-virtual module: $ java -jar $JETTY_HOME/start.jar --add-modules=threadpool-virtual,http After the command above, the $JETTY_BASE directory looks like this: $JETTY_BASE ├── resources │ └── jetty-logging.properties └── start.d ├── http.ini └── threadpool-virtual.ini Now you can customize the threadpool-virtual.ini file to explicitly configure the thread pool and the virtual threads and then start Jetty: 2024-06-05 07:38:26.095:INFO :oe.jetty:main: Virtual threads enabled. Using virtual threads for application tasks. 2024-06-05 07:38:26.212:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:26.229:INFO :oejs.AbstractConnector:main: Started ServerConnector@385c9627{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} 2024-06-05 07:38:26.239:INFO :oejs.Server:main: Started oejs.Server@49ec71f8{STARTING}[12.0.11-SNAPSHOT,sto=5000] @568ms","title":"Jetty Server","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/server/index.html","titles":[{"text":"Logging","hash":"logging","id":1},{"text":"Server Logging","hash":"logging-server","id":2},{"text":"Default Configuration","hash":"logging-server-default","id":3},{"text":"Capturing Logs to a Rolling File","hash":"logging-server-default-rolling","id":4},{"text":"Custom Configuration","hash":"logging-server-custom","id":5},{"text":"Logging with LogBack","hash":"logging-server-custom-logback","id":6},{"text":"Logging with Log4j2","hash":"logging-server-custom-log4j2","id":7},{"text":"Bridging Logging to SLF4J","hash":"logging-server-bridges","id":8},{"text":"Bridging from java.util.logging","hash":"logging-server-bridge-jul","id":9},{"text":"Request Logging","hash":"logging-request","id":10},{"text":"Thread Pooling","hash":"threadpool","id":11},{"text":"Virtual Threads Support","hash":"threadpool-virtual","id":12}]},"37":{"id":37,"text":"HTTP sessions are a concept within the Servlet API which allow requests to store and retrieve information across the time a user spends in an application. Jetty offers a number of pluggable alternatives for managing and distributing/persisting sessions. Choosing the best alternative is an important consideration for every application as is the correct configuration to achieve optimum performance. Before diving into the specifics of how to plug-in and configure various alternative HTTP session management modules, let’s review some useful terminology: Session is a means of retaining information across requests for a particular user. The Servlet Specification defines the semantics of sessions. Some of the most important characteristics of sessions is that they have a unique id and that their contents cannot be shared between different contexts (although the id can be): if a session is invalidated in one context, then all other sessions that share the same id in other contexts will also be invalidated. Sessions can expire or they can be explicitly invalidated. SessionIdManager is responsible for allocating session ids. A Jetty server can have at most 1 SessionIdManager. HouseKeeper is responsible for periodically orchestrating the removal of expired sessions. This process is referred to as \"scavenging\". SessionHandler is responsible for managing the lifecycle of sessions. A context can have at most 1 SessionHandler. SessionCache is a L1 cache of in-use session objects. The SessionCache is used by the SessionHandler. SessionDataStore is responsible for all clustering/persistence operations on sessions. A SessionCache uses a SessionDataStore as a backing store. CachingSessionDataStore is an L2 cache of session data. A SessionCache can use a CachingSessionDataStore as its backing store. More details on these concepts can be found in the Programming Guide. SessionDataStores implementations interact with other, usually third party, systems responsible for storing and/or distributing session information. Sessions can be distributed without being persisted. They can also be persisted without being distributed. Because persisting session information to a shared store is a very common way of distributing (also known as \"clustering\") sessions, in the documentation we will often refer to just \"persisting\". There are a number of modules that offer pluggable alternatives for http session management. You can design how you want to cache and store http sessions by selecting alternative combinations of session modules. For example, Jetty ships with two alternative implementations of the SessionCache: one that caches sessions in memory: session-cache-hash one that does not actually cache: session-cache-null There are at least 6 alternative implementations of the SessionDataStore that you can use to persist/distribute your http sessions: file system storage: session-store-file relational database storage: session-store-jdbc NoSQL database storage: session-store-mongo Google Cloud datastore storage: session-store-gcloud Hazelcast: session-store-hazelcast-remote or session-store-hazelcast-embedded Infinispan: session-store-infinispan-remote or session-store-infinispan-embedded It is worth noting that if you do not configure any session modules, Jetty will still provide HTTP sessions that are cached in memory but are never persisted. The sessions module is the base module that all other session modules depend upon. As such it will be transitively enabled if you enable any of the other session modules: you need to explicitly enable it if you wish to change any settings from their defaults. Enabling the sessions module puts the $JETTY_HOME/etc/sessions/id-manager.xml file onto the execution path and generates a $JETTY_BASE/start.d/sessions.ini file. The id-manager.xml file instantiates a DefaultSessionIdManager and HouseKeeper. The former is used to generate and manage session ids whilst the latter is responsible for periodic scavenging of expired sessions. The $JETTY_BASE/start.d/sessions.ini file contains these configuration properties: jetty.sessionIdManager.workerName This uniquely identifies the jetty server instance and is applied to the SessionIdManager. You can either provide a value for this property, or you can allow Jetty to try and synthesize a workerName - the latter option is only advisable in the case of a single, non-clustered deployment. There are two ways a default workerName can be synthesized: if running on Google AppEngine, the workerName will be formed by concatenating the values of the environment variables JETTY_WORKER_INSTANCE and GAE_MODULE_INSTANCE otherwise, the workerName will be formed by concatenating the environment variable JETTY_WORKER_INSTANCE and the literal 0. So, if you’re not running on Google AppEngine, and you haven’t configured one, the workerName will always be: node0. If you have more than one Jetty instance, it is crucial that you configure the workerName differently for each instance. jetty.sessionScavengeInterval.seconds This is the period in seconds between runs of the HouseKeeper, responsible for orchestrating the removal of expired sessions. By default it will run approximately every 600 secs (ie 10 mins). As a rule of thumb, you should ensure that the scavenge interval is shorter than the of your sessions to ensure that they are promptly scavenged. On the other hand, if you have a backend store configured for your sessions, scavenging too frequently can increase the load on it. Don’t forget that the is specified in web.xml in minutes and the value of the jetty.sessionScavengeInterval.seconds is in seconds. The HouseKeeper is responsible for the periodic initiation of session scavenge cycles. The jetty.sessionScavengeInterval.seconds property in $JETTY_BASE/start.d/sessions.ini controls the periodicity of the cycle. The HouseKeeper semi-randomly adds an additional 10% to the configured sessionScavengeInterval. This is to prevent multiple nodes in a cluster that are all started at once from syncing up scavenge cycles and placing extra load on the configured persistence mechanism. A session whose expiry time has been exceeded is considered eligible for scavenging. The session might be present in a SessionCache and/or present in the session persistence/clustering mechanism. Scavenging occurs for all contexts on a server at every cycle. The HouseKeeper sequentially asks the SessionHandler in each context to find and remove expired sessions. The SessionHandler works with the SessionDataStore to evaluate candidates for expiry held in the SessionCache, and also to sweep the persistence mechanism to find expired sessions. The sweep takes two forms: once per cycle the SessionDataStore searches for sessions for its own context that have expired; infrequently, the SessionDataStore will widen the search to expired sessions in all contexts. The former finds sessions that are no longer in this context’s SessionCache, and using some heuristics, are unlikely to be in the SessionCache of the same context on another node either. These sessions will be loaded and fully expired, meaning that HttpSessionListener.destroy() will be called for them. The latter finds sessions that have not been disposed of by scavenge cycles on any other context/node. As these will be sessions that expired a long time ago, and may not be appropriate to load by the context doing the scavenging, these are summarily deleted without HttpSessionListener.destroy() being called. A combination of these sweeps should ensure that the persistence mechanism does not fill over time with expired sessions. As aforementioned, the sweep period needs to be short enough to find expired sessions in a timely fashion, but not so often that it overloads the persistence mechanism. In this section we will look at the alternatives for the SessionCache, i.e. the L1 cache of in-use session objects. Jetty ships with 2 alternatives: an in-memory cache, and a null cache. The latter does not actually do any caching of sessions, and can be useful if you either want to minimize your support for sessions, or you are in a clustered deployment without a sticky loadbalancer. The scenarios go into more detail on this. If you wish to change any of the default configuration values you should enable the session-cache-hash module. The name \"hash\" harks back to historical Jetty session implementations, whereby sessions were kept in memory using a HashMap. The $JETTY_BASE/start.d/session-cache-hash.ini contains the following configurable properties: jetty.session.evictionPolicy Integer, default -1. This controls whether session objects that are held in memory are subject to eviction from the cache. Eviction means that the session is removed from the cache. This can reduce the memory footprint of the cache and can be useful if you have a lot of sessions. Eviction is usually used in conjunction with a SessionDataStore that persists sessions. The eviction strategies and their corresponding values are: -1 (NO EVICTION) sessions are never evicted from the cache. The only way they leave are via expiration or invalidation. 0 (EVICT AFTER USE) sessions are evicted from the cache as soon as the last active request for it finishes. The session will be passed to the SessionDataStore to be written out before eviction. >= 1 (EVICT ON INACTIVITY) any positive number is the time in seconds after which a session that is in the cache but has not experienced any activity will be evicted. Use the jetty.session.saveOnInactiveEvict property to force a session write before eviction. If you are not using one of the session store modules, ie one of the session-store-xxxxs, then sessions will be lost when the context is stopped, or the session is evicted. jetty.session.saveOnInactiveEvict Boolean, default false. This controls whether a session will be persisted to the SessionDataStore if it is being evicted due to the EVICT ON INACTIVITY policy. Usually sessions will be written to the SessionDataStore whenever the last simultaneous request exits the session. However, as SessionDataStores can be configured to skip some writes (see the documentation for the session-store-xxx module that you are using), this option is provided to ensure that the session will be written out. Be careful with this option, as in clustered scenarios it would be possible to \"re-animate\" a session that has actually been deleted by another node. jetty.session.saveOnCreate Boolean, default false. Controls whether a session that is newly created will be immediately saved to the SessionDataStore or lazily saved as the last request for the session exits. This can be useful if the request dispatches to another context and needs to re-use the same session id. jetty.session.removeUnloadableSessions Boolean, default false. Controls whether the session cache should ask a SessionDataStore to delete a session that cannot be restored - for example because it is corrupted. jetty.session.flushOnResponseCommit Boolean, default false. If true, if a session is \"dirty\" - ie its attributes have changed - it will be written to the SessionDataStore as the response is about to commit. This ensures that all subsequent requests whether to the same or different node will see the updated session data. If false, a dirty session will only be written to the backing store when the last simultaneous request for it leaves the session. jetty.session.invalidateOnShutdown Boolean, default false. If true, when a context is shutdown, all sessions in the cache are invalidated and deleted both from the cache and from the SessionDataStore. You may need to use the session-cache-null module if your clustering setup does not have a sticky load balancer, or if you want absolutely minimal support for sessions. If you enable this module, but you don’t enable a module that provides session persistence (ie one of the session-store-xxx modules), then sessions will neither be retained in memory nor persisted. The $JETTY_BASE/start.d/session-cache-null.ini contains the following configurable properties: jetty.session.saveOnCreate Boolean, default false. Controls whether a session that is newly created will be immediately saved to the SessionDataStore or lazily saved as the last request for the session exits. This can be useful if the request dispatches to another context and needs to re-use the same session id. jetty.session.removeUnloadableSessions Boolean, default false. Controls whether the session cache should ask a SessionDataStore to delete a session that cannot be restored - for example because it is corrupted. jetty.session.flushOnResponseCommit Boolean, default false. If true, if a session is \"dirty\" - ie its attributes have changed - it will be written to the backing store as the response is about to commit. This ensures that all subsequent requests whether to the same or different node will see the updated session data. If false, a dirty session will only be written to the backing store when the last simultaneous request for it leaves the session. The session-store-file Jetty module supports persistent storage of session data in a filesystem. Persisting sessions to the local file system should never be used in a clustered environment. Enabling this module creates the $JETTY_BASE/sessions directory. By default session data will be saved to this directory, one file representing each session. File names follow this pattern: [expiry]_[contextpath]_[virtualhost]_[id] expiry This is the expiry time in milliseconds since the epoch. contextpath This is the context path with any special characters, including /, replaced by the underscore character. For example, a context path of /catalog would become _catalog. A context path of simply / becomes just _. virtualhost This is the first virtual host associated with the context and has the form of 4 digits separated by . characters: [digit].[digit].[digit].[digit]. If there are no virtual hosts associated with a context, then 0.0.0.0 is used. id This is the unique id of the session. Putting all of the above together as an example, a session with an id of node0ek3vx7x2y1e7pmi3z00uqj1k0 for the context with path /test with no virtual hosts and an expiry of 1599558193150 would have a file name of: 1599558193150__test_0.0.0.0_node0ek3vx7x2y1e7pmi3z00uqj1k0 The $JETTY_BASE/start.d/sessions.ini file contains the following properties which may be modified to customise filesystem session storage: jetty.session.storeDir The default is $JETTY_BASE/sessions. This is a path that defines the location for storage of session files. jetty.session.file.deleteUnrestorableFiles Boolean, default false. If set to true, unreadable files will be deleted. This is useful to prevent repeated logging of the same error when the scavenger periodically (re-)attempts to load the corrupted information for a session in order to expire it. jetty.session.gracePeriod.seconds Integer, default 3600. Used during session scavenging. Multiples of this period are used to define how long ago a stored session must have expired before it should be scavenged. jetty.session.savePeriod.seconds Integer, in seconds, default is 0. Whenever a session is accessed by a request, its lastAccessTime and expiry are updated. Even if your sessions are read-mostly, the lastAccessTime and expiry will always change. For heavily-used, read-mostly sessions you can save some time by skipping some writes for sessions for which only these fields have changed (ie no session attributes changed). The value of this property is used to skip writes for these kinds of sessions: the session will only be written out if the time since the last write exceeds the value of this property. You should be careful in the use of this property in clustered environments: if you set too large a value for this property, the session may not be written out sufficiently often to update its expiry time thus making it appear to other nodes that it has expired. Thorough consideration of the maxIdleTime of the session when setting the savePeriod is imperative - it would be undesirable to set a savePeriod that is larger than the maxIdleTime. Enabling the session-store-jdbc module configures Jetty to persist session data in a relational database. After enabling the module, the $JETTY_BASE/start.d/session-store-jdbc.ini file contains the following customizable properties: jetty.session.gracePeriod.seconds Integer, default 3600. Used during session scavenging. Multiples of this period are used to define how long ago a stored session must have expired before it should be scavenged. jetty.session.savePeriod.seconds Integer, in seconds, default is 0. Whenever a session is accessed by a request, its lastAccessTime and expiry are updated. Even if your sessions are read-mostly, the lastAccessTime and expiry will always change. For heavily-used, read-mostly sessions you can save some time by skipping some writes for sessions for which only these fields have changed (ie no session attributes changed). The value of this property is used to skip writes for these kinds of sessions: the session will only be written out if the time since the last write exceeds the value of this property. You should be careful in the use of this property in clustered environments: if you set too large a value for this property, the session may not be written out sufficiently often to update its expiry time thus making it appear to other nodes that it has expired. Thorough consideration of the maxIdleTime of the session when setting the savePeriod is imperative - it would be undesirable to set a savePeriod that is larger than the maxIdleTime. db-connection-type Default datasource. Set to either datasource or driver depending on the type of connection being used. Depending which you select, there are additional properties available: datasource jetty.session.jdbc.datasourceName Name of the remote datasource. driver jetty.session.jdbc.driverClass Name of the JDBC driver that controls access to the remote database, such as com.mysql.jdbc.Driver jetty.session.jdbc.driverUrl URL of the database which includes the driver type, host name and port, service name and any specific attributes unique to the database, such as a username. As an example, here is a mysql connection with the username appended: jdbc:mysql://127.0.0.1:3306/sessions?user=sessionsadmin. jetty.session.jdbc.blobType Optional. Default blob or bytea for Postgres. This is the keyword used by the particular database to identify the blob data type. If netiher default is suitable you can set this value explicitly. jetty.session.jdbc.longType Optional. Default bigint or number(20) for Oracle. This is the keyword used by the particular database to identify the long integer data type. Set this explicitly if neither of the default values is appropriate. jetty.session.jdbc.stringType Optional. Default varchar. This is the keyword used by the particular database to identify character type. If the default is not suitable, you can set this value explicitly. jetty.session.jdbc.schema.schemaName jetty.session.jdbc.schema.catalogName Optional. The exact meaning of these two properties is dependent on your database vendor, but can broadly be described as further scoping for the session table name. See https://en.wikipedia.org/wiki/Database_schema and https://en.wikipedia.org/wiki/Database_catalog. These extra scoping names can come into play at startup time when Jetty determines if the session table already exists, or otherwise creates it on-the-fly. If you have employed either of these concepts when you pre-created the session table, or you want to ensure that Jetty uses them when it auto-creates the session table, then you have two options: either set them explicitly, or let Jetty infer them from a database connection (obtained using either a Datasource or Driver according to the db-connection-type you have configured). To set them explicitly, uncomment and supply appropriate values for the jetty.session.jdbc.schema.schemaName and/or jetty.session.jdbc.schema.catalogName properties. Alternatively, to allow Jetty to infer them from a database connection, use the special string INFERRED instead. If you leave them blank or commented out, then the sessions table will not be scoped by schema or catalog name. jetty.session.jdbc.schema.table Default JettySessions. This is the name of the table in which session data is stored. jetty.session.jdbc.schema.accessTimeColumn Default accessTime. This is the name of the column that stores the time - in ms since the epoch - at which a session was last accessed jetty.session.jdbc.schema.contextPathColumn Default contextPath. This is the name of the column that stores the contextPath of a session. jetty.session.jdbc.schema.cookieTimeColumn Default cookieTime. This is the name of the column that stores the time - in ms since the epoch - that the cookie was last set for a session. jetty.session.jdbc.schema.createTimeColumn Default createTime. This is the name of the column that stores the time - in ms since the epoch - at which a session was created. jetty.session.jdbc.schema.expiryTimeColumn Default expiryTime. This is name of the column that stores - in ms since the epoch - the time at which a session will expire. jetty.session.jdbc.schema.lastAccessTimeColumn Default lastAccessTime. This is the name of the column that stores the time - in ms since the epoch - that a session was previously accessed. jetty.session.jdbc.schema.lastSavedTimeColumn Default lastSavedTime. This is the name of the column that stores the time - in ms since the epoch - at which a session was last written. jetty.session.jdbc.schema.idColumn Default sessionId. This is the name of the column that stores the id of a session. jetty.session.jdbc.schema.lastNodeColumn Default lastNode. This is the name of the column that stores the workerName of the last node to write a session. jetty.session.jdbc.schema.virtualHostColumn Default virtualHost. This is the name of the column that stores the first virtual host of the context of a session. jetty.session.jdbc.schema.maxIntervalColumn Default maxInterval. This is the name of the column that stores the interval - in ms - during which a session can be idle before being considered expired. jetty.session.jdbc.schema.mapColumn Default map. This is the name of the column that stores the serialized attributes of a session. Enabling the session-store-mongo module configures Jetty to store session data in MongoDB. Because MongoDB is not a technology provided by the Eclipse Foundation, you will be prompted to assent to the licenses of the external vendor (Apache in this case) during the install. Jars needed by MongoDB are downloaded and stored into a directory named $JETTY_BASE/lib/nosql/. If you want to use updated versions of the jar files automatically downloaded by Jetty, you can place them in the associated $JETTY_BASE/lib/ directory and use the --skip-create-files= command line option to prevent errors when starting your server. The $JETTY_BASE/start.d/session-store-mongo.ini file contains these configurable properties: jetty.session.mongo.dbName Default is \"HttpSessions\". This is the name of the database in MongoDB used to store the session collection. jetty.session.mongo.collectionName Default is \"jettySessions\". This is the name of the collection in MongoDB used to store all of the sessions. The connection type- You can connect to MongoDB either using a host/port combination, or a URI. By default, the host/port method is selected, but you can change this by commenting out the unwanted method, and uncommenting the other one. connection-type=address Used when utilizing a direct connection to the MongoDB server. jetty.session.mongo.host Host name or address for the remote MongoDB instance. jetty.session.mongo.port Port number for the remote MongoDB instance. connection-type=uri Used when utilizing MongoURI for secured connections. jetty.session.mongo.connectionString The string defining the MongoURI value, such as mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]. More information on how to format the MongoURI string can be found in the official documentation for mongo. You will only use one connection-type at a time, either address or uri. If both are utilized in your session-store-mongo.ini, only the last connection-type configured in the file will be used. jetty.session.gracePeriod.seconds Integer, in seconds. Default 3600. Used during session scavenging. Multiples of this period are used to define how long ago a stored session must have expired before it should be scavenged. jetty.session.savePeriod.seconds Integer, in seconds, default is 0. Whenever a session is accessed by a request, its lastAccessTime and expiry are updated. Even if your sessions are read-mostly, the lastAccessTime and expiry will always change. For heavily-used, read-mostly sessions you can save some time by skipping some writes for sessions for which only these fields have changed (ie no session attributes changed). The value of this property is used to skip writes for these kinds of sessions: the session will only be written out if the time since the last write exceeds the value of this property. You should be careful in the use of this property in clustered environments: if you set too large a value for this property, the session may not be written out sufficiently often to update its expiry time thus making it appear to other nodes that it has expired. Thorough consideration of the maxIdleTime of the session when setting the savePeriod is imperative - it would be undesirable to set a savePeriod that is larger than the maxIdleTime. In order to persist/cluster sessions using Infinispan, Jetty needs to know how to contact Infinispan. There are two options: a remote Infinispan instance, or an in-process Infinispan instance. The former is referred to as \"remote\" Infinispan and the latter as \"embedded\" Infinispan. If you wish Jetty to be able to scavenge expired sessions, you will also need to enable the appropriate infinispan-[remote|embedded]-query module. The session-store-infinispan-remote module configures Jetty to talk to an external Infinispan instance to store session data. Because Infinispan is not a technology provided by the Eclipse Foundation, you will be prompted to assent to the licenses of the external vendor (Apache in this case). Infinispan-specific jar files are download to the directory named $JETTY_BASE/lib/infinispan/. In addition to adding these modules to the classpath of the server it also added several ini configuration files to the $JETTY_BASE/start.d directory. If you have updated versions of the jar files automatically downloaded by Jetty, you can place them in the associated $JETTY_BASE/lib/ directory and use the --skip-create-files= command line option to prevent errors when starting your server. The $JETTY_BASE/start.d/session-store-infinispan-remote.ini contains the following configurable properties: jetty.session.infinispan.remoteCacheName Default \"sessions\". This is the name of the cache in Infinispan where sessions will be stored. jetty.session.infinispan.idleTimeout.seconds Integer, in seconds, default 0. This is the amount of time, in seconds, that a session entry in Infinispan can be idle (ie neither read nor written) before Infinispan will delete its entry. Usually, you do not want to set a value for this, as you want Jetty to manage all session expiration (and call any HttpSessionListeners). You should enable the infinispan-remote-query to allow jetty to scavenge for expired sessions. If you do not, then there is the possibility that sessions can be left in Infinispan but no longer referenced by any Jetty node (so called \"zombie\" or \"orphan\" sessions), in which case you can use this feature to ensure their removal. You should make sure that the number of seconds you specify is larger than the configured maxIdleTime for sessions. jetty.session.gracePeriod.seconds Integer, default 3600. Used during session scavenging. Multiples of this period are used to define how long ago a stored session must have expired before it should be scavenged. jetty.session.savePeriod.seconds Integer, in seconds, default is 0. Whenever a session is accessed by a request, its lastAccessTime and expiry are updated. Even if your sessions are read-mostly, the lastAccessTime and expiry will always change. For heavily-used, read-mostly sessions you can save some time by skipping some writes for sessions for which only these fields have changed (ie no session attributes changed). The value of this property is used to skip writes for these kinds of sessions: the session will only be written out if the time since the last write exceeds the value of this property. You should be careful in the use of this property in clustered environments: if you set too large a value for this property, the session may not be written out sufficiently often to update its expiry time thus making it appear to other nodes that it has expired. Thorough consideration of the maxIdleTime of the session when setting the savePeriod is imperative - it would be undesirable to set a savePeriod that is larger than the maxIdleTime. The infinispan-remote-query module allows Jetty to scavenge expired sessions. Note that this is an additional module, to be used in conjunction with the session-store-infinispan-remote module. There are no configuration properties associated with this module. Enabling the session-store-infinispan-embedded module runs an in-process instance of Infinispan. Because Infinispan is not a technology provided by the Eclipse Foundation, you will be prompted to assent to the licenses of the external vendor (Apache in this case). Infinispan-specific jar files will be downloaded and saved to a directory named $JETTY_BASE/lib/infinispan/. If you have updated versions of the jar files automatically downloaded by Jetty, you can place them in the associated $JETTY_BASE/lib/ directory and use the --skip-create-files= command line option to prevent errors when starting your server. The $JETTY_BASE/start.d/session-store-infinispan-embedded.ini contains the following configurable properties: jetty.session.infinispan.idleTimeout.seconds Integer, in seconds, default 0. This is the amount of time, in seconds, that a session entry in Infinispan can be idle (ie neither read nor written) before Infinispan will delete its entry. Usually, you do not want to set a value for this, as you want Jetty to manage all session expiration (and call any HttpSessionListeners). You should enable the infinispan-embedded-query to allow Jetty to scavenge for expired sessions. If you do not, then there is the possibility that expired sessions can be left in Infinispan. You should make sure that the number of seconds you specify is larger than the configured maxIdleTime for sessions. jetty.session.gracePeriod.seconds Integer, default 3600. Used during session scavenging. Multiples of this period are used to define how long ago a stored session must have expired before it should be scavenged. jetty.session.savePeriod.seconds Integer, in seconds, default is 0. Whenever a session is accessed by a request, its lastAccessTime and expiry are updated. Even if your sessions are read-mostly, the lastAccessTime and expiry will always change. For heavily-used, read-mostly sessions you can save some time by skipping some writes for sessions for which only these fields have changed (ie no session attributes changed). The value of this property is used to skip writes for these kinds of sessions: the session will only be written out if the time since the last write exceeds the value of this property. Thorough consideration of the maxIdleTime of the session when setting the savePeriod is imperative - it would be undesirable to set a savePeriod that is larger than the maxIdleTime. The infinispan-embedded-query module allows Jetty to scavenge expired sessions. There are no configuration properties associated with this module. From Jetty-9.4.13 onwards, we have changed the format of the serialized session when using a remote cache (ie using hotrod). Prior to release 9.4.13 we used the default Infinispan serialization, however this was not able to store sufficient information to allow Jetty to properly deserialize session attributes in all circumstances. See issue https://github.com/eclipse/jetty.project/issues/2919 for more background. We have provided a conversion program which will convert any sessions stored in Infinispan to the new format. We recommend that you backup your stored sessions before running the conversion program. How to use the converter: java -cp jetty-jakarta-servlet-api-4.0.2.jar:jetty-util-{VERSION}.jar:jetty-server-{VERSION}.jar:infinispan-remote-9.1.0.Final.jar:jetty-infinispan-{VERSION}.jar:[other classpath] org.eclipse.jetty.session.infinispan.InfinispanSessionLegacyConverter Usage: InfinispanSessionLegacyConverter [-Dhost=127.0.0.1] [-Dverbose=true|false] [check] The classpath Must contain the servlet-api, jetty-util, jetty-server, jetty-infinispan and infinispan-remote jars. If your sessions contain attributes that use application classes, you will also need to also put those classes onto the classpath. If your session has been authenticated, you may also need to include the jetty-security and jetty-http jars on the classpath. Parameters When used with no arguments the usage message is printed. When used with the cache-name parameter the conversion is performed. When used with both cache-name and check parameters, sessions are checked for whether or not they are converted. -Dhost you can optionally provide a system property with the address of your remote Infinispan server. Defaults to the localhost. -Dverbose defaults to false. If true, prints more comprehensive stacktrace information about failures. Useful to diagnose why a session is not converted. cache-name the name of the remote cache containing your sessions. This is mandatory. check the optional check command will verify sessions have been converted. Use it after doing the conversion. To perform the conversion, run the InfinispanSessionLegacyConverter with just the cache-name, and optionally the host system property. The following command will attempt to convert all sessions in the cached named my-remote-cache on the machine myhost, ensuring that application classes in the /my/custom/classes directory are on the classpath: java -cp jetty-jakarta-servlet-api-4.0.2.jar:jetty-util-{VERSION}.jar:jetty-server-{VERSION}.jar:infinispan-remote-9.1.0.Final.jar:jetty-infinispan-{VERSION}.jar:/my/custom/classes org.eclipse.jetty.session.infinispan.InfinispanSessionLegacyConverter -Dhost=myhost my-remote-cache If the converter fails to convert a session, an error message and stacktrace will be printed and the conversion will abort. The failed session should be untouched, however it is prudent to take a backup of your cache before attempting the conversion. Hazelcast can be used to cluster session information in one of two modes: either remote or embedded. Remote mode means that Hazelcast will create a client to talk to other instances, possibly on other nodes. Embedded mode means that Hazelcast will start a local instance and communicate with that. Enabling the session-store-hazelcast-remote module allows jetty to communicate with a remote Hazelcast instance to cluster session data. Because Hazelcast is not a technology provided by the Eclipse Foundation, you will be prompted to assent to the licenses of the external vendor (Apache in this case). Hazelcast-specific jar files will be downloaded and saved to a directory named $JETTY_BASE/lib/hazelcast/. If you have updated versions of the jar files automatically downloaded by Jetty, you can place them in the associated $JETTY_BASE/lib/ directory and use the --skip-create-files= command line option to prevent errors when starting your server. The start.d/session-store-hazelcast-remote.ini contains a list of all the configurable options for the Hazelcast module: jetty.session.hazelcast.mapName The default is \"jetty-distributed-session-map\". This is the name of the Map in Hazelcast where sessions will be stored. jetty.session.hazelcast.onlyClient Boolean, default true. The Hazelcast instance will be configured in client mode. jetty.session.hazelcast.configurationLocation Optional. This is the path to an external Hazelcast xml configuration file. jetty.session.hazelcast.useQueries Boolean, default false. If true, Jetty will use Hazelcast queries to find sessions to scavenge. If false sessions that are not currently in a session cache cannot be scavenged, and will need to be removed by some external process. jetty.session.hazelcast.addresses Optional. These are the addresses of remote Hazelcast instances with which to communicate. jetty.session.gracePeriod.seconds Integer, in seconds. Default 3600. Used during session scavenging. Multiples of this period are used to define how long ago a stored session must have expired before it should be scavenged. jetty.session.savePeriod.seconds Integer, in seconds, default is 0. Whenever a session is accessed by a request, its lastAccessTime and expiry are updated. Even if your sessions are read-mostly, the lastAccessTime and expiry will always change. For heavily-used, read-mostly sessions you can save some time by skipping some writes for sessions for which only these fields have changed (ie no session attributes changed). The value of this property is used to skip writes for these kinds of sessions: the session will only be written out if the time since the last write exceeds the value of this property. You should be careful in the use of this property in clustered environments: if you set too large a value for this property, the session may not be written out sufficiently often to update its expiry time thus making it appear to other nodes that it has expired. Thorough consideration of the maxIdleTime of the session when setting the savePeriod is imperative - it would be undesirable to set a savePeriod that is larger than the maxIdleTime. Be aware that if your session attributes contain classes from inside your webapp (or Jetty classes) then you will need to put these classes onto the classpath of all of your Hazelcast instances. This will run an in-process instance of Hazelcast. This can be useful for example during testing. To enable this you enable the session-store-hazelcast-embedded module. Because Hazelcast is not a technology provided by the Eclipse Foundation, you will be prompted to assent to the licenses of the external vendor (Apache in this case). Hazelcast-specific jar files will be downloaded to a directory named $JETTY_BASE/lib/hazelcast/. The $JETTY_BASE/start.d/start.d/session-store-hazelcast-embedded.ini contains a list of all the configurable options for the Hazelcast module: jetty.session.hazelcast.mapName The default is \"jetty-distributed-session-map\". This is the name of the Map in Hazelcast where sessions will be stored. jetty.session.hazelcast.hazelcastInstanceName Default is \"JETTY_DISTRIBUTED_SESSION_INSTANCE\". This is the unique name of the Hazelcast instance that will be created. jetty.session.hazelcast.configurationLocation Optional. This is the path to an external Hazelcast xml configuration file. jetty.session.hazelcast.useQueries Boolean, default false'. If `true, Jetty will use Hazelcast queries to find expired sessions to scavenge. If false sessions that are not currently in a session cache cannot be scavenged, and will need to be removed by some external process. jetty.session.gracePeriod.seconds Integer, in seconds. Default 3600. Used during session scavenging. Multiples of this period are used to define how long ago a stored session must have expired before it should be scavenged. jetty.session.savePeriod.seconds Integer, in seconds, default is 0. Whenever a session is accessed by a request, its lastAccessTime and expiry are updated. Even if your sessions are read-mostly, the lastAccessTime and expiry will always change. For heavily-used, read-mostly sessions you can save some time by skipping some writes for sessions for which only these fields have changed (ie no session attributes changed). The value of this property is used to skip writes for these kinds of sessions: the session will only be written out if the time since the last write exceeds the value of this property. You should be careful in the use of this property in clustered environments: if you set too large a value for this property, the session may not be written out sufficiently often to update its expiry time thus making it appear to other nodes that it has expired. Thorough consideration of the maxIdleTime of the session when setting the savePeriod is imperative - it would be undesirable to set a savePeriod that is larger than the maxIdleTime. If your session attributes contain classes from inside your webapp (or jetty classes) then you will need to put these classes onto the classpath of all of your hazelcast instances. In the case of embedded hazelcast, as it is started before your webapp, it will NOT have access to your webapp’s classes - you will need to extract these classes and put them onto the jetty server’s classpath. Jetty can store http session information into GCloud by enabling the session-store-gcloud module. You will first need to create a project and enable the Google Cloud API: https://cloud.google.com/docs/authentication#preparation. Take note of the project id that you create in this step as you need to supply it in later steps. Before running Jetty, you will need to choose one of the following methods to set up the local environment to enable remote GCloud DataStore communications. Using the GCloud SDK: Ensure you have the GCloud SDK installed: https://cloud.google.com/sdk/?hl=en Use the GCloud tool to set up the project you created in the preparation step: gcloud config set project PROJECT_ID Use the GCloud tool to authenticate a Google account associated with the project created in the preparation step: gcloud auth login ACCOUNT Using environment variables Define the environment variable GCLOUD_PROJECT with the project id you created in the preparation step. Generate a JSON service account key and then define the environment variable GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/key.json The Google deployment tools will automatically configure the project and authentication information for you. Using some special, composite indexes can speed up session search operations, although it may make write operations slower. By default, indexes will not be used. In order to use them, you will need to manually upload a file that defines the indexes. This file is named index.yaml and you can find it in your distribution in $JETTY_BASE/etc/sessions/gcloud/index.yaml. Follow the instructions here to upload the pre-generated index.yaml file. To enable communication using the GCloud Emulator: Ensure you have the GCloud SDK installed: https://cloud.google.com/sdk/?hl=en Follow the instructions here on how to start the GCloud datastore emulator, and how to propagate the environment variables that it creates to the terminal in which you run Jetty. The session-store-gcloud module provides GCloud support for storing session data. Because the Google Cloud DataStore is not a technology provided by the Eclipse Foundation, when enabling the module you will be prompted to assent to the licenses of the external vendor. As GCloud requires certain Java Commons Logging features to work correctly, Jetty routes these through SLF4J. By default, Jetty implements the SLF4J api, but you can choose a different logging implementation by following the instructions here If you want to use updated versions of the jar files automatically downloaded during the module enablement, you can place them in the associated $JETTY_BASE/lib/ directory and use the --skip-create-files= command line option to prevent errors when starting your server. The $JETTY_BASE/start.d/session-store-gcloud.ini file contains all of the configurable properties for the session-store-gcloud module: jetty.session.gcloud.maxRetries Integer. Default 5. Maximum number of retries to connect to GCloud DataStore to write a session. jetty.session.gcloud.backoffMs Integer in milliseconds. Default 1000. Number of milliseconds between successive attempts to connect to the GCloud DataStore to write a session. jetty.session.gracePeriod.seconds Integer, in seconds. Default 3600. Used during session scavenging. Multiples of this period are used to define how long ago a stored session must have expired before it should be scavenged. jetty.session.savePeriod.seconds Integer, in seconds, default is 0. Whenever a session is accessed by a request, its lastAccessTime and expiry are updated. Even if your sessions are read-mostly, the lastAccessTime and expiry will always change. For heavily-used, read-mostly sessions you can save some time by skipping some writes for sessions for which only these fields have changed (ie no session attributes changed). The value of this property is used to skip writes for these kinds of sessions: the session will only be written out if the time since the last write exceeds the value of this property. You should be careful in the use of this property in clustered environments: if you set too large a value for this property, the session may not be written out sufficiently often to update its expiry time thus making it appear to other nodes that it has expired. Thorough consideration of the maxIdleTime of the session when setting the savePeriod is imperative - it would be undesirable to set a savePeriod that is larger than the maxIdleTime. jetty.session.gcloud.namespace Optional. Sets the namespace for GCloud Datastore to use. If set, partitions the visibility of session data between webapps, which is helpful for multi-tenant deployments. More information can be found here. Configuration of the stored session object and its fields names- You should very rarely, if ever, need to change these defaults. jetty.session.gcloud.model.kind The default is \"GCloudSession\". This is the type of the object that is stored in GCloud. jetty.session.gcloud.model.id The default is \"id\". This is the session id. jetty.session.gcloud.model.contextPath The default is \"contextPath\". This is the canonicalized context path of the context to which the session belongs. jetty.session.gcloud.model.vhost The default is \"vhost\". This is the canonicalized virtual host of the context to which the session belongs. jetty.session.gcloud.model.accessed The default is \"accessed\". This is the current access time of the session. jetty.session.gcloud.model.lastAccessed The default is \"lastAccessed\". This is the last access time of the session. jetty.session.gcloud.model.createTime The default is \"createTime\". This is the time, in ms since the epoch, at which the session was created. jetty.session.gcloud.model.cookieSetTime The default is \"cookieSetTime\". This is the time at which the session cookie was last set. jetty.session.gcloud.model.lastNode The default is \"lastNode\". This is the workerName of the last node to manage the session. jetty.session.gcloud.model.expiry The default is \"expiry\". This is the time, in ms since the epoch, at which the session will expire. jetty.session.gcloud.model.maxInactive The default is \"maxInactive\". This is the session timeout in ms. jetty.session.gcloud.model.attributes The default is \"attributes\". This is a map of all the session attributes. If your chosen persistence technology is slow, it can be helpful to locally cache the session data. The CachingSessionDataStore is a special type of SessionDataStore that locally caches session data, which makes reads faster. It writes-through to your chosen type of SessionDataStore when session data changes. The MemcachedSessionDataMap uses memcached to perform caching of SessionData. To enable it with the Jetty distribution, enable the session-store-cache module, along with your chosen session-store-xxxx module. The $JETTY_BASE/start.d/session-store-cache.ini contains the following configurable properties: jetty.session.memcached.host Default value is localhost. This is the host on which the memcached server resides. jetty.session.memcached.port Default value is 11211. This is the port on which the memcached server is listening. jetty.session.memcached.expirySec Default value 0. This is the length of time in seconds that an item can remain in the memcached cache, where 0 indicates indefinitely. jetty.session.memcached.heartbeats Default value true. Whether the memcached system should generate heartbeats. The standard support for webapps in Jetty will use sessions cached in memory, but not persisted/clustered, with a scavenge for expired sessions that occurs every 10 minutes. If you wish to pare back support for sessions because you know your app doesn’t use them (or use JSPs that use them), then you can do the following: enable the base sessions module and configure the scavenge interval to 0 to prevent scavenging enable the null session cache module to prevent sessions being cached in memory If you wish to do any further minimization, you should consult the Programming Guide. Preferably, your cluster will utilize a sticky load balancer. This will route requests for the same session to the same Jetty instance. In this case, the DefaultSessionCache can be used to keep in-use session objects in memory. You can fine-tune the cache by controlling how long session objects remain in memory with the eviction policy settings. If you have a large number of sessions or very large session objects, then you may want to manage your memory allocation by controlling the amount of time session objects spend in the cache. The EVICT_ON_SESSION_EXIT eviction policy will remove a session object from the cache as soon as the last simultaneous request referencing it exits. Alternatively, the EVICT_ON_INACTIVITY policy will remove a session object from the cache after a configurable amount of time has passed without a request referencing it. If your sessions are very long lived and infrequently referenced, you might use the EVICT_ON_INACTIVITY_POLICY to control the size of the cache. If your sessions are small, or relatively few or stable in number or they are read-mostly, then you might select the NEVER_EVICT policy. With this policy, session objects will remain in the cache until they either expire or are explicitly invalidated. If you have a high likelihood of simultaneous requests for the same session object, then the EVICT_ON_SESSION_EXIT policy will ensure the session object stays in the cache as long as it is needed. Without a sticky load balancer requests for the same session may arrive on any node in the cluster. This means it is likely that the copy of the session object in any SessionCache is likely to be out-of-date, as the session was probably last accessed on a different node. In this case, your choices are to use either the NullSessionCache or to de-tune the DefaultSessionCache. If you use the NullSessionCache all session object caching is avoided. This means that every time a request references a session it must be read in from persistent storage. It also means that there can be no sharing of session objects for multiple requests for the same session: each will have their own independent session object. Furthermore, the outcome of session writes are indeterminate because the Servlet Specification does not mandate ACID transactions for sessions. If you use the DefaultSessionCache, there is a risk that the caches on some nodes will contain out-of-date session information as simultaneous requests for the same session are scattered over the cluster. To mitigate this somewhat you can use the EVICT_ON_SESSION_EXIT eviction policy: this will ensure that the session is removed from the cache as soon as the last simultaneous request for it exits. Again, due to the lack of session transactionality, the ordering outcome of write operations cannot be guaranteed. As the session is cached while at least one request is accessing it, it is possible for multiple simultaneous requests to share the same session object. For various reasons it might not be possible for the SessionDataStore to re-read a stored session. One scenario is that the session stores a serialized object in its attributes, and after a re-deployment there in an incompatible class change. Setting the $JETTY_BASE/start.d/session-cache-hash.ini or $JETTY_BASE/start.d/session-cache-null.ini property jetty.session.removeUnloadableSessions to true will allow the unreadable session to be removed from persistent storage. This can be useful for preventing the scavenger from continually generating errors on the same expired, but un-readable session.","title":"HTTP Session Management","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/session/index.html","titles":[{"text":"HTTP Session Overview","hash":"overview","id":1},{"text":"Terminology","hash":"terminology","id":2},{"text":"Session Modules","hash":"modules","id":3},{"text":"The Base Session Module","hash":"base","id":4},{"text":"Configuration","hash":"configuration","id":5},{"text":"Session Scavenging","hash":"base-scavenge","id":6},{"text":"Modules for HTTP Session Caching","hash":"cache","id":7},{"text":"Caching in Memory","hash":"cache-hash","id":8},{"text":"Configuration","hash":"configuration-2","id":9},{"text":"No Caching","hash":"cache-null","id":10},{"text":"Configuration","hash":"configuration-3","id":11},{"text":"Modules for Persistent HTTP Sessions: File System","hash":"filesystem","id":12},{"text":"Configuration","hash":"configuration-4","id":13},{"text":"Modules for Persistent HTTP Sessions: JDBC","hash":"jdbc","id":14},{"text":"Configuration","hash":"configuration-5","id":15},{"text":"Modules for Persistent HTTP Sessions: MongoDB","hash":"mongo","id":16},{"text":"Configuration","hash":"configuration-6","id":17},{"text":"Modules for Persistent HTTP Sessions: Infinispan","hash":"infinispan","id":18},{"text":"Remote Infinispan Session Module","hash":"infinispan-remote","id":19},{"text":"Configuration","hash":"configuration-7","id":20},{"text":"Remote Infinispan Query Module","hash":"infinispan-remote-query","id":21},{"text":"Embedded Infinispan Session Module","hash":"infinispan-embedded","id":22},{"text":"Configuration","hash":"configuration-8","id":23},{"text":"Embedded Infinispan Query Module","hash":"infinispan-embedded-query","id":24},{"text":"Converting Session Format for Jetty-9.4.13","hash":"converting-session-format-for-jetty-9-4-13","id":25},{"text":"Modules for Persistent HTTP Sessions: Hazelcast","hash":"hazelcast","id":26},{"text":"Remote Hazelcast Clustering","hash":"hazelcast-remote","id":27},{"text":"Configuration","hash":"configuration-9","id":28},{"text":"Embedded Hazelcast Clustering","hash":"hazelcast-embedded","id":29},{"text":"Configuration","hash":"configuration-10","id":30},{"text":"Modules for Persistent HTTP Sessions: Google Cloud DataStore","hash":"gcloud","id":31},{"text":"Preparation","hash":"preparation","id":32},{"text":"Communicating with GCloudDataStore","hash":"communicating-with-gclouddatastore","id":33},{"text":"When Running Jetty Outside of Google Infrastructure","hash":"when-running-jetty-outside-of-google-infrastructure","id":34},{"text":"When Running Jetty Inside of Google Infrastructure","hash":"when-running-jetty-inside-of-google-infrastructure","id":35},{"text":"Configuring Indexes for Session Data","hash":"configuring-indexes-for-session-data","id":36},{"text":"Communicating with the GCloudDataStore Emulator","hash":"communicating-with-the-gclouddatastore-emulator","id":37},{"text":"Enabling the Google Cloud DataStore Module","hash":"enabling-the-google-cloud-datastore-module","id":38},{"text":"Configuration","hash":"configuration-11","id":39},{"text":"Modules for Persistent HTTP Sessions: The L2 Session Data Cache","hash":"memcached","id":40},{"text":"MemcachedSessionDataMap","hash":"memcachedsessiondatamap","id":41},{"text":"Configuration","hash":"configuration-12","id":42},{"text":"Session Scenarios","hash":"usecases","id":43},{"text":"Minimizing Support for Sessions","hash":"minimizing-support-for-sessions","id":44},{"text":"Clustering with a Sticky Load Balancer","hash":"clustering-with-a-sticky-load-balancer","id":45},{"text":"Clustering Without a Sticky Load Balancer","hash":"clustering-without-a-sticky-load-balancer","id":46},{"text":"Handling Corrupted or Unreadable Session Data","hash":"handling-corrupted-or-unreadable-session-data","id":47}]},"38":{"id":38,"text":"Make sure you have read the Jetty architecture section if you are not familiar with the terms used in this section. The Jetty start mechanism is invoked by executing $JETTY_HOME/start.jar, from within a $JETTY_BASE directory, with zero or more command line options: $ cd $JETTY_BASE $ java -jar $JETTY_HOME/start.jar ... The Jetty start mechanism has two main modes of operation: The tool mode, detailed in this section, when it is used as a command line tool to configure the $JETTY_BASE directory by enabling modules, creating sub-directories and files, downloading files, etc. In this mode, the JVM started with java -jar $JETTY_HOME/start.jar performs the specified command and then exits. The start mode, detailed in this section, when it is used to start the JVM that runs Jetty with the specified configuration. In this mode, the JVM started with java -jar $JETTY_HOME/start.jar starts Jetty and does not exit until stopped, for example by hitting Ctrl+C on the terminal. Refer to the Jetty start mechanism reference section for the complete list of the available command line options. You want to use the Jetty start mechanism to configure your $JETTY_BASE and then to start Jetty. Within the Jetty start mechanism, the source of configurations is layered in this order, from higher priority to lower priority: The command line options. The $JETTY_BASE directory, and its files. The directory specified with the --add-config-dir option, and its files. The $JETTY_HOME directory, and its files. You can enable Jetty modules persistently across restarts with the --add-modules command: $ java -jar $JETTY_HOME/start.jar --add-modules=server,http The Jetty start mechanism will look for the specified modules following the order specified above. In the common case (without a --add-config-dir directory), it will look in $JETTY_BASE/modules/ first and then in $JETTY_HOME/modules/. Since the server and http modules are standard Jetty modules, they are present in $JETTY_HOME/modules/ and loaded from there. When you enable a Jetty module, the Jetty start mechanism: Creates the correspondent $JETTY_BASE/start.d/*.ini module configuration file. The content of these *.ini files is copied from the [ini-template] section of the correspondent *.mod file. Executes the directives specified in [files] section (if present) of the *.mod file. This may simply create a file or a directory, or download files from the Internet. This step is performed transitively for all module dependencies. For example, enabling the server and http modules results in the $JETTY_BASE directory to have the following structure: $JETTY_BASE ├── resources │ └── jetty-logging.properties └── start.d ├── http.ini └── server.ini The $JETTY_BASE/resources/jetty-logging.properties is created by the [files] directives of the logging-jetty module, which is a transitive dependency of the server module. A module is enabled because the correspondent $JETTY_BASE/start.d/*.ini file contains a --module= directive. Commenting out the --module= directive effectively disables the module. Deleting the correspondent $JETTY_BASE/start.d/*.ini file also disables the module. You can now edit the $JETTY_BASE/start.d/*.ini configuration files, typically by uncommenting properties to change their default value. The $JETTY_BASE/start.d/*.ini configuration file may be missing, if the correspondent module is a transitive dependency. You can easily generate the configuration file by explicitly enabling the module, for example to generate the $JETTY_BASE/start.d/logging-jetty.ini configuration file you would issue the following command (the module order does not matter): $ java -jar $JETTY_HOME/start.jar --add-modules=server,http,logging-jetty The $JETTY_BASE directory structure is now: $JETTY_BASE ├── resources │ └── jetty-logging.properties └── start.d ├── http.ini ├── logging-jetty.ini └── server.ini You want to edit the $JETTY_BASE/start.d/*.ini configuration files so that the configuration is applied every time Jetty is started (or re-started). For example, $JETTY_BASE/start.d/http.ini contains the following property, commented out: http.ini # jetty.http.port=8080 You can change the clear-text HTTP port Jetty listens to by uncommenting that property and changing its value: http.ini jetty.http.port=9876 When Jetty is started (or re-started) this configuration is applied and Jetty will listen for clear-text HTTP/1.1 on port 9876. You can also enable a module transiently, only for the current execution of the java -jar $JETTY_HOME/start.jar command. If you have an empty $JETTY_BASE, the following command enables the server and http modules, but does not create any $JETTY_BASE/start.d/*.ini files. $ java -jar $JETTY_HOME/start.jar --module=server,http Since there are no $JETTY_BASE/start.d/*.ini files, you can only customize the properties via the command line, for example: $ java -jar $JETTY_HOME/start.jar --module=server,http jetty.http.port=9876 Enabling modules on the command line is useful to verify that the modules work as expected, or to try different configurations. It is possible to enable some module persistently via --add-modules and some other module transiently via --module. Remember that once the current execution terminates, the modules enabled transiently on the command line via --module and their configuration are not saved and will not be enabled on the next execution (unless you specify them again on the command line). Refer to the custom module section for the details about how to create your own modules. You can add your own modules by adding a $JETTY_BASE/modules/*.mod file. For example, you may want to add a Postgres JDBC driver to the server class-path, to avoid that each deployed web application bring its own version. This allows you to control the exact Postgres JDBC driver version for all web applications. Create the $JETTY_BASE/modules/postgresql.mod file: postgresql.mod [description] Postgres JDBC Driver Module [lib] lib/postgresql-${postgresql-version}.jar [files] maven://org.postgresql/postgresql/${postgresql-version}|lib/postgresql-${postgresql-version}.jar [ini] postgresql-version?=42.6.0 [ini-template] ## Postgres JDBC version. # postgresql-version=42.6.0 Then enable it: $ java -jar $JETTY_HOME/start.jar --add-modules=postgresql Enabling the postgresql module will execute the [files] directive (downloading the *.jar file from Maven Central if not already present) and create the $JETTY_BASE/start.d/postgresql.ini with the content of the [ini-template] section. The [lib] section ensures that the specified file is in the server class-path when Jetty is started. You can display the Jetty configuration to verify that the server class-path is correct. Using a custom Jetty module, you can customize the JVM startup options. This is useful if you need to start Jetty and want to specify JVM options such as: -Xmx, to specify the max heap size -Xlog:gc, to specify the GC log file and options -javaagent, to specify Java agents -XX: options, for example to specify the GC implementation --enable-preview, to enable Java preview features Start by creating $JETTY_BASE/modules/jvm.mod: jvm.mod [description] JVM Options Module [exec] -Xmx1g -Xlog:gc*,gc+stats=off:file=logs/gc.log:time,level,tags Enable it: $ java -jar $JETTY_HOME/start.jar --add-modules=jvm Since the module defines an [exec] section, it will fork another JVM when Jetty is started. This means that when you start Jetty, there will be two JVMs running: one created by you when you run java -jar $JETTY_HOME/start.jar, and another forked by the Jetty start mechanism with the JVM options you specified (that cannot be applied to an already running JVM). Again, you can display the JVM command line to verify that it is correct. The second JVM forked by the Jetty start mechanism when one of the modules requires forking, for example a module that contains an [exec] section, may not be desirable, and may be avoided as explained in this section. Once you have enabled and configured the $JETTY_BASE, you can display the configuration to verify that it is correct. Using the standard server and http Jetty modules, and the postgresql and jvm custom Jetty module defined above, you obtain: $ java -jar $JETTY_HOME/start.jar --list-config Enabled Modules: ---------------- 0) resources transitive provider of resources for logging-jetty 1) logging/slf4j transitive provider of logging/slf4j for logging-jetty dynamic dependency of logging-jetty 2) logging-jetty transitive provider of logging for threadpool transitive provider of logging for bytebufferpool transitive provider of logging for server 3) bytebufferpool transitive provider of bytebufferpool for server ini template available with --add-modules=bytebufferpool 4) threadpool transitive provider of threadpool for server ini template available with --add-modules=threadpool 5) jvm ${jetty.base}/start.d/jvm.ini 6) server ${jetty.base}/start.d/server.ini 7) http ${jetty.base}/start.d/http.ini 8) postgresql ${jetty.base}/start.d/postgresql.ini JVM Version & Properties: ------------------------- java.home = /path/to/java.home java.vm.vendor = Eclipse Adoptium java.vm.version = 21.0.3+9-LTS java.vm.name = OpenJDK 64-Bit Server VM java.vm.info = mixed mode, sharing java.runtime.name = OpenJDK Runtime Environment java.runtime.version = 21.0.3+9-LTS java.io.tmpdir = /path/to/jetty.home-base/work user.dir = /path/to/jetty.home-base user.language = en user.country = AU Jetty Version & Properties: --------------------------- jetty.version = 12.0.11-SNAPSHOT jetty.tag.version = jetty-12.0.11-SNAPSHOT jetty.build = 8b506b4f282f20dbb4b6c960f52ef3e2a658a515 jetty.home = /path/to/jetty.home jetty.base = /path/to/jetty.home-base Config Search Order: -------------------- ${jetty.base} -> /path/to/jetty.home-base ${jetty.home} -> /path/to/jetty.home Forked JVM Arguments: --------------------- -Xmx1g -Xlog:gc*,gc+stats=off:file=logs/gc.log:time,level,tags System Properties: ------------------ (no system properties specified) Properties: Jetty ----------------- java.version = 21.0.3 java.version.major = 21 java.version.micro = 3 java.version.minor = 0 java.version.platform = 21 jetty.base = /path/to/jetty.home-base jetty.base.uri = file:///path/to/jetty.home-base jetty.home = /path/to/jetty.home jetty.home.uri = file:///path/to/jetty.home jetty.webapp.addHiddenClasses = org.eclipse.jetty.logging.,${jetty.home.uri}/lib/logging/,org.slf4j. postgresql-version = 42.6.0 runtime.feature.alpn = true slf4j.version = 2.0.12 Classpath: Jetty ---------------- Version Information on 9 entries in the classpath. Note: order presented here is how they would appear on the classpath. changes to the --module=name command line options will be reflected here. 0: (dir) | ${jetty.base}/resources 1: 2.0.12 | ${jetty.home}/lib/logging/slf4j-api-2.0.12.jar 2: 12.0.11-SNAPSHOT | ${jetty.home}/lib/logging/jetty-slf4j-impl-12.0.11-SNAPSHOT.jar 3: 12.0.11-SNAPSHOT | ${jetty.home}/lib/jetty-http-12.0.11-SNAPSHOT.jar 4: 12.0.11-SNAPSHOT | ${jetty.home}/lib/jetty-server-12.0.11-SNAPSHOT.jar 5: 12.0.11-SNAPSHOT | ${jetty.home}/lib/jetty-xml-12.0.11-SNAPSHOT.jar 6: 12.0.11-SNAPSHOT | ${jetty.home}/lib/jetty-util-12.0.11-SNAPSHOT.jar 7: 12.0.11-SNAPSHOT | ${jetty.home}/lib/jetty-io-12.0.11-SNAPSHOT.jar 8: 42.6.0 | ${jetty.base}/lib/postgresql-42.6.0.jar Active XMLs: Jetty ------------------ ${jetty.home}/etc/jetty-bytebufferpool.xml ${jetty.home}/etc/jetty-threadpool.xml ${jetty.home}/etc/jetty.xml ${jetty.home}/etc/jetty-http.xml Note how the configuration displayed above includes: In the list of enabled modules, the postgresql and jvm modules In the list of JVM arguments, those specified by the jvm module In the server class-path, the *.jar file specified by the postgresql module The Jetty start mechanism can display a full JVM command line that will start Jetty with the configuration you specified, with the --dry-run option: $ java -jar $JETTY_HOME/start.jar --dry-run The full JVM command line generated by --dry-run can be split in various parts that can be used individually, for example in scripts. Furthermore, Jetty modules may specify the --exec option that will fork a second JVM to start Jetty, which may not be desirable. Some option, such as --jpms, imply --exec, as it won’t be possible to modify the module-path in the already started JVM. To start Jetty without forking a second JVM, the --dry-run option can be used to generate a command line that is then executed so that starting Jetty only spawns one JVM. You can use the --dry-run option as explained below to avoid forking a second JVM when using modules that have the [exec] section, or the --exec option, or when using the --jpms option. For example, using the --dry-run option with the jvm.mod introduced in this section produces the following command line: $ java -jar $JETTY_HOME/start.jar --dry-run /path/to/java.home/bin/java \\ -Djava.io.tmpdir=/path/to/jetty.home-base/work \\ -Djetty.home=/path/to/jetty.home \\ -Djetty.base=/path/to/jetty.home-base \\ -Xmx1g \\ '-Xlog:gc*,gc+stats=off:file=logs/gc.log:time,level,tags' \\ --class-path \\ /path/to/jetty.home-base/resources:/path/to/jetty.home/lib/logging/slf4j-api-2.0.12.jar:/path/to/jetty.home/lib/logging/jetty-slf4j-impl-12.0.11-SNAPSHOT.jar:/path/to/jetty.home/lib/jetty-http-12.0.11-SNAPSHOT.jar:/path/to/jetty.home/lib/jetty-server-12.0.11-SNAPSHOT.jar:/path/to/jetty.home/lib/jetty-xml-12.0.11-SNAPSHOT.jar:/path/to/jetty.home/lib/jetty-util-12.0.11-SNAPSHOT.jar:/path/to/jetty.home/lib/jetty-io-12.0.11-SNAPSHOT.jar \\ org.eclipse.jetty.xml.XmlConfiguration \\ java.version=21.0.3 \\ jetty.base=/path/to/jetty.home-base \\ jetty.base.uri=file:///path/to/jetty.home-base \\ jetty.home=/path/to/jetty.home \\ jetty.home.uri=file:///path/to/jetty.home \\ jetty.webapp.addHiddenClasses=org.eclipse.jetty.logging.,file:///path/to/jetty.home/lib/logging/,org.slf4j. \\ runtime.feature.alpn=true \\ slf4j.version=2.0.12 \\ /path/to/jetty.home/etc/jetty-bytebufferpool.xml \\ /path/to/jetty.home/etc/jetty-threadpool.xml \\ /path/to/jetty.home/etc/jetty.xml \\ /path/to/jetty.home/etc/jetty-http.xml You can then run the generated command line. For example, in the Linux bash shell you can run it by wrapping it into $(...): $ $(java -jar $JETTY_HOME/start.jar --dry-run) The --dry-run option is quite flexible and below you can find a few examples of how to use it to avoid forking a second JVM, or generating scripts or creating an arguments file that can be passed to (a possibly alternative) java executable. To display the java executable used to start Jetty: $ java -jar $JETTY_HOME/start.jar --dry-run=java /path/to/java.home/bin/java To display the JVM options: $ java -jar $JETTY_HOME/start.jar --dry-run=opts -Djava.io.tmpdir=/path/to/jetty.home-base/work \\ -Djetty.home=/path/to/jetty.home \\ -Djetty.base=/path/to/jetty.home-base \\ -Xmx1g \\ '-Xlog:gc*,gc+stats=off:file=logs/gc.log:time,level,tags' To display the JVM class-path: $ java -jar $JETTY_HOME/start.jar --dry-run=path --class-path \\ /path/to/jetty.home-base/resources:\\ /path/to/jetty.home/lib/logging/slf4j-api-2.0.12.jar:\\ /path/to/jetty.home/lib/logging/jetty-slf4j-impl-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/jetty-http-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/jetty-server-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/jetty-xml-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/jetty-util-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/jetty-io-12.0.11-SNAPSHOT.jar To display the JVM class-path and module-path, if you want to start Jetty using JPMS with the --jpms option: $ java -jar $JETTY_HOME/start.jar --jpms --dry-run=path --module-path \\ /path/to/jetty.home/lib/jetty-io-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/logging/slf4j-api-2.0.12.jar:\\ /path/to/jetty.home/lib/jetty-http-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/logging/jetty-slf4j-impl-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/jetty-xml-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/jetty-server-12.0.11-SNAPSHOT.jar:\\ /path/to/jetty.home/lib/jetty-util-12.0.11-SNAPSHOT.jar \\ --class-path \\ /path/to/jetty.home-base/resources \\ --add-modules \\ ALL-MODULE-PATH To display the JVM main class: $ java -jar $JETTY_HOME/start.jar --dry-run=main org.eclipse.jetty.xml.XmlConfiguration To display the JVM main class when starting Jetty using JPMS: $ java -jar $JETTY_HOME/start.jar --jpms --dry-run=main --module org.eclipse.jetty.xml/org.eclipse.jetty.xml.XmlConfiguration The main class is typically Jetty’s XmlConfiguration class that accepts, as program arguments, a list of properties and a list of Jetty XML files to process. The Jetty XML files compose together the Jetty components that are then configured with the values from the command line properties. To display the program arguments passed to the main class: $ java -jar $JETTY_HOME/start.jar --dry-run=args java.version=21.0.3 \\ jetty.base=/path/to/jetty.home-base \\ jetty.base.uri=file:///path/to/jetty.home-base \\ jetty.home=/path/to/jetty.home \\ jetty.home.uri=file:///path/to/jetty.home \\ jetty.webapp.addHiddenClasses=org.eclipse.jetty.logging.,file:///path/to/jetty.home/lib/logging/,org.slf4j. \\ runtime.feature.alpn=true \\ slf4j.version=2.0.12 \\ /path/to/jetty.home/etc/jetty-bytebufferpool.xml \\ /path/to/jetty.home/etc/jetty-threadpool.xml \\ /path/to/jetty.home/etc/jetty.xml \\ /path/to/jetty.home/etc/jetty-http.xml Note how the program arguments are a list of properties in the form = and a list of Jetty XML files. The various parts of the full JVM command line can be combined to leverage the arguments file feature (that is, specify the JVM options in a file rather than on the command line) that is built-in in the java executable: $ java -jar $JETTY_HOME/start.jar --dry-run=opts,path,main,args > /tmp/jvm_cmd_line.txt $ /some/other/java @/tmp/jvm_cmd_line.txt Using --dry-run=opts,path,main,args can be used to avoid that the Jetty start mechanism forks a second JVM when using modules that require forking: $ java $(java -jar $JETTY_HOME/start.jar --dry-run=opts,path,main,args) The output of different --dry-run executions can be creatively combined in a shell script: $ OPTS=$(java -jar start.jar --dry-run=opts,path) $ MAIN=$(java -jar start.jar --dry-run=main) $ ARGS=$(java -jar start.jar --dry-run=args) $ java $OPTS -Dextra=opt $MAIN $ARGS extraProp=value extra.xml After you have configured the $JETTY_BASE directory, as explained in this section, you can start Jetty as a standalone server. In the start mode, the Jetty start mechanism computes a JVM command line with JVM options, system properties, class-path, module-path, main class and program arguments, and then executes it, forking a new JVM if necessary. The Jetty start mechanism performs these steps: Loads all the Jetty modules files (that have extension *.mod) from the modules/ subdirectory of each configuration source directory (see this section for the list of configuration sources). In this way, a Jetty module graph can be built in memory, where the module dependencies form the edges of the graph and each node contains the metadata information declared by each module (for example, the libraries that it needs, the XML files to process, and so on), in preparation for the next step. Reads the Jetty module configuration files (that have extension *.ini) from the start.d/ subdirectory of each configuration source directory and from the command line. This step produces a list of enabled modules; for each enabled module all its dependencies are transitively resolved by navigating the graph built in the previous steps. Processes the list of enabled (explicitly and transitively) modules, gathering the list of libraries to add to the class-path, the JPMS directives to add to the command line, the properties and XML files to add as program arguments, etc., so that a full JVM command line can be generated. Executes the command line, either in-JVM or by forking a second JVM (if the --exec option is present or implied by other options such as --jpms), and waits for the JVM, or the forked JVM, to exit. When the Jetty server is started in-JVM, the server class-path gathered by processing the enabled modules is organized in a URLClassLoader, the Jetty Start ClassLoader, that is a child of the System ClassLoader: The System ClassLoader only has $JETTY_HOME/start.jar in its class-path, since the JVM was started with java -jar $JETTY_HOME/start.jar. The Jetty Start ClassLoader has in its class-path the *.jar files gathered by processing the enabled modules, typically from $JETTY_HOME/lib/jetty-*.jar, but possibly also from $JETTY_BASE/lib/*.jar if custom modules extend the server class-path with their own *.jar files. When the Jetty server is started in a forked JVM, there will be two JVMs: one started by you with java -jar $JETTY_HOME/start.jar and one forked by the Jetty start mechanism. In the forked JVM, the System ClassLoader has the server class-path and/or module-path in its class-path, since the forked JVM is started with java --class-path $JETTY_HOME/lib/jetty-server-.jar:...: It is worth mentioning that there are two standard Jetty modules that allow you to easily add entries to the Jetty server class-path: The resources module, which adds the $JETTY_BASE/resources directory to the server class-path. This is useful if you have third party libraries that lookup resources from the class-path: just put those resources in the $JETTY_BASE/resources/ directory. Logging libraries often perform class-path lookup of their configuration files (for example, log4j.properties, log4j.xml, logging.properties, and logback.xml), so $JETTY_BASE/resources/ is the ideal place to add those files. The the ext module, that adds all the *.jar files under the $JETTY_BASE/lib/ext/ directory, and subdirectories recursively, to the server class-path. On one hand, the ext module provides a handy place to put third party libraries and their dependencies; on the other hand, the $JETTY_BASE/lib/ext/ directory may become a confused mixture of many *.jar files from different third party libraries. Prefer to group third party libraries and their dependencies into their own directories using custom modules, or at least group them into $JETTY_BASE/lib/ext/ subdirectories such as $JETTY_BASE/lib/ext/util/ or $JETTY_BASE/lib/ext/acme/. The Jetty start mechanism eventually invokes, by default, main class org.eclipse.jetty.xml.XmlConfiguration, passing properties and Jetty XML files as program arguments. The Jetty XML files are nothing more than Java code in XML format. The XML files are processed to instantiate Jetty components such as org.eclipse.jetty.server.Server or org.eclipse.jetty.util.ssl.SslContextFactory$Server. The components are then assembled together to provide the configured Jetty features. The Jetty XML files are parametrized using properties, and a property is just a name/value pair. This parametrization of the XML files allows an XML file that resides in $JETTY_HOME/etc/ to declare a property such as jetty.http.port, and allow this property to be set in a $JETTY_BASE/start.d/http.ini file, so that you don’t need to change the XML files in $JETTY_HOME, but only change files in your $JETTY_BASE. You can write your own custom modules with your own Jetty XML files, and your own properties, to further customize Jetty. When Jetty is started, the Jetty components that you have configured by enabling Jetty modules are assembled and started. If you have started Jetty from a terminal, you can exit the Jetty JVM by hitting Ctrl+C on the same terminal. Similarly, from a different terminal, you can exit the Jetty JVM using kill -INT or kill -TERM . In the three cases above, the JVM is exited, but by default Jetty components are not stopped. If you want to stop the Jetty components, to stop Jetty more gracefully, you can start Jetty with this property: $ java -jar $JETTY_HOME/start.jar jetty.server.stopAtShutdown=true This property can also be set in $JETTY_BASE/start.d/server.ini so that it is persistently configured across Jetty restarts (see also the server module). The jetty.server.stopAtShutdown property configures a JVM shutdown hook that is run, stopping the Server instance, when the JVM exits. Obviously, the JVM can also be stopped with kill -KILL that exits the process abruptly without running the JVM shutdown hooks. You can configure a Jetty server so that it can be stopped by remote clients using a command sent through a TCP socket. You can start Jetty with the following properties: stop.host, the host name Jetty will bind to listen for stop commands. Defaults to 127.0.0.1 which means that the stop command can be issued only clients that run on the same host as Jetty. stop.port, the port number Jetty will listen to for stop commands. Defaults to -1, which means that Jetty will not listen to any port. stop.key, the password to verify when a stop command is received. Defaults to a password that is randomly generated and printed when Jetty starts. $ java -jar $JETTY_HOME/start.jar stop.port=8181 STOP.KEY=1ihfs43wtxwjk 2024-06-05 07:38:33.614:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:33.631:INFO :oejs.AbstractConnector:main: Started ServerConnector@7cc0cdad{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} 2024-06-05 07:38:33.641:INFO :oejs.Server:main: Started oejs.Server@27ce24aa{STARTING}[12.0.11-SNAPSHOT,sto=5000] @561ms In the example above, Jetty is started with just the stop.port property, and the stop.key is printed on the terminal when Jetty starts. You can choose your own stop.key, but make sure it’s a strong password. A remote client can now use the Jetty start mechanism to stop the remote Jetty server: $ java -jar $JETTY_HOME/start.jar --stop stop.port=8181 stop.key= Note the --stop command along with the stop.port and stop.key properties. The stop.key must be the same as the one of remote Jetty server, either the one you chose, or the one printed on the terminal when Jetty starts. Remote clients can wait for the remote Jetty server to shut down by specifying the stop.wait property with the number of seconds to wait: $ java -jar $JETTY_HOME/start.jar --stop stop.port=8181 stop.key= stop.wait=15 If the time specified elapses, without the confirmation that the remote Jetty server stopped, then the --stop command exits with a non-zero return code. The steps performed by the Jetty start mechanism are logged by the StartLog class, that outputs directly, by default, to System.err. This is necessary to avoid that the Jetty start mechanism depend on logging libraries that may clash with those defined by Jetty logging modules, when Jetty is started in-VM. This section is about the logging performed by the Jetty start mechanism before it configures and starts Jetty. See the logging section for information about logging when Jetty starts. You can enable DEBUG level logging with the --debug command line option, for both the tool and start modes: $ java -jar $JETTY_HOME/start.jar --debug ... You can send the start log output to a file, by default relative to $JETTY_BASE, with the --start-log-file= option: $ java -jar $JETTY_HOME/start.jar --debug --start-log-file=start.log ... This is useful for capturing startup issues where the Jetty-specific logger has not yet kicked in due to a possible startup configuration error. Usage: $ java -jar $JETTY_HOME/start.jar [command] [options...] Commands can be of two types: report commands or configuration commands. Commands execute and then exit the JVM. Options can be specified with or without commands. When no command is specified, Jetty is started with the given options. Report Commands: ---------------- --help Prints this help / usage information. --version Prints the version information for Jetty and dependent jars, then exits. --list-classpath Prints the class-path (or module-path) information that will be used to start Jetty. --list-config Lists the resolved configuration that will be used to start Jetty. Output includes: o Enabled Jetty modules o Java environment o Jetty environment o Config file search order o JVM arguments o System properties o Properties o Java class-path or module-path o XML configuration files --list-modules Lists the modules defined in ${jetty.base}/modules/*.mod and then in ${jetty.home}/modules/*.mod. --list-modules=(,)* Lists the modules by tag. Use '*' for all tags. Prefix a tag with '-' to exclude the tag. The special tag \"internal\" is always excluded unless it is explicitly included. --list-all-modules Lists all modules. --show-modules=(,)* Shows the detail of the listed modules, including dependencies, tags, libraries and XMLs. --stop Sends a stop signal to the running Jetty instance. The running Jetty instance must have been started with a stop.port= property and the --stop command must be executed with the same property. --dry-run Prints the command line that start.jar generates, in a format usable by a POSIX compliant shell, then exits. This may be used to generate command lines into scripts: $ java -jar start.jar --dry-run > jetty.sh --dry-run=(,)* Prints specific parts of the command line in a format usable by a POSIX compliant shell. The parts are: o \"java\" - the JVM to run o \"opts\" - the JVM options (e.g. -D, -X and -XX flags) o \"path\" - the JVM class-path and/or the JPMS module-path o \"main\" - the main class to run o \"args\" - the arguments passed to the main class o \"envs\" - the generated XML files to create the environments Configure Commands: ------------------- --add-modules=(,)* Adds the given modules to the list of modules enabled at when Jetty starts. Transitive dependencies are followed and dependent modules may also explicitly added. Modules are added by creating an *.ini file in the ${jetty.base}/start.d/ directory. The *.ini file contains the --module option that enables the module, and any other option defined in the module's [ini-template] section. If the *.ini file specifies properties, these may be overridden by specifying the same properties on the command line. If a module is transitively enabled, its *.ini file will not be generated. To generate the *.ini file, the module must be explicitly listed in the --add-modules=... command. This option replaces the deprecated --add-to-start and --add-to-startd commands. --create-start-d Creates a ${jetty.base}/start.d directory. If the ${jetty.base}/start.ini file exists, then it is moved into the ${jetty.base}/start.d/ directory. Using a ${jetty.base}/start.d/ directory is the default and this option is only needed to either force the creation of the ${jetty.base}/start.d/ directory, or to move a ${jetty.base}/start.ini file to ${jetty.base}/start.d/. --create-start-ini Creates a ${jetty.base}/start.ini file. If a ${jetty.base}/start.d/ directory exists, then all the contained *.ini files are concatenated into the ${jetty.base}/start.ini file. --update-ini Scans all the ${jetty.base}/start.d/*.ini files and updates any property with values specified on the command line. For example: $ java -jar ${jetty.host}/start.jar --update-ini jetty.http.port=8888 --create-files Creates any missing files that are required by enabled modules, as specified in their [files] section. This may download a file from the network if a HTTP URI is specified in the [files] section. --write-module-graph= Creates a graphviz *.dot file of the module graph as it is configured for the current ${jetty.base}. See https://graphviz.org/ for details on how to post-process this file into the output best suited for your needs. Options: -------- --modules=(,)* Enables a module for this execution. To enable a module for all future executions, use the --add-modules command. Note: this option is used in the ${jetty.base}/start.ini file or in ${jetty.base}/start.d/*.ini files created by the --add-modules command. --libs= Adds the specified class-path entries to the the server class-path (or module-path). --files=| --download=| Downloads a file from the given URI, if it does not already exist at the given location. Note: the location is always relative to ${jetty.base}. You might need to escape the pipe \"\\|\" to use it in some shell environments. Supported schemes: http: download from http (unsecure) website https: download from https (secure) website maven: download from maven repository system first checking local repository see `maven.local.repo` field below then global repository see `maven.repo.uri` field below basehome: download relative path from active configured jetty dirs (eg: `${jetty.base}` and any `--include-jetty-dir` and finally checking the `${jetty.home}`) --exec Executes the generated command line in a forked JVM (see the --dry-run command). This can be used when ${jetty.base}/start.d/*.ini files contain -D, -X or -XX arguments, but creates an extra JVM process. --exec-properties= Assigns a fixed name to the file used to transfer properties to the sub process. This allows the generated properties file to be saved and reused. Without this option, a temporary file is used. --commands= Uses each line of the specified file as arguments on the JVM command line. --jpms Starts Jetty in JPMS mode in a forked JVM (see also the --dry-run command). The library *.jar files are set on the forked JVM module-path (rather than the forked JVM class-path), while directories are set on the forked JVM class-path. The main class is specified with the JPMS option --module /. --debug Enables debug output of the startup execution. Note: this does not setup debug logging for Jetty itself, only for the startup execution. If you want debug logging for Jetty, configure one of the available logging modules using the --add-modules command. --start-log-file= A filename, relative to ${jetty.base}, where all startup output will be sent. This is useful for capturing startup issues when the Jetty logging module has not yet started due to configuration errors. --allow-insecure-http-downloads Allow the use of insecure `http://` scheme for content download. --approve-all-licenses Approves all license questions from modules that have particular license requirements. Useful for enabling modules from a script, so that it does not require user interaction. --skip-create-files=(,)* --skip-file-validation=(,)* Disables the creation of files as specified by the [files] section of the specified modules. Useful if a logging module specifies a *.properties config file, but you want to use that module with an *.xml config file instead. --add-config-dir= --include-jetty-dir= Includes the specified directory as a configuration source. This directory behaves similarly to ${jetty.base} but sits at a layer between ${jetty.home} and ${jetty.base}. Useful when you want to apply a common \"corporate\" configuration to all specific ${jetty.base} directories without having to modify ${jetty.home}. jetty.home= Sets the ${jetty.home} directory. By default it is resolved from the start.jar file path. jetty.base= Sets the ${jetty.base} directory. By default it is resolved from the current directory path. stop.host= Used with the --stop command. Specifies the host where the Jetty server to stop is running (defaults to 127.0.0.1). stop.port= Used with the --stop command. Specifies the port to use to contact the Jetty server to stop. stop.key= Used with the --stop command. The passphrase required to stop the Jetty server. stop.wait= Used with the --stop command. The time, in seconds, to wait for confirmation that the running Jetty server has stopped. If not specified, the stopper will not wait. maven.local.repo= The maven local repository directory to find and store maven artifacts. Defaults to: 1. Environment variable `JETTY_MAVEN_LOCAL_REPO` 2. Environment variable `MAVEN_LOCAL_REPO` 3. Directory ${home}/.m2/repository maven.repo.uri= The base URL to use to download Maven dependencies. Defaults to: https://repo1.maven.org/maven2/. = Specifies a property value that overrides the same property defined in a ${jetty.base}/start.d/*.ini file, or in the [ini] section of a *.mod file. = Sets the property value unconditionally. += Appends the given value to the existing value. ?= Sets the property value only if it is not already set. -D= Specifies a system property, as well as a start property. Note: this is a program argument that is interpreted and added to the existing JVM system properties. Specifies a Jetty XML file relative to ${jetty.base}. This file is in addition to the Jetty XML files resolved from the [xml] sections of the enabled modules.","title":"Jetty Start Mechanism","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/start/index.html","titles":[{"text":"Configuring $JETTY_BASE","hash":"configure","id":1},{"text":"Enabling Modules","hash":"configure-enable","id":2},{"text":"Disabling Modules","hash":"configure-disable","id":3},{"text":"Editing *.ini Files","hash":"configure-edit-ini","id":4},{"text":"Enabling Modules on Command Line","hash":"configure-enable-command-line","id":5},{"text":"Adding Your Own Modules","hash":"configure-custom-module","id":6},{"text":"Custom Module with JVM Options","hash":"configure-custom-module-exec","id":7},{"text":"Displaying the Configuration","hash":"configure-display","id":8},{"text":"Displaying the JVM Command Line","hash":"configure-dry-run","id":9},{"text":"Starting Jetty","hash":"start","id":10},{"text":"Server Class-Path","hash":"start-class-path","id":11},{"text":"Assembling Jetty Components","hash":"start-xml","id":12},{"text":"Stopping Jetty","hash":"stop","id":13},{"text":"Stopping Jetty from Remote","hash":"stop-remote","id":14},{"text":"Start Mechanism Logging","hash":"start-mechanism-logging","id":15},{"text":"Usage Reference","hash":"reference","id":16}]},"39":{"id":39,"text":"Jetty modules are proper JPMS modules: each Jetty module has a module-info.class file. This makes possible to run Jetty from the module-path, rather than the class-path. To start Jetty on the module-path rather than the class-path, it is enough to add the --jpms option to the command line, for example: $ java -jar $JETTY_HOME/start.jar --jpms The --jpms option implies the --exec option. When running on the module-path using the --jpms option, the Jetty start mechanism will fork a second JVM passing it the right JVM options to run on the module-path. Therefore, you will have two JVMs running: one that runs start.jar and one that runs Jetty on the module-path. Forking a second JVM may be avoided as explained in this section. When Jetty is started in JPMS mode, all JPMS modules in the module-path are added to the set of JPMS root modules through the JVM option --add-modules ALL_MODULE_PATH. For a *.jar file that is not a JPMS module, but is on the module-path, the JVM will assume internally it is an automatic JPMS module, with a JPMS module name derived from the *.jar file name. Rather than adding the --jpms option to the command line, you can use a custom Jetty module to centralize your JPMS configuration, where you can specify additional JPMS directives. Create the $JETTY_BASE/modules/jpms.mod file: jpms.mod [description] JPMS Configuration Module [ini] --jpms [jpms] # Additional JPMS configuration. The [ini] section with --jpms is equivalent to passing the --jpms option to the command line (see also this section). The [jpms] section allows you to specify additional JPMS configuration, for example additional --add-modules options, or --add-opens options, etc. (see also this section). Then enable it: $ java -jar $JETTY_HOME/start.jar --add-modules=jpms Now you can start Jetty without extra command line options, and it will start in JPMS mode because you have enabled the jpms module. Web applications may need additional services from the Servlet Container, such as JDBC DataSource references or JTA UserTransaction references. For example, for JDBC it is typical to store, in JNDI, a reference to the connection pool’s DataSource or directly a reference to the JDBC driver’s DataSource (for example, org.postgresql.ds.PGConnectionPoolDataSource). Jetty needs to be able to instantiate those classes and therefore needs to be able to load those classes and all their super-classes, among which includes javax.sql.DataSource. When Jetty runs on the class-path, this is easily achieved by using a custom module as explained in this section. However, when running on the module-path, things are quite different. When Jetty tries to load, for example, class org.postgresql.ds.PGConnectionPoolDataSource, it must be in a JPMS module that is resolved in the run-time module graph. Furthermore, any dependency, for example classes from the java.sql JPMS module, must also be in a module present in the resolved module graph. Thanks to the fact that when Jetty starts in JPMS mode the --add-modules ALL_MODULE_PATH option is added to the JVM command line, every *.jar file in the module-path is also present in the module graph. There are now two cases for the postgresql-.jar file: either it is a proper JPMS module, or it is an automatic JPMS module (either an explicit automatic JPMS module with the Automatic-Module-Name attribute in the manifest, or an implicit automatic JPMS module whose name is derived from the *.jar file name). If the postgresql-.jar file is a proper JPMS module, then there is nothing more that you should do: the postgresql-.jar file is in the module-path, and all the modules in the module-path are in the module graph, and any dependency declared in the module-info.class will be added to the module graph. Otherwise, postgresql-.jar file is an automatic module, and will likely have a dependency on the JDK-bundled java.sql JPMS module. However, the java.sql JPMS module is not in the module graph, because automatic modules do not have a way to declare their dependencies. For this reason, you have to manually add the java.sql dependency to the module graph. Using the postgresql.mod introduced in this section as an example, modify your custom module in the following way: postgresql.mod ... [jpms] add-modules: java.sql The [jpms] section is only used when Jetty is started on the module-path.","title":"Starting Jetty using JPMS","component":"jetty","version":"12","name":"start-jpms","url":"/docs/jetty/12/operations-guide/start/start-jpms.html","titles":[{"text":"Advanced JPMS Configuration","hash":"advanced","id":1}]},"40":{"id":40,"text":"There are many cases where you might need to provide credentials such as usernames and passwords to authenticate your access to certain services, for example KeyStore and TrustStore passwords, JDBC credentials, Basic or Digest authentication credentials, etc. Passwords are typically stored in clear-text in configuration files, because a program such as Jetty reading the configuration file must be able to retrieve the original password to authenticate with the service. You can protect clear-text stored passwords from casual view by obfuscating them using class org.eclipse.jetty.util.security.Password: $ java -cp jetty-util-12.0.10-SNAPSHOT.jar org.eclipse.jetty.util.security.Password --prompt Username: (1) Password: secret (2) OBF:1yta1t331v8w1v9q1t331ytc (3) MD5:5eBe2294EcD0E0F08eAb7690D2A6Ee69 (4) 1 Hit Enter to specify a blank user. 2 Enter the password you want to obfuscate. 3 The obfuscated password. 4 The MD5 checksum of the password. The Password tool produced an obfuscated string for the password secret, namely OBF:1yta1t331v8w1v9q1t331ytc (the prefix OBF: must be retained). The obfuscated string can be de-obfuscated to obtain the original password. Now you can use the obfuscated password in Jetty configuration files, for example to specify the KeyStore password in ssl.ini when configuring secure connectors, as explained here. For example: ssl.ini jetty.sslContext.keyStorePassword=OBF:1yta1t331v8w1v9q1t331ytc Remember that password obfuscation only protects from casual view — it can be de-obfuscated to obtain the original password. You can also use the obfuscated password in your Java source code. You can also use obfuscated passwords in Jetty XML files where a clear-text password is usually required. Here is an example, setting an obfuscated password for a JDBC DataSource: jdbc/myDS org.postgresql.ds.PGSimpleDataSource dbuser (1) OBF:1yta1t331v8w1v9q1t331ytc ... 1 Note the usage of Password.deobfuscate(...) to avoid storing the clear-text password in the XML file.","title":"Jetty Tools","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/tools/index.html","titles":[{"text":"Password Obfuscation","hash":"password","id":1}]},"41":{"id":41,"text":"To troubleshoot Jetty when used as a standalone server, there are two main tools: the Jetty Server Dump and enabling DEBUG level logging. Jetty is based on components organized as a tree, with the Server instance at the root of the tree. As explained in the JMX section, these components can be exported as JMX MBeans and therefore be accessible from JMX Consoles such as Java Missions Control (JMC). Being able to take a snapshot of the state of Jetty while it is running is the most useful information that can be attached when reporting an issue. Such state includes: The thread pool configuration and its current state, including how many threads are in use, and their stack trace. The TLS configuration. The I/O configuration and its current state, including the ports Jetty listens to, how many connections are currently open, and he state of each connection, and the state of the request/response handling for each connection. The Handler structure and its configuration. The web applications deployed and their configurations, including the class loader information. The prerequisite for troubleshooting is to enable JMX, so that Jetty — possibly a production server — can be accessed from a remote location to obtain the information exported via JMX, and possibly be able to reconfigure Jetty to solve the issue. Make sure you read about how to secure the access to Jetty when using remote JMX. The Jetty Server Dump is obtained by invoking, via JMX, the Server.dump() operation, as shown below using Java Mission Control (JMC): Find the Server MBean in the MBean Tree, under org.eclipse.jetty.server:type=server,id=0. Then click on the \"Operations\" tab, select the dump() operation, and then click the Execute button. In the bottom panel you will see the result of the invocation, that you can copy into a text editor and save to your file system. Taking a Jetty Server Dump is a relatively expensive operation, as it dumps the state of all connections (which can be thousands), and the state of all threads. The result of the invocation may produce a large string, possibly few MiB, that may impact the server memory usage. Furthermore, dumping the state of the I/O Jetty components takes a little CPU time off the handling of the actual I/O, possibly slowing it down temporarily. While the slow-down caused by taking the Jetty Server Dump may be noticeable on highly loaded systems, it is typically a very small price to pay to obtain the information about the Jetty state that may be critical to the resolution of an issue. The format of the Jetty Server Dump output is subject to change at any time, as Jetty developers modify the Jetty code and decide to include more state, or remove state that is no longer relevant. The Jetty Server Dump is organized in a tree whose structure is similar to the runtime Jetty component tree. At the end of the dump output there is a legend that explains the type of tree node: whether it is a node that represent a managed component, or an array node (or a map node) that represent some component state, etc. The Server.dump() operation may also be invoked just after the Server starts (to log the state of the freshly started server), and just before the Server stops (which may be useful to log the state of server that is not working properly). You can temporarily enable the Jetty Server Dump at start time by overriding the jetty.server.dumpAfterStart property on the command line: $ java -jar $JETTY_HOME/start.jar jetty.server.dumpAfterStart=true To make this change persistent across server restarts, see the server module configuration for more information about how to configure the server to dump at start/stop time. By default, the dump of the thread pool will only dump the topmost stack frame of each thread. It is possible to configure the thread pool to dump the whole stack trace for each thread; while this may be a little more expensive, it provides complete information about the state of each thread, which may be important to diagnose the issue. See the threadpool module configuration for more information about how to configure the thread pool to dump detailed thread information. Detailed thread pool information can also be turned on/off on-the-fly via JMX, by finding the ThreadPool MBean under org.eclipse.jetty.util.thread:type=queuedthreadpool,id=0, then selecting the detailedDump attribute and setting it to true. You can now perform the Server.dump() operation as explained above, and then set detailedDump back to false. Below you can find a simple example of a Jetty Server Dump, with annotations for the principal components: oejs.Server@27ce24aa{STARTING}[12.0.11-SNAPSHOT,sto=5000] - STARTING (1) += QueuedThreadPool[qtp1860513229]@6ee52dcd{STARTED,4 threads size=4 | +> qtp1860513229-54 RUNNABLE tid=54 prio=5 SELECTING | +> qtp1860513229-57 TIMED_WAITING tid=57 prio=5 IDLE | +> qtp1860513229-55-acceptor-0@6b8a4568-ServerConnector@18078bef{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} RUNNABLE tid=55 prio=3 ACCEPTING | +> qtp1860513229-56 TIMED_WAITING tid=56 prio=5 IDLE += oejut.ScheduledExecutorScheduler@52525845{STARTED} - STARTED +- org.eclipse.jetty.io.ArrayByteBufferPool@5b12b668{min=0,max=65536,buckets=16,heap=0/2102394880,direct=0/2102394880} | +> direct size=16 | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@3b69e7d1{capacity=4096,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@815b41f{capacity=8192,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@5542c4ed{capacity=12288,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@1573f9fc{capacity=16384,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@6150c3ec{capacity=20480,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@44c03695{capacity=24576,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@7e6f74c{capacity=28672,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@dd05255{capacity=32768,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@6a78afa0{capacity=36864,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@2f4948e4{capacity=40960,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@1f2586d6{capacity=45056,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@10683d9d{capacity=49152,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@3fc2959f{capacity=53248,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@5aa9e4eb{capacity=57344,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@6989da5e{capacity=61440,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@385c9627{capacity=65536,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> indirect size=16 | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@139982de{capacity=4096,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@682b2fa{capacity=8192,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@217ed35e{capacity=12288,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@7dcf94f8{capacity=16384,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@229f66ed{capacity=20480,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@31190526{capacity=24576,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@662ac478{capacity=28672,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@6743e411{capacity=32768,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@3eb25e1a{capacity=36864,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@477b4cdf{capacity=40960,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@77c2494c{capacity=45056,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@f5958c9{capacity=49152,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@233795b6{capacity=53248,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@3eb738bb{capacity=57344,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@5bda8e08{capacity=61440,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} | +> org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket@1e800aaa{capacity=65536,in-use=0/0,pooled/acquires=0/0(NaN%),non-pooled/evicts/removes/releases=0/0/0/0} +~ org.eclipse.jetty.util.resource.FileSystemPool@185a6e9 += oejsh.DefaultHandler@6f03482{showContext=true,favIcon=true,STARTED} - STARTED += oejsh.ContextHandlerCollection@9d5509a{STARTED} - STARTED (3) += ServerConnector@18078bef{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} - STARTED (4) | +~ QueuedThreadPool[qtp1860513229]@6ee52dcd{STARTED,4 customizers size=0 | | +> formEncodedMethods size=2 | | | +> POST | | | +> PUT | | +> outputBufferSize=32768 | | +> outputAggregationSize=8192 | | +> requestHeaderSize=8192 | | +> responseHeaderSize=8192 | | +> headerCacheSize=1024 | | +> secureScheme=https | | +> securePort=0 | | +> idleTimeout=-1 | | +> sendDateHeader=false | | +> sendServerVersion=true | | +> sendXPoweredBy=false | | +> delayDispatchUntilContent=true | | +> persistentConnectionsEnabled=true | | +> maxErrorDispatches=10 | | +> minRequestDataRate=0 | | +> minResponseDataRate=0 | | +> requestCookieCompliance=RFC6265@4116aac9[INVALID_COOKIES, OPTIONAL_WHITE_SPACE, SPACE_IN_VALUES] | | +> responseCookieCompliance=RFC6265@4116aac9[INVALID_COOKIES, OPTIONAL_WHITE_SPACE, SPACE_IN_VALUES] | | +> notifyRemoteAsyncErrors=true | | +> relativeRedirectAllowed=false | += ServerConnectorManager@74e52ef6[keys=0] - STARTED | | += oeji.ManagedSelector@489115ef{STARTED}[id=0 keys=0 selected=0 updates=0 selection:tot=0/avg=0.00/max=0] - STARTED (5) | | += AdaptiveExecutionStrategy@198b6731/SelectorProducer@7c6908d7/PRODUCING/p=0/QueuedThreadPool[qtp1860513229]@6ee52dcd{STARTED,4 updates @ 2024-06-05T07:38:35.366747708+10:00 size=0 | | +> keys @ 2024-06-05T07:38:35.366943598+10:00 size=0 (6) | +- sun.nio.ch.ServerSocketChannelImpl[/[0:0:0:0:0:0:0:0]:8080] | +- qtp1860513229-55-acceptor-0@6b8a4568-ServerConnector@18078bef{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} +- org.eclipse.jetty.util.component.HaltLifeCycleListener@3c9754d8 +- org.eclipse.jetty.server.Server$DynamicErrorHandler@3bf7ca37 +> startJarLoader@593634ad (7) | +> URLs size=8 | | +> file:/path/to/jetty.home-base/resources/ | | +> file:/path/to/jetty.home/lib/logging/slf4j-api-2.0.12.jar | | +> file:/path/to/jetty.home/lib/logging/jetty-slf4j-impl-12.0.11-SNAPSHOT.jar | | +> file:/path/to/jetty.home/lib/jetty-http-12.0.11-SNAPSHOT.jar | | +> file:/path/to/jetty.home/lib/jetty-server-12.0.11-SNAPSHOT.jar | | +> file:/path/to/jetty.home/lib/jetty-xml-12.0.11-SNAPSHOT.jar | | +> file:/path/to/jetty.home/lib/jetty-util-12.0.11-SNAPSHOT.jar | | +> file:/path/to/jetty.home/lib/jetty-io-12.0.11-SNAPSHOT.jar | +> parent: jdk.internal.loader.ClassLoaders$AppClassLoader@4f2410ac | +> packages size=4 | | +> package org.eclipse.jetty.start.config | | +> package org.eclipse.jetty.start.builders | | +> package org.eclipse.jetty.start.shaded.util | | +> package org.eclipse.jetty.start | +> parent: jdk.internal.loader.ClassLoaders$PlatformClassLoader@c8ff6dd | +> packages size=3 | +> package sun.text.resources.cldr.ext | +> package sun.util.resources.provider | +> package sun.util.resources.cldr.provider +> environments size=1 | +> oejuc.Environment$Named@0{core} | +> startJarLoader@593634ad | | +> URLs size=8 | | | +> file:/path/to/jetty.home-base/resources/ | | | +> file:/path/to/jetty.home/lib/logging/slf4j-api-2.0.12.jar | | | +> file:/path/to/jetty.home/lib/logging/jetty-slf4j-impl-12.0.11-SNAPSHOT.jar | | | +> file:/path/to/jetty.home/lib/jetty-http-12.0.11-SNAPSHOT.jar | | | +> file:/path/to/jetty.home/lib/jetty-server-12.0.11-SNAPSHOT.jar | | | +> file:/path/to/jetty.home/lib/jetty-xml-12.0.11-SNAPSHOT.jar | | | +> file:/path/to/jetty.home/lib/jetty-util-12.0.11-SNAPSHOT.jar | | | +> file:/path/to/jetty.home/lib/jetty-io-12.0.11-SNAPSHOT.jar | | +> parent: jdk.internal.loader.ClassLoaders$AppClassLoader@4f2410ac | | +> packages size=4 | | | +> package org.eclipse.jetty.start.config | | | +> package org.eclipse.jetty.start.builders | | | +> package org.eclipse.jetty.start.shaded.util | | | +> package org.eclipse.jetty.start | | +> parent: jdk.internal.loader.ClassLoaders$PlatformClassLoader@c8ff6dd | | +> packages size=3 | | +> package sun.text.resources.cldr.ext | | +> package sun.util.resources.provider | | +> package sun.util.resources.cldr.provider | +> Attributes core size=0 +> attributes size=0 +> org.eclipse.jetty.util.resource.FileSystemPool@185a6e9 +> buckets size=0 key: +- bean, += managed, +~ unmanaged, +? auto, +: iterable, +] array, +@ map, +> undefined (8) JVM: Eclipse Adoptium OpenJDK 64-Bit Server VM 21.0.3+9-LTS; OS: Linux amd64 6.8.0-76060800daily20240311-generic; Jetty: 12.0.11-SNAPSHOT; CPUs: 32; mem(free/total/max): 997/1,016/16,040 MiB UTC: 2024-06-04T21:38:35.371542343Z; Australia/Brisbane: 2024-06-05T07:38:35.371542343+10:00 1 The Server instance at the root of the tree 2 The thread pool component 3 The root of the Handler structure 4 The connector listening on port 8080 for the HTTP/1.1 protocol 5 A selector component that manages connections 6 The connections currently managed by the selector component 7 The server ClassLoader and its classpath 8 The legend for the dump nodes Enabling DEBUG level logging for the org.eclipse.jetty logger name provides the maximum amount of information to troubleshoot Jetty issues. Refer to the logging section for more information about how to configure logging in Jetty. Enabling DEBUG level logging for org.eclipse.jetty is very, very expensive. Your server could be slowed down to almost a halt, especially if it is under heavy load. Furthermore, the log file could quickly fill up the entire filesystem (unless configured to roll over), so you want to be really careful using DEBUG logging. For production servers, consider using the Jetty Server Dump first, and enable DEBUG logging only as a last resort. However, sometimes issues are such that only DEBUG logging can really tell what’s going on in the system, and enabling DEBUG logging is your best chance to figure the issue out. Below you can find few suggestions that can help you reduce the impact when you have to enable DEBUG logging. If Jetty instances are behind a load balancer, you may configure the load balancer to send less load to a particular Jetty instance, and enable DEBUG logging in that instance only. In certain cases the issue can be reproduced reliably, but only in the production environment. You can use JMX to temporarily enable DEBUG logging, reproduce the issue, and then disable DEBUG logging. Alternatively, if you cannot reliably reproduce the issue, but you know it is happening, you can temporarily enable DEBUG logging for a small period of time, let’s say 10-60 seconds, and then disable DEBUG logging. Changing the log level at runtime is a feature of the logging implementation that you are using. The Jetty SLF4J implementation, used by default, exposes via JMX method boolean JettyLoggerFactoryMBean.setLoggerLevel(String loggerName, String levelName) that you can invoke via a JMX console to change the level for the specified logger name. The method returns true if the logger level was successfully changed. For example, you can pass the string org.eclipse.jetty as the first parameter, and the string DEBUG (upper case) as the second parameter. You can then use the string INFO or WARN (upper case) to restore the logging level to its previous value. Enabling DEBUG logging for the org.eclipse.jetty logger name implies that all children logger names, recursively, inherit the DEBUG level. Processing a single HTTP request involves many Jetty components: the I/O subsystem (under org.eclipse.jetty.io), the thread pool (under org.eclipse.jetty.util), the HTTP/1.1 parsing (under org.eclipse.jetty.http), etc. If you can cut the amount of DEBUG logging to just what you need to troubleshoot the issue, the impact of enabling DEBUG logging will be much less than enabling it for all Jetty components. For example, if you need to troubleshoot a client that sends bad HTTP/1.1 requests, it may be enough to enable only the org.eclipse.jetty.http logger name, therefore saving the large amount of DEBUG logging produced by the I/O subsystem and by the thread pool. In another case, you may need to troubleshoot only HTTP/2 requests, and therefore enabling only the org.eclipse.jetty.http2 logger name could be enough. The Java Virtual Machines allows remote processes on different hosts to connect for debugging purposes, by using specific command line options. While it is possible to enable remote debugging on a Jetty server, it is typically not recommended for security and performance reasons. Only enable remote debugging on a Jetty server as a last resort to troubleshoot issues that could not be troubleshot otherwise. You can easily create a custom Jetty module (see this section) with the following content: remote-debug.mod [description] Enables remote debugging [exec] -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 The [exec] directive (documented here) is necessary to pass the -agentlib:jdwp JVM option to the forked JVM that runs Jetty, so that you can attach with a debugger. The address parameter of the -agentlib:jdwp command line option specifies the network address and port the Jetty JVM listens on for remote debugging. Please refer to the Java Debug Wire Protocol documentation for additional information about the -agentlib:jdwp command line option and its parameters. You can now enable the remote-debug Jetty module with the following command issued from the $JETTY_BASE directory: $ java -jar $JETTY_HOME/start.jar --add-modules=server,remote-debug The command above minimally adds a Jetty server without connectors (via the server Jetty module) and the remote-debug Jetty module, and produces the following $JETTY_BASE directory structure: $JETTY_BASE ├── modules │ └── remote-debug.mod ├── resources │ └── jetty-logging.properties └── start.d ├── remote-debug.ini └── server.ini You can easily disable the remote-debug Jetty module as explained in this section. Alternatively, you can enable the remote-debug module on the command line, as explained in this section. Starting the Jetty server with the remote-debug module enabled yields: WARN : Forking second JVM due to forking module(s): [remote-debug]. Use --dry-run to generate the command line to avoid forking. Listening for transport dt_socket at address: 5005 2024-06-05 07:38:36.730:INFO :oejs.Server:main: jetty-12.0.11-SNAPSHOT; built: 2024-06-04T21:16:57.980Z; git: 8b506b4f282f20dbb4b6c960f52ef3e2a658a515; jvm 21.0.3+9-LTS 2024-06-05 07:38:36.753:INFO :oejs.Server:main: Started oejs.Server@4ba2ca36{STARTING}[12.0.11-SNAPSHOT,sto=5000] @318ms Note how the JVM is listening on port 5005 to allow remote debuggers to connect. If you want to avoid to fork a second JVM to pass the -agentlib:jdwp JVM option, please read this section. Jetty’s StateTrackingHandler (described in this module) can be used to troubleshoot problems in web applications. StateTrackingHandler tracks the usages of Handler/Request/Response asynchronous APIs by web applications, emitting events (logged at warning level) when an invalid usage of the APIs is detected. In conjunction with dumping the Jetty component tree, it dumps the state of current requests, detailing whether they have reads or writes that are pending, whether callbacks have been completed, along with thread stack traces (including virtual threads) of operations that have been started but not completed, or are stuck in blocking code. You need to enable the state-tracking Jetty module, and configure it to track what you are interested in tracking (for more details, see the javadocs).","title":"Troubleshooting","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/troubleshooting/index.html","titles":[{"text":"Server Dump","hash":"dump","id":1},{"text":"Dump at Server Start/Stop","hash":"dump-start-stop","id":2},{"text":"Detailed ThreadPool Information","hash":"dump-detailed","id":3},{"text":"Dump Example","hash":"dump-example","id":4},{"text":"Enabling DEBUG Logging","hash":"logging","id":5},{"text":"Jetty Behind a Load Balancer","hash":"logging-backend","id":6},{"text":"Enabling DEBUG Logging for a Short Time","hash":"logging-jmx","id":7},{"text":"Enabling DEBUG Logging for SubPackages","hash":"logging-subpackages","id":8},{"text":"Remote Debugging","hash":"debugging","id":9},{"text":"Troubleshooting Handlers","hash":"handlers","id":10},{"text":"StateTrackingHandler","hash":"handlers-state-tracking","id":11}]},"42":{"id":42,"text":"The Jetty XML format is a straightforward mapping of XML elements to Java APIs so that any object can be instantiated and getters, setters, and methods can be called. The Jetty XML format is very similar to that of frameworks like Spring or Plexus, although it predates all of them and it’s typically more powerful as it can invoke any Java API. The Jetty XML format is used in Jetty modules to create the Jetty server components, as well as in Jetty XML context files to configure web applications, but it can be used to call any Java API. The Jetty XML syntax defines XML element that allow you to call any Java API and that allow you to interact in a simpler way with the Jetty module system and the Jetty deploy system. The Jetty XML elements define attributes such as id, name, class, etc. that may be replaced by correspondent elements, so that these XML documents are equivalent: stderr err java.lang.System println HELLO The version using attributes is typically shorter and nicer to read, but sometimes the attribute value cannot be a literal string (for example, it could be the value of a system property) and that’s where elements gives you the required flexibility. Element Configure must be the root element of the XML document. The following Jetty XML creates an empty String and assigns it the id mystring: This is equivalent to the following Java code: var mystring = new String(); If an object with the id mystring already exists, then it is not created again but rather just referenced. Within element , the created object (if any) is in scope and may be the implicit target of other, nested, elements. Typically the element is used to configure a Server instance or ContextHandler subclasses such as WebAppContext that represent web applications. Element Arg is used to pass arguments to constructors and method calls. The following example creates a minimal Jetty Server: 8080 Arguments may have a type attribute that explicitly performs type coercion. Arguments may also have a name attribute, which is matched with the corresponding Java annotation in the source class, that helps to identify arguments: 8080 Element creates a new object of the type specified by the mandatory class attribute. A sequence of Arg elements, that must be contiguous and before other elements, may be present to specify the constructor arguments. Within element the newly created object is in scope and may be the implicit target of other, nested, elements. The following example creates an ArrayList: 16 This is equivalent to the following Java code: var mylist = new ArrayList(16); Element invokes a method specified by the mandatory name attribute. A sequence of Arg elements, that must be contiguous and before other elements, may be present to specify the method arguments. Within element the return value, if the return type is not void, is in scope and may be the implicit target of other, nested, elements. 0 This is equivalent to the following Java code: new ArrayList().listIterator(0).next(); It is possible to call static methods by specifying the class attribute: jdk.java.net This is equivalent to the following Java code: var myhost = InetAddress.getByName(\"jdk.java.net\"); The class attribute (or element) can also be used to specify the Java class or interface to use to lookup the non-static method name. This is necessary when the object in scope, onto which the would be applied, is an instance of a class that is not visible to Jetty classes, or not accessible because it is not public. For example: In the example above, Executors.newSingleThreadScheduledExecutor() returns an object whose class is a private JDK implementation class. Without an explicit class attribute (or element), it is not possible to invoke the method shutdown() when it is obtained via reflection from the private JDK implementation class, because while the method is public, the private JDK implementation class is not, therefore this exception is thrown: java.lang.IllegalAccessException: class org.eclipse.jetty.xml.XmlConfiguration$JettyXmlConfiguration (in module org.eclipse.jetty.xml) cannot access a member of class java.util.concurrent.Executors$DelegatedExecutorService (in module java.base) with modifiers \"public\" The solution is to explicitly use the class attribute (or element) of the element that is invoking the shutdown() method, specifying a publicly accessible class or interface that the object in scope extends or implements (in the example above java.util.concurrent.ExecutorService). Element retrieves the value of a JavaBean property specified by the mandatory name attribute. If the JavaBean property is foo (or Foo), first attempts to invoke method getFoo() or method isFoo(); failing that, attempts to retrieve the value from field foo (or Foo). Jetty The class attribute (or element) allows to perform static calls, or to lookup the getter method from the specified class, as described in the section. Element stores the value of a JavaBean property specified by the mandatory name attribute. If the JavaBean property is foo (or Foo), first attempts to invoke method setFoo(…​) with the value in the scope as argument; failing that, attempts to store the value in the scope to field foo (or Foo). scope is the string \"true\" --> true scope is the instance created by --> The class attribute (or element) allows to perform static calls, or to lookup the setter method from the specified class, as described in the section. Element allows the creation of a new java.util.Map implementation, specified by the class attribute — by default a HashMap. The map entries are specified with a sequence of elements, each with exactly 2 elements, for example: host localhost Element is a convenience element that puts a key/value pair into objects that implement java.util.Map. You can only specify the key value via the name attribute, so the key can only be a literal string (for keys that are not literal strings, use the element). localhost Element creates a new array, whose component type may be specified by the type attribute, or by a Type child element. literalString 1.0D Element allows you to reference an object via the refid attribute`, putting it into scope so that nested elements can operate on it. You must give a unique id attribute to the objects you want to reference. Server version is: Element retrieves the value of the Jetty module property specified by the name attribute, and it is mostly used when creating custom Jetty modules or when using Jetty context XML files. The deprecated attribute allows you to specify a comma separated list of old, deprecated, property names for backward compatibility. The default attribute allows you to specify a default value for the property, if it has not been explicitly defined. For example, you may want to configure the context path of your web application in this way: /opt/myapps/mywiki.war The contextPath value is resolved by looking for the Jetty module property com.myapps.mywiki.context.path; if this property is not set, then the default value of /wiki is used. Element retrieves the value of the JVM system property specified by the name attribute, via System.getProperty(…​). The deprecated attribute allows you to specify a comma separated list of old, deprecated, system property names for backward compatibility. The default attribute allows you to specify a default value for the system property value, if it has not been explicitly defined. The following example creates a minimal Jetty Server that listens on a port specified by the com.acme.http.port system property: Element retrieves the value of the environment variable specified by the name attribute, via System.getenv(…​). The deprecated attribute allows you to specify a comma separated list of old, deprecated, environment variable names for backward compatibility. The default attribute allows you to specify a default value for the environment variable value, if it has not been explicitly defined. The following example creates a minimal Jetty Server that listens on a port specified by the COM_ACME_HTTP_PORT environment variable: Elements that have the type attribute explicitly perform the type coercion of the string value present in the XML document to the Java type specified by the type attribute. Supported types are the following: all primitive types and their boxed equivalents, for example type=\"int\" but also type=\"Integer\" (short form) and type=\"java.lang.Integer\" (fully qualified form) java.lang.String, in both short form and fully qualified form java.net.URL, in both short form and fully qualified form java.net.InetAddress, in both short form and fully qualified form Elements that create new objects or that return a value create a scope. Within these elements there may be nested elements that will operate on that scope, i.e. on the new object or returned value. The following example illustrates how scopes work: 8080 5000 https 256 Server version is:","title":"Jetty XML","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/operations-guide/xml/index.html","titles":[{"text":"Jetty XML Syntax","hash":"syntax","id":1},{"text":"<Configure>","hash":"syntax-configure","id":2},{"text":"<Arg>","hash":"syntax-arg","id":3},{"text":"<New>","hash":"syntax-new","id":4},{"text":"<Call>","hash":"syntax-call","id":5},{"text":"<Get>","hash":"syntax-get","id":6},{"text":"<Set>","hash":"syntax-set","id":7},{"text":"<Map> and <Entry>","hash":"syntax-map","id":8},{"text":"<Put>","hash":"syntax-put","id":9},{"text":"<Array> and <Item>","hash":"syntax-array","id":10},{"text":"<Ref>","hash":"syntax-ref","id":11},{"text":"<Property>","hash":"syntax-property","id":12},{"text":"<SystemProperty>","hash":"syntax-system-property","id":13},{"text":"<Env>","hash":"syntax-env","id":14},{"text":"Type Coercion","hash":"syntax-types","id":15},{"text":"Scopes","hash":"syntax-scope","id":16}]},"43":{"id":43,"text":"Applications that use the Jetty libraries (both client and server) create objects from Jetty classes and compose them together to obtain the desired functionalities. A client application creates a ClientConnector instance, a HttpClientTransport instance and an HttpClient instance and compose them to have a working HTTP client that uses to call third party services. A server application creates a ThreadPool instance, a Server instance, a ServerConnector instance, a Handler instance and compose them together to expose an HTTP service. Internally, the Jetty libraries create even more instances of other components that also are composed together with the main ones created by applications. The end result is that an application based on the Jetty libraries is a tree of components. In server application the root of the component tree is a Server instance, while in client applications the root of the component tree is an HttpClient instance. Having all the Jetty components in a tree is beneficial in a number of use cases. It makes possible to register the components in the tree as JMX MBeans so that a JMX console can look at the internal state of the components. It also makes possible to dump the component tree (and therefore each component’s internal state) to a log file or to the console for troubleshooting purposes. Jetty components typically have a life cycle: they can be started and stopped. The Jetty components that have a life cycle implement the org.eclipse.jetty.util.component.LifeCycle interface. Jetty components that contain other components implement the org.eclipse.jetty.util.component.Container interface and typically extend the org.eclipse.jetty.util.component.ContainerLifeCycle class. ContainerLifeCycle can contain these type of components, also called beans: managed beans, LifeCycle instances whose life cycle is tied to the life cycle of their container unmanaged beans, LifeCycle instances whose life cycle is not tied to the life cycle of their container POJO (Plain Old Java Object) beans, instances that do not implement LifeCycle ContainerLifeCycle uses the following logic to determine if a bean should be managed, unmanaged or POJO: the bean implements LifeCycle the bean is not started, add it as managed the bean is started, add it as unmanaged the bean does not implement LifeCycle, add it as POJO When a ContainerLifeCycle is started, it also starts recursively all its managed beans (if they implement LifeCycle); unmanaged beans are not started during the ContainerLifeCycle start cycle. Likewise, stopping a ContainerLifeCycle stops recursively and in reverse order all its managed beans; unmanaged beans are not stopped during the ContainerLifeCycle stop cycle. Components can also be started and stopped individually, therefore activating or deactivating the functionalities that they offer. Applications should first compose components in the desired structure, and then start the root component: class Monitor extends AbstractLifeCycle { } class Root extends ContainerLifeCycle { // Monitor is an internal component. private final Monitor monitor = new Monitor(); public Root() { // The Monitor life cycle is managed by Root. addManaged(monitor); } } class Service extends ContainerLifeCycle { // An instance of the Java scheduler service. private ScheduledExecutorService scheduler; @Override protected void doStart() throws Exception { // Java's schedulers cannot be restarted, so they must // be created anew every time their container is started. scheduler = Executors.newSingleThreadScheduledExecutor(); // Even if Java scheduler does not implement // LifeCycle, make it part of the component tree. addBean(scheduler); // Start all the children beans. super.doStart(); } @Override protected void doStop() throws Exception { // Perform the opposite operations that were // performed in doStart(), in reverse order. super.doStop(); removeBean(scheduler); scheduler.shutdown(); } } // Create a Root instance. Root root = new Root(); // Create a Service instance. Service service = new Service(); // Link the components. root.addBean(service); // Start the root component to // start the whole component tree. root.start(); The component tree is the following: Root ├── Monitor (MANAGED) └── Service (MANAGED) └── ScheduledExecutorService (POJO) When the Root instance is created, also the Monitor instance is created and added as bean, so Monitor is the first bean of Root. Monitor is a managed bean, because it has been explicitly added to Root via ContainerLifeCycle.addManaged(…​). Then, the application creates a Service instance and adds it to Root via ContainerLifeCycle.addBean(…​), so Service is the second bean of Root. Service is a managed bean too, because it is a LifeCycle and at the time it was added to Root is was not started. The ScheduledExecutorService within Service does not implement LifeCycle so it is added as a POJO to Service. It is possible to stop and re-start any component in a tree, for example: class Root extends ContainerLifeCycle { } class Service extends ContainerLifeCycle { // An instance of the Java scheduler service. private ScheduledExecutorService scheduler; @Override protected void doStart() throws Exception { // Java's schedulers cannot be restarted, so they must // be created anew every time their container is started. scheduler = Executors.newSingleThreadScheduledExecutor(); // Even if Java scheduler does not implement // LifeCycle, make it part of the component tree. addBean(scheduler); // Start all the children beans. super.doStart(); } @Override protected void doStop() throws Exception { // Perform the opposite operations that were // performed in doStart(), in reverse order. super.doStop(); removeBean(scheduler); scheduler.shutdown(); } } Root root = new Root(); Service service = new Service(); root.addBean(service); // Start the Root component. root.start(); // Stop temporarily Service without stopping the Root. service.stop(); // Restart Service. service.start(); Service can be stopped independently of Root, and re-started. Starting and stopping a non-root component does not alter the structure of the component tree, just the state of the subtree starting from the component that has been stopped and re-started. Container provides an API to find beans in the component tree: class Root extends ContainerLifeCycle { } class Service extends ContainerLifeCycle { private ScheduledExecutorService scheduler; @Override protected void doStart() throws Exception { scheduler = Executors.newSingleThreadScheduledExecutor(); addBean(scheduler); super.doStart(); } @Override protected void doStop() throws Exception { super.doStop(); removeBean(scheduler); scheduler.shutdown(); } } Root root = new Root(); Service service = new Service(); root.addBean(service); // Start the Root component. root.start(); // Find all the direct children of root. Collection children = root.getBeans(); // children contains only service // Find all descendants of root that are instance of a particular class. Collection schedulers = root.getContainedBeans(ScheduledExecutorService.class); // schedulers contains the service scheduler. You can add your own beans to the component tree at application startup time, and later find them from your application code to access their services. The component tree should be used for long-lived or medium-lived components such as thread pools, web application contexts, etc. It is not recommended adding to, and removing from, the component tree short-lived objects such as HTTP requests or TCP connections, for performance reasons. If you need component tree features such as automatic export to JMX or dump capabilities for short-lived objects, consider having a long-lived container in the component tree instead. You can make the long-lived container efficient at adding/removing the short-lived components using a data structure that is not part of the component tree, and make the long-lived container handle the JMX and dump features for the short-lived components. A component that extends AbstractLifeCycle inherits the possibility to add/remove event listeners for various events emitted by components. A component that implements java.util.EventListener that is added to a ContainerLifeCycle is also registered as an event listener. The following sections describe in details the various listeners available in the Jetty component architecture. A LifeCycle.Listener emits events for life cycle events such as starting, stopping and failures: Server server = new Server(); // Add an event listener of type LifeCycle.Listener. server.addEventListener(new LifeCycle.Listener() { @Override public void lifeCycleStarted(LifeCycle lifeCycle) { System.getLogger(\"server\").log(INFO, \"Server {0} has been started\", lifeCycle); } @Override public void lifeCycleFailure(LifeCycle lifeCycle, Throwable failure) { System.getLogger(\"server\").log(INFO, \"Server {0} failed to start\", lifeCycle, failure); } @Override public void lifeCycleStopped(LifeCycle lifeCycle) { System.getLogger(\"server\").log(INFO, \"Server {0} has been stopped\", lifeCycle); } }); For example, a life cycle listener attached to a Server instance could be used to create (for the started event) and delete (for the stopped event) a file containing the process ID of the JVM that runs the Server. A component that implements Container is a container for other components and ContainerLifeCycle is the typical implementation. A Container emits events when a component (also called bean) is added to or removed from the container: Server server = new Server(); // Add an event listener of type LifeCycle.Listener. server.addEventListener(new Container.Listener() { @Override public void beanAdded(Container parent, Object child) { System.getLogger(\"server\").log(INFO, \"Added bean {1} to {0}\", parent, child); } @Override public void beanRemoved(Container parent, Object child) { System.getLogger(\"server\").log(INFO, \"Removed bean {1} from {0}\", parent, child); } }); A Container.Listener added as a bean will also be registered as a listener: class Parent extends ContainerLifeCycle { } class Child { } // The older child takes care of its siblings. class OlderChild extends Child implements Container.Listener { private Set siblings = new HashSet<>(); @Override public void beanAdded(Container parent, Object child) { siblings.add(child); } @Override public void beanRemoved(Container parent, Object child) { siblings.remove(child); } } Parent parent = new Parent(); Child older = new OlderChild(); // The older child is a child bean _and_ a listener. parent.addBean(older); Child younger = new Child(); // Adding a younger child will notify the older child. parent.addBean(younger); A Container.InheritedListener is a listener that will be added to all descendants that are also Containers. Listeners of this type may be added to the component tree root only, but will be notified of every descendant component that is added to or removed from the component tree (not only first level children). The primary use of Container.InheritedListener within the Jetty Libraries is MBeanContainer from the Jetty JMX support. MBeanContainer listens for every component added to the tree, converts it to an MBean and registers it to the MBeanServer; for every component removed from the tree, it unregisters the corresponding MBean from the MBeanServer.","title":"Jetty Component Architecture","component":"jetty","version":"12","name":"bean","url":"/docs/jetty/12/programming-guide/arch/bean.html","titles":[{"text":"Jetty Component Lifecycle","hash":"lifecycle","id":1},{"text":"Jetty Component Listeners","hash":"listener","id":2},{"text":"LifeCycle.Listener","hash":"listener-lifecycle","id":3},{"text":"Container.Listener","hash":"listener-container","id":4},{"text":"Container.InheritedListener","hash":"listener-inherited","id":5}]},"44":{"id":44,"text":"The Jetty libraries (both client and server) use Java NIO to handle I/O, so that at its core Jetty I/O is completely non-blocking. The main class of The Jetty I/O library is SelectorManager. SelectorManager manages internally a configurable number of ManagedSelectors. Each ManagedSelector wraps an instance of java.nio.channels.Selector that in turn manages a number of java.nio.channels.SocketChannel instances. TODO: add image SocketChannel instances are typically created by the Jetty implementation, on client-side when connecting to a server and on server-side when accepting connections from clients. In both cases the SocketChannel instance is passed to SelectorManager (which passes it to ManagedSelector and eventually to java.nio.channels.Selector) to be registered for use within Jetty. It is possible for an application to create the SocketChannel instances outside Jetty, even perform some initial network traffic also outside Jetty (for example for authentication purposes), and then pass the SocketChannel instance to SelectorManager for use within Jetty. This example shows how a client can connect to a server: public void connect(SelectorManager selectorManager, Map context) throws IOException { String host = \"host\"; int port = 8080; // Create an unconnected SocketChannel. SocketChannel socketChannel = SocketChannel.open(); socketChannel.configureBlocking(false); // Connect and register to Jetty. if (socketChannel.connect(new InetSocketAddress(host, port))) selectorManager.accept(socketChannel, context); else selectorManager.connect(socketChannel, context); } This example shows how a server accepts a client connection: public void accept(ServerSocketChannel acceptor, SelectorManager selectorManager) throws IOException { // Wait until a client connects. SocketChannel socketChannel = acceptor.accept(); socketChannel.configureBlocking(false); // Accept and register to Jetty. Object attachment = null; selectorManager.accept(socketChannel, attachment); } SocketChannels that are passed to SelectorManager are wrapped into two related components: an EndPoint and a Connection. EndPoint is the Jetty abstraction for a SocketChannel or a DatagramChannel: you can read bytes from an EndPoint, you can write bytes to an EndPoint , you can close an EndPoint, etc. Connection is the Jetty abstraction that is responsible to read bytes from the EndPoint and to deserialize the read bytes into objects. For example, an HTTP/1.1 server-side Connection implementation is responsible to deserialize HTTP/1.1 request bytes into an HTTP request object. Conversely, an HTTP/1.1 client-side Connection implementation is responsible to deserialize HTTP/1.1 response bytes into an HTTP response object. Connection is the abstraction that implements the reading side of a specific protocol such as HTTP/1.1, or HTTP/2, or HTTP/3, or WebSocket: it is able to read and parse incoming bytes in that protocol. The writing side for a specific protocol may be implemented in the Connection but may also be implemented in other components, although eventually the bytes to write will be written through the EndPoint. While there are primarily only two implementations of EndPoint,SocketChannelEndPoint for TCP and DatagramChannelEndPoint for UDP (used both on the client-side and on the server-side), there are many implementations of Connection, typically two for each protocol (one for the client-side and one for the server-side). The EndPoint and Connection pairs can be chained, for example in case of encrypted communication using the TLS protocol. There is an EndPoint and Connection TLS pair where the EndPoint reads the encrypted bytes from the socket and the Connection decrypts them; next in the chain there is an EndPoint and Connection pair where the EndPoint \"reads\" decrypted bytes (provided by the previous Connection) and the Connection deserializes them into specific protocol objects (for example HTTP/2 frame objects). Certain protocols, such as WebSocket, start the communication with the server using one protocol (for example, HTTP/1.1), but then change the communication to use another protocol (for example, WebSocket). EndPoint supports changing the Connection object on-the-fly via EndPoint.upgrade(Connection). This allows to use the HTTP/1.1 Connection during the initial communication and later to replace it with a WebSocket Connection. SelectorManager is an abstract class because while it knows how to create concrete EndPoint instances, it does not know how to create protocol specific Connection instances. Creating Connection instances is performed on the server-side by ConnectionFactorys and on the client-side by ClientConnectionFactorys. On the server-side, the component that aggregates a SelectorManager with a set of ConnectionFactorys is ServerConnector for TCP sockets, QuicServerConnector for QUIC sockets, and UnixDomainServerConnector for Unix-Domain sockets (see the server-side architecture section for more information). On the client-side, the components that aggregates a SelectorManager with a set of ClientConnectionFactorys are HttpClientTransport subclasses (see the client-side architecture section for more information). The Jetty I/O library use Java NIO to handle I/O, so that I/O is non-blocking. At the Java NIO level, in order to be notified when a SocketChannel or DatagramChannel has data to be read, the SelectionKey.OP_READ flag must be set. In the Jetty I/O library, you can call EndPoint.fillInterested(Callback) to declare interest in the \"read\" (also called \"fill\") event, and the Callback parameter is the object that is notified when such an event occurs. At the Java NIO level, a SocketChannel or DatagramChannel is always writable, unless it becomes congested. In order to be notified when a channel uncongests and it is therefore writable again, the SelectionKey.OP_WRITE flag must be set. In the Jetty I/O library, you can call EndPoint.write(Callback, ByteBuffer…​) to write the ByteBuffers and the Callback parameter is the object that is notified when the whole write is finished (i.e. all ByteBuffers have been fully written, even if they are delayed by congestion/uncongestion). The EndPoint APIs abstract out the Java NIO details by providing non-blocking APIs based on Callback objects for I/O operations. The EndPoint APIs are typically called by Connection implementations, see this section. Connection is the abstraction that deserializes incoming bytes into objects, for example an HTTP request object or a WebSocket frame object, that can be used by more abstract layers. Connection instances have two lifecycle methods: Connection.onOpen(), invoked when the Connection is associated with the EndPoint. Connection.onClose(Throwable), invoked when the Connection is disassociated from the EndPoint, where the Throwable parameter indicates whether the disassociation was normal (when the parameter is null) or was due to an error (when the parameter is not null). When a Connection is first created, it is not registered for any Java NIO event. It is therefore typical to implement onOpen() to call EndPoint.fillInterested(Callback) so that the Connection declares interest for read events, and it is invoked (via the Callback) when the read event happens. The abstract class AbstractConnection partially implements Connection and provides simpler APIs. The example below shows a typical implementation that extends AbstractConnection: // Extend AbstractConnection to inherit basic implementation. class MyConnection extends AbstractConnection { public MyConnection(EndPoint endPoint, Executor executor) { super(endPoint, executor); } @Override public void onOpen() { super.onOpen(); // Declare interest for fill events. // When the fill event happens, method onFillable() below is invoked. fillInterested(); } @Override public void onFillable() { // Invoked when a fill event happens. } } The Jetty I/O library allows applications to register event listeners for the Connection events \"opened\" and \"closed\" via the interface Connection.Listener. This is useful in many cases, for example: Gather statistics about connection lifecycle, such as time of creation and duration. Gather statistics about the number of concurrent connections, and take action if a threshold is exceeded. Gather statistics about the number of bytes read and written, and the number of \"messages\" read and written, where \"messages\" may mean HTTP/1.1 requests or responses, or WebSocket frames, or HTTP/2 frames, etc. Gather statistics about the different types of connections being opened (TLS, HTTP/1.1, HTTP/2, WebSocket, etc.). Etc. Connection.Listener implementations must be added as beans to a server-side Connector, or to client-side HttpClient, WebSocketClient, HTTP2Client or HTTP3Client. You can add as beans many Connection.Listener objects, each with its own logic, so that you can separate different logics into different Connection.Listener implementations. The Jetty I/O library provides useful Connection.Listener implementations that you should evaluate before writing your own: ConnectionStatistics ConnectionLimit Here is a simple example of a Connection.Listener used both on the client and on the server: class ThresholdConnectionListener implements Connection.Listener { private final AtomicInteger connections = new AtomicInteger(); private int threshold; private boolean notified; public ThresholdConnectionListener(int threshold) { this.threshold = threshold; } @Override public void onOpened(Connection connection) { int count = connections.incrementAndGet(); if (count > threshold && !notified) { notified = true; System.getLogger(\"connection.threshold\").log(System.Logger.Level.WARNING, \"Connection threshold exceeded\"); } } @Override public void onClosed(Connection connection) { int count = connections.decrementAndGet(); // Reset the alert when we are below 90% of the threshold. if (count 0) { // Filled some bytes, echo them back. getEndPoint().write(this, buffer); } else if (filled == 0) { // No more bytes to fill, declare // again interest for fill events. fillInterested(); } else { // The other peer closed the // connection, close it back. getEndPoint().close(); } } catch (Exception x) { getEndPoint().close(x); } } @Override public void succeeded() { // The write is complete, fill again. onFillable(); } @Override public void failed(Throwable x) { getEndPoint().close(x); } } The implementation above is wrong and leads to StackOverflowError. The problem with this implementation is that if the writes always complete synchronously (i.e. without being delayed by TCP congestion), you end up with this sequence of calls: Connection.onFillable() EndPoint.write() Connection.succeeded() Connection.onFillable() EndPoint.write() Connection.succeeded() ... which leads to StackOverflowError. This is a typical side effect of asynchronous programming using non-blocking APIs, and happens in the Jetty I/O library as well. The callback is invoked synchronously for efficiency reasons. Submitting the invocation of the callback to an Executor to be invoked in a different thread would cause a context switch and make simple writes extremely inefficient. This side effect of asynchronous programming leading to StackOverflowError is so common that the Jetty libraries have a generic solution for it: a specialized Callback implementation named org.eclipse.jetty.util.IteratingCallback that turns recursion into iteration, therefore avoiding the StackOverflowError. IteratingCallback is a Callback implementation that should be passed to non-blocking APIs such as EndPoint.write(Callback, ByteBuffer…​) when they are performed in a loop. IteratingCallback works by starting the loop with IteratingCallback.iterate(). In turn, this calls IteratingCallback.process(), an abstract method that must be implemented with the code that should be executed for each loop. Method process() must return: Action.SCHEDULED, to indicate whether the loop has performed a non-blocking, possibly asynchronous, operation Action.IDLE, to indicate that the loop should temporarily be suspended to be resumed later Action.SUCCEEDED to indicate that the loop exited successfully Any exception thrown within process() exits the loops with a failure. Now that you know how IteratingCallback works, a correct implementation for the echo Connection is the following: class EchoConnection extends AbstractConnection { private final IteratingCallback callback = new EchoIteratingCallback(); public EchoConnection(EndPoint endp, Executor executor) { super(endp, executor); } @Override public void onOpen() { super.onOpen(); // Declare interest for fill events. fillInterested(); } @Override public void onFillable() { // Start the iteration loop that reads and echoes back. callback.iterate(); } class EchoIteratingCallback extends IteratingCallback { private ByteBuffer buffer; @Override protected Action process() throws Throwable { // Obtain a buffer if we don't already have one. if (buffer == null) buffer = BufferUtil.allocate(1024); int filled = getEndPoint().fill(buffer); if (filled > 0) { // We have filled some bytes, echo them back. getEndPoint().write(this, buffer); // Signal that the iteration should resume // when the write() operation is completed. return Action.SCHEDULED; } else if (filled == 0) { // We don't need the buffer anymore, so // don't keep it around while we are idle. buffer = null; // No more bytes to read, declare // again interest for fill events. fillInterested(); // Signal that the iteration is now IDLE. return Action.IDLE; } else { // The other peer closed the connection, // the iteration completed successfully. return Action.SUCCEEDED; } } @Override protected void onCompleteSuccess() { // The iteration completed successfully. getEndPoint().close(); } @Override protected void onCompleteFailure(Throwable cause) { // The iteration completed with a failure. getEndPoint().close(cause); } @Override public InvocationType getInvocationType() { return InvocationType.NON_BLOCKING; } } } When onFillable() is called, for example the first time that bytes are available from the network, the iteration is started. Starting the iteration calls process(), where a buffer is allocated and filled with bytes read from the network via EndPoint.fill(ByteBuffer); the buffer is subsequently written back via EndPoint.write(Callback, ByteBuffer…​) — note that the callback passed to EndPoint.write() is this, i.e. the IteratingCallback itself; finally Action.SCHEDULED is returned, returning from the process() method. At this point, the call to EndPoint.write(Callback, ByteBuffer…​) may have completed synchronously; IteratingCallback would know that and call process() again; within process(), the buffer has already been allocated so it will be reused, saving further allocations; the buffer will be filled and possibly written again; Action.SCHEDULED is returned again, returning again from the process() method. At this point, the call to EndPoint.write(Callback, ByteBuffer…​) may have not completed synchronously, so IteratingCallback will not call process() again; the processing thread is free to return to the Jetty I/O system where it may be put back into the thread pool. If this was the only active network connection, the system would now be idle, with no threads blocked, waiting that the write() completes. This thread-less wait is one of the most important features that make non-blocking asynchronous servers more scalable: they use less resources. Eventually, the Jetty I/O system will notify that the write() completed; this notifies the IteratingCallback that can now resume the loop and call process() again. When process() is called, it is possible that zero bytes are read from the network; in this case, you want to deallocate the buffer since the other peer may never send more bytes for the Connection to read, or it may send them after a long pause — in both cases we do not want to retain the memory allocated by the buffer; next, you want to call fillInterested() to declare again interest for read events, and return Action.IDLE since there is nothing to write back and therefore the loop may be suspended. When more bytes are again available to be read from the network, onFillable() will be called again and that will start the iteration again. Another possibility is that during process() the read returns -1 indicating that the other peer has closed the connection; this means that there will not be more bytes to read and the loop can be exited, so you return Action.SUCCEEDED; IteratingCallback will then call onCompleteSuccess() where you can close the EndPoint. The last case is that during process() an exception is thrown, for example by EndPoint.fill(ByteBuffer) or, in more advanced implementations, by code that parses the bytes that have been read and finds them unacceptable; any exception thrown within process() will be caught by IteratingCallback that will exit the loop with a failure and call onCompleteFailure(Throwable) with the exception that has been thrown, where you can close the EndPoint, passing the exception that is the reason for closing prematurely the EndPoint. Asynchronous programming is hard. Rely on the Jetty classes to implement Connection to avoid mistakes that will be difficult to diagnose and reproduce. The high-level abstraction that Jetty offers to read bytes is org.eclipse.jetty.io.Content.Source. Content.Source offers a non-blocking demand/read model where a read returns a Content.Chunk (see also this section). A Content.Chunk groups the following information: A ByteBuffer with the bytes that have been read; it may be empty. Whether the read reached end-of-file, via its last flag. A failure that might have happened during the read, via its getFailure() method. The Content.Chunk returned from Content.Source.read() can either be a normal chunk (a chunk containing a ByteBuffer and a null failure), or a failure chunk (a chunk containing an empty ByteBuffer and a non-null failure). A failure chunk also indicates (via the last flag) whether the failure is a fatal (when last=true) or transient (when last=false) failure. A transient failure is a temporary failure that happened during the read, it may be ignored, and it is recoverable: it is possible to call read() again and obtain a normal chunk (or a null chunk). Typical cases of transient failures are idle timeout failures, where the read timed out, but the application may decide to insist reading until some other event happens. The application may convert a transient failure into a fatal failure by calling Content.Source.fail(Throwable). A Content.Source must be fully consumed by reading all its content, or failed by calling Content.Source.fail(Throwable) to signal that the reader is not interested in reading anymore, otherwise it may leak underlying resources. Fully consuming a Content.Source means reading from it until it returns a Content.Chunk whose last flag is true. Reading or demanding from an already fully consumed Content.Source is always immediately serviced with the last state of the Content.Source: a Content.Chunk with the last flag set to true, either an end-of-file chunk, or a failure chunk. Once failed, a Content.Source is considered fully consumed. Further attempts to read from a failed Content.Source return a failure chunk whose getFailure() method returns the exception passed to Content.Source.fail(Throwable). When reading a normal chunk, its ByteBuffer is typically a slice of a different ByteBuffer that has been read by a lower layer. There may be multiple layers between the bottom layer (where the initial read typically happens) and the application layer that calls Content.Source.read(). By slicing the ByteBuffer (rather than copying its bytes), there is no copy of the bytes between the layers, which yields greater performance. However, this comes with the cost that the ByteBuffer, and the associated Content.Chunk, have an intrinsic lifecycle: the final consumer of a Content.Chunk at the application layer must indicate when it has consumed the chunk, so that the bottom layer may reuse/recycle the ByteBuffer. Consuming the chunk means that the bytes in the ByteBuffer are read (or ignored), and that the application will not look at or reference that ByteBuffer ever again. Content.Chunk offers a retain/release model to deal with the ByteBuffer lifecycle, with a simple rule: A Content.Chunk returned by a call to Content.Source.read() must be released, except for Content.Chunks that are failure chunks. Failure chunks may be released, but they do not need to be. The example below is the idiomatic way of reading from a Content.Source: public void read(Content.Source source) { // Read from the source in a loop. while (true) { // Read a chunk, must be eventually released. Content.Chunk chunk = source.read(); (1) // If no chunk, demand to be called back when there are more chunks. if (chunk == null) { source.demand(() -> read(source)); return; } // If there is a failure reading, handle it. if (Content.Chunk.isFailure(chunk)) { boolean fatal = chunk.isLast(); if (fatal) { // A fatal failure, such as a network failure. handleFatalFailure(chunk.getFailure()); // No recovery is possible, stop reading // by returning without demanding. return; } else { // A transient failure such as a read timeout. handleTransientFailure(chunk.getFailure()); // Recovery is possible, try to read again. continue; } } // A normal chunk of content, consume it. consume(chunk); // Release the chunk. chunk.release(); (2) // Stop reading if EOF was reached. if (chunk.isLast()) return; // Loop around to read another chunk. } } 1 The read() that must be paired with a release(). 2 The release() that pairs the read(). Note how the reads happen in a loop, consuming the Content.Source as soon as it has content available to be read, and therefore no backpressure is applied to the reads. Calling Content.Chunk.release() must be done only after the bytes in the ByteBuffer returned by Content.Chunk.getByteBuffer() have been consumed. When the Content.Chunk is released, the implementation may reuse the ByteBuffer and overwrite the bytes with different bytes; if the application looks at the ByteBuffer after having released the Content.Chunk is may see other, unrelated, bytes. An alternative way to read from a Content.Source, to use when the chunk is consumed asynchronously, and you don’t want to read again until the Content.Chunk is consumed, is the following: public void read(Content.Source source) { // Read a chunk, must be eventually released. Content.Chunk chunk = source.read(); (1) // If no chunk, demand to be called back when there are more chunks. if (chunk == null) { source.demand(() -> read(source)); return; } // If there is a failure reading, always treat it as fatal. if (Content.Chunk.isFailure(chunk)) { // If the failure is transient, fail the source // to indicate that there will be no more reads. if (!chunk.isLast()) source.fail(chunk.getFailure()); // Handle the failure and stop reading by not demanding. handleFatalFailure(chunk.getFailure()); return; } // Consume the chunk asynchronously, and do not // read more chunks until this has been consumed. CompletableFuture consumed = consumeAsync(chunk); // Release the chunk. chunk.release(); (2) // Only when the chunk has been consumed try to read more. consumed.whenComplete((result, failure) -> { if (failure == null) { // Continue reading if EOF was not reached. if (!chunk.isLast()) source.demand(() -> read(source)); } else { // If there is a failure reading, handle it, // and stop reading by not demanding. handleFatalFailure(failure); } }); } 1 The read() that must be paired with a release(). 2 The release() that pairs the read(). Note how the reads do not happen in a loop, and therefore backpressure is applied to the reads, because there is not a next read until the chunk from the previous read has been consumed (and this may take time). Since the Chunk is consumed asynchronously, you may need to retain it to extend its lifecycle, as explained in this section. You can use Content.Source static methods to conveniently read (in a blocking way or non-blocking way), for example via static Content.Source.asStringAsync(Content.Source, Charset), or via an InputStream using static Content.Source.asInputStream(Content.Source). Refer to the Content.Source javadocs for further details. Content.Chunk offers a retain/release API to control the lifecycle of its ByteBuffer. When Content.Chunks are consumed synchronously, no additional retain/release API call is necessary, for example: public void consume(Content.Chunk chunk) throws IOException { // Consume the chunk synchronously within this method. // For example, parse the bytes into other objects, // or copy the bytes elsewhere (e.g. the file system). fileChannel.write(chunk.getByteBuffer()); if (chunk.isLast()) fileChannel.close(); } On the other hand, if the Content.Chunk is not consumed immediately, then it must be retained, and you must arrange for the Content.Chunk to be released at a later time, thus pairing the retain. For example, you may accumulate the Content.Chunks in a List to convert them to a String when all the Content.Chunks have been read. Since reading from a Content.Source is asynchronous, the String result is produced via a CompletableFuture: // CompletableTask is-a CompletableFuture. public class ChunksToString extends CompletableTask { private final List chunks = new ArrayList<>(); private final Content.Source source; public ChunksToString(Content.Source source) { this.source = source; } @Override public void run() { while (true) { // Read a chunk, must be eventually released. Content.Chunk chunk = source.read(); (1) if (chunk == null) { source.demand(this); return; } if (Content.Chunk.isFailure(chunk)) { handleFatalFailure(chunk.getFailure()); return; } // A normal chunk of content, consume it. consume(chunk); // Release the chunk. // This pairs the call to read() above. chunk.release(); (2) if (chunk.isLast()) { // Produce the result. String result = getResult(); // Complete this CompletableFuture with the result. complete(result); // The reading is complete. return; } } } public void consume(Content.Chunk chunk) { // The chunk is not consumed within this method, but // stored away for later use, so it must be retained. chunk.retain(); (3) chunks.add(chunk); } public String getResult() { Utf8StringBuilder builder = new Utf8StringBuilder(); // Iterate over the chunks, copying and releasing. for (Content.Chunk chunk : chunks) { // Copy the chunk bytes into the builder. builder.append(chunk.getByteBuffer()); // The chunk has been consumed, release it. // This pairs the retain() in consume(). chunk.release(); (4) } return builder.toCompleteString(); } } 1 The read() that must be paired with a release(). 2 The release() that pairs the read(). 3 The retain() that must be paired with a release(). 4 The release() that pairs the retain(). Note how method consume(Content.Chunk) retains the Content.Chunk because it does not consume it, but rather stores it away for later use. With this additional retain, the retain count is now 2: one implicitly from the read() that returned the Content.Chunk, and one explicit in consume(Content.Chunk). However, just after returning from consume(Content.Chunk) the Content.Chunk is released (pairing the implicit retain from read()), so that the retain count goes to 1, and an additional release is still necessary. Method getResult() arranges to release all the Content.Chunks that have been accumulated, pairing the retains done in consume(Content.Chunk), so that the retain count for the Content.Chunks goes finally to 0. The high-level abstraction that Jetty offers to write bytes is org.eclipse.jetty.io.Content.Sink. The primary method to use is Content.Sink.write(boolean, ByteBuffer, Callback), which performs a non-blocking write of the given ByteBuffer, with the indication of whether the write is the last. The Callback parameter is completed, successfully or with a failure, and possibly asynchronously by a different thread, when the write is complete. Your application can typically perform zero or more non-last writes, and one final last write. However, because the writes may be asynchronous, you cannot start a next write before the previous write is completed. This code is wrong: public void wrongWrite(Content.Sink sink, ByteBuffer content1, ByteBuffer content2) { // Initiate a first write. sink.write(false, content1, Callback.NOOP); // WRONG! Cannot initiate a second write before the first is complete. sink.write(true, content2, Callback.NOOP); } You must initiate a second write only when the first is finished, for example: public void manyWrites(Content.Sink sink, ByteBuffer content1, ByteBuffer content2) { // Initiate a first write. Callback.Completable resultOfWrites = Callback.Completable.with(callback1 -> sink.write(false, content1, callback1)) // Chain a second write only when the first is complete. .compose(callback2 -> sink.write(true, content2, callback2)); // Use the resulting Callback.Completable as you would use a CompletableFuture. // For example: resultOfWrites.whenComplete((ignored, failure) -> { if (failure == null) System.getLogger(\"sink\").log(INFO, \"writes completed successfully\"); else System.getLogger(\"sink\").log(INFO, \"writes failed\", failure); }); } When you need to perform an unknown number of writes, you must use an IteratingCallback, explained in this section, to avoid StackOverFlowErrors. For example, to copy from a Content.Source to a Content.Sink you should use the convenience method Content.copy(Content.Source, Content.Sink, Callback). For illustrative purposes, below you can find the implementation of copy(Content.Source, Content.Sink, Callback) that uses an IteratingCallback: @SuppressWarnings(\"InnerClassMayBeStatic\") class Copy extends IteratingCallback { private final Content.Source source; private final Content.Sink sink; private final Callback callback; private Content.Chunk chunk; public Copy(Content.Source source, Content.Sink sink, Callback callback) { this.source = source; this.sink = sink; // The callback to notify when the copy is completed. this.callback = callback; } @Override protected Action process() throws Throwable { // If the last write completed, succeed this IteratingCallback, // causing onCompleteSuccess() to be invoked. if (chunk != null && chunk.isLast()) return Action.SUCCEEDED; // Read a chunk. chunk = source.read(); // No chunk, demand to be called back when there will be more chunks. if (chunk == null) { source.demand(this::iterate); return Action.IDLE; } // The read failed, re-throw the failure // causing onCompleteFailure() to be invoked. if (Content.Chunk.isFailure(chunk)) throw chunk.getFailure(); // Copy the chunk. sink.write(chunk.isLast(), chunk.getByteBuffer(), this); return Action.SCHEDULED; } @Override public void succeeded() { // After every successful write, release the chunk. chunk.release(); super.succeeded(); } @Override public void failed(Throwable x) { super.failed(x); } @Override protected void onCompleteSuccess() { // The copy is succeeded, succeed the callback. callback.succeeded(); } @Override protected void onCompleteFailure(Throwable failure) { // In case of a failure, either on the // read or on the write, release the chunk. chunk.release(); // The copy is failed, fail the callback. callback.failed(failure); } @Override public InvocationType getInvocationType() { return InvocationType.NON_BLOCKING; } } Non-blocking writes can be easily turned in blocking writes. This leads to perhaps code that is simpler to read, but that also comes with a price: greater resource usage that may lead to less scalability and less performance. public void blockingWrite(Content.Sink sink, ByteBuffer content1, ByteBuffer content2) throws IOException { // First blocking write, returns only when the write is complete. Content.Sink.write(sink, false, content1); // Second blocking write, returns only when the write is complete. // It is legal to perform the writes sequentially, since they are blocking. Content.Sink.write(sink, true, content2); }","title":"Jetty I/O Architecture","component":"jetty","version":"12","name":"io","url":"/docs/jetty/12/programming-guide/arch/io.html","titles":[{"text":"Jetty I/O: SelectorManager","hash":"selector-manager","id":1},{"text":"Jetty I/O: EndPoint and Connection","hash":"endpoint-connection","id":2},{"text":"Jetty I/O: EndPoint","hash":"endpoint","id":3},{"text":"Jetty I/O: Connection","hash":"connection","id":4},{"text":"Jetty I/O: Connection.Listener","hash":"connection-listener","id":5},{"text":"Jetty I/O: TCP Network Echo","hash":"echo","id":6},{"text":"Content.Source","hash":"content-source","id":7},{"text":"Content.Chunk","hash":"content-source-chunk","id":8},{"text":"Content.Sink","hash":"content-sink","id":9}]},"45":{"id":45,"text":"The Java Management Extensions (JMX) APIs are standard API for managing and monitoring resources such as applications, devices, services, and the Java Virtual Machine itself. The JMX API includes remote access, so a remote management console such as Java Mission Control can interact with a running application for these purposes. Jetty architecture is based on components organized in a tree. Every time a component is added to or removed from the component tree, an event is emitted, and Container.Listener implementations can listen to those events and perform additional actions. org.eclipse.jetty.jmx.MBeanContainer listens to those events and registers/unregisters the Jetty components as MBeans into the platform MBeanServer. The Jetty components are annotated with Jetty JMX annotations so that they can provide specific JMX metadata such as attributes and operations that should be exposed via JMX. Therefore, when a component is added to the component tree, MBeanContainer is notified, it creates the MBean from the component POJO and registers it to the MBeanServer. Similarly, when a component is removed from the tree, MBeanContainer is notified, and unregisters the MBean from the MBeanServer. The Maven coordinates for the Jetty JMX support are: org.eclipse.jetty jetty-jmx 12.0.10-SNAPSHOT Enabling JMX support is always recommended because it provides valuable information about the system, both for monitoring purposes and for troubleshooting purposes in case of problems. To enable JMX support on the server: Server server = new Server(); // Create an MBeanContainer with the platform MBeanServer. MBeanContainer mbeanContainer = new MBeanContainer(ManagementFactory.getPlatformMBeanServer()); // Add MBeanContainer to the root component. server.addBean(mbeanContainer); Similarly on the client: HttpClient httpClient = new HttpClient(); // Create an MBeanContainer with the platform MBeanServer. MBeanContainer mbeanContainer = new MBeanContainer(ManagementFactory.getPlatformMBeanServer()); // Add MBeanContainer to the root component. httpClient.addBean(mbeanContainer); The MBeans exported to the platform MBeanServer can only be accessed locally (from the same machine), not from remote machines. This means that this configuration is enough for development, where you have easy access (with graphical user interface) to the machine where Jetty runs, but it is typically not enough when the machine where Jetty runs is remote, or only accessible via SSH or otherwise without graphical user interface support. In these cases, you have to enable JMX Remote Access. There are two ways of enabling remote connectivity so that JMC can connect to the remote JVM to visualize MBeans. Use the com.sun.management.jmxremote system property on the command line. Unfortunately, this solution does not work well with firewalls and is not flexible. Use Jetty’s ConnectorServer class. org.eclipse.jetty.jmx.ConnectorServer will use by default RMI to allow connection from remote clients, and it is a wrapper around the standard JDK class JMXConnectorServer, which is the class that provides remote access to JMX clients. Connecting to the remote JVM is a two step process: First, the client will connect to the RMI registry to download the RMI stub for the JMXConnectorServer; this RMI stub contains the IP address and port to connect to the RMI server, i.e. the remote JMXConnectorServer. Second, the client uses the RMI stub to connect to the RMI server (i.e. the remote JMXConnectorServer) typically on an address and port that may be different from the RMI registry address and port. The host and port configuration for the RMI registry and the RMI server is specified by a JMXServiceURL. The string format of an RMI JMXServiceURL is: service:jmx:rmi://:/jndi/rmi://:/jmxrmi Default values are: rmi_server_host = localhost rmi_server_port = 1099 rmi_registry_host = localhost rmi_registry_port = 1099 With the default configuration, only clients that are local to the server machine can connect to the RMI registry and RMI server - this is done for security reasons. With this configuration it would still be possible to access the MBeans from remote using a SSH tunnel. By specifying an appropriate JMXServiceURL, you can fine tune the network interfaces the RMI registry and the RMI server bind to, and the ports that the RMI registry and the RMI server listen to. The RMI server and RMI registry hosts and ports can be the same (as in the default configuration) because RMI is able to multiplex traffic arriving to a port to multiple RMI objects. If you need to allow JMX remote access through a firewall, you must open both the RMI registry and the RMI server ports. JMXServiceURL common examples: service:jmx:rmi:///jndi/rmi:///jmxrmi rmi_server_host = local host address rmi_server_port = randomly chosen rmi_registry_host = local host address rmi_registry_port = 1099 service:jmx:rmi://0.0.0.0:1099/jndi/rmi://0.0.0.0:1099/jmxrmi rmi_server_host = any address rmi_server_port = 1099 rmi_registry_host = any address rmi_registry_port = 1099 service:jmx:rmi://localhost:1100/jndi/rmi://localhost:1099/jmxrmi rmi_server_host = loopback address rmi_server_port = 1100 rmi_registry_host = loopback address rmi_registry_port = 1099 When ConnectorServer is started, its RMI stub is exported to the RMI registry. The RMI stub contains the IP address and port to connect to the RMI object, but the IP address is typically the machine host name, not the host specified in the JMXServiceURL. To control the IP address stored in the RMI stub you need to set the system property java.rmi.server.hostname with the desired value. This is especially important when binding the RMI server host to the loopback address for security reasons. See also JMX Remote Access via SSH Tunnel. To allow JMX remote access, create and configure a ConnectorServer: Server server = new Server(); // Setup Jetty JMX. MBeanContainer mbeanContainer = new MBeanContainer(ManagementFactory.getPlatformMBeanServer()); server.addBean(mbeanContainer); // Setup ConnectorServer. // Bind the RMI server to the wildcard address and port 1999. // Bind the RMI registry to the wildcard address and port 1099. JMXServiceURL jmxURL = new JMXServiceURL(\"rmi\", null, 1999, \"/jndi/rmi:///jmxrmi\"); ConnectorServer jmxServer = new ConnectorServer(jmxURL, \"org.eclipse.jetty.jmx:name=rmiconnectorserver\"); // Add ConnectorServer as a bean, so it is started // with the Server and also exported as MBean. server.addBean(jmxServer); server.start(); The standard JMXConnectorServer provides several options to authorize access, for example via JAAS or via configuration files. For a complete guide to controlling authentication and authorization in JMX, see the official JMX documentation. In the sections below we detail one way to setup JMX authentication and authorization, using configuration files for users, passwords and roles: Server server = new Server(); // Setup Jetty JMX. MBeanContainer mbeanContainer = new MBeanContainer(ManagementFactory.getPlatformMBeanServer()); server.addBean(mbeanContainer); // Setup ConnectorServer. JMXServiceURL jmxURL = new JMXServiceURL(\"rmi\", null, 1099, \"/jndi/rmi:///jmxrmi\"); Map env = new HashMap<>(); env.put(\"com.sun.management.jmxremote.access.file\", \"/path/to/users.access\"); env.put(\"com.sun.management.jmxremote.password.file\", \"/path/to/users.password\"); ConnectorServer jmxServer = new ConnectorServer(jmxURL, env, \"org.eclipse.jetty.jmx:name=rmiconnectorserver\"); server.addBean(jmxServer); server.start(); The users.access file format is defined in the $JAVA_HOME/conf/management/jmxremote.access file. A simplified version is the following: users.access user1 readonly user2 readwrite The users.password file format is defined in the $JAVA_HOME/conf/management/jmxremote.password.template file. A simplified version is the following: users.password user1 password1 user2 password2 The users.access and users.password files are not standard *.properties files — the user must be separated from the role or password by a space character. The JMX communication via RMI happens by default in clear-text. It is possible to configure the ConnectorServer with a SslContextFactory so that the JMX communication via RMI is encrypted: Server server = new Server(); // Setup Jetty JMX. MBeanContainer mbeanContainer = new MBeanContainer(ManagementFactory.getPlatformMBeanServer()); server.addBean(mbeanContainer); // Setup SslContextFactory. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); // Setup ConnectorServer with SslContextFactory. JMXServiceURL jmxURL = new JMXServiceURL(\"rmi\", null, 1099, \"/jndi/rmi:///jmxrmi\"); ConnectorServer jmxServer = new ConnectorServer(jmxURL, null, \"org.eclipse.jetty.jmx:name=rmiconnectorserver\", sslContextFactory); server.addBean(jmxServer); server.start(); It is possible to use the same SslContextFactory.Server used to configure the Jetty ServerConnector that supports TLS also for the JMX communication via RMI. The keystore must contain a valid certificate signed by a Certification Authority. The RMI mechanic is the usual one: the RMI client (typically a monitoring console) will connect first to the RMI registry (using TLS), download the RMI server stub that contains the address and port of the RMI server to connect to, then connect to the RMI server (using TLS). This also mean that if the RMI registry and the RMI server are on different hosts, the RMI client must have available the cryptographic material to validate both hosts. Having certificates signed by a Certification Authority simplifies by a lot the configuration needed to get the JMX communication over TLS working properly. If that is not the case (for example the certificate is self-signed), then you need to specify the required system properties that allow RMI (especially when acting as an RMI client) to retrieve the cryptographic material necessary to establish the TLS connection. For example, trying to connect using the JDK standard JMXConnector with both the RMI server and the RMI registry via TLS to domain.com with a self-signed certificate: // System properties necessary for an RMI client to trust a self-signed certificate. System.setProperty(\"javax.net.ssl.trustStore\", \"/path/to/trustStore\"); System.setProperty(\"javax.net.ssl.trustStorePassword\", \"secret\"); JMXServiceURL jmxURL = new JMXServiceURL(\"service:jmx:rmi:///jndi/rmi://domain.com:1100/jmxrmi\"); Map clientEnv = new HashMap<>(); // Required to connect to the RMI registry via TLS. clientEnv.put(ConnectorServer.RMI_REGISTRY_CLIENT_SOCKET_FACTORY_ATTRIBUTE, new SslRMIClientSocketFactory()); try (JMXConnector client = JMXConnectorFactory.connect(jmxURL, clientEnv)) { Set names = client.getMBeanServerConnection().queryNames(null, null); } Similarly, to launch JMC: $ jmc -vmargs -Djavax.net.ssl.trustStore=/path/to/trustStore -Djavax.net.ssl.trustStorePassword=secret These system properties are required when launching the ConnectorServer too, on the server, because it acts as an RMI client with respect to the RMI registry. You can access JMX MBeans on a remote machine when the RMI ports are not open, for example because of firewall policies, but you have SSH access to the machine using local port forwarding via an SSH tunnel. In this case you want to configure the ConnectorServer with a JMXServiceURL that binds the RMI server and the RMI registry to the loopback interface only: service:jmx:rmi://localhost:1099/jndi/rmi://localhost:1099/jmxrmi. Then you setup the local port forwarding with the SSH tunnel: $ ssh -L 1099:localhost:1099 @ Now you can use JConsole or JMC to connect to localhost:1099 on your local computer. The traffic will be forwarded to machine_host and when there, SSH will forward the traffic to localhost:1099, which is exactly where the ConnectorServer listens. When you configure ConnectorServer in this way, you must set the system property -Djava.rmi.server.hostname=localhost, on the server. This is required because when the RMI server is exported, its address and port are stored in the RMI stub. You want the address in the RMI stub to be localhost so that when the RMI stub is downloaded to the remote client, the RMI communication will go through the SSH tunnel. The Jetty JMX support, and in particular MBeanContainer, is notified every time a bean is added to the component tree. The bean is scanned for Jetty JMX annotations to obtain JMX metadata: the JMX attributes and JMX operations. // Annotate the class with @ManagedObject and provide a description. @ManagedObject(\"Services that provide useful features\") class Services { private final Map services = new ConcurrentHashMap<>(); private boolean enabled = true; // A read-only attribute with description. @ManagedAttribute(value = \"The number of services\", readonly = true) public int getServiceCount() { return services.size(); } // A read-write attribute with description. // Only the getter is annotated. @ManagedAttribute(value = \"Whether the services are enabled\") public boolean isEnabled() { return enabled; } // There is no need to annotate the setter. public void setEnabled(boolean enabled) { this.enabled = enabled; } // An operation with description and impact. // The @Name annotation is used to annotate parameters // for example to display meaningful parameter names. @ManagedOperation(value = \"Retrieves the service with the given name\", impact = \"INFO\") public Object getService(@Name(value = \"serviceName\") String n) { return services.get(n); } } The JMX metadata and the bean are wrapped by an instance of org.eclipse.jetty.jmx.ObjectMBean that exposes the JMX metadata and, upon request from JMX consoles, invokes methods on the bean to get/set attribute values and perform operations. You can provide a custom subclass of ObjectMBean to further customize how the bean is exposed to JMX. The custom ObjectMBean subclass must respect the following naming convention: .jmx.MBean. For example, class com.acme.Foo may have a custom ObjectMBean subclass named com.acme.jmx.FooMBean. //package com.acme; @ManagedObject class Service { } //package com.acme.jmx; class ServiceMBean extends ObjectMBean { ServiceMBean(Object service) { super(service); } } The custom ObjectMBean subclass is also scanned for Jetty JMX annotations and overrides the JMX metadata obtained by scanning the bean class. This allows to annotate only the custom ObjectMBean subclass and keep the bean class free of the Jetty JMX annotations. //package com.acme; // No Jetty JMX annotations. class CountService { private int count; public int getCount() { return count; } public void addCount(int value) { count += value; } } //package com.acme.jmx; @ManagedObject(\"the count service\") class CountServiceMBean extends ObjectMBean { public CountServiceMBean(Object service) { super(service); } private CountService getCountService() { return (CountService)super.getManagedObject(); } @ManagedAttribute(\"the current service count\") public int getCount() { return getCountService().getCount(); } @ManagedOperation(value = \"adds the given value to the service count\", impact = \"ACTION\") public void addCount(@Name(\"count delta\") int value) { getCountService().addCount(value); } } The scan for Jetty JMX annotations is performed on the bean class and all the interfaces implemented by the bean class, then on the super-class and all the interfaces implemented by the super-class and so on until java.lang.Object is reached. For each type — class or interface, the corresponding *.jmx.*MBean is looked up and scanned as well with the same algorithm. For each type, the scan looks for the class-level annotation @ManagedObject. If it is found, the scan looks for method-level @ManagedAttribute and @ManagedOperation annotations; otherwise it skips the current type and moves to the next type to scan. The @ManagedObject annotation is used on a class at the top level to indicate that it should be exposed as an MBean. It has only one attribute to it which is used as the description of the MBean. The @ManagedAttribute annotation is used to indicate that a given method is exposed as a JMX attribute. This annotation is placed always on the getter method of a given attribute. Unless the readonly attribute is set to true in the annotation, a corresponding setter is looked up following normal naming conventions. For example if this annotation is on a method called String getFoo() then a method called void setFoo(String) would be looked up, and if found wired as the setter for the JMX attribute. The @ManagedOperation annotation is used to indicate that a given method is exposed as a JMX operation. A JMX operation has an impact that can be INFO if the operation returns a value without modifying the object, ACTION if the operation does not return a value but modifies the object, and \"ACTION_INFO\" if the operation both returns a value and modifies the object. If the impact is not specified, it has the default value of UNKNOWN. The @Name annotation is used to assign a name and description to parameters in method signatures so that when rendered by JMX consoles it is clearer what the parameter meaning is.","title":"Jetty JMX Support","component":"jetty","version":"12","name":"jmx","url":"/docs/jetty/12/programming-guide/arch/jmx.html","titles":[{"text":"Enabling JMX Support","hash":"enabling-jmx-support","id":1},{"text":"Enabling JMX Remote Access","hash":"remote","id":2},{"text":"JMX Remote Access Authorization","hash":"remote-authorization","id":3},{"text":"Securing JMX Remote Access with TLS","hash":"securing-jmx-remote-access-with-tls","id":4},{"text":"JMX Remote Access with Port Forwarding via SSH Tunnel","hash":"remote-ssh-tunnel","id":5},{"text":"Jetty JMX Annotations","hash":"annotation","id":6},{"text":"@ManagedObject","hash":"managedobject","id":7},{"text":"@ManagedAttribute","hash":"managedattribute","id":8},{"text":"@ManagedOperation","hash":"managedoperation","id":9},{"text":"@Name","hash":"name","id":10}]},"46":{"id":46,"text":"The Jetty architecture is based on components, typically organized in a component tree. These components have an internal state that varies with the component life cycle (that is, whether the component is started or stopped), as well as with the component use at runtime. The typical example is a thread pool, whose internal state — such as the number of pooled threads or the job queue size — changes as the thread pool is used by the running client or server. In many cases, the component state change produces an event that is broadcast to listeners. Applications can register listeners to these components to be notified of the events they produce. This section lists the listeners available in the Jetty components, but the events and listener APIs are discussed in the component specific sections. Listeners common to both client and server: arch/bean.adoc#listener arch/io.adoc#connection-listener client/http.adoc#configuration-tls-listener server/http.adoc#connector-protocol Listeners that are server specific: server/http.adoc#request-processing-events","title":"Jetty Listeners","component":"jetty","version":"12","name":"listener","url":"/docs/jetty/12/programming-guide/arch/listener.html","titles":[]},"47":{"id":47,"text":"Writing a performant client or server is difficult, because it should: Scale well with the number of processors. Be efficient at using processor caches to avoid parallel slowdown. Support multiple network protocols that may have very different requirements; for example, multiplexed protocols such as HTTP/2 introduce new challenges that are not present in non-multiplexed protocols such as HTTP/1.1. Support different application threading models; for example, if a Jetty server invokes server-side application code that is allowed to call blocking APIs, then the Jetty server should not be affected by how long the blocking API call takes, and should be able to process other connections or other requests in a timely fashion. The Jetty threading architecture can be modeled with a producer/consumer pattern, where produced tasks needs to be consumed efficiently. For example, Jetty produces (among others) these tasks: A task that wraps a NIO selection event, see the Jetty I/O architecture. A task that wraps the invocation of application code that may block (for example, the invocation of a Servlet to handle an HTTP request). A task is typically a Runnable object that may implement org.eclipse.jetty.util.thread.Invocable to indicate the behavior of the task (in particular, whether the task may block or not). Once a task has been produced, it may be consumed using these modes: Produce-Consume Produce-Execute-Consume Execute-Produce-Consume In the Produce-Consume mode, the producer thread loops to produce a task that is run directly by the Producer Thread. If the task is a NIO selection event, then this mode is the thread-per-selector mode which is very CPU core cache efficient, but suffers from the head-of-line blocking: if one of the tasks blocks or runs slowly, then subsequent tasks cannot be produced (and therefore cannot be consumed either) and will pay in latency the cost of running previous, possibly unrelated, tasks. This mode should only be used if the produced task is known to never block, or if the system tolerates well (or does not care about) head-of-line blocking. In the Produce-Execute-Consume mode, the Producer Thread loops to produce tasks that are submitted to a java.util.concurrent.Executor to be run by Worker Threads different from the Producer Thread. The Executor implementation typically adds the task to a queue, and dequeues the task when there is a worker thread available to run it. This mode solves the head-of-line blocking discussed in the Produce-Consume section, but suffers from other issues: It is not CPU core cache efficient, as the data available to the producer thread will need to be accessed by another thread that likely is going to run on a CPU core that will not have that data in its caches. If the tasks take time to be run, the Executor queue may grow indefinitely. A small latency is added to every task: the time it waits in the Executor queue. In the Execute-Produce-Consume mode, the producer thread Thread 1 loops to produce a task, then submits one internal task to an Executor to take over production on thread Thread 2, and then runs the task in Thread 1, and so on. This mode may operate like Produce-Consume when the take over production task run, for example, by thread Thread 3 takes time to be executed (for example, in a busy server): then thread Thread 2 will produce one task and run it, then produce another task and run it, etc. — Thread 2 behaves exactly like the Produce-Consume mode. By the time thread Thread 3 takes over task production from Thread 2, all the work might already be done. This mode may also operate similarly to Produce-Execute-Consume when the take over production task always finds a free CPU core immediately (for example, in a mostly idle server): thread Thread 1 will produce a task, yield production to Thread 2 while Thread 1 is running the task; Thread 2 will produce a task, yield production to Thread 3 while Thread 2 is running the task, etc. Differently from Produce-Execute-Consume, here production happens on different threads, but the advantage is that the task is run by the same thread that produced it (which is CPU core cache efficient). The modes of task consumption discussed above are captured by the org.eclipse.jetty.util.thread.ExecutionStrategy interface, with an additional implementation that also takes into account the behavior of the task when the task implements Invocable. For example, a task that declares itself as non-blocking can be consumed using the Produce-Consume mode, since there is no risk to stop production because the task will not block. Conversely, a task that declares itself as blocking will stop production, and therefore must be consumed using either the Produce-Execute-Consume mode or the Execute-Produce-Consume mode. Deciding between these two modes depends on whether there is a free thread immediately available to take over production, and this is captured by the org.eclipse.jetty.util.thread.TryExecutor interface. An implementation of TryExecutor can be asked whether a thread can be immediately and exclusively allocated to run a task, as opposed to a normal Executor that can only queue the task in the expectation that there will be a thread available in the near future to run the task. The concept of task consumption modes, coupled with Invocable tasks that expose their own behavior, coupled with a TryExecutor that guarantees whether production can be immediately taken over are captured by the default Jetty execution strategy, named org.eclipse.jetty.util.thread.AdaptiveExecutionStrategy. AdaptiveExecutionStrategy was previously named EatWhatYouKill, named after a hunting proverb in the sense that one should produce (kill) only what it consumes (eats). Jetty’s threading architecture requires a more sophisticated thread pool than what offered by Java’s java.util.concurrent.ExecutorService. Jetty’s default thread pool implementation is QueuedThreadPool. QueuedThreadPool integrates with the Jetty component model, implements Executor, provides a TryExecutor implementation (discussed in the adaptive execution strategy section), and supports virtual threads (introduced as a preview feature in Java 19 and Java 20, and as an official feature since Java 21). QueuedThreadPool uses a BlockingQueue to store tasks that will be executed as soon as a thread is available. It is common, but too simplistic, to think that an upper bound to the thread pool queue is a good way to limit the number of concurrent HTTP requests. In case of asynchronous servers like Jetty, applications may have more than one thread handling a single request. Furthermore, the server implementation may produce a number of tasks that must be run by the thread pool, otherwise the server stops working properly. Therefore, the \"one-thread-per-request\" model is too simplistic, and the real model that predicts the number of threads that are necessary is too complicated to produce an accurate value. For example, a sudden large spike of requests arriving to the server may find the thread pool in an idle state where the number of threads is shrunk to the minimum. This will cause many tasks to be queued up, way before an HTTP request is even read from the network. Add to this that there could be I/O failures processing requests, which may be submitted as a new task to the thread pool. Furthermore, multiplexed protocols like HTTP/2 have a much more complex model (due to data flow control). For multiplexed protocols, the implementation must be able to write in order to progress reads (and must be able to read in order to progress writes), possibly causing more tasks to be submitted to the thread pool. If any of the submitted tasks is rejected because the queue is bounded the server may grind to a halt, because the task must be executed, sometimes necessarily in a different thread. For these reasons: The thread pool queue must be unbounded. There are better strategies to limit the number of concurrent requests, discussed in this section. QueuedThreadPool can be configured with a maxThreads value. However, some of the Jetty components (such as the selectors) permanently steal threads for their internal use, or rather QueuedThreadPool leases some threads to these components. These threads are reported by QueuedThreadPool.leasedThreads and are not available to run application code. QueuedThreadPool can be configured with a reservedThreads value. This value represents the maximum number of threads that can be reserved and used by the TryExecutor implementation. A negative value for QueuedThreadPool.reservedThreads means that the actual value will be heuristically derived from the number of CPU cores and QueuedThreadPool.maxThreads. A value of zero for QueuedThreadPool.reservedThreads means that reserved threads are disabled, and therefore the Execute-Produce-Consume mode is never used — the Produce-Execute-Consume mode is always used instead. QueuedThreadPool always maintains the number of threads between QueuedThreadPool.minThreads and QueuedThreadPool.maxThreads; during load spikes the number of thread grows to meet the load demand, and when the load on the system diminishes or the system goes idle, the number of threads shrinks. Shrinking QueuedThreadPool is important in particular in containerized environments, where typically you want to return the memory occupied by the threads to the operative system. The shrinking of the QueuedThreadPool is controlled by two parameters: QueuedThreadPool.idleTimeout and QueuedThreadPool.maxEvictCount. QueuedThreadPool.idleTimeout indicates how long a thread should stay around when it is idle, waiting for tasks to execute. The longer the threads stay around, the more ready they are in case of new load spikes on the system; however, they consume resources: a Java platform thread typically allocates 1 MiB of native memory. QueuedThreadPool.maxEvictCount controls how many idle threads are evicted for one QueuedThreadPool.idleTimeout period. The larger this value is, the quicker the threads are evicted when the QueuedThreadPool is idle or has less load, and their resources returned to the operative system; however, large values may result in too much thread thrashing: the QueuedThreadPool shrinks too fast and must re-create a lot of threads in case of a new load spike on the system. A good balance between QueuedThreadPool.idleTimeout and QueuedThreadPool.maxEvictCount depends on the load profile of your system, and it is often tuned via trial and error. Virtual threads have been introduced in Java 19 and Java 20 as a preview feature, and have become an official feature since Java 21. In Java versions where virtual threads are a preview feature, remember to add --enable-preview to the JVM command line options to use virtual threads. QueuedThreadPool can be configured to use virtual threads by specifying the virtual threads Executor: QueuedThreadPool threadPool = new QueuedThreadPool(); threadPool.setVirtualThreadsExecutor(Executors.newVirtualThreadPerTaskExecutor()); Server server = new Server(threadPool); Jetty cannot enforce that the Executor passed to setVirtualThreadsExecutor(Executor) uses virtual threads, so make sure to specify a virtual threads Executor and not a normal Executor that uses platform threads. AdaptiveExecutionStrategy makes use of this setting when it determines that a task should be run with the Produce-Execute-Consume mode: rather than submitting the task to QueuedThreadPool to be run in a platform thread, it submits the task to the virtual threads Executor. Enabling virtual threads in QueuedThreadPool will default the number of reserved threads to zero, unless the number of reserved threads is explicitly configured to a positive value. Defaulting the number of reserved threads to zero ensures that the Produce-Execute-Consume mode is always used, which means that virtual threads will always be used for blocking tasks.","title":"Jetty Threading Architecture","component":"jetty","version":"12","name":"threads","url":"/docs/jetty/12/programming-guide/arch/threads.html","titles":[{"text":"Execution Strategies","hash":"execution-strategy","id":1},{"text":"Produce-Consume","hash":"execution-strategy-pc","id":2},{"text":"Produce-Execute-Consume","hash":"execution-strategy-pec","id":3},{"text":"Execute-Produce-Consume","hash":"execution-strategy-epc","id":4},{"text":"Adaptive Execution Strategy","hash":"execution-strategy-adaptive","id":5},{"text":"Thread Pool","hash":"thread-pool","id":6},{"text":"Thread Pool Queue","hash":"thread-pool-queue","id":7},{"text":"QueuedThreadPool configuration","hash":"thread-pool-configuration","id":8},{"text":"Virtual Threads","hash":"thread-pool-virtual-threads","id":9}]},"48":{"id":48,"text":"The Jetty HTTP client module provides easy-to-use APIs and utility classes to perform HTTP (or HTTPS) requests. Jetty’s HTTP client is non-blocking and asynchronous. It offers an asynchronous API that never blocks for I/O, making it very efficient in thread utilization and well suited for high performance scenarios such as load testing or parallel computation. However, when all you need to do is to perform a GET request to a resource, Jetty’s HTTP client offers also a synchronous API; a programming interface where the thread that issued the request blocks until the request/response conversation is complete. Jetty’s HTTP client supports different HTTP formats: HTTP/1.1, HTTP/2, HTTP/3 and FastCGI. Each format has a different HttpClientTransport implementation, that in turn use a low-level transport to communicate with the server. This means that the semantic of an HTTP request such as: \" GET the resource /index.html \" can be carried over the low-level transport in different formats. The most common and default format is HTTP/1.1. That said, Jetty’s HTTP client can carry the same request using the HTTP/2 format, the HTTP/3 format, or the FastCGI format. Furthermore, every format can be transported over different low-level transport, such as TCP, Unix-Domain sockets, QUIC or memory. Supports for Unix-Domain sockets requires Java 16 or later, since Unix-Domain sockets support has been introduced in OpenJDK with JEP 380. The FastCGI format is used in Jetty’s FastCGI support that allows Jetty to work as a reverse proxy to PHP (exactly like Apache or Nginx do) and therefore be able to serve, for example, WordPress websites, often in conjunction with Unix-Domain sockets (although it is possible to use FastCGI via network too). The HTTP/2 format allows Jetty’s HTTP client to perform requests using HTTP/2 to HTTP/2 enabled websites, see also Jetty’s HTTP/2 support. The HTTP/3 format allows Jetty’s HTTP client to perform requests using HTTP/3 to HTTP/3 enabled websites, see also Jetty’s HTTP/3 support. Out of the box features that you get with the Jetty HTTP client include: Redirect support — redirect codes such as 302 or 303 are automatically followed. Cookies support — cookies sent by servers are stored and sent back to servers in matching requests. Authentication support — HTTP \"Basic\", \"Digest\" and \"SPNEGO\" authentications are supported, others are pluggable. Forward proxy support — HTTP proxying, SOCKS4 and SOCKS5 proxying. The Jetty artifact that provides the main HTTP client implementation is jetty-client. The Maven artifact coordinates are the following: org.eclipse.jetty jetty-client 12.0.10-SNAPSHOT The main class is named org.eclipse.jetty.client.HttpClient. You can think of a HttpClient instance as a browser instance. Like a browser it can make requests to different domains, it manages redirects, cookies and authentication, you can configure it with a forward proxy, and it provides you with the responses to the requests you make. In order to use HttpClient, you must instantiate it, configure it, and then start it: // Instantiate HttpClient. HttpClient httpClient = new HttpClient(); // Configure HttpClient, for example: httpClient.setFollowRedirects(false); // Start HttpClient. httpClient.start(); You may create multiple instances of HttpClient, but typically one instance is enough for an application. There are several reasons for having multiple HttpClient instances including, but not limited to: You want to specify different configuration parameters (for example, one instance is configured with a forward proxy while another is not). You want the two instances to behave like two different browsers and hence have different cookies, different authentication credentials, etc. You want to use different HttpClientTransports. Like browsers, HTTPS requests are supported out-of-the-box (see this section for the TLS configuration), as long as the server provides a valid certificate. In case the server does not provide a valid certificate (or in case it is self-signed) you want to customize HttpClient's TLS configuration as described in this section. It is recommended that when your application stops, you also stop the HttpClient instance (or instances) that you are using. // Stop HttpClient. httpClient.stop(); Stopping HttpClient makes sure that the memory it holds (for example, ByteBuffer pools, authentication credentials, cookies, etc.) is released, and that the thread pool and scheduler are properly stopped allowing all threads used by HttpClient to exit. You cannot call HttpClient.stop() from one of its own threads, as it would cause a deadlock. It is recommended that you stop HttpClient from an unrelated thread, or from a newly allocated thread, for example: // Stop HttpClient from a new thread. // Use LifeCycle.stop(...) to rethrow checked exceptions as unchecked. new Thread(() -> LifeCycle.stop(httpClient)).start(); A HttpClient instance can be thought as a browser instance, and it manages the following components: A CookieStore (see this section). A AuthenticationStore (see this section). A ProxyConfiguration (see this section). A set of Destinations A Destination is the client-side component that represents an origin server, and manages a queue of requests for that origin, and a pool of connections to that origin. An origin may be simply thought as the tuple (scheme, host, port) and it is where the client connects to in order to communicate with the server. However, this is not enough. If you use HttpClient to write a proxy you may have different clients that want to contact the same server. In this case, you may not want to use the same proxy-to-server connection to proxy requests for both clients, for example for authentication reasons: the server may associate the connection with authentication credentials, and you do not want to use the same connection for two different users that have different credentials. Instead, you want to use different connections for different clients and this can be achieved by \"tagging\" a destination with a tag object that represents the remote client (for example, it could be the remote client IP address). Two origins with the same (scheme, host, port) but different tag create two different destinations and therefore two different connection pools. However, also this is not enough. It is possible for a server to speak different protocols on the same port. A connection may start by speaking one protocol, for example HTTP/1.1, but then be upgraded to speak a different protocol, for example HTTP/2. After a connection has been upgraded to a second protocol, it cannot speak the first protocol anymore, so it can only be used to communicate using the second protocol. Two origins with the same (scheme, host, port, tag) but different protocol create two different destinations and therefore two different connection pools. Finally, it is possible for a server to speak the same protocol over different low-level transports (represented by Transport), for example TCP and Unix-Domain. Two origins with the same (scheme, host, port, tag, protocol) but different low-level transports create two different destinations and therefore two different connection pools. Therefore, an origin is identified by the tuple (scheme, host, port, tag, protocol, transport). A Destination manages a org.eclipse.jetty.client.ConnectionPool, where connections to a particular origin are pooled for performance reasons: opening a connection is a costly operation, and it’s better to reuse them for multiple requests. Remember that to select a specific Destination you must select a specific origin, and that an origin is identified by the tuple (scheme, host, port, tag, protocol, transport), so you can have multiple Destinations for the same host and port, and therefore multiple ConnectionPools You can access the ConnectionPool in this way: HttpClient httpClient = new HttpClient(); httpClient.start(); ConnectionPool connectionPool = httpClient.getDestinations().stream() // Find the destination by filtering on the Origin. .filter(destination -> destination.getOrigin().getAddress().getHost().equals(\"domain.com\")) .findAny() // Get the ConnectionPool. .map(Destination::getConnectionPool) .orElse(null); Jetty’s client library provides the following ConnectionPool implementations: DuplexConnectionPool, historically the first implementation, only used by the HTTP/1.1 transport. MultiplexConnectionPool, the generic implementation valid for any transport where connections are reused with a most recently used algorithm (that is, the connections most recently returned to the connection pool are the more likely to be used again). RoundRobinConnectionPool, similar to MultiplexConnectionPool but where connections are reused with a round-robin algorithm. RandomRobinConnectionPool, similar to MultiplexConnectionPool but where connections are reused with an algorithm that chooses them randomly. The ConnectionPool implementation can be customized for each destination in by setting a ConnectionPool.Factory on the HttpClientTransport: HttpClient httpClient = new HttpClient(); httpClient.start(); // The max number of connections in the pool. int maxConnectionsPerDestination = httpClient.getMaxConnectionsPerDestination(); // The max number of requests per connection (multiplexing). // Start with 1, since this value is dynamically set to larger values if // the transport supports multiplexing requests on the same connection. int maxRequestsPerConnection = 1; HttpClientTransport transport = httpClient.getTransport(); // Set the ConnectionPool.Factory using a lambda. transport.setConnectionPoolFactory(destination -> new RoundRobinConnectionPool(destination, maxConnectionsPerDestination, maxRequestsPerConnection)); When a request is sent, an origin is computed from the request; HttpClient uses that origin to find (or create if it does not exist) the correspondent destination. The request is then queued onto the destination, and this causes the destination to ask its connection pool for a free connection. If a connection is available, it is returned, otherwise a new connection is created. Once the destination has obtained the connection, it dequeues the request and sends it over the connection. The first request to a destination triggers the opening of the first connection. A second request with the same origin sent after the first request/response cycle is completed may reuse the same connection, depending on the connection pool implementation. A second request with the same origin sent concurrently with the first request will likely cause the opening of a second connection, depending on the connection pool implementation. The configuration parameter HttpClient.maxConnectionsPerDestination (see also the configuration section) controls the max number of connections that can be opened for a destination. If opening connections to a given origin takes a long time, then requests for that origin will queue up in the corresponding destination until the connections are established. Each connection can handle a limited number of concurrent requests. For HTTP/1.1, this number is always 1: there can only be one outstanding request for each connection. For HTTP/2 this number is determined by the server max_concurrent_stream setting (typically around 100, i.e. there can be up to 100 outstanding requests for every connection). When a destination has maxed out its number of connections, and all connections have maxed out their number of outstanding requests, more requests sent to that destination will be queued. When the request queue is full, the request will be failed. The configuration parameter HttpClient.maxRequestsQueuedPerDestination (see also the configuration section) controls the max number of requests that can be queued for a destination. HttpClient provides two types of APIs: a blocking API and a non-blocking API. The simpler way to perform a HTTP request is the following: HttpClient httpClient = new HttpClient(); httpClient.start(); // Perform a simple GET and wait for the response. ContentResponse response = httpClient.GET(\"http://domain.com/path?query\"); The method HttpClient.GET(...) performs a HTTP GET request to the given URI and returns a ContentResponse when the request/response conversation completes successfully. The ContentResponse object contains the HTTP response information: status code, headers and possibly content. The content length is limited by default to 2 MiB; for larger content see the section on response content handling. If you want to customize the request, for example by issuing a HEAD request instead of a GET, and simulating a browser user agent, you can do it in this way: ContentResponse response = httpClient.newRequest(\"http://domain.com/path?query\") .method(HttpMethod.HEAD) .agent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:17.0) Gecko/20100101 Firefox/17.0\") .send(); This is a shorthand for: Request request = httpClient.newRequest(\"http://domain.com/path?query\"); request.method(HttpMethod.HEAD); request.agent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:17.0) Gecko/20100101 Firefox/17.0\"); ContentResponse response = request.send(); You first create a request object using httpClient.newRequest(...), and then you customize it using the fluent API style (that is, a chained invocation of methods on the request object). When the request object is customized, you call request.send() that produces the ContentResponse when the request/response conversation is complete. The Request object, despite being mutable, cannot be reused for other requests. This is true also when trying to send two or more identical requests: you have to create two or more Request objects. Simple POST requests also have a shortcut method: ContentResponse response = httpClient.POST(\"http://domain.com/entity/1\") .param(\"p\", \"value\") .send(); The POST parameter values added via the param() method are automatically URL-encoded. Jetty’s HttpClient automatically follows redirects, so it handles the typical web pattern POST/Redirect/GET, and the response object contains the content of the response of the GET request. Following redirects is a feature that you can enable/disable on a per-request basis or globally. File uploads also require one line, and make use of java.nio.file classes: ContentResponse response = httpClient.POST(\"http://domain.com/upload\") .file(Paths.get(\"file_to_upload.txt\"), \"text/plain\") .send(); It is possible to impose a total timeout for the request/response conversation using the Request.timeout(...) method as follows: ContentResponse response = httpClient.newRequest(\"http://domain.com/path?query\") .timeout(5, TimeUnit.SECONDS) .send(); In the example above, when the 5 seconds expire, the request/response cycle is aborted and a java.util.concurrent.TimeoutException is thrown. So far we have shown how to use Jetty HTTP client in a blocking style — that is, the thread that issues the request blocks until the request/response conversation is complete. This section will look at Jetty’s HttpClient non-blocking, asynchronous APIs that are perfectly suited for large content downloads, for parallel processing of requests/responses and in cases where performance and efficient thread and resource utilization is a key factor. The asynchronous APIs rely heavily on listeners that are invoked at various stages of request and response processing. These listeners are implemented by applications and may perform any kind of logic. The implementation invokes these listeners in the same thread that is used to process the request or response. Therefore, if the application code in these listeners takes a long time to execute, the request or response processing is delayed until the listener returns. If you need to execute application code that takes long time inside a listener, it is typically better to spawn your own thread to execute the code that takes long time. In this way you return from the listener as soon as possible and allow the implementation to resume the processing of the request or response (or of other requests/responses). Request and response processing are executed by two different threads and therefore may happen concurrently. A typical example of this concurrent processing is an echo server, where a large upload may be concurrent with the large download echoed back. Remember that responses may be processed and completed before requests; a typical example is a large upload that triggers a quick response, for example an error, by the server: the response may arrive and be completed while the request content is still being uploaded. The application thread that calls Request.send(Response.CompleteListener) performs the processing of the request until either the request is fully sent over the network or until it would block on I/O, then it returns (and therefore never blocks). If it would block on I/O, the thread asks the I/O system to emit an event when the I/O will be ready to continue, then returns. When such an event is fired, a thread taken from the HttpClient thread pool will resume the processing of the request. Response are processed from the I/O thread taken from the HttpClient thread pool that processes the event that bytes are ready to be read. Response processing continues until either the response is fully processed or until it would block for I/O. If it would block for I/O, the thread asks the I/O system to emit an event when the I/O will be ready to continue, then returns. When such an event is fired, a (possibly different) thread taken from the HttpClient thread pool will resume the processing of the response. When the request and the response are both fully processed, the thread that finished the last processing (usually the thread that processes the response, but may also be the thread that processes the request — if the request takes more time than the response to be processed) is used to dequeue the next request for the same destination and to process it. A simple non-blocking GET request that discards the response content can be written in this way: httpClient.newRequest(\"http://domain.com/path\") .send(result -> { // Your logic here }); Method Request.send(Response.CompleteListener) returns void and does not block; the Response.CompleteListener lambda provided as a parameter is notified when the request/response conversation is complete, and the Result parameter allows you to access the request and response objects as well as failures, if any. You can impose a total timeout for the request/response conversation in the same way used by the synchronous API: httpClient.newRequest(\"http://domain.com/path\") .timeout(3, TimeUnit.SECONDS) .send(result -> { /* Your logic here */ }); The example above will impose a total timeout of 3 seconds on the request/response conversation. The HTTP client APIs use listeners extensively to provide hooks for all possible request and response events: httpClient.newRequest(\"http://domain.com/path\") // Add request hooks. .onRequestQueued(request -> { /* ... */ }) .onRequestBegin(request -> { /* ... */ }) .onRequestHeaders(request -> { /* ... */ }) .onRequestCommit(request -> { /* ... */ }) .onRequestContent((request, content) -> { /* ... */ }) .onRequestFailure((request, failure) -> { /* ... */ }) .onRequestSuccess(request -> { /* ... */ }) // Add response hooks. .onResponseBegin(response -> { /* ... */ }) .onResponseHeader((response, field) -> true) .onResponseHeaders(response -> { /* ... */ }) .onResponseContentAsync((response, chunk, demander) -> demander.run()) .onResponseFailure((response, failure) -> { /* ... */ }) .onResponseSuccess(response -> { /* ... */ }) // Result hook. .send(result -> { /* ... */ }); This makes Jetty HTTP client suitable for HTTP load testing because, for example, you can accurately time every step of the request/response conversation (thus knowing where the request/response time is really spent). The code in request and response listeners should not block. It is allowed to call other blocking APIs, such as the Java file-system APIs. You should not call blocking APIs that: Wait for other request or response events, such as receiving other request or response content chunks. Use wait/notify primitives such as those available in java.lang.Object or java.util.concurrent.locks.Condition. If the listener code blocks, the implementation also will be blocked and will not be able to advance the processing of the request or response that the listener code is likely waiting for, causing a deadlock. Have a look at the Request.Listener class to know about request events, and to the Response.Listener class to know about response events. Jetty’s HttpClient provides a number of utility classes off the shelf to handle request content. You can provide request content as String, byte[], ByteBuffer, java.nio.file.Path, InputStream, and provide your own implementation of org.eclipse.jetty.client.Request.Content. Here’s an example that provides the request content using java.nio.file.Paths: ContentResponse response = httpClient.POST(\"http://domain.com/upload\") .body(new PathRequestContent(\"text/plain\", Paths.get(\"file_to_upload.txt\"))) .send(); Alternatively, you can use FileInputStream via the InputStreamRequestContent utility class: ContentResponse response = httpClient.POST(\"http://domain.com/upload\") .body(new InputStreamRequestContent(\"text/plain\", new FileInputStream(\"file_to_upload.txt\"))) .send(); Since InputStream is blocking, then also the send of the request will block if the input stream blocks, even in case of usage of the non-blocking HttpClient APIs. If you have already read the content in memory, you can pass it as a byte[] (or a String) using the BytesRequestContent (or StringRequestContent) utility class: ContentResponse bytesResponse = httpClient.POST(\"http://domain.com/upload\") .body(new BytesRequestContent(\"text/plain\", bytes)) .send(); ContentResponse stringResponse = httpClient.POST(\"http://domain.com/upload\") .body(new StringRequestContent(\"text/plain\", string)) .send(); If the request content is not immediately available, but your application will be notified of the content to send, you can use AsyncRequestContent in this way: AsyncRequestContent content = new AsyncRequestContent(); httpClient.POST(\"http://domain.com/upload\") .body(content) .send(result -> { // Your logic here }); // Content not available yet here. // An event happens in some other class, in some other thread. class ContentPublisher { void publish(byte[] bytes, boolean lastContent) { // Wrap the bytes into a new ByteBuffer. ByteBuffer buffer = ByteBuffer.wrap(bytes); // Write the content. content.write(buffer, Callback.NOOP); // Close AsyncRequestContent when all the content is arrived. if (lastContent) content.close(); } } While the request content is awaited and consequently uploaded by the client application, the server may be able to respond (at least with the response headers) completely asynchronously. In this case, Response.Listener callbacks will be invoked before the request is fully sent. This allows fine-grained control of the request/response conversation: for example the server may reject contents that are too big, send a response to the client, which in turn may stop the content upload. Another way to provide request content is by using an OutputStreamRequestContent, which allows applications to write request content when it is available to the OutputStream provided by OutputStreamRequestContent: OutputStreamRequestContent content = new OutputStreamRequestContent(); // Use try-with-resources to close the OutputStream when all content is written. try (OutputStream output = content.getOutputStream()) { httpClient.POST(\"http://localhost:8080/\") .body(content) .send(result -> { // Your logic here }); // Content not available yet here. // Content is now available. byte[] bytes = new byte[]{'h', 'e', 'l', 'l', 'o'}; output.write(bytes); } // End of try-with-resource, output.close() called automatically to signal end of content. Jetty’s HttpClient allows applications to handle response content in different ways. You can buffer the response content in memory; this is done when using the blocking APIs and the content is buffered within a ContentResponse up to 2 MiB. If you want to control the length of the response content (for example limiting to values smaller than the default of 2 MiB), then you can use a org.eclipse.jetty.client.CompletableResponseListener in this way: Request request = httpClient.newRequest(\"http://domain.com/path\"); // Limit response content buffer to 512 KiB. CompletableFuture completable = new CompletableResponseListener(request, 512 * 1024) .send(); // You can attach actions to the CompletableFuture, // to be performed when the request+response completes. // Wait at most 5 seconds for request+response to complete. ContentResponse response = completable.get(5, TimeUnit.SECONDS); If the response content length is exceeded, the response will be aborted, and an exception will be thrown by method get(...). You can buffer the response content in memory also using the non-blocking APIs, via the BufferingResponseListener utility class: httpClient.newRequest(\"http://domain.com/path\") // Buffer response content up to 8 MiB .send(new BufferingResponseListener(8 * 1024 * 1024) { @Override public void onComplete(Result result) { if (!result.isFailed()) { byte[] responseContent = getContent(); // Your logic here } } }); If you want to avoid buffering, you can wait for the response and then stream the content using the InputStreamResponseListener utility class: InputStreamResponseListener listener = new InputStreamResponseListener(); httpClient.newRequest(\"http://domain.com/path\") .send(listener); // Wait for the response headers to arrive. Response response = listener.get(5, TimeUnit.SECONDS); // Look at the response before streaming the content. if (response.getStatus() == HttpStatus.OK_200) { // Use try-with-resources to close input stream. try (InputStream responseContent = listener.getInputStream()) { // Your logic here } } else { response.abort(new IOException(\"Unexpected HTTP response\")); } Finally, let’s look at the advanced usage of the response content handling. The response content is provided by the HttpClient implementation to application listeners following the read/demand model of org.eclipse.jetty.io.Content.Source. The listener that follows this model is Response.ContentSourceListener. After the response headers have been processed by the HttpClient implementation, Response.ContentSourceListener.onContentSource(response, contentSource) is invoked once and only once. This allows the application to control precisely the read/demand loop: when to read a chunk, how to process it and when to demand the next one. You must provide a ContentSourceListener whose implementation reads a Content.Chunk from the provided Content.Source, as explained in this section. The invocation of onContentSource(Request, Content.Source) and of the demand callback passed to contentSource.demand(Runnable) are serialized with respect to asynchronous events such as timeouts or an asynchronous call to Request.abort(Throwable). This means that these asynchronous events are not processed until the invocation of onContentSource(Request, Content.Source) returns, or until the invocation of the demand callback returns. With this model, applications should not worry too much about concurrent asynchronous events happening during response content handling, because they will eventually see the events as failures while reading the response content. Demanding for content and consuming the content are orthogonal activities. An application can read, store aside the Content.Chunk objects without releasing them (to consume them later), and demand for more chunks, but it must call Chunk.retain() on the stored chunks, and arrange to release them after they have been consumed later. If not done carefully, this may lead to excessive memory consumption, since the ByteBuffer bytes are not consumed. Releasing the Content.Chunks will result in the ByteBuffers to be disposed/recycled and may be performed at any time. An application can also read one chunk of content, consume it, release it, and then not demand for more content until a later time. Subclass Response.AsyncContentListener overrides the behavior of Response.ContentSourceListener; when an application implements AsyncContentListener.onContent(response, chunk, demander), it can control the disposing/recycling of the ByteBuffer by releasing the chunk and it can control when to demand one more chunk by calling demander.run(). Subclass Response.ContentListener overrides the behavior of Response.AsyncContentListener; when an application implementing its onContent(response, buffer) returns from the method itself, it will both the effect of disposing/recycling the buffer and the effect of demanding one more chunk of content. An application that implements a forwarder between two servers can be implemented efficiently by handling the response content without copying the ByteBuffer bytes as in the following example: // Prepare a request to server1, the source. Request request1 = httpClient.newRequest(host1, port1) .path(\"/source\"); // Prepare a request to server2, the sink. AsyncRequestContent content2 = new AsyncRequestContent(); Request request2 = httpClient.newRequest(host2, port2) .path(\"/sink\") .body(content2); request1.onResponseContentSource(new Response.ContentSourceListener() { @Override public void onContentSource(Response response, Content.Source contentSource) { // Only execute this method the very first time // to initialize the request to server2. request2.onRequestCommit(request -> { // Only when the request to server2 has been sent, // then demand response content from server1. contentSource.demand(() -> forwardContent(response, contentSource)); }); // Send the request to server2. request2.send(result -> System.getLogger(\"forwarder\").log(INFO, \"Forwarding to server2 complete\")); } private void forwardContent(Response response, Content.Source contentSource) { // Read one chunk of content. Content.Chunk chunk = contentSource.read(); if (chunk == null) { // The read chunk is null, demand to be called back // when the next one is ready to be read. contentSource.demand(() -> forwardContent(response, contentSource)); // Once a demand is in progress, the content source must not be read // nor demanded again until the demand callback is invoked. return; } // Check if the chunk is last and empty, in which case the // read/demand loop is done. Demanding again when the terminal // chunk has been read will invoke the demand callback with // the same terminal chunk, so this check must be present to // avoid infinitely demanding and reading the terminal chunk. if (chunk.isLast() && !chunk.hasRemaining()) { chunk.release(); return; } // When a response chunk is received from server1, forward it to server2. content2.write(chunk.getByteBuffer(), Callback.from(() -> { // When the request chunk is successfully sent to server2, // release the chunk to recycle the buffer. chunk.release(); // Then demand more response content from server1. contentSource.demand(() -> forwardContent(response, contentSource)); }, x -> { chunk.release(); response.abort(x); })); } }); // When the response content from server1 is complete, // complete also the request content to server2. request1.onResponseSuccess(response -> content2.close()); // Send the request to server1. request1.send(result -> System.getLogger(\"forwarder\").log(INFO, \"Sourcing from server1 complete\")); The communication between client and server happens over a low-level transport, and applications can specify the low-level transport to use for each request. This gives client applications great flexibility, because they can use the same HttpClient instance to communicate, for example, with an external third party web application via TCP, to a different process via Unix-Domain sockets, and efficiently to the same process via memory. Client application can also choose more esoteric configurations such as using QUIC, typically used to transport HTTP/3, to transport HTTP/1.1 or HTTP/2, because QUIC provides reliable and ordered communication like TCP does. Provided you have configured a UnixDomainServerConnector on the server, this is how you can configure a request to use Unix-Domain sockets: // This is the path where the server \"listens\" on. Path unixDomainPath = Path.of(\"/path/to/server.sock\"); // Creates a ClientConnector. ClientConnector clientConnector = new ClientConnector(); // You can use Unix-Domain for HTTP/1.1. HttpClientTransportOverHTTP http1Transport = new HttpClientTransportOverHTTP(clientConnector); // You can use Unix-Domain also for HTTP/2. HTTP2Client http2Client = new HTTP2Client(clientConnector); HttpClientTransportOverHTTP2 http2Transport = new HttpClientTransportOverHTTP2(http2Client); // You can use Unix-Domain also for the dynamic transport. ClientConnectionFactory.Info http1 = HttpClientConnectionFactory.HTTP11; ClientConnectionFactoryOverHTTP2.HTTP2 http2 = new ClientConnectionFactoryOverHTTP2.HTTP2(http2Client); HttpClientTransportDynamic dynamicTransport = new HttpClientTransportDynamic(clientConnector, http1, http2); // Choose the transport you prefer for HttpClient, for example the dynamic transport. HttpClient httpClient = new HttpClient(dynamicTransport); httpClient.start(); ContentResponse response = httpClient.newRequest(\"jetty.org\", 80) // Specify that the request must be sent over Unix-Domain. .transport(new Transport.TCPUnix(unixDomainPath)) .send(); In the same way, if you have configured a MemoryConnector on the server, this is how you can configure a request to use memory for communication: // The server-side MemoryConnector speaking HTTP/1.1. Server server = new Server(); MemoryConnector memoryConnector = new MemoryConnector(server, new HttpConnectionFactory()); server.addConnector(memoryConnector); // ... // The code above is the server-side. // ---- // The code below is the client-side. HttpClient httpClient = new HttpClient(); httpClient.start(); // Use the MemoryTransport to communicate with the server-side. Transport transport = new MemoryTransport(memoryConnector); httpClient.newRequest(\"http://localhost/\") // Specify the Transport to use. .transport(transport) .send(); This is a fancy example of how to mix HTTP versions and low-level transports: HttpClient httpClient = new HttpClient(new HttpClientTransportDynamic(clientConnector, http2, http1, http3)); httpClient.start(); // Make a TCP request to a 3rd party web application. ContentResponse thirdPartyResponse = httpClient.newRequest(\"https://third-party.com/api\") // No need to specify the Transport, TCP will be used by default. .send(); // Upload the third party response content to a validation process. ContentResponse validatedResponse = httpClient.newRequest(\"http://localhost/validate\") // The validation process is available via Unix-Domain. .transport(new Transport.TCPUnix(unixDomainPath)) .method(HttpMethod.POST) .body(new BytesRequestContent(thirdPartyResponse.getContent())) .send(); // Process the validated response intra-process by sending // it to another web application in the same Jetty server. ContentResponse response = httpClient.newRequest(\"http://localhost/process\") // The processing is in-memory. .transport(new MemoryTransport(memoryConnector)) .method(HttpMethod.POST) .body(new BytesRequestContent(validatedResponse.getContent())) .send(); HttpClient has a quite large number of configuration parameters. Please refer to the HttpClient javadocs for the complete list of configurable parameters. The most common parameters are: HttpClient.idleTimeout: same as ClientConnector.idleTimeout described in this section. HttpClient.connectBlocking: same as ClientConnector.connectBlocking described in this section. HttpClient.connectTimeout: same as ClientConnector.connectTimeout described in this section. HttpClient.maxConnectionsPerDestination: the max number of TCP connections that are opened for a particular destination (defaults to 64). HttpClient.maxRequestsQueuedPerDestination: the max number of requests queued (defaults to 1024). HttpClient supports HTTPS requests out-of-the-box like a browser does. The support for HTTPS request is provided by a SslContextFactory.Client instance, typically configured in the ClientConnector. If not explicitly configured, the ClientConnector will allocate a default one when started. SslContextFactory.Client sslContextFactory = new SslContextFactory.Client(); ClientConnector clientConnector = new ClientConnector(); clientConnector.setSslContextFactory(sslContextFactory); HttpClient httpClient = new HttpClient(new HttpClientTransportDynamic(clientConnector)); httpClient.start(); The default SslContextFactory.Client verifies the certificate sent by the server by verifying the validity of the certificate with respect to the certificate chain, the expiration date, the server host name, etc. This means that requests to public websites that have a valid certificate (such as https://google.com) will work out-of-the-box, without the need to specify a KeyStore or a TrustStore. However, requests made to sites that return an invalid or a self-signed certificate will fail (like they will in a browser). An invalid certificate may be expired or have the wrong server host name; a self-signed certificate has a certificate chain that cannot be verified. The validation of the server host name present in the certificate is important, to guarantee that the client is connected indeed with the intended server. The validation of the server host name is performed at two levels: at the TLS level (in the JDK) and, optionally, at the application level. By default, the validation of the server host name at the TLS level is enabled, while it is disabled at the application level. You can configure the SslContextFactory.Client to skip the validation of the server host name at the TLS level: SslContextFactory.Client sslContextFactory = new SslContextFactory.Client(); // Disable the validation of the server host name at the TLS level. sslContextFactory.setEndpointIdentificationAlgorithm(null); When you disable the validation of the server host name at the TLS level, you are strongly recommended to enable it at the application level. Failing to do so puts you at risk of connecting to a server different from the one you intend to connect to: SslContextFactory.Client sslContextFactory = new SslContextFactory.Client(); // Only allow to connect to subdomains of domain.com. sslContextFactory.setHostnameVerifier((hostName, session) -> hostName.endsWith(\".domain.com\")); Enabling server host name validation at both the TLS level and application level allow you to further restrict the set of server hosts the client can connect to, among those allowed in the certificate sent by the server. Entirely disabling server host name validation is not recommended, but may be done in controlled environments. Even with server host name validation disabled, the validation of the certificate chain, by validating cryptographic signatures and validity dates is still performed. Please refer to the SslContextFactory.Client javadocs for the complete list of configurable parameters. Applications may register a org.eclipse.jetty.io.ssl.SslHandshakeListener to be notified of TLS handshakes success or failure, by adding the SslHandshakeListener as a bean to HttpClient: // Create a SslHandshakeListener. SslHandshakeListener listener = new SslHandshakeListener() { @Override public void handshakeSucceeded(Event event) throws SSLException { SSLEngine sslEngine = event.getSSLEngine(); System.getLogger(\"tls\").log(INFO, \"TLS handshake successful to %s\", sslEngine.getPeerHost()); } @Override public void handshakeFailed(Event event, Throwable failure) { SSLEngine sslEngine = event.getSSLEngine(); System.getLogger(\"tls\").log(ERROR, \"TLS handshake failure to %s\", sslEngine.getPeerHost(), failure); } }; HttpClient httpClient = new HttpClient(); // Add the SslHandshakeListener as bean to HttpClient. // The listener will be notified of TLS handshakes success and failure. httpClient.addBean(listener); TODO TODO Jetty’s HttpClient supports cookies out of the box. The HttpClient instance receives cookies from HTTP responses and stores them in a java.net.CookieStore, a class that is part of the JDK. When new requests are made, the cookie store is consulted and if there are matching cookies (that is, cookies that are not expired and that match domain and path of the request) then they are added to the requests. Applications can programmatically access the cookie store to find the cookies that have been set: HttpCookieStore cookieStore = httpClient.getHttpCookieStore(); List cookies = cookieStore.match(URI.create(\"http://domain.com/path\")); Applications can also programmatically set cookies as if they were returned from a HTTP response: HttpCookieStore cookieStore = httpClient.getHttpCookieStore(); HttpCookie cookie = HttpCookie.build(\"foo\", \"bar\") .domain(\"domain.com\") .path(\"/\") .maxAge(TimeUnit.DAYS.toSeconds(1)) .build(); cookieStore.add(URI.create(\"http://domain.com\"), cookie); Cookies may be added explicitly only for a particular request: ContentResponse response = httpClient.newRequest(\"http://domain.com/path\") .cookie(HttpCookie.from(\"foo\", \"bar\")) .send(); You can remove cookies that you do not want to be sent in future HTTP requests: HttpCookieStore cookieStore = httpClient.getHttpCookieStore(); URI uri = URI.create(\"http://domain.com\"); List cookies = cookieStore.match(uri); for (HttpCookie cookie : cookies) { cookieStore.remove(uri, cookie); } If you want to totally disable cookie handling, you can install a HttpCookieStore.Empty. This must be done when HttpClient is used in a proxy application, in this way: httpClient.setHttpCookieStore(new HttpCookieStore.Empty()); You can enable cookie filtering by installing a cookie store that performs the filtering logic in this way: class GoogleOnlyCookieStore extends HttpCookieStore.Default { @Override public boolean add(URI uri, HttpCookie cookie) { if (uri.getHost().endsWith(\"google.com\")) return super.add(uri, cookie); return false; } } httpClient.setHttpCookieStore(new GoogleOnlyCookieStore()); The example above will retain only cookies that come from the google.com domain or sub-domains. Jetty is compliant with RFC6265, and as such care must be taken when setting a cookie value that includes special characters such as ;. Previously, Version=1 cookies defined in RFC2109 (and continued in RFC2965) allowed for special/reserved characters to be enclosed within double quotes when declared in a Set-Cookie response header: Set-Cookie: foo=\"bar;baz\";Version=1;Path=\"/secure\" This was added to the HTTP Response as follows: protected void service(HttpServletRequest request, HttpServletResponse response) { jakarta.servlet.http.Cookie cookie = new Cookie(\"foo\", \"bar;baz\"); cookie.setPath(\"/secure\"); response.addCookie(cookie); } The introduction of RFC6265 has rendered this approach no longer possible; users are now required to encode cookie values that use these special characters. This can be done utilizing jakarta.servlet.http.Cookie as follows: jakarta.servlet.http.Cookie cookie = new Cookie(\"foo\", URLEncoder.encode(\"bar;baz\", \"UTF-8\")); Jetty validates all cookie names and values being added to the HttpServletResponse via the addCookie(Cookie) method. If an illegal value is discovered Jetty will throw an IllegalArgumentException with the details. Jetty’s HttpClient supports the BASIC and DIGEST authentication mechanisms defined by RFC 7235, as well as the SPNEGO authentication mechanism defined in RFC 4559. The HTTP conversation, the sequence of related HTTP requests, for a request that needs authentication is the following: Upon receiving a HTTP 401 response code, HttpClient looks at the WWW-Authenticate response header (the server challenge) and then tries to match configured authentication credentials to produce an Authentication header that contains the authentication credentials to access the resource. You can configure authentication credentials in the HttpClient instance as follows: // Add authentication credentials. AuthenticationStore auth = httpClient.getAuthenticationStore(); URI uri1 = new URI(\"http://mydomain.com/secure\"); auth.addAuthentication(new BasicAuthentication(uri1, \"MyRealm\", \"userName1\", \"password1\")); URI uri2 = new URI(\"http://otherdomain.com/admin\"); auth.addAuthentication(new BasicAuthentication(uri1, \"AdminRealm\", \"admin\", \"password\")); Authentications are matched against the server challenge first by mechanism (e.g. BASIC or DIGEST), then by realm and then by URI. If an Authentication match is found, the application does not receive events related to the HTTP 401 response. These events are handled internally by HttpClient which produces another (internal) request similar to the original request but with an additional Authorization header. If the authentication is successful, the server responds with a HTTP 200 and HttpClient caches the Authentication.Result so that subsequent requests for a matching URI will not incur in the additional rountrip caused by the HTTP 401 response. It is possible to clear Authentication.Results in order to force authentication again: httpClient.getAuthenticationStore().clearAuthenticationResults(); Authentication results may be preempted to avoid the additional roundtrip due to the server challenge in this way: AuthenticationStore auth = httpClient.getAuthenticationStore(); URI uri = URI.create(\"http://domain.com/secure\"); auth.addAuthenticationResult(new BasicAuthentication.BasicResult(uri, \"username\", \"password\")); In this way, requests for the given URI are enriched immediately with the Authorization header, and the server should respond with HTTP 200 (and the resource content) rather than with the 401 and the challenge. It is also possible to preempt the authentication for a single request only, in this way: URI uri = URI.create(\"http://domain.com/secure\"); Authentication.Result authn = new BasicAuthentication.BasicResult(uri, \"username\", \"password\"); Request request = httpClient.newRequest(uri); authn.apply(request); request.send(); See also the proxy authentication section for further information about how authentication works with HTTP proxies. TODO Jetty’s HttpClient can be configured to use proxies to connect to destinations. These types of proxies are available out of the box: HTTP proxy (provided by class org.eclipse.jetty.client.HttpProxy) SOCKS 4 proxy (provided by class org.eclipse.jetty.client.Socks4Proxy) SOCKS 5 proxy (provided by class org.eclipse.jetty.client.Socks5Proxy) Other implementations may be written by subclassing ProxyConfiguration.Proxy. The following is a typical configuration: HttpProxy proxy = new HttpProxy(\"proxyHost\", 8888); // Do not proxy requests for localhost:8080. proxy.getExcludedAddresses().add(\"localhost:8080\"); // Add the new proxy to the list of proxies already registered. ProxyConfiguration proxyConfig = httpClient.getProxyConfiguration(); proxyConfig.addProxy(proxy); ContentResponse response = httpClient.GET(\"http://domain.com/path\"); You specify the proxy host and proxy port, and optionally also the addresses that you do not want to be proxied, and then add the proxy configuration on the ProxyConfiguration instance. Configured in this way, HttpClient makes requests to the HTTP proxy (for plain-text HTTP requests) or establishes a tunnel via HTTP CONNECT (for encrypted HTTPS requests). Proxying is supported for any version of the HTTP protocol. The communication between the client and the proxy may be encrypted, so that it would not be possible for another party on the same network as the client to know what servers the client connects to. SOCKS 5 (defined in RFC 1928) offers choices for authentication methods and supports IPv6 (things that SOCKS 4 does not support). A typical SOCKS 5 proxy configuration with the username/password authentication method is the following: Socks5Proxy proxy = new Socks5Proxy(\"proxyHost\", 8888); String socks5User = \"jetty\"; String socks5Pass = \"secret\"; var socks5AuthenticationFactory = new Socks5.UsernamePasswordAuthenticationFactory(socks5User, socks5Pass); // Add the authentication method to the proxy. proxy.putAuthenticationFactory(socks5AuthenticationFactory); // Do not proxy requests for localhost:8080. proxy.getExcludedAddresses().add(\"localhost:8080\"); // Add the new proxy to the list of proxies already registered. ProxyConfiguration proxyConfig = httpClient.getProxyConfiguration(); proxyConfig.addProxy(proxy); ContentResponse response = httpClient.GET(\"http://domain.com/path\"); Jetty’s HttpClient supports HTTP proxy authentication in the same way it supports server authentication. In the example below, the HTTP proxy requires BASIC authentication, but the server requires DIGEST authentication, and therefore: AuthenticationStore auth = httpClient.getAuthenticationStore(); // Proxy credentials. URI proxyURI = new URI(\"http://proxy.net:8080\"); auth.addAuthentication(new BasicAuthentication(proxyURI, \"ProxyRealm\", \"proxyUser\", \"proxyPass\")); // Server credentials. URI serverURI = new URI(\"http://domain.com/secure\"); auth.addAuthentication(new DigestAuthentication(serverURI, \"ServerRealm\", \"serverUser\", \"serverPass\")); // Proxy configuration. ProxyConfiguration proxyConfig = httpClient.getProxyConfiguration(); HttpProxy proxy = new HttpProxy(\"proxy.net\", 8080); proxyConfig.addProxy(proxy); ContentResponse response = httpClient.newRequest(serverURI).send(); The HTTP conversation for successful authentications on both the proxy and the server is the following: The application does not receive events related to the responses with code 407 and 401 since they are handled internally by HttpClient. Similarly to the authentication section, the proxy authentication result and the server authentication result can be preempted to avoid, respectively, the 407 and 401 roundtrips. Jetty’s HttpClient can be configured to use different HTTP formats to carry the semantic of HTTP requests and responses, by specifying different HttpClientTransport implementations. This means that the intention of a client to request resource /index.html using the GET method can be carried over a low-level transport in different formats. An HttpClientTransport is the component that is in charge of converting a high-level, semantic, HTTP requests such as \" GET resource /index.html \" into the specific format understood by the server (for example, HTTP/2 or HTTP/3), and to convert the server response from the specific format (HTTP/2 or HTTP/3) into high-level, semantic objects that can be used by applications. The most common protocol format is HTTP/1.1, a textual protocol with lines separated by \\r\\n: GET /index.html HTTP/1.1\\r\\n Host: domain.com\\r\\n ... \\r\\n However, the same request can be made using FastCGI, a binary protocol: x01 x01 x00 x01 x00 x08 x00 x00 x00 x01 x01 x00 x00 x00 x00 x00 x01 x04 x00 x01 xLL xLL x00 x00 x0C x0B D O C U M E N T _ U R I / i n d e x . h t m l ... Similarly, HTTP/2 is a binary protocol that transports the same information in a yet different format via TCP, while HTTP/3 is a binary protocol that transports the same information in yet another format via QUIC. The HTTP protocol version may be negotiated between client and server. A request for a resource may be sent using one protocol (for example, HTTP/1.1), but the response may arrive in a different protocol (for example, HTTP/2). HttpClient supports these HttpClientTransport implementations, each speaking only one protocol: HttpClientTransportOverHTTP, for HTTP/1.1 (both clear-text and TLS encrypted) HttpClientTransportOverHTTP2, for HTTP/2 (both clear-text and TLS encrypted) HttpClientTransportOverHTTP3, for HTTP/3 (only encrypted via QUIC) HttpClientTransportOverFCGI, for FastCGI (both clear-text and TLS encrypted) HttpClient also supports HttpClientTransportDynamic, a dynamic transport that can speak different HTTP formats and can select the right protocol by negotiating it with the server or by explicit indication from applications. Furthermore, every HTTP format can be sent over different low-level transports such as TCP, Unix-Domain, QUIC or memory. Supports for Unix-Domain sockets requires Java 16 or later, since Unix-Domain sockets support has been introduced in OpenJDK with JEP 380. Applications are typically not aware of the actual HTTP format or low-level transport being used. This allows them to write their logic against a high-level API that hides the details of the specific HTTP format and low-level transport being used. HTTP/1.1 is the default transport. // No transport specified, using default. HttpClient httpClient = new HttpClient(); httpClient.start(); If you want to customize the HTTP/1.1 transport, you can explicitly configure it in this way: // Configure HTTP/1.1 transport. HttpClientTransportOverHTTP transport = new HttpClientTransportOverHTTP(); transport.setHeaderCacheSize(16384); HttpClient client = new HttpClient(transport); client.start(); The HTTP/2 transport can be configured in this way: // The HTTP2Client powers the HTTP/2 transport. HTTP2Client http2Client = new HTTP2Client(); http2Client.setInitialSessionRecvWindow(64 * 1024 * 1024); // Create and configure the HTTP/2 transport. HttpClientTransportOverHTTP2 transport = new HttpClientTransportOverHTTP2(http2Client); transport.setUseALPN(true); HttpClient client = new HttpClient(transport); client.start(); HTTP2Client is the lower-level client that provides an API based on HTTP/2 concepts such as sessions, streams and frames that are specific to HTTP/2. See the HTTP/2 client section for more information. HttpClientTransportOverHTTP2 uses HTTP2Client to format high-level semantic HTTP requests into the HTTP/2 specific format. The HTTP/3 transport can be configured in this way: // HTTP/3 requires secure communication. SslContextFactory.Client sslContextFactory = new SslContextFactory.Client(); // The HTTP3Client powers the HTTP/3 transport. ClientQuicConfiguration clientQuicConfig = new ClientQuicConfiguration(sslContextFactory, null); HTTP3Client http3Client = new HTTP3Client(clientQuicConfig); http3Client.getQuicConfiguration().setSessionRecvWindow(64 * 1024 * 1024); // Create and configure the HTTP/3 transport. HttpClientTransportOverHTTP3 transport = new HttpClientTransportOverHTTP3(http3Client); HttpClient client = new HttpClient(transport); client.start(); HTTP3Client is the lower-level client that provides an API based on HTTP/3 concepts such as sessions, streams and frames that are specific to HTTP/3. See the HTTP/3 client section for more information. HttpClientTransportOverHTTP3 uses HTTP3Client to format high-level semantic HTTP requests into the HTTP/3 specific format. The FastCGI transport can be configured in this way: String scriptRoot = \"/var/www/wordpress\"; HttpClientTransportOverFCGI transport = new HttpClientTransportOverFCGI(scriptRoot); HttpClient client = new HttpClient(transport); client.start(); In order to make requests using the FastCGI transport, you need to have a FastCGI server such as PHP-FPM (see also link:http://php.net/manual/en/install.fpm.php). The FastCGI transport is primarily used by Jetty’s FastCGI support to serve PHP pages (WordPress for example). The static HttpClientTransport implementations work well if you know in advance the protocol you want to speak with the server, or if the server only supports one protocol (such as FastCGI). With the advent of HTTP/2 and HTTP/3, however, servers are now able to support multiple protocols. The HTTP/2 protocol is typically negotiated between client and server. This negotiation can happen via ALPN, a TLS extension that allows the client to tell the server the list of protocol that the client supports, so that the server can pick one of the client supported protocols that also the server supports; or via HTTP/1.1 upgrade by means of the Upgrade header. Applications can configure the dynamic transport with one or more HTTP versions such as HTTP/1.1, HTTP/2 or HTTP/3. The implementation will take care of using TLS for HTTPS URIs, using ALPN if necessary, negotiating protocols, upgrading from one protocol to another, etc. By default, the dynamic transport only speaks HTTP/1.1: // Dynamic transport speaks HTTP/1.1 by default. HttpClientTransportDynamic transport = new HttpClientTransportDynamic(); HttpClient client = new HttpClient(transport); client.start(); The dynamic transport can be configured with just one protocol, making it equivalent to the corresponding static transport: ClientConnector connector = new ClientConnector(); // Equivalent to HttpClientTransportOverHTTP. HttpClientTransportDynamic http11Transport = new HttpClientTransportDynamic(connector, HttpClientConnectionFactory.HTTP11); // Equivalent to HttpClientTransportOverHTTP2. HTTP2Client http2Client = new HTTP2Client(connector); HttpClientTransportDynamic http2Transport = new HttpClientTransportDynamic(connector, new ClientConnectionFactoryOverHTTP2.HTTP2(http2Client)); The dynamic transport, however, has been implemented to support multiple transports, in particular HTTP/1.1, HTTP/2 and HTTP/3: SslContextFactory.Client sslContextFactory = new SslContextFactory.Client(); ClientConnector connector = new ClientConnector(); connector.setSslContextFactory(sslContextFactory); ClientConnectionFactory.Info http1 = HttpClientConnectionFactory.HTTP11; HTTP2Client http2Client = new HTTP2Client(connector); ClientConnectionFactoryOverHTTP2.HTTP2 http2 = new ClientConnectionFactoryOverHTTP2.HTTP2(http2Client); ClientQuicConfiguration quicConfiguration = new ClientQuicConfiguration(sslContextFactory, null); HTTP3Client http3Client = new HTTP3Client(quicConfiguration, connector); ClientConnectionFactoryOverHTTP3.HTTP3 http3 = new ClientConnectionFactoryOverHTTP3.HTTP3(http3Client); // The order of the protocols indicates the client's preference. // The first is the most preferred, the last is the least preferred, but // the protocol version to use can be explicitly specified in the request. HttpClientTransportDynamic transport = new HttpClientTransportDynamic(connector, http1, http2, http3); HttpClient client = new HttpClient(transport); client.start(); The order in which the protocols are specified to HttpClientTransportDynamic indicates what is the client preference (first the most preferred). When clear-text communication is used (i.e. URIs with the http scheme) there is no HTTP protocol version negotiation, and therefore the application must know a priori whether the server supports the HTTP version or not. For example, if the server only supports clear-text HTTP/2, and HttpClientTransportDynamic is configured as in the example above, where HTTP/1.1 has precedence over HTTP/2, the client will send, by default, a clear-text HTTP/1.1 request to a clear-text HTTP/2 only server, which will result in a communication failure. When using TLS (i.e. URIs with the https scheme), the HTTP protocol version is negotiated between client and server via ALPN, and it is the server that decides what is the application protocol to use for the communication, regardless of the client preference. HTTP/1.1 and HTTP/2 are compatible because they both use TCP, while HTTP/3 is incompatible with previous HTTP versions because it uses QUIC. Only compatible HTTP versions can negotiate the HTTP protocol version to use via ALPN, and only compatible HTTP versions can be upgraded from an older version to a newer version. Provided that the server supports HTTP/1.1, HTTP/2 and HTTP/3, client applications can explicitly hint the version they want to use: HttpClientTransportDynamic transport = new HttpClientTransportDynamic(connector, http1, http2, http3); HttpClient client = new HttpClient(transport); client.start(); // The server supports HTTP/1.1, HTTP/2 and HTTP/3. ContentResponse http1Response = client.newRequest(\"https://host/\") // Specify the version explicitly. .version(HttpVersion.HTTP_1_1) .send(); ContentResponse http2Response = client.newRequest(\"https://host/\") // Specify the version explicitly. .version(HttpVersion.HTTP_2) .send(); ContentResponse http3Response = client.newRequest(\"https://host/\") // Specify the version explicitly. .version(HttpVersion.HTTP_3) .send(); // Make a clear-text upgrade request from HTTP/1.1 to HTTP/2. // The request will start as HTTP/1.1, but the response will be HTTP/2. ContentResponse upgradedResponse = client.newRequest(\"https://host/\") .headers(headers -> headers .put(HttpHeader.UPGRADE, \"h2c\") .put(HttpHeader.HTTP2_SETTINGS, \"\") .put(HttpHeader.CONNECTION, \"Upgrade, HTTP2-Settings\")) .send(); If the client application explicitly specifies the HTTP version, then ALPN is not used by the client. By specifying the HTTP version explicitly, the client application has prior-knowledge of what HTTP version the server supports, and therefore ALPN is not needed. If the server does not support the HTTP version chosen by the client, then the communication will fail. If the client application does not explicitly specify the HTTP version, then ALPN will be used by the client, but only for compatible protocols. If the server also supports ALPN, then the protocol will be negotiated via ALPN and the server will choose the protocol to use. If the server does not support ALPN, the client will try to use the first protocol configured in HttpClientTransportDynamic, and the communication may succeed or fail depending on whether the server supports the protocol chosen by the client. For example, HTTP/3 is not compatible with previous HTTP version; if HttpClientTransportDynamic is configured to prefer HTTP/3, it will be the only protocol attempted by the client: // Client prefers HTTP/3. HttpClientTransportDynamic transport = new HttpClientTransportDynamic(connector, http3, http2, http1); HttpClient client = new HttpClient(transport); client.start(); // No explicit HTTP version specified. // Either HTTP/3 succeeds, or communication failure. ContentResponse httpResponse = client.newRequest(\"https://host/\") .send(); When the client application configures HttpClientTransportDynamic to prefer HTTP/2, there could be ALPN negotiation between HTTP/2 and HTTP/1.1 (but not HTTP/3 because it is incompatible); HTTP/3 will only be possible by specifying the HTTP version explicitly: // Client prefers HTTP/2. HttpClientTransportDynamic transport = new HttpClientTransportDynamic(connector, http2, http1, http3); HttpClient client = new HttpClient(transport); client.start(); // No explicit HTTP version specified. // Either HTTP/1.1 or HTTP/2 will be negotiated via ALPN. // HTTP/3 only possible by specifying the version explicitly. ContentResponse httpResponse = client.newRequest(\"https://host/\") .send();","title":"HTTP Client","component":"jetty","version":"12","name":"http","url":"/docs/jetty/12/programming-guide/client/http.html","titles":[{"text":"HttpClient Introduction","hash":"intro","id":1},{"text":"Starting HttpClient","hash":"start","id":2},{"text":"Stopping HttpClient","hash":"stop","id":3},{"text":"HttpClient Architecture","hash":"arch","id":4},{"text":"HttpClient Connection Pooling","hash":"connection-pool","id":5},{"text":"HttpClient Request Processing","hash":"request-processing","id":6},{"text":"HttpClient API Usage","hash":"api","id":7},{"text":"HttpClient Blocking APIs","hash":"blocking","id":8},{"text":"HttpClient Non-Blocking APIs","hash":"non-blocking","id":9},{"text":"Request Content Handling","hash":"content-request","id":10},{"text":"Response Content Handling","hash":"content-response","id":11},{"text":"Request Transport","hash":"api-transport","id":12},{"text":"HttpClient Configuration","hash":"configuration","id":13},{"text":"HttpClient TLS Configuration","hash":"configuration-tls","id":14},{"text":"HttpClient SslHandshakeListener","hash":"configuration-tls-listener","id":15},{"text":"HttpClient TLS TrustStore Configuration","hash":"configuration-tls-truststore","id":16},{"text":"HttpClient TLS Client Certificates Configuration","hash":"configuration-tls-client-certs","id":17},{"text":"HttpClient Cookie Support","hash":"cookie","id":18},{"text":"Special Characters in Cookies","hash":"special-characters-in-cookies","id":19},{"text":"HttpClient Authentication Support","hash":"authentication","id":20},{"text":"HttpClient SPNEGO Authentication Support","hash":"authentication-spnego","id":21},{"text":"HttpClient Proxy Support","hash":"proxy","id":22},{"text":"SOCKS5 Proxy Support","hash":"proxy-socks5","id":23},{"text":"HTTP Proxy Authentication Support","hash":"proxy-authentication","id":24},{"text":"HttpClient Pluggable Transports","hash":"transport","id":25},{"text":"HTTP/1.1 Transport","hash":"transport-http11","id":26},{"text":"HTTP/2 Transport","hash":"transport-http2","id":27},{"text":"HTTP/3 Transport","hash":"transport-http3","id":28},{"text":"FastCGI Transport","hash":"transport-fcgi","id":29},{"text":"Dynamic Transport","hash":"transport-dynamic","id":30}]},"49":{"id":49,"text":"In the vast majority of cases, client applications should use the generic, high-level, HTTP client library that also provides HTTP/2 support via the pluggable HTTP/2 transport or the dynamic transport. The high-level HTTP library supports cookies, authentication, redirection, connection pooling and a number of other features that are absent in the low-level HTTP/2 library. The HTTP/2 client library has been designed for those applications that need low-level access to HTTP/2 features such as sessions, streams and frames, and this is quite a rare use case. See also the correspondent HTTP/2 server library. The Maven artifact coordinates for the HTTP/2 client library are the following: org.eclipse.jetty.http2 jetty-http2-client 12.0.10-SNAPSHOT The main class is named org.eclipse.jetty.http2.client.HTTP2Client, and must be created, configured and started before use: // Instantiate HTTP2Client. HTTP2Client http2Client = new HTTP2Client(); // Configure HTTP2Client, for example: http2Client.setStreamIdleTimeout(15000); // Start HTTP2Client. http2Client.start(); When your application stops, or otherwise does not need HTTP2Client anymore, it should stop the HTTP2Client instance (or instances) that were started: // Stop HTTP2Client. http2Client.stop(); HTTP2Client allows client applications to connect to an HTTP/2 server. A session represents a single TCP connection to an HTTP/2 server and is defined by class org.eclipse.jetty.http2.api.Session. A session typically has a long life — once the TCP connection is established, it remains open until it is not used anymore (and therefore it is closed by the idle timeout mechanism), until a fatal error occurs (for example, a network failure), or if one of the peers decides unilaterally to close the TCP connection. HTTP/2 is a multiplexed protocol: it allows multiple HTTP/2 requests to be sent on the same TCP connection, or session. Each request/response cycle is represented by a stream. Therefore, a single session manages multiple concurrent streams. A stream has typically a very short life compared to the session: a stream only exists for the duration of the request/response cycle and then disappears. The HTTP/2 protocol is flow controlled (see the specification). This means that a sender and a receiver maintain a flow control window that tracks the number of data bytes sent and received, respectively. When a sender sends data bytes, it reduces its flow control window. When a receiver receives data bytes, it also reduces its flow control window, and then passes the received data bytes to the application. The application consumes the data bytes and tells back the receiver that it has consumed the data bytes. The receiver then enlarges the flow control window, and the implementation arranges to send a message to the sender with the number of bytes consumed, so that the sender can enlarge its flow control window. A sender can send data bytes up to its whole flow control window, then it must stop sending. The sender may resume sending data bytes when it receives a message from the receiver that the data bytes sent previously have been consumed. This message enlarges the sender flow control window, which allows the sender to send more data bytes. HTTP/2 defines two flow control windows: one for each session, and one for each stream. Let’s see with an example how they interact, assuming that in this example the session flow control window is 120 bytes and the stream flow control window is 100 bytes. The sender opens a session, and then opens stream_1 on that session, and sends 80 data bytes. At this point the session flow control window is 40 bytes (120 - 80), and stream_1's flow control window is 20 bytes (100 - 80). The sender now opens stream_2 on the same session and sends 40 data bytes. At this point, the session flow control window is 0 bytes (40 - 40), while stream_2's flow control window is 60 (100 - 40). Since now the session flow control window is 0, the sender cannot send more data bytes, neither on stream_1 nor on stream_2, nor on other streams, despite all the streams having their stream flow control windows greater than 0. The receiver consumes stream_2's 40 data bytes and sends a message to the sender with this information. At this point, the session flow control window is 40 (0 + 40), stream_1's flow control window is still 20 and stream_2's flow control window is 100 (60 + 40). If the sender opens stream_3 and would like to send 50 data bytes, it would only be able to send 40 because that is the maximum allowed by the session flow control window at this point. It is therefore very important that applications notify the fact that they have consumed data bytes as soon as possible, so that the implementation (the receiver) can send a message to the sender (in the form of a WINDOW_UPDATE frame) with the information to enlarge the flow control window, therefore reducing the possibility that sender stalls due to the flow control windows being reduced to 0. How a client application should handle HTTP/2 flow control is discussed in details in this section. The first thing an application should do is to connect to the server and obtain a Session. The following example connects to the server on a clear-text port: // Address of the server's clear-text port. SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8080); // Connect to the server, the CompletableFuture will be // notified when the connection is succeeded (or failed). CompletableFuture sessionCF = http2Client.connect(serverAddress, new Session.Listener() {}); // Block to obtain the Session. // Alternatively you can use the CompletableFuture APIs to avoid blocking. Session session = sessionCF.get(); The following example connects to the server on an encrypted port: HTTP2Client http2Client = new HTTP2Client(); http2Client.start(); ClientConnector connector = http2Client.getClientConnector(); // Address of the server's encrypted port. SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8443); // Connect to the server, the CompletableFuture will be // notified when the connection is succeeded (or failed). CompletableFuture sessionCF = http2Client.connect(connector.getSslContextFactory(), serverAddress, new Session.Listener() {}); // Block to obtain the Session. // Alternatively you can use the CompletableFuture APIs to avoid blocking. Session session = sessionCF.get(); Applications must know in advance whether they want to connect to a clear-text or encrypted port, and pass the SslContextFactory parameter accordingly to the connect(...) method. The connect(...) method takes a Session.Listener parameter. This listener’s onPreface(...) method is invoked just before establishing the connection to the server to gather the client configuration to send to the server. Client applications can override this method to change the default configuration: SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8080); http2Client.connect(serverAddress, new Session.Listener() { @Override public Map onPreface(Session session) { Map configuration = new HashMap<>(); // Disable push from the server. configuration.put(SettingsFrame.ENABLE_PUSH, 0); // Override HTTP2Client.initialStreamRecvWindow for this session. configuration.put(SettingsFrame.INITIAL_WINDOW_SIZE, 1024 * 1024); return configuration; } }); The Session.Listener is notified of session events originated by the server such as receiving a SETTINGS frame from the server, or the server closing the connection, or the client timing out the connection due to idleness. Please refer to the Session.Listener javadocs for the complete list of events. Once a Session has been established, the communication with the server happens by exchanging frames, as specified in the HTTP/2 specification. Sending an HTTP request to the server, and receiving a response, creates a stream that encapsulates the exchange of HTTP/2 frames that compose the request and the response. In order to send an HTTP request to the server, the client must send a HEADERS frame. HEADERS frames carry the request method, the request URI and the request headers. Sending the HEADERS frame opens the Stream: SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8080); CompletableFuture sessionCF = http2Client.connect(serverAddress, new Session.Listener() {}); Session session = sessionCF.get(); // Configure the request headers. HttpFields requestHeaders = HttpFields.build() .put(HttpHeader.USER_AGENT, \"Jetty HTTP2Client 12.0.10-SNAPSHOT\"); // The request metadata with method, URI and headers. MetaData.Request request = new MetaData.Request(\"GET\", HttpURI.from(\"http://localhost:8080/path\"), HttpVersion.HTTP_2, requestHeaders); // The HTTP/2 HEADERS frame, with endStream=true // to signal that this request has no content. HeadersFrame headersFrame = new HeadersFrame(request, null, true); // Open a Stream by sending the HEADERS frame. session.newStream(headersFrame, null); Note how Session.newStream(...) takes a Stream.Listener parameter. This listener is notified of stream events originated by the server such as receiving HEADERS or DATA frames that are part of the response, discussed in more details in the section below. Please refer to the Stream.Listener javadocs for the complete list of events. HTTP requests may have content, which is sent using the Stream APIs: SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8080); CompletableFuture sessionCF = http2Client.connect(serverAddress, new Session.Listener() {}); Session session = sessionCF.get(); // Configure the request headers. HttpFields requestHeaders = HttpFields.build() .put(HttpHeader.CONTENT_TYPE, \"application/json\"); // The request metadata with method, URI and headers. MetaData.Request request = new MetaData.Request(\"POST\", HttpURI.from(\"http://localhost:8080/path\"), HttpVersion.HTTP_2, requestHeaders); // The HTTP/2 HEADERS frame, with endStream=false to // signal that there will be more frames in this stream. HeadersFrame headersFrame = new HeadersFrame(request, null, false); // Open a Stream by sending the HEADERS frame. CompletableFuture streamCF = session.newStream(headersFrame, null); // Block to obtain the Stream. // Alternatively you can use the CompletableFuture APIs to avoid blocking. Stream stream = streamCF.get(); // The request content, in two chunks. String content1 = \"{\\\"greet\\\": \\\"hello world\\\"}\"; ByteBuffer buffer1 = StandardCharsets.UTF_8.encode(content1); String content2 = \"{\\\"user\\\": \\\"jetty\\\"}\"; ByteBuffer buffer2 = StandardCharsets.UTF_8.encode(content2); // Send the first DATA frame on the stream, with endStream=false // to signal that there are more frames in this stream. CompletableFuture dataCF1 = stream.data(new DataFrame(stream.getId(), buffer1, false)); // Only when the first chunk has been sent we can send the second, // with endStream=true to signal that there are no more frames. dataCF1.thenCompose(s -> s.data(new DataFrame(s.getId(), buffer2, true))); When sending two DATA frames consecutively, the second call to Stream.data(...) must be done only when the first is completed, or a WritePendingException will be thrown. Use the Callback APIs or CompletableFuture APIs to ensure that the second Stream.data(...) call is performed when the first completed successfully. Response events are delivered to the Stream.Listener passed to Session.newStream(...). An HTTP response is typically composed of a HEADERS frame containing the HTTP status code and the response headers, and optionally one or more DATA frames containing the response content bytes. The HTTP/2 protocol also supports response trailers (that is, headers that are sent after the response content) that also are sent using a HEADERS frame. A client application can therefore receive the HTTP/2 frames sent by the server by implementing the relevant methods in Stream.Listener: // Open a Stream by sending the HEADERS frame. session.newStream(headersFrame, new Stream.Listener() { @Override public void onHeaders(Stream stream, HeadersFrame frame) { MetaData metaData = frame.getMetaData(); // Is this HEADERS frame the response or the trailers? if (metaData.isResponse()) { MetaData.Response response = (MetaData.Response)metaData; System.getLogger(\"http2\").log(INFO, \"Received response {0}\", response); if (!frame.isEndStream()) { // Demand for DATA frames, so that onDataAvailable() // below will be called when they are available. stream.demand(); } } else { System.getLogger(\"http2\").log(INFO, \"Received trailers {0}\", metaData.getHttpFields()); } } @Override public void onDataAvailable(Stream stream) { // Read a Data object. Stream.Data data = stream.readData(); if (data == null) { // Demand more DATA frames. stream.demand(); return; } // Get the content buffer. ByteBuffer buffer = data.frame().getByteBuffer(); // Consume the buffer, here - as an example - just log it. System.getLogger(\"http2\").log(INFO, \"Consuming buffer {0}\", buffer); // Tell the implementation that the buffer has been consumed. data.release(); if (!data.frame().isEndStream()) { // Demand more DATA frames when they are available. stream.demand(); } } }); When onDataAvailable(Stream stream) is invoked, the demand is implicitly cancelled. Just returning from the onDataAvailable(Stream stream) method does not implicitly demand for more DATA frames. Applications must call Stream.demand() to explicitly require that onDataAvailable(Stream stream) is invoked again when more DATA frames are available. Applications that consume the content buffer within onDataAvailable(Stream stream) (for example, writing it to a file, or copying the bytes to another storage) should call Data.release() as soon as they have consumed the content buffer. This allows the implementation to reuse the buffer, reducing the memory requirements needed to handle the content buffers. Alternatively, an application may store away the Data object to consume the buffer bytes later, or pass the Data object to another asynchronous API (this is typical in proxy applications). The call to Stream.readData() tells the implementation to enlarge the stream and session flow control windows so that the sender will be able to send more DATA frames without stalling. Applications can unwrap the Data object into some other object that may be used later, provided that the release semantic is maintained: record Chunk(ByteBuffer byteBuffer, Callback callback) { } // A queue that consumers poll to consume content asynchronously. Queue dataQueue = new ConcurrentLinkedQueue<>(); // Implementation of Stream.Listener.onDataAvailable(Stream stream) // in case of unwrapping of the Data object for asynchronous content // consumption and demand. Stream.Listener listener = new Stream.Listener() { @Override public void onDataAvailable(Stream stream) { Stream.Data data = stream.readData(); if (data == null) { stream.demand(); return; } // Get the content buffer. ByteBuffer byteBuffer = data.frame().getByteBuffer(); // Unwrap the Data object, converting it to a Chunk. // The Data.release() semantic is maintained in the completion of the Callback. dataQueue.offer(new Chunk(byteBuffer, Callback.from(() -> { // When the buffer has been consumed, then: // A) release the Data object. data.release(); // B) possibly demand more DATA frames. if (!data.frame().isEndStream()) stream.demand(); }))); // Do not demand more data here, to avoid to overflow the queue. } }; Applications that implement onDataAvailable(Stream stream) must remember to call Stream.demand() eventually. If they do not call Stream.demand(), the implementation will not invoke onDataAvailable(Stream stream) to deliver more DATA frames and the application will stall threadlessly until an idle timeout fires to close the stream or the session. In HTTP/2, clients and servers have the ability to tell to the other peer that they are not interested anymore in either the request or the response, using a RST_STREAM frame. The HTTP2Client APIs allow client applications to send and receive this \"reset\" frame: // Open a Stream by sending the HEADERS frame. CompletableFuture streamCF = session.newStream(headersFrame, new Stream.Listener() { @Override public void onReset(Stream stream, ResetFrame frame, Callback callback) { // The server reset this stream. // Succeed the callback to signal that the reset event has been handled. callback.succeeded(); } }); Stream stream = streamCF.get(); // Reset this stream (for example, the user closed the application). stream.reset(new ResetFrame(stream.getId(), ErrorCode.CANCEL_STREAM_ERROR.code), Callback.NOOP); HTTP/2 servers have the ability to push resources related to a primary resource. When an HTTP/2 server pushes a resource, it sends to the client a PUSH_PROMISE frame that contains the request URI and headers that a client would use to request explicitly that resource. Client applications can be configured to tell the server to never push resources, see this section. Client applications can listen to the push events, and act accordingly: // Open a Stream by sending the HEADERS frame. CompletableFuture streamCF = session.newStream(headersFrame, new Stream.Listener() { @Override public Stream.Listener onPush(Stream pushedStream, PushPromiseFrame frame) { // The \"request\" the client would make for the pushed resource. MetaData.Request pushedRequest = frame.getMetaData(); // The pushed \"request\" URI. HttpURI pushedURI = pushedRequest.getHttpURI(); // The pushed \"request\" headers. HttpFields pushedRequestHeaders = pushedRequest.getHttpFields(); // If needed, retrieve the primary stream that triggered the push. Stream primaryStream = pushedStream.getSession().getStream(frame.getStreamId()); // Return a Stream.Listener to listen for the pushed \"response\" events. return new Stream.Listener() { @Override public void onHeaders(Stream stream, HeadersFrame frame) { // Handle the pushed stream \"response\". MetaData metaData = frame.getMetaData(); if (metaData.isResponse()) { // The pushed \"response\" headers. HttpFields pushedResponseHeaders = metaData.getHttpFields(); // Typically a pushed stream has data, so demand for data. stream.demand(); } } @Override public void onDataAvailable(Stream stream) { // Handle the pushed stream \"response\" content. Stream.Data data = stream.readData(); if (data == null) { stream.demand(); return; } // The pushed stream \"response\" content bytes. ByteBuffer buffer = data.frame().getByteBuffer(); // Consume the buffer and release the Data object. data.release(); if (!data.frame().isEndStream()) { // Demand more DATA frames when they are available. stream.demand(); } } }; } }); If a client application does not want to handle a particular HTTP/2 push, it can just reset the pushed stream to tell the server to stop sending bytes for the pushed stream: // Open a Stream by sending the HEADERS frame. CompletableFuture streamCF = session.newStream(headersFrame, new Stream.Listener() { @Override public Stream.Listener onPush(Stream pushedStream, PushPromiseFrame frame) { // Reset the pushed stream to tell the server you are not interested. pushedStream.reset(new ResetFrame(pushedStream.getId(), ErrorCode.CANCEL_STREAM_ERROR.code), Callback.NOOP); // Not interested in listening to pushed response events. return null; } });","title":"HTTP/2 Client Library","component":"jetty","version":"12","name":"http2","url":"/docs/jetty/12/programming-guide/client/http2.html","titles":[{"text":"Introducing HTTP2Client","hash":"intro","id":1},{"text":"HTTP/2 Flow Control","hash":"flow-control","id":2},{"text":"Connecting to the Server","hash":"connect","id":3},{"text":"Configuring the Session","hash":"configure","id":4},{"text":"Sending a Request","hash":"request","id":5},{"text":"Receiving a Response","hash":"response","id":6},{"text":"Resetting a Request or Response","hash":"reset","id":7},{"text":"Receiving HTTP/2 Pushes","hash":"push","id":8}]},"50":{"id":50,"text":"In the vast majority of cases, client applications should use the generic, high-level, HTTP client library that also provides HTTP/3 support via the pluggable HTTP/3 transport or the dynamic transport. The high-level HTTP library supports cookies, authentication, redirection, connection pooling and a number of other features that are absent in the low-level HTTP/3 library. The HTTP/3 client library has been designed for those applications that need low-level access to HTTP/3 features such as sessions, streams and frames, and this is quite a rare use case. See also the correspondent HTTP/3 server library. The Maven artifact coordinates for the HTTP/3 client library are the following: org.eclipse.jetty.http3 jetty-http3-client 12.0.10-SNAPSHOT The main class is named org.eclipse.jetty.http3.client.HTTP3Client, and must be created, configured and started before use: // Instantiate HTTP3Client. SslContextFactory.Client sslContextFactory = new SslContextFactory.Client(); HTTP3Client http3Client = new HTTP3Client(new ClientQuicConfiguration(sslContextFactory, null)); // Configure HTTP3Client, for example: http3Client.getHTTP3Configuration().setStreamIdleTimeout(15000); // Start HTTP3Client. http3Client.start(); When your application stops, or otherwise does not need HTTP3Client anymore, it should stop the HTTP3Client instance (or instances) that were started: // Stop HTTP3Client. http3Client.stop(); HTTP3Client allows client applications to connect to an HTTP/3 server. A session represents a single connection to an HTTP/3 server and is defined by class org.eclipse.jetty.http3.api.Session. A session typically has a long life — once the connection is established, it remains active until it is not used anymore (and therefore it is closed by the idle timeout mechanism), until a fatal error occurs (for example, a network failure), or if one of the peers decides unilaterally to close the connection. HTTP/3 is a multiplexed protocol because it relies on the multiplexing capabilities of QUIC, the protocol based on UDP that transports HTTP/3 frames. Thanks to multiplexing, multiple HTTP/3 requests are sent on the same QUIC connection, or session. Each request/response cycle is represented by a stream. Therefore, a single session manages multiple concurrent streams. A stream has typically a very short life compared to the session: a stream only exists for the duration of the request/response cycle and then disappears. The first thing an application should do is to connect to the server and obtain a Session. The following example connects to the server: // Address of the server's port. SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8444); // Connect to the server, the CompletableFuture will be // notified when the connection is succeeded (or failed). CompletableFuture sessionCF = http3Client.connect(serverAddress, new Session.Client.Listener() {}); // Block to obtain the Session. // Alternatively you can use the CompletableFuture APIs to avoid blocking. Session session = sessionCF.get(); The connect(...) method takes a Session.Client.Listener parameter. This listener’s onPreface(...) method is invoked just before establishing the connection to the server to gather the client configuration to send to the server. Client applications can override this method to change the default configuration: SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8444); http3Client.connect(serverAddress, new Session.Client.Listener() { @Override public Map onPreface(Session session) { Map configuration = new HashMap<>(); // Add here configuration settings. return configuration; } }); The Session.Client.Listener is notified of session events originated by the server such as receiving a SETTINGS frame from the server, or the server closing the connection, or the client timing out the connection due to idleness. Please refer to the Session.Client.Listener javadocs for the complete list of events. Once a Session has been established, the communication with the server happens by exchanging frames. Sending an HTTP request to the server, and receiving a response, creates a stream that encapsulates the exchange of HTTP/3 frames that compose the request and the response. In order to send an HTTP request to the server, the client must send a HEADERS frame. HEADERS frames carry the request method, the request URI and the request headers. Sending the HEADERS frame opens the Stream: SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8444); CompletableFuture sessionCF = http3Client.connect(serverAddress, new Session.Client.Listener() {}); Session.Client session = sessionCF.get(); // Configure the request headers. HttpFields requestHeaders = HttpFields.build() .put(HttpHeader.USER_AGENT, \"Jetty HTTP3Client 12.0.10-SNAPSHOT\"); // The request metadata with method, URI and headers. MetaData.Request request = new MetaData.Request(\"GET\", HttpURI.from(\"http://localhost:8444/path\"), HttpVersion.HTTP_3, requestHeaders); // The HTTP/3 HEADERS frame, with endStream=true // to signal that this request has no content. HeadersFrame headersFrame = new HeadersFrame(request, true); // Open a Stream by sending the HEADERS frame. session.newRequest(headersFrame, new Stream.Client.Listener() {}); Note how Session.newRequest(...) takes a Stream.Client.Listener parameter. This listener is notified of stream events originated by the server such as receiving HEADERS or DATA frames that are part of the response, discussed in more details in the section below. Please refer to the Stream.Client.Listener javadocs for the complete list of events. HTTP requests may have content, which is sent using the Stream APIs: SocketAddress serverAddress = new InetSocketAddress(\"localhost\", 8444); CompletableFuture sessionCF = http3Client.connect(serverAddress, new Session.Client.Listener() {}); Session.Client session = sessionCF.get(); // Configure the request headers. HttpFields requestHeaders = HttpFields.build() .put(HttpHeader.CONTENT_TYPE, \"application/json\"); // The request metadata with method, URI and headers. MetaData.Request request = new MetaData.Request(\"POST\", HttpURI.from(\"http://localhost:8444/path\"), HttpVersion.HTTP_3, requestHeaders); // The HTTP/3 HEADERS frame, with endStream=false to // signal that there will be more frames in this stream. HeadersFrame headersFrame = new HeadersFrame(request, false); // Open a Stream by sending the HEADERS frame. CompletableFuture streamCF = session.newRequest(headersFrame, new Stream.Client.Listener() {}); // Block to obtain the Stream. // Alternatively you can use the CompletableFuture APIs to avoid blocking. Stream stream = streamCF.get(); // The request content, in two chunks. String content1 = \"{\\\"greet\\\": \\\"hello world\\\"}\"; ByteBuffer buffer1 = StandardCharsets.UTF_8.encode(content1); String content2 = \"{\\\"user\\\": \\\"jetty\\\"}\"; ByteBuffer buffer2 = StandardCharsets.UTF_8.encode(content2); // Send the first DATA frame on the stream, with endStream=false // to signal that there are more frames in this stream. CompletableFuture dataCF1 = stream.data(new DataFrame(buffer1, false)); // Only when the first chunk has been sent we can send the second, // with endStream=true to signal that there are no more frames. dataCF1.thenCompose(s -> s.data(new DataFrame(buffer2, true))); When sending two DATA frames consecutively, the second call to Stream.data(...) must be done only when the first is completed, or a WritePendingException will be thrown. Use the CompletableFuture APIs to ensure that the second Stream.data(...) call is performed when the first completed successfully. Response events are delivered to the Stream.Client.Listener passed to Session.newRequest(...). An HTTP response is typically composed of a HEADERS frame containing the HTTP status code and the response headers, and optionally one or more DATA frames containing the response content bytes. The HTTP/3 protocol also supports response trailers (that is, headers that are sent after the response content) that also are sent using a HEADERS frame. A client application can therefore receive the HTTP/3 frames sent by the server by implementing the relevant methods in Stream.Client.Listener: // Open a Stream by sending the HEADERS frame. session.newRequest(headersFrame, new Stream.Client.Listener() { @Override public void onResponse(Stream.Client stream, HeadersFrame frame) { MetaData metaData = frame.getMetaData(); MetaData.Response response = (MetaData.Response)metaData; System.getLogger(\"http3\").log(INFO, \"Received response {0}\", response); } @Override public void onDataAvailable(Stream.Client stream) { // Read a chunk of the content. Stream.Data data = stream.readData(); if (data == null) { // No data available now, demand to be called back. stream.demand(); } else { // Process the content. process(data.getByteBuffer()); // Notify the implementation that the content has been consumed. data.release(); if (!data.isLast()) { // Demand to be called back. stream.demand(); } } } }); In HTTP/3, clients and servers have the ability to tell to the other peer that they are not interested anymore in either the request or the response, by resetting the stream. The HTTP3Client APIs allow client applications to send and receive this \"reset\" event: // Open a Stream by sending the HEADERS frame. CompletableFuture streamCF = session.newRequest(headersFrame, new Stream.Client.Listener() { @Override public void onFailure(Stream.Client stream, long error, Throwable failure) { // The server reset this stream. } }); Stream stream = streamCF.get(); // Reset this stream (for example, the user closed the application). stream.reset(HTTP3ErrorCode.REQUEST_CANCELLED_ERROR.code(), new ClosedChannelException());","title":"HTTP/3 Client Library","component":"jetty","version":"12","name":"http3","url":"/docs/jetty/12/programming-guide/client/http3.html","titles":[{"text":"Introducing HTTP3Client","hash":"intro","id":1},{"text":"Connecting to the Server","hash":"connect","id":2},{"text":"Configuring the Session","hash":"configure","id":3},{"text":"Sending a Request","hash":"request","id":4},{"text":"Receiving a Response","hash":"response","id":5},{"text":"Resetting a Request or Response","hash":"reset","id":6}]},"51":{"id":51,"text":"The Eclipse Jetty Project provides client-side libraries that allow you to embed an HTTP or WebSocket client in your applications. A typical example is a client application that needs to contact a third party service via HTTP (for example a REST service). Another example is a proxy application that receives HTTP requests and forwards them as FCGI requests to a PHP application such as WordPress, or receives HTTP/1.1 requests and converts them to HTTP/2 or HTTP/3. Yet another example is a client application that needs to receive events from a WebSocket server. The client libraries are designed to be non-blocking and offer both synchronous and asynchronous APIs and come with many configuration options. These are the available client libraries: The High-Level HTTP Client Library for HTTP/1.1, HTTP/2, HTTP/3 and FastCGI The Low-Level HTTP/2 Client Library for low-level HTTP/2 The Low-Level HTTP/3 Client Library for low-level HTTP/3 The WebSocket client library If you are interested in the low-level details of how the Jetty client libraries work, or are interested in writing a custom protocol, look at the Client I/O Architecture.","title":"Client Libraries","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/programming-guide/client/index.html","titles":[]},"52":{"id":52,"text":"The Jetty client libraries provide the basic components and APIs to implement a client application. They build on the common Jetty I/O Architecture and provide client specific concepts (such as establishing a connection to a server). There are conceptually two layers that compose the Jetty client libraries: The transport layer, that handles the low-level communication with the server, and deals with buffers, threads, etc. The protocol layer, that handles the high-level protocol by parsing the bytes read from the transport layer and by generating the bytes to write to the transport layer. The transport layer is the low-level layer that communicates with the server. Protocols such as HTTP/1.1 and HTTP/2 are typically transported over TCP, while the newer HTTP/3 is transported over QUIC, which is itself transported over UDP. However, there are other means of communication supported by the Jetty client libraries, in particular over Unix-Domain sockets (for inter-process communication), and over memory (for intra-process communication). The same high-level protocol can be carried by different low-level transports. For example, the high-level HTTP/1.1 protocol can be transported over either TCP (the default), or QUIC, or Unix-Domain sockets, or memory, because all these low-level transport provide reliable and ordered communication between client and server. Similarly, the high-level HTTP/3 protocol can be transported over either QUIC (the default) or memory. It would be possible to transport HTTP/3 also over Unix-Domain sockets, but the current version of Java only supports Unix-Domain sockets for SocketChannels and not for DatagramChannels. The Jetty client libraries use the common I/O design described in this section. The common I/O components and concepts are used for all low-level transports. The only partial exception is the memory transport, which is not based on network components; as such it does not need a SelectorManager, but it exposes EndPoint so that high-level protocols have a common interface to interact with the low-level transport. The client-side abstraction for the low-level transport is org.eclipse.jetty.io.Transport. Transport represents how high-level protocols can be transported; there is Transport.TCP_IP that represents communication over TCP, but also Transport.TCPUnix for Unix-Domain sockets, QuicTransport for QUIC and MemoryTransport for memory. Applications can specify the Transport to use for each request as described in this section. When the Transport implementation uses the network, it delegates to org.eclipse.jetty.io.ClientConnector. ClientConnector primarily wraps org.eclipse.jetty.io.SelectorManager to provide network functionalities, and aggregates other four components: a thread pool (in form of an java.util.concurrent.Executor) a scheduler (in form of org.eclipse.jetty.util.thread.Scheduler) a byte buffer pool (in form of org.eclipse.jetty.io.ByteBufferPool) a TLS factory (in form of org.eclipse.jetty.util.ssl.SslContextFactory.Client) The ClientConnector is where you want to set those components after you have configured them. If you don’t explicitly set those components on the ClientConnector, then appropriate defaults will be chosen when the ClientConnector starts. ClientConnector manages all network-related components, and therefore it is used for TCP, UDP, QUIC and Unix-Domain sockets. The simplest example that creates and starts a ClientConnector is the following: ClientConnector clientConnector = new ClientConnector(); clientConnector.start(); A more typical example: // Create and configure the SslContextFactory. SslContextFactory.Client sslContextFactory = new SslContextFactory.Client(); sslContextFactory.addExcludeProtocols(\"TLSv1\", \"TLSv1.1\"); // Create and configure the thread pool. QueuedThreadPool threadPool = new QueuedThreadPool(); threadPool.setName(\"client\"); // Create and configure the ClientConnector. ClientConnector clientConnector = new ClientConnector(); clientConnector.setSslContextFactory(sslContextFactory); clientConnector.setExecutor(threadPool); clientConnector.start(); A more advanced example that customizes the ClientConnector by overriding some of its methods: class CustomClientConnector extends ClientConnector { @Override protected SelectorManager newSelectorManager() { return new ClientSelectorManager(getExecutor(), getScheduler(), getSelectors()) { @Override protected void endPointOpened(EndPoint endpoint) { System.getLogger(\"endpoint\").log(INFO, \"opened %s\", endpoint); } @Override protected void endPointClosed(EndPoint endpoint) { System.getLogger(\"endpoint\").log(INFO, \"closed %s\", endpoint); } }; } } // Create and configure the thread pool. QueuedThreadPool threadPool = new QueuedThreadPool(); threadPool.setName(\"client\"); // Create and configure the scheduler. Scheduler scheduler = new ScheduledExecutorScheduler(\"scheduler-client\", false); // Create and configure the custom ClientConnector. CustomClientConnector clientConnector = new CustomClientConnector(); clientConnector.setExecutor(threadPool); clientConnector.setScheduler(scheduler); clientConnector.start(); Since ClientConnector is the component that handles the low-level network transport, it is also the component where you want to configure the low-level network configuration. The most common parameters are: ClientConnector.selectors: the number of java.nio.Selectors components (defaults to 1) that are present to handle the SocketChannels and DatagramChannels opened by the ClientConnector. You typically want to increase the number of selectors only for those use cases where each selector should handle more than few hundreds concurrent socket events. For example, one selector typically runs well for 250 concurrent socket events; as a rule of thumb, you can multiply that number by 10 to obtain the number of opened sockets a selector can handle (2500), based on the assumption that not all the 2500 sockets will be active at the same time. ClientConnector.idleTimeout: the duration of time after which ClientConnector closes a socket due to inactivity (defaults to 30 seconds). This is an important parameter to configure, and you typically want the client idle timeout to be shorter than the server idle timeout, to avoid race conditions where the client attempts to use a socket just before the client-side idle timeout expires, but the server-side idle timeout has already expired and the is already closing the socket. ClientConnector.connectBlocking: whether the operation of connecting a socket to the server (i.e. SocketChannel.connect(SocketAddress)) must be a blocking or a non-blocking operation (defaults to false). For localhost or same datacenter hosts you want to set this parameter to true because DNS resolution will be immediate (and likely never fail). For generic Internet hosts (e.g. when you are implementing a web spider) you want to set this parameter to false. ClientConnector.connectTimeout: the duration of time after which ClientConnector aborts a connection attempt to the server (defaults to 5 seconds). This time includes the DNS lookup time and the TCP connect time. Please refer to the ClientConnector javadocs for the complete list of configurable parameters. JEP 380 introduced Unix-Domain sockets support in Java 16, on all operative systems, but only for SocketChannels (not for DatagramChannels). ClientConnector handles Unix-Domain sockets exactly like it handles regular TCP sockets, so there is no additional configuration necessary — Unix-Domain sockets are supported out-of-the-box. Applications can specify the Transport to use for each request as described in this section. In addition to support communication between client and server via network or Unix-Domain, the Jetty client libraries also support communication between client and server via memory for intra-process communication. This means that the client and server must be in the same JVM process. This functionality is provided by org.eclipse.jetty.server.MemoryTransport, which does not delegate to ClientConnector, but instead delegates to the server-side MemoryConnector and its related classes. Applications can specify the Transport to use for each request as described in this section. The protocol layer builds on top of the transport layer to generate the bytes to be written to the low-level transport and to parse the bytes read from the low-level transport. Recall from this section that Jetty uses the Connection abstraction to produce and interpret the low-level transport bytes. On the client side, a ClientConnectionFactory implementation is the component that creates Connection instances based on the protocol that the client wants to \"speak\" with the server. Applications may use ClientConnector.connect(SocketAddress, Map) to establish a TCP connection to the server, and must provide ClientConnector with the following information in the context map: A Transport instance that specifies the low-level transport to use. A ClientConnectionFactory that creates Connection instances for the high-level protocol. A Promise that is notified when the connection creation succeeds or fails. For example: class CustomConnection extends AbstractConnection { public CustomConnection(EndPoint endPoint, Executor executor) { super(endPoint, executor); } @Override public void onOpen() { super.onOpen(); System.getLogger(\"connection\").log(INFO, \"Opened connection {0}\", this); } @Override public void onFillable() { } } ClientConnector clientConnector = new ClientConnector(); clientConnector.start(); String host = \"serverHost\"; int port = 8080; SocketAddress address = new InetSocketAddress(host, port); // The Transport instance. Transport transport = Transport.TCP_IP; // The ClientConnectionFactory that creates CustomConnection instances. ClientConnectionFactory connectionFactory = (endPoint, context) -> { System.getLogger(\"connection\").log(INFO, \"Creating connection for {0}\", endPoint); return new CustomConnection(endPoint, clientConnector.getExecutor()); }; // The Promise to notify of connection creation success or failure. CompletableFuture connectionPromise = new Promise.Completable<>(); // Populate the context with the mandatory keys to create and obtain connections. Map context = new ConcurrentHashMap<>(); context.put(Transport.class.getName(), transport); context.put(ClientConnector.CLIENT_CONNECTION_FACTORY_CONTEXT_KEY, connectionFactory); context.put(ClientConnector.CONNECTION_PROMISE_CONTEXT_KEY, connectionPromise); clientConnector.connect(address, context); // Use the Connection when it's available. // Use it in a non-blocking way via CompletableFuture APIs. connectionPromise.whenComplete((connection, failure) -> { System.getLogger(\"connection\").log(INFO, \"Created connection for {0}\", connection); }); // Alternatively, you can block waiting for the connection (or a failure). // CustomConnection connection = connectionPromise.get(); When a Connection is created successfully, its onOpen() method is invoked, and then the promise is completed successfully. It is now possible to write a super-simple telnet client that reads and writes string lines: class TelnetConnection extends AbstractConnection { private final ByteArrayOutputStream bytes = new ByteArrayOutputStream(); private Consumer consumer; public TelnetConnection(EndPoint endPoint, Executor executor) { super(endPoint, executor); } @Override public void onOpen() { super.onOpen(); // Declare interest for fill events. fillInterested(); } @Override public void onFillable() { try { ByteBuffer buffer = BufferUtil.allocate(1024); while (true) { int filled = getEndPoint().fill(buffer); if (filled > 0) { while (buffer.hasRemaining()) { // Search for newline. byte read = buffer.get(); if (read == '\\n') { // Notify the consumer of the line. consumer.accept(bytes.toString(StandardCharsets.UTF_8)); bytes.reset(); } else { bytes.write(read); } } } else if (filled == 0) { // No more bytes to fill, declare // again interest for fill events. fillInterested(); return; } else { // The other peer closed the // connection, close it back. getEndPoint().close(); return; } } } catch (Exception x) { getEndPoint().close(x); } } public void onLine(Consumer consumer) { this.consumer = consumer; } public void writeLine(String line, Callback callback) { line = line + \"\\r\\n\"; getEndPoint().write(callback, ByteBuffer.wrap(line.getBytes(StandardCharsets.UTF_8))); } } ClientConnector clientConnector = new ClientConnector(); clientConnector.start(); String host = \"example.org\"; int port = 80; SocketAddress address = new InetSocketAddress(host, port); ClientConnectionFactory connectionFactory = (endPoint, context) -> new TelnetConnection(endPoint, clientConnector.getExecutor()); CompletableFuture connectionPromise = new Promise.Completable<>(); Map context = new HashMap<>(); context.put(Transport.class.getName(), Transport.TCP_IP); context.put(ClientConnector.CLIENT_CONNECTION_FACTORY_CONTEXT_KEY, connectionFactory); context.put(ClientConnector.CONNECTION_PROMISE_CONTEXT_KEY, connectionPromise); clientConnector.connect(address, context); connectionPromise.whenComplete((connection, failure) -> { if (failure == null) { // Register a listener that receives string lines. connection.onLine(line -> System.getLogger(\"app\").log(INFO, \"line: {0}\", line)); // Write a line. connection.writeLine(\"GET / HTTP/1.0\\r\\n\", Callback.NOOP); } else { failure.printStackTrace(); } }); Note how a very basic \"telnet\" API that applications could use is implemented in the form of the onLine(Consumer) for the non-blocking receiving side and writeLine(String, Callback) for the non-blocking sending side. Note also how the onFillable() method implements some basic \"parsing\" by looking up the \\n character in the buffer. The \"telnet\" client above looks like a super-simple HTTP client because HTTP/1.0 can be seen as a line-based protocol. HTTP/1.0 was used just as an example, but we could have used any other line-based protocol such as SMTP, provided that the server was able to understand it. This is very similar to what the Jetty client implementation does for real network protocols. Real network protocols are of course more complicated and so is the implementation code that handles them, but the general ideas are similar. The Jetty client implementation provides a number of ClientConnectionFactory implementations that can be composed to produce and interpret the network bytes. For example, it is simple to modify the above example to use the TLS protocol so that you will be able to connect to the server on port 443, typically reserved for the secure HTTP protocol. The differences between the clear-text version and the TLS encrypted version are minimal: class TelnetConnection extends AbstractConnection { private final ByteArrayOutputStream bytes = new ByteArrayOutputStream(); private Consumer consumer; public TelnetConnection(EndPoint endPoint, Executor executor) { super(endPoint, executor); } @Override public void onOpen() { super.onOpen(); // Declare interest for fill events. fillInterested(); } @Override public void onFillable() { try { ByteBuffer buffer = BufferUtil.allocate(1024); while (true) { int filled = getEndPoint().fill(buffer); if (filled > 0) { while (buffer.hasRemaining()) { // Search for newline. byte read = buffer.get(); if (read == '\\n') { // Notify the consumer of the line. consumer.accept(bytes.toString(StandardCharsets.UTF_8)); bytes.reset(); } else { bytes.write(read); } } } else if (filled == 0) { // No more bytes to fill, declare // again interest for fill events. fillInterested(); return; } else { // The other peer closed the // connection, close it back. getEndPoint().close(); return; } } } catch (Exception x) { getEndPoint().close(x); } } public void onLine(Consumer consumer) { this.consumer = consumer; } public void writeLine(String line, Callback callback) { line = line + \"\\r\\n\"; getEndPoint().write(callback, ByteBuffer.wrap(line.getBytes(StandardCharsets.UTF_8))); } } ClientConnector clientConnector = new ClientConnector(); clientConnector.start(); // Use port 443 to contact the server using encrypted HTTP. String host = \"example.org\"; int port = 443; SocketAddress address = new InetSocketAddress(host, port); ClientConnectionFactory connectionFactory = (endPoint, context) -> new TelnetConnection(endPoint, clientConnector.getExecutor()); // Wrap the \"telnet\" ClientConnectionFactory with the SslClientConnectionFactory. connectionFactory = new SslClientConnectionFactory(clientConnector.getSslContextFactory(), clientConnector.getByteBufferPool(), clientConnector.getExecutor(), connectionFactory); // We will obtain a SslConnection now. CompletableFuture connectionPromise = new Promise.Completable<>(); Map context = new ConcurrentHashMap<>(); context.put(Transport.class.getName(), Transport.TCP_IP); context.put(ClientConnector.CLIENT_CONNECTION_FACTORY_CONTEXT_KEY, connectionFactory); context.put(ClientConnector.CONNECTION_PROMISE_CONTEXT_KEY, connectionPromise); clientConnector.connect(address, context); connectionPromise.whenComplete((sslConnection, failure) -> { if (failure == null) { // Unwrap the SslConnection to access the \"line\" APIs in TelnetConnection. TelnetConnection connection = (TelnetConnection)sslConnection.getSslEndPoint().getConnection(); // Register a listener that receives string lines. connection.onLine(line -> System.getLogger(\"app\").log(INFO, \"line: {0}\", line)); // Write a line. connection.writeLine(\"GET / HTTP/1.0\\r\\n\", Callback.NOOP); } else { failure.printStackTrace(); } }); The differences with the clear-text version are only: Change the port from 80 to 443. Wrap the ClientConnectionFactory with SslClientConnectionFactory. Unwrap the SslConnection to access TelnetConnection.","title":"I/O Architecture","component":"jetty","version":"12","name":"io-arch","url":"/docs/jetty/12/programming-guide/client/io-arch.html","titles":[{"text":"Transport Layer","hash":"transport","id":1},{"text":"Unix-Domain Support","hash":"unix-domain","id":2},{"text":"Memory Support","hash":"memory","id":3},{"text":"Protocol Layer","hash":"protocol","id":4}]},"53":{"id":53,"text":"Jetty’s WebSocketClient is a more powerful alternative to the WebSocket client provided by the standard JSR 356 javax.websocket APIs. Similarly to Jetty’s HttpClient, the WebSocketClient is non-blocking and asynchronous, making it very efficient in resource utilization. A synchronous, blocking, API is also offered for simpler cases. Since the first step of establishing a WebSocket communication is an HTTP request, WebSocketClient makes use of HttpClient and therefore depends on it. The Maven artifact coordinates are the following: org.eclipse.jetty.websocket jetty-websocket-jetty-client 12.0.10-SNAPSHOT The main class is org.eclipse.jetty.websocket.client.WebSocketClient; you instantiate it, configure it, and then start it like many other Jetty components. This is a minimal example: // Instantiate WebSocketClient. WebSocketClient webSocketClient = new WebSocketClient(); // Configure WebSocketClient, for example: webSocketClient.setMaxTextMessageSize(8 * 1024); // Start WebSocketClient. webSocketClient.start(); However, it is recommended that you explicitly pass an HttpClient instance to WebSocketClient so that you can have control over the HTTP configuration as well: // Instantiate and configure HttpClient. HttpClient httpClient = new HttpClient(); // For example, configure a proxy. httpClient.getProxyConfiguration().addProxy(new HttpProxy(\"localhost\", 8888)); // Instantiate WebSocketClient, passing HttpClient to the constructor. WebSocketClient webSocketClient = new WebSocketClient(httpClient); // Configure WebSocketClient, for example: webSocketClient.setMaxTextMessageSize(8 * 1024); // Start WebSocketClient; this implicitly starts also HttpClient. webSocketClient.start(); You may create multiple instances of WebSocketClient, but typically one instance is enough for most applications. Creating multiple instances may be necessary for example when you need to specify different configuration parameters for different instances. For example, you may need different instances when you need to configure the HttpClient differently: different transports, different proxies, different cookie stores, different authentications, etc. The configuration that is not WebSocket specific (such as idle timeout, etc.) should be directly configured on the associated HttpClient instance. The WebSocket specific configuration can be configured directly on the WebSocketClient instance. Configuring the WebSocketClient allows to give default values to various parameters, whose values may be overridden more specifically, as described in this section. Refer to the WebSocketClient javadocs for the setter methods available to customize the WebSocket specific configuration. It is recommended that when your application stops, you also stop the WebSocketClient instance (or instances) that you are using. Similarly to stopping HttpClient, you want to stop WebSocketClient from a thread that is not owned by WebSocketClient itself, for example: // Stop WebSocketClient. // Use LifeCycle.stop(...) to rethrow checked exceptions as unchecked. new Thread(() -> LifeCycle.stop(webSocketClient)).start(); A WebSocket client may initiate the communication with the server either using HTTP/1.1 or using HTTP/2. The two mechanism are quite different and detailed in the following sections. Initiating a WebSocket communication with a server using HTTP/1.1 is detailed in RFC 6455. A WebSocket client first establishes a TCP connection to the server, then sends an HTTP/1.1 upgrade request. If the server supports upgrading to WebSocket, it responds with HTTP status code 101, and then switches the communication over that connection, either incoming or outgoing, to happen using the WebSocket protocol. When the client receives the HTTP status code 101, it switches the communication over that connection, either incoming or outgoing, to happen using the WebSocket protocol. In code: // Use a standard, HTTP/1.1, HttpClient. HttpClient httpClient = new HttpClient(); // Create and start WebSocketClient. WebSocketClient webSocketClient = new WebSocketClient(httpClient); webSocketClient.start(); // The client-side WebSocket EndPoint that // receives WebSocket messages from the server. ClientEndPoint clientEndPoint = new ClientEndPoint(); // The server URI to connect to. URI serverURI = URI.create(\"ws://domain.com/path\"); // Connect the client EndPoint to the server. CompletableFuture clientSessionPromise = webSocketClient.connect(clientEndPoint, serverURI); WebSocketClient.connect() links the client-side WebSocket endpoint to a specific server URI, and returns a CompletableFuture of an org.eclipse.jetty.websocket.api.Session. The endpoint offers APIs to receive WebSocket data (or errors) from the server, while the session offers APIs to send WebSocket data to the server. Initiating a WebSocket communication with a server using HTTP/1.1 is detailed in RFC 8441. A WebSocket client establishes a TCP connection to the server or reuses an existing one currently used for HTTP/2, then sends an HTTP/2 CONNECT request over an HTTP/2 stream. If the server supports upgrading to WebSocket, it responds with HTTP status code 200, then switches the communication over that stream, either incoming or outgoing, to happen using HTTP/2 DATA frames wrapping WebSocket frames. When the client receives the HTTP status code 200, it switches the communication over that stream, either incoming or outgoing, to happen using HTTP/2 DATA frames wrapping WebSocket frames. From an external point of view, it will look like client is sending chunks of an infinite HTTP/2 request upload, and the server is sending chunks of an infinite HTTP/2 response download, as they will exchange HTTP/2 DATA frames; but the HTTP/2 DATA frames will contain each one or more WebSocket frames that both client and server know how to deliver to the respective WebSocket endpoints. When either WebSocket endpoint decides to terminate the communication, the HTTP/2 stream will be closed as well. In code: // Use the HTTP/2 transport for HttpClient. HTTP2Client http2Client = new HTTP2Client(); HttpClient httpClient = new HttpClient(new HttpClientTransportOverHTTP2(http2Client)); // Create and start WebSocketClient. WebSocketClient webSocketClient = new WebSocketClient(httpClient); webSocketClient.start(); // The client-side WebSocket EndPoint that // receives WebSocket messages from the server. ClientEndPoint clientEndPoint = new ClientEndPoint(); // The server URI to connect to. URI serverURI = URI.create(\"wss://domain.com/path\"); // Connect the client EndPoint to the server. CompletableFuture clientSessionPromise = webSocketClient.connect(clientEndPoint, serverURI); Alternatively, you can use the dynamic HttpClient transport: // Use the dynamic HTTP/2 transport for HttpClient. ClientConnector clientConnector = new ClientConnector(); HTTP2Client http2Client = new HTTP2Client(clientConnector); HttpClient httpClient = new HttpClient(new HttpClientTransportDynamic(clientConnector, new ClientConnectionFactoryOverHTTP2.HTTP2(http2Client))); // Create and start WebSocketClient. WebSocketClient webSocketClient = new WebSocketClient(httpClient); webSocketClient.start(); ClientEndPoint clientEndPoint = new ClientEndPoint(); URI serverURI = URI.create(\"wss://domain.com/path\"); // Connect the client EndPoint to the server. CompletableFuture clientSessionPromise = webSocketClient.connect(clientEndPoint, serverURI); Sometimes you need to add custom cookies, or other HTTP headers, or specify a WebSocket sub-protocol to the HTTP request that initiates the WebSocket communication. You can do this by using overloaded versions of the WebSocketClient.connect(…​) method: ClientEndPoint clientEndPoint = new ClientEndPoint(); URI serverURI = URI.create(\"ws://domain.com/path\"); // Create a custom HTTP request. ClientUpgradeRequest customRequest = new ClientUpgradeRequest(); // Specify a cookie. customRequest.getCookies().add(new HttpCookie(\"name\", \"value\")); // Specify a custom header. customRequest.setHeader(\"X-Token\", \"0123456789ABCDEF\"); // Specify a custom sub-protocol. customRequest.setSubProtocols(\"chat\"); // Connect the client EndPoint to the server with a custom HTTP request. CompletableFuture clientSessionPromise = webSocketClient.connect(clientEndPoint, serverURI, customRequest); If you want to inspect the HTTP response returned by the server as a reply to the HTTP request that initiates the WebSocket communication, you may provide a JettyUpgradeListener: ClientEndPoint clientEndPoint = new ClientEndPoint(); URI serverURI = URI.create(\"ws://domain.com/path\"); // The listener to inspect the HTTP response. JettyUpgradeListener listener = new JettyUpgradeListener() { @Override public void onHandshakeResponse(Request request, Response response) { // Inspect the HTTP response here. } }; // Connect the client EndPoint to the server with a custom HTTP request. CompletableFuture clientSessionPromise = webSocketClient.connect(clientEndPoint, serverURI, null, listener); The Jetty WebSocket architecture is organized around the concept of a logical connection between the client and the server. The connection may be physical, when connecting to the server using HTTP/1.1, as the WebSocket bytes are carried directly by the TCP connection. The connection may be virtual, when connecting to the server using HTTP/2, as the WebSocket bytes are wrapped into HTTP/2 DATA frames of an HTTP/2 stream. In this case, a single TCP connection may carry several WebSocket virtual connections, each wrapped in its own HTTP/2 stream. Each side of a WebSocket connection, either client or server, is made of two entities: A WebSocket endpoint, the entity that receives WebSocket events. A WebSocket session, the entity that offers an API to send WebSocket data (and to close the WebSocket connection), as well as to configure WebSocket connection parameters. A WebSocket endpoint is the entity that receives WebSocket events. The WebSocket events are the following: The open event. This event is emitted when the WebSocket communication has been successfully established. Applications interested in the open event receive the WebSocket session so that they can use it to send data to the remote peer. The close event. This event is emitted when the WebSocket communication has been closed. Applications interested in the close event receive a WebSocket status code and an optional close reason message. The error event. This event is emitted when the WebSocket communication encounters a fatal error, such as an I/O error (for example, the network connection has been broken), or a protocol error (for example, the remote peer sends an invalid WebSocket frame). Applications interested in the error event receive a Throwable that represent the error. The frame events. The frame events are emitted when a WebSocket frame is received, either a control frame such as PING, PONG or CLOSE, or a data frame such as BINARY or TEXT. One or more data frames of the same type define a message. The message events. The message event are emitted when a WebSocket message is received. The message event can be of two types: TEXT. Applications interested in this type of messages receive a String representing the UTF-8 bytes received. BINARY. Applications interested in this type of messages receive a ByteBuffer representing the raw bytes received. Listener endpoints are notified of events by invoking the correspondent method defined by the org.eclipse.jetty.websocket.api.Session.Listener interface. Annotated endpoints are notified of events by invoking the correspondent method annotated with the correspondent annotation from the org.eclipse.jetty.websocket.api.annotations.* package. Jetty uses MethodHandles to instantiate WebSocket endpoints and invoke WebSocket event methods, so WebSocket endpoint classes and WebSocket event methods must be public. When using JPMS, your classes must be public and must be exported using the exports directive in your module-info.java. It is not recommended to use the opens directive in your module-info.java for your classes, as it would expose your classes to deep reflection, which is unnecessary, as the exports directive is sufficient. This guarantees that WebSocket endpoints can be accessed by the Jetty implementation without additional configuration, no matter whether you are using only the class-path, or the module-path. For both types of WebSocket endpoints, only one thread at a time will be delivering frame or message events to the corresponding methods; the next frame or message event will not be delivered until the previous call to the corresponding method has exited, and if there is demand for it. Endpoints will always be notified of message events in the same order they were received over the network. In order to receive WebSocket events, you must demand for them; the only exception is the open event, because it is the initial event that applications can interact with. When a WebSocket event is received by an endpoint, the demand for WebSocket events (for that endpoint) is reset, so that no more WebSocket events will be received by the endpoint. It is responsibility of the endpoint to demand to receive more WebSocket events. For simple cases, you can just annotate your WebSocket endpoint with @WebSocket(autoDemand = true), or implement Session.Listener.AutoDemanding. In these two cases, when a method that receives a WebSocket event returns, the Jetty implementation automatically demands for another WebSocket event. For example: // Attribute autoDemand is true by default. @WebSocket(autoDemand = true) public class AutoDemandAnnotatedEndPoint { @OnWebSocketOpen public void onOpen(Session session) { // No need to demand here, because this endpoint is auto-demanding. } @OnWebSocketMessage public void onText(String message) { System.getLogger(\"ws.message\").log(INFO, message); // No need to demand here, because this endpoint is auto-demanding. } } public class AutoDemandListenerEndPoint implements Session.Listener.AutoDemanding { private Session session; @Override public void onWebSocketOpen(Session session) { this.session = session; // No need to demand here, because this endpoint is auto-demanding. } @Override public void onWebSocketText(String message) { System.getLogger(\"ws.message\").log(INFO, message); // No need to demand here, because this endpoint is auto-demanding. } } While auto-demand works for simple cases, it may not work in all cases, especially those where the method that receives the WebSocket event performs asynchronous operations. The following example shows the problem: public class WrongAutoDemandListenerEndPoint implements Session.Listener.AutoDemanding { private Session session; @Override public void onWebSocketOpen(Session session) { this.session = session; // No need to demand here, because this endpoint is auto-demanding. } @Override public void onWebSocketText(String message) { // Perform an asynchronous operation, such as invoking // a third party service or just echoing the message back. session.sendText(message, Callback.NOOP); // Returning from this method will automatically demand, // so this method may be entered again before sendText() // has been completed, causing a WritePendingException. } } Note how, in the example above, auto-demanding has the problem that receiving WebSocket text messages may happen faster than echoing them back, because the call to sendText(...) may return almost immediately but be slow to complete because it is asynchronous. In the example above, if another WebSocket text message arrives, and the sendText(...) operation is not complete, a WritePendingException will be thrown. In other cases, this may lead to infinite buffering of data, eventually causing OutOfMemoryErrors, and in general excessive resource consumption that may be difficult to diagnose and troubleshoot. For more information, see also the section about sending data. Always be careful when using auto-demand. Analyze the operations that your endpoint performs and make sure they complete synchronously within the method. To solve the problem outlined above, you must explicitly demand for the next WebSocket event, only when the processing of the previous events is complete. For example: public class ExplicitDemandListenerEndPoint implements Session.Listener { private Session session; @Override public void onWebSocketOpen(Session session) { this.session = session; // Explicitly demand here, otherwise no other event is received. session.demand(); } @Override public void onWebSocketText(String message) { // Perform an asynchronous operation, such as invoking // a third party service or just echoing the message back. // We want to demand only when sendText() has completed, // which is notified to the callback passed to sendText(). session.sendText(message, Callback.from(session::demand, failure -> { // Handle the failure, in this case just closing the session. session.close(StatusCode.SERVER_ERROR, \"failure\", Callback.NOOP); })); // Return from the method without demanding yet, // waiting for the completion of sendText() to demand. } } Note how it is necessary to invoke Session.demand() from the open event, in order to receive message events. Furthermore, note how every time a text message is received, a possibly slow asynchronous operation is initiated (which returns almost immediately, although it may not be completed yet) and then the method returns. Because there is no demand when the method returns (because the asynchronous operation is not completed yet), the implementation will not notify any other WebSocket event (not even frame, close or error events). When the asynchronous operation completes successfully the callback is notified; this, in turn, invokes Session.demand(), and the implementation may notify another WebSocket event (if any) to the WebSocket endpoint. A WebSocket endpoint may implement the org.eclipse.jetty.websocket.api.Session.Listener interface to receive WebSocket events: public class ListenerEndPoint implements Session.Listener { private Session session; @Override public void onWebSocketOpen(Session session) { // The WebSocket endpoint has been opened. // Store the session to be able to send data to the remote peer. this.session = session; // You may configure the session. session.setMaxTextMessageSize(16 * 1024); // You may immediately send a message to the remote peer. session.sendText(\"connected\", Callback.from(session::demand, Throwable::printStackTrace)); } @Override public void onWebSocketText(String message) { // A WebSocket text message is received. // You may echo it back if it matches certain criteria. if (message.startsWith(\"echo:\")) { // Only demand for more events when sendText() is completed successfully. session.sendText(message.substring(\"echo:\".length()), Callback.from(session::demand, Throwable::printStackTrace)); } else { // Discard the message, and demand for more events. session.demand(); } } @Override public void onWebSocketBinary(ByteBuffer payload, Callback callback) { // A WebSocket binary message is received. // Save only PNG images. boolean isPNG = true; byte[] pngBytes = new byte[]{(byte)0x89, 'P', 'N', 'G'}; for (int i = 0; i result = forwardToREST(payload, fin); result.whenComplete((ignored, failure) -> { if (failure == null) session.demand(); else failure.printStackTrace(); }); } @Override public void onWebSocketPartialBinary(ByteBuffer payload, boolean fin, Callback callback) { // Save chunks to file. appendToFile(payload, fin); // Complete the callback to release the payload ByteBuffer. callback.succeed(); // Demand for more events. session.demand(); } } A WebSocket endpoint may annotate methods with org.eclipse.jetty.websocket.api.annotations.* annotations to receive WebSocket events. Each annotated event method may take an optional Session argument as its first parameter: @WebSocket(autoDemand = false) (1) public class AnnotatedEndPoint { @OnWebSocketOpen (2) public void onOpen(Session session) { // The WebSocket endpoint has been opened. // You may configure the session. session.setMaxTextMessageSize(16 * 1024); // You may immediately send a message to the remote peer. session.sendText(\"connected\", Callback.from(session::demand, Throwable::printStackTrace)); } @OnWebSocketMessage (3) public void onTextMessage(Session session, String message) { // A WebSocket textual message is received. // You may echo it back if it matches certain criteria. if (message.startsWith(\"echo:\")) { // Only demand for more events when sendText() is completed successfully. session.sendText(message.substring(\"echo:\".length()), Callback.from(session::demand, Throwable::printStackTrace)); } else { // Discard the message, and demand for more events. session.demand(); } } @OnWebSocketMessage (3) public void onBinaryMessage(Session session, ByteBuffer payload, Callback callback) { // A WebSocket binary message is received. // Save only PNG images. boolean isPNG = true; byte[] pngBytes = new byte[]{(byte)0x89, 'P', 'N', 'G'}; for (int i = 0; i result = forwardToREST(partialText, fin); result.whenComplete((ignored, failure) -> { if (failure == null) session.demand(); else failure.printStackTrace(); }); } @OnWebSocketMessage public void onBinaryMessage(Session session, ByteBuffer partialPayload, boolean fin, Callback callback) { // Save partial payloads to file. appendToFile(partialPayload, fin); // Complete the callback to release the payload ByteBuffer. callback.succeed(); // Demand for more events. session.demand(); } } Alternatively, but less efficiently, you can use the @OnWebSocketMessage annotation, but you change the signature of the method to take, respectively, a Reader and an InputStream: @WebSocket public class StreamingAnnotatedEndpoint { @OnWebSocketMessage public void onTextMessage(Reader reader) { // Read from the Reader and forward. // Caution: blocking APIs. forwardToREST(reader); } @OnWebSocketMessage public void onBinaryMessage(InputStream stream) { // Read from the InputStream and save to file. // Caution: blocking APIs. appendToFile(stream); } } Reader or InputStream only offer blocking APIs, so if the remote peers are slow in sending the large WebSocket messages, reading threads may be blocked in Reader.read(char[]) or InputStream.read(byte[]), possibly exhausting the thread pool. Note that when you use blocking APIs, the invocations to Session.demand() are now performed by the Reader or InputStream implementations (as well as the ByteBuffer lifecycle management). You indirectly control the demand by deciding when to read from Reader or InputStream. A WebSocket session is the entity that offers an API to send data to the remote peer, to close the WebSocket connection, and to configure WebSocket connection parameters. You may configure the WebSocket session behavior using the org.eclipse.jetty.websocket.api.Session APIs. You want to do this as soon as you have access to the Session object, typically from the open event handler: public class ConfigureEndpoint implements Session.Listener { @Override public void onWebSocketOpen(Session session) { // Configure the max length of incoming messages. session.setMaxTextMessageSize(16 * 1024); // Configure the idle timeout. session.setIdleTimeout(Duration.ofSeconds(30)); // Demand for more events. session.demand(); } } The settings that can be configured include: maxBinaryMessageSize the maximum size in bytes of a binary message (which may be composed of multiple frames) that can be received. maxTextMessageSize the maximum size in bytes of a text message (which may be composed of multiple frames) that can be received. maxFrameSize the maximum payload size in bytes of any WebSocket frame that can be received. inputBufferSize the input (read from network/transport layer) buffer size in bytes; it has no relationship with the WebSocket frame size or message size. outputBufferSize the output (write to network/transport layer) buffer size in bytes; it has no relationship to the WebSocket frame size or message size. autoFragment whether WebSocket frames are automatically fragmented to respect the maximum frame size. idleTimeout the duration that a WebSocket connection may remain idle (that is, there is no network traffic, neither in read nor in write) before being closed by the implementation. Please refer to the Session javadocs for the complete list of configuration APIs. To send data to the remote peer, you can use the non-blocking APIs offered by Session. @WebSocket public class NonBlockingSendEndpoint { @OnWebSocketMessage public void onText(Session session, String text) { // Send textual data to the remote peer. session.sendText(\"data\", new Callback() (1) { @Override public void succeed() { // Send binary data to the remote peer. ByteBuffer bytes = readImageFromFile(); session.sendBinary(bytes, new Callback() (2) { @Override public void succeed() { // Both sends succeeded. } @Override public void fail(Throwable x) { System.getLogger(\"websocket\").log(System.Logger.Level.WARNING, \"could not send binary data\", x); } }); } @Override public void fail(Throwable x) { // No need to rethrow or close the session. System.getLogger(\"websocket\").log(System.Logger.Level.WARNING, \"could not send textual data\", x); } }); // remote.sendString(\"wrong\", Callback.NOOP); // May throw WritePendingException! (3) } } 1 Non-blocking APIs require a Callback parameter. 2 Note how the second send must be performed from inside the callback. 3 Sequential sends may throw WritePendingException. Non-blocking APIs are more difficult to use since you are required to meet the following condition: You cannot initiate another send of any kind until the previous send is completed. For example, if you have initiated a text send, you cannot initiate another text or binary send, until the previous send has completed. This requirement is necessary to avoid unbounded buffering that could lead to OutOfMemoryErrors. We strongly recommend that you follow the condition above. However, there may be cases where you want to explicitly control the number of outgoing buffered messages using RemoteEndpoint.setMaxOutgoingFrames(int). Remember that trying to control the number of outgoing frames is very difficult and tricky; you may set maxOutgoingFrames=4 and have a situation where 6 threads try to concurrently send messages: threads 1 to 4 will be able to successfully buffer their messages, thread 5 may fail, but thread 6 may succeed because one of the previous threads completed its send. At this point you have an out-of-order message delivery that could be unexpected and very difficult to troubleshoot because it will happen non-deterministically. While non-blocking APIs are more difficult to use, they don’t block the sender thread and therefore use less resources, which in turn typically allows for greater scalability under load: with respect to blocking APIs, non-blocking APIs need less resources to cope with the same load. If you need to send large WebSocket messages, you may reduce the memory usage by streaming the message content. The Jetty WebSocket APIs offer sendPartial*(...) methods that allow you to send a chunk of the whole message at a time, therefore reducing the memory usage since it is not necessary to have the whole message String or ByteBuffer in memory to send it. The Jetty WebSocket APIs for streaming the message content are non-blocking and therefore you should wait (without blocking!) for the callbacks to complete. Fortunately, Jetty provides the IteratingCallback utility class (described in more details in this section) which greatly simplify the use of non-blocking APIs: @WebSocket(autoDemand = false) public class StreamSendNonBlockingEndpoint { @OnWebSocketMessage public void onText(Session session, String text) { new Sender(session).iterate(); } private class Sender extends IteratingCallback implements Callback (1) { private final ByteBuffer byteBuffer = ByteBuffer.allocateDirect(1024); private final Session session; private boolean finished; private Sender(Session session) { this.session = session; } @Override protected Action process() throws Throwable (2) { if (finished) return Action.SUCCEEDED; (4) int read = readChunkToSendInto(byteBuffer); if (read < 0) { // No more bytes to send, finish the WebSocket message. session.sendPartialBinary(byteBuffer, true, this); (3) finished = true; return Action.SCHEDULED; } else { // Send the chunk. session.sendPartialBinary(byteBuffer, false, this); (3) return Action.SCHEDULED; } } @Override public void succeed() { // When the send succeeds, succeed this IteratingCallback. succeeded(); } @Override public void fail(Throwable x) { // When the send fails, fail this IteratingCallback. failed(x); } @Override protected void onCompleteSuccess() { session.demand(); (5) } @Override protected void onCompleteFailure(Throwable x) { x.printStackTrace(); } } } 1 Implementing Callback allows to pass this to sendPartialBinary(...). 2 The process() method is called iteratively when each sendPartialBinary(...) is completed. 3 Sends the message chunks. 4 When the last chunk as been sent, complete successfully the IteratingCallback. 5 Only when the IteratingCallback is completed successfully, demand for more WebSocket events. The WebSocket protocol defines two special frame, named PING and PONG that may be interesting to applications for these use cases: Calculate the round-trip time with the remote peer. Keep the connection from being closed due to idle timeout — a heartbeat-like mechanism. To handle PING/PONG events, you may implement methods Session.Listener.onWebSocketPing(ByteBuffer) and/or Session.Listener.onWebSocketPong(ByteBuffer). PING/PONG events are also supported when using annotations via the OnWebSocketFrame annotation. PING frames may contain opaque application bytes, and the WebSocket implementation replies to them with a PONG frame containing the same bytes: public class RoundTripListenerEndpoint implements Session.Listener { private Session session; @Override public void onWebSocketOpen(Session session) { this.session = session; // Send to the remote peer the local nanoTime. ByteBuffer buffer = ByteBuffer.allocate(8).putLong(NanoTime.now()).flip(); session.sendPing(buffer, Callback.NOOP); // Demand for more events. session.demand(); } @Override public void onWebSocketPong(ByteBuffer payload) { // The remote peer echoed back the local nanoTime. long start = payload.getLong(); // Calculate the round-trip time. long roundTrip = NanoTime.since(start); // Demand for more events. session.demand(); } } When you want to terminate the communication with the remote peer, you close the Session: @WebSocket public class CloseEndpoint { @OnWebSocketMessage public void onText(Session session, String text) { if (\"close\".equalsIgnoreCase(text)) session.close(StatusCode.NORMAL, \"bye\", Callback.NOOP); } } Closing a WebSocket Session carries a status code and a reason message that the remote peer can inspect in the close event handler (see this section). The reason message is optional, and may be truncated to fit into the WebSocket frame sent to the client. It is best to use short tokens such as \"shutdown\", or \"idle_timeout\", etc. or even application specific codes such as \"0001\" or \"00AF\" that can be converted by the application into more meaningful messages.","title":"WebSocket Client","component":"jetty","version":"12","name":"websocket","url":"/docs/jetty/12/programming-guide/client/websocket.html","titles":[{"text":"Starting WebSocketClient","hash":"start","id":1},{"text":"Stopping WebSocketClient","hash":"stop","id":2},{"text":"Connecting to a Remote Host","hash":"connect","id":3},{"text":"Using HTTP/1.1","hash":"connect-http11","id":4},{"text":"Using HTTP/2","hash":"connect-http2","id":5},{"text":"Customizing the Initial HTTP Request","hash":"connect-custom-http-request","id":6},{"text":"Inspecting the Initial HTTP Response","hash":"connect-inspect-http-response","id":7},{"text":"Jetty WebSocket Architecture","hash":"architecture","id":8},{"text":"WebSocket Endpoints","hash":"endpoints","id":9},{"text":"WebSocket Events Demand","hash":"endpoints-demand","id":10},{"text":"Listener Endpoints","hash":"endpoints-listener","id":11},{"text":"Message Streaming Reads","hash":"message-streaming-reads","id":12},{"text":"Annotated Endpoints","hash":"endpoints-annotated","id":13},{"text":"Message Streaming Reads","hash":"endpoints-annotated-streaming","id":14},{"text":"WebSocket Session","hash":"session","id":15},{"text":"Configuring the Session","hash":"session-configure","id":16},{"text":"Sending Data","hash":"session-send","id":17},{"text":"Streaming Send APIs","hash":"session-send-stream","id":18},{"text":"Sending Ping/Pong","hash":"session-ping","id":19},{"text":"Closing the Session","hash":"session-close","id":20}]},"54":{"id":54,"text":"This plugin will pre-compile your JSP and works in conjunction with the Maven war plugin to put them inside an assembled war. Here’s the basic setup required to put the JSPC plugin into your build for the Jakarta EE ee10 environment: org.eclipse.jetty.ee10 jetty-ee10-jspc-maven-plugin 12.0.10-SNAPSHOT jspc jspc The configurable parameters are as follows: webXmlFragment Default value: ${project.basedir}/target/webfrag.xml File into which to generate the servlet declarations. Will be merged with an existing web.xml. webAppSourceDirectory Default value: ${project.basedir}/src/main/webapp Root of resources directory where jsps, tags etc are located. webXml Default value: ${project.basedir}/src/main/webapp/WEB-INF/web.xml The web.xml file to use to merge with the generated fragments. includes Default value: **/*.jsp, **/*.jspx The comma separated list of patterns for file extensions to be processed. excludes Default value: **/.svn/** The comma separated list of patterns for file extensions to be skipped. classesDirectory Default value: ${project.build.outputDirectory} Location of classes for the webapp. generatedClasses Default value: ${project.build.outputDirectory} Location to put the generated classes for the jsps. insertionMarker Default value: none A marker string in the src web.xml file which indicates where to merge in the generated web.xml fragment. Note that the marker string will NOT be preserved during the insertion. Can be left blank, in which case the generated fragment is inserted just before the line containing . useProvidedScope Default value: false If true, jars of dependencies marked with provided will be placed on the compilation classpath. mergeFragment Default value: true Whether or not to merge the generated fragment file with the source web.xml. The merged file will go into the same directory as the webXmlFragment. keepSources Default value: false If true, the generated .java files are not deleted at the end of processing. scanAllDirectories Default value: true Determines if dirs on the classpath should be scanned as well as jars. If true, this allows scanning for tlds of dependent projects that are in the reactor as unassembled jars. scanManifest Default value: true Determines if the manifest of JAR files found on the classpath should be scanned. sourceVersion Java version of jsp source files. The default value depends on the version of the jetty-ee10-jspc-maven-plugin. targetVersion Java version of class files generated from jsps. The default value depends on the version of the jetty-ee10-jspc-maven-plugin. tldJarNamePatterns Default value: .*taglibs[^/]*\\.jar|.*jstl[^/]*\\.jar$ Patterns of jars on the 'system' (ie container) path that contain tlds. Use | to separate each pattern. jspc Default value: the org.apache.jasper.JspC instance being configured. The JspC class actually performs the pre-compilation. All setters on the JspC class are available. Taking all the default settings, here’s how to configure the war plugin to use the generated web.xml that includes all of the jsp servlet declarations: org.apache.maven.plugins maven-war-plugin ${project.basedir}/target/web.xml As compiling jsps is usually done during preparation for a production release and not usually done during development, it is more convenient to put the plugin setup inside a which which can be deliberately invoked during prep for production. For example, the following profile will only be invoked if the flag -Dprod is present on the run line: prod prod org.eclipse.jetty.ee10 jetty-ee10-jspc-maven-plugin 12.0.10-SNAPSHOT org.apache.maven.plugins maven-war-plugin The following invocation would cause your code to be compiled, the jsps to be compiled, the and s inserted in the web.xml and your webapp assembled into a war: $ mvn -Dprod package Precompiling jsps with an overlaid war requires a bit more configuration. This is because you need to separate the steps of unpacking the overlaid war and then repacking the final target war so the jetty-ee10-jspc-maven-plugin has the opportunity to access the overlaid resources. In the following example the overlaid war will provide the web.xml file but the jsps will be in src/main/webapp (i.e. part of the project that uses the overlay). The overlaid war file will be unpacked, the jsps compiled and their servlet definitions merged into the extracted web.xml, and everything packed into a war. An example configuration of the war plugin that separates those phases into an unpack phase, and then a packing phase: maven-war-plugin unpack exploded generate-resources target/foo org.eclipse.jetty.{ee-current}.demos jetty-{ee-current}-demo-jetty-webapp pack war package target/foo target/web.xml Now you also need to configure the jetty-ee10-jspc-maven-plugin so that it can use the web.xml that was extracted by the war unpacking and merge in the generated definitions of the servlets. This is in target/foo/WEB-INF/web.xml. Using the default settings, the web.xml merged with the jsp servlet definitions will be put into target/web.xml. org.eclipse.jetty.ee10 jetty-ee10-jspc-maven-plugin 12.0.10-SNAPSHOT jspc jspc target/foo/WEB-INF/web.xml **/*.foo **/*.fff","title":"Jetty Jspc Maven Plugin","component":"jetty","version":"12","name":"jetty-jspc-maven-plugin","url":"/docs/jetty/12/programming-guide/maven-jetty/jetty-jspc-maven-plugin.html","titles":[{"text":"Configuration","hash":"jspc-config","id":1},{"text":"Precompiling only for Production Build","hash":"jspc-production-precompile","id":2},{"text":"Precompiling Jsps with Overlaid Wars","hash":"jspc-overlay-precompile","id":3}]},"55":{"id":55,"text":"Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information. It is an ideal tool to build a web application project, and such projects can use the jetty-maven-plugin to easily run the web application and save time in development. You can also use Maven to build, test and run a project which embeds Jetty. Use of Maven and the jetty-maven-plugin is not required. Using Maven for Jetty implementations is a popular choice, but users encouraged to manage their projects in whatever way suits their needs. Other popular tools include Ant and Gradle. Maven uses convention over configuration, so it is best to use the project structure Maven recommends. You can use archetypes to quickly setup Maven projects, but we will set up the structure manually for this simple tutorial example: > mkdir JettyMavenHelloWorld > cd JettyMavenHelloWorld > mkdir -p src/main/java/org/example Use an editor to create the file src/main/java/org/example/HelloWorld.java with the following contents: package org.example; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import jakarta.servlet.ServletException; import java.io.IOException; import org.eclipse.jetty.server.Server; import org.eclipse.jetty.server.Request; import org.eclipse.jetty.server.handler.AbstractHandler; public class HelloWorld extends AbstractHandler { public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { response.setContentType(\"text/html;charset=utf-8\"); response.setStatus(HttpServletResponse.SC_OK); baseRequest.setHandled(true); response.getWriter().println(\"Hello World\"); } public static void main(String[] args) throws Exception { Server server = new Server(8080); server.setHandler(new HelloWorld()); server.start(); server.join(); } } The pom.xml file declares the project name and its dependencies. Use an editor to create the file pom.xml in the JettyMavenHelloWorld directory with the following contents: 4.0.0 org.example hello-world 0.1-SNAPSHOT jar Jetty HelloWorld 12.0.10-SNAPSHOT org.eclipse.jetty jetty-server ${jettyVersion} org.codehaus.mojo exec-maven-plugin 1.1 java org.example.HelloWorld You can now compile and execute the HelloWorld class by using these commands: > mvn clean compile exec:java Point your browser to http://localhost:8080 to see the Hello World page. The previous section demonstrated how to use Maven with an application that embeds Jetty. We can instead develop a standard webapp using Maven and Jetty. First create the Maven structure (you can use the maven webapp archetype instead if you prefer): > mkdir JettyMavenHelloWarApp > cd JettyMavenHelloWebApp > mkdir -p src/main/java/org/example > mkdir -p src/main/webapp/WEB-INF Use an editor to create the file src/main/java/org/example/HelloServlet.java with the following contents: package org.example; import java.io.IOException; import jakarta.servlet.ServletException; import jakarta.servlet.http.HttpServlet; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; public class HelloServlet extends HttpServlet { protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); response.setStatus(HttpServletResponse.SC_OK); response.getWriter().println(\"Hello Servlet\"); response.getWriter().println(\"session=\" + request.getSession(true).getId()); } } This servlet must be declared in the web deployment descriptor, so create the file src/main/webapp/WEB-INF/web.xml and add the following contents: Hello org.example.HelloServlet Hello /hello/* The pom.xml file declares the project name and its dependencies. Use an editor to create the file pom.xml with the following contents in the JettyMavenHelloWarApp directory, noting particularly the declaration of the jetty-maven-plugin for the Jakarta EE 10 environment: 4.0.0 org.example hello-world 0.1-SNAPSHOT war Jetty HelloWorld WebApp 12.0.10-SNAPSHOT jakarta.servlet jakarta.servlet-api 6.0.0 provided org.eclipse.jetty.ee10 jetty-ee10-maven-plugin ${jettyVersion} The web application can now be built and run without first needing to assemble it into a war by using the jetty-maven-plugin via the command: > mvn jetty:run You can see the static and dynamic content at http://localhost:8080/hello There are a great deal of configuration options available for the jetty-maven-plugin to help you build and run your webapp. The full reference is at Configuring the Jetty Maven Plugin. A Web Application Archive (WAR) file can be produced from the project with the command: > mvn package The resulting war file is in the target directory and may be deployed on any standard servlet server, including Jetty.","title":"Using Maven","component":"jetty","version":"12","name":"jetty-maven-helloworld","url":"/docs/jetty/12/programming-guide/maven-jetty/jetty-maven-helloworld.html","titles":[{"text":"Using Embedded Jetty with Maven","hash":"configuring-embedded-jetty-with-maven","id":1},{"text":"Creating the HelloWorld Class","hash":"creating-helloworld-class","id":2},{"text":"Creating the POM Descriptor","hash":"creating-embedded-pom-descriptor","id":3},{"text":"Building and Running Embedded HelloWorld","hash":"buildng-and-running-embedded-helloworld","id":4},{"text":"Developing a Standard WebApp with Jetty and Maven","hash":"developing-standard-webapp-with-jetty-and-maven","id":5},{"text":"Creating a Servlet","hash":"creating-servlet","id":6},{"text":"Creating the POM Descriptor","hash":"creating-plugin-pom-descriptor","id":7},{"text":"Building and Running the Web Application","hash":"building-and-running-web-application","id":8},{"text":"Building a WAR file","hash":"building-war-file","id":9}]},"56":{"id":56,"text":"The Jetty Maven plugin is useful for rapid development and testing. It can optionally periodically scan a project for changes and automatically redeploy the webapp if any are found. This makes the development cycle more productive by eliminating the build and deploy steps: use an IDE to make changes to the project, and the running web container automatically picks them up, allowing them to be tested straight away. There are only 4 goals to run a webapp in Jetty: jetty:run jetty:run-war jetty:start jetty:start-war Plus two utility goals: jetty:stop jetty:effective-web-xml jetty:run and jetty:start are alike in that they both run an unassembled webapp in Jetty,however jetty:run is designed to be used at the command line, whereas jetty:start is specifically designed to be bound to execution phases in the build lifecycle. jetty:run will pause Maven while jetty is running, echoing all output to the console, and then stop Maven when jetty exits. jetty:start will not pause Maven, will write all its output to a file, and will not stop Maven when jetty exits. jetty:run-war and jetty:start-war are similar in that they both run an assembled war file in Jetty. However, jetty:run-war is designed to be run at the command line, whereas jetty:start-war is specifically designed to be bound to execution phases in the build lifecycle. jetty:run-war will pause Maven while Jetty is running, echoing all output to the console, and then stop Maven when Jetty exits. jetty:start-war will not pause Maven, will write all its output to a file, and will not stop Maven when Jetty exits. While the Jetty Maven Plugin can be very useful for development we do not recommend its use in a production capacity. In order for the plugin to work it needs to leverage many internal Maven APIs and Maven itself it not a production deployment tool. We recommend either the traditional xrefr:og-deploy[distribution] deployment approach or using embedded Jetty. Since Jetty 12, Jetty Maven plugin is repackaged for the corresponding Jakarta EE version with an eeX classifier in the groupId and artifactId. First, add jetty-ee{8,9,10}-maven-plugin to your pom.xml definition. Here’s an example of how to do that for Jakarta EE 10: org.eclipse.jetty.ee10 jetty-ee10-maven-plugin 12.0.10-SNAPSHOT Then, from the same directory as the project’s root pom.xml, type: mvn jetty:run This starts Jetty and serves up the project on http://localhost:8080/. Jetty will continue to run until you stop it. By default, it will not automatically restart your webapp. Set a non-zero value to have Jetty scan your webapp for changes and automatically redeploy, or set to 0 to cause manual redeployment by hitting the Enter key. Terminate the plugin with a Ctrl+c in the terminal window where it is running. The classpath of the running Jetty instance and its deployed webapp are managed by Maven, and may not be exactly what you expect. For example: a webapp’s dependent jars might be referenced via the local repository, or other projects in the reactor, not the WEB-INF/lib directory. The goals prefixed with \"run-\" are designed to be used at the command line. They first run a Maven build on your project to ensure at least the classes are all built. They then start Jetty and pause the Maven build process until Jetty is manually terminated, at which time the build will also be terminated. Jetty can scan various files in your project for changes and redeploy the webapp as necessary, or you can choose to manually trigger a redeploy if you prefer. All output from Jetty is echoed to the console. The goals prefixed with \"start-\" are designed to be used with build lifecycle bindings in the pom, and not at the command line. No part of your project will be rebuilt by invoking these goals - you should ensure that your bind the execution to a build phase where all necessary parts of your project have been built. Maven will start and terminate Jetty at the appropriate points in the build lifecycle, continuing with the build. Jetty will not scan any files in your project for changes, and your webapp will not be redeployed either automatically or manually. Output from Jetty is directed to a file in the target directory. To see a list of all goals supported by the Jetty Maven plugin, do: mvn jetty:help To see the detailed list of parameters that can be configured for a particular goal, in addition to its description, do: mvn jetty:help -Ddetail=true -Dgoal= All of the \"run-\" and \"start-\" goals can deploy your webapp either into the running maven process, or forked into a new child process, or forked into a Jetty distribution on disk. This is controlled by setting the deployMode configuration parameter in the pom, but can also be set by defining the Maven property 'jetty.deployMode'. deployMode of EMBED. This is the \"classic\" Jetty Maven plugin deployment mode, running in-process with Maven. This is the default mode. These extra configuration parameters are available: httpConnector Optional. Note that to configure a https connector, you will need to use xml configuration files instead, setting the jettyXmls parameter. This parameter can only be used to configure a standard http connector. If not specified, Jetty will create a ServerConnector instance listening on port 8080. You can change this default port number by using the system property jetty.http.port on the command line, for example, mvn -Djetty.http.port=9999 jetty:run. Alternatively, you can use this configuration element to set up the information for the ServerConnector. The following are the valid configuration sub-elements: port The port number for the connector to listen on. By default it is 8080. host The particular interface for the connector to listen on. By default, all interfaces. name The name of the connector, which is useful for configuring contexts to respond only on particular connectors. idleTimeout Maximum idle time for a connection. You could instead configure the connectors in a standard jetty xml config file and put its location into the jettyXml parameter. Note that since Jetty 9.0 it is no longer possible to configure a https connector directly in the pom.xml: you need to use jetty xml config files to do it. loginServices Optional. A list of org.eclipse.jetty.security.LoginService implementations. Note that there is no default realm. If you use a realm in your web.xml you can specify a corresponding realm here. You could instead configure the login services in a jetty xml file and add its location to the jettyXml parameter. See Configuring Security. requestLog Optional. An implementation of the org.eclipse.jetty.server.RequestLog request log interface. There are three other ways to configure the RequestLog: In a Jetty xml config file, as specified in the jettyXml parameter. In a context xml config file, as specified in the contextXml parameter. In the webApp element. See Configuring Request Logs for more information. server Optional as of Jetty 9.3.1. This would configure an instance of org.eclipse.jetty.server.Server for the plugin to use, however it is usually not necessary to configure this, as the plugin will automatically configure one for you. In particular, if you use the jettyXmls element, then you generally don’t want to define this element, as you are probably using the jettyXmls file/s to configure up a Server with a special constructor argument, such as a custom threadpool. If you define both a server element and use a jettyXmls element which points to a config file that has a line like then the the xml configuration will override what you configure for the server in the pom.xml. useProvidedScope Default value is false. If true, the dependencies with provided are placed onto the container classpath. Be aware that this is not the webapp classpath, as provided indicates that these dependencies would normally be expected to be provided by the container. You should very rarely ever need to use this. See Container Classpath vs WebApp Classpath. deployMode of FORK. This is similar to the old \"jetty:run-forked\" goal - a separate process is forked to run your webapp embedded into jetty. These extra configuration parameters are available: env Optional. Map of key/value pairs to pass as environment to the forked JVM. jvmArgs Optional. A space separated string representing arbitrary arguments to pass to the forked JVM. forkWebXml Optional. Defaults to target/fork-web.xml. This is the location of a quickstart web xml file that will be generated during the forking of the jetty process. You should not need to set this parameter, but it is available if you wish to control the name and location of that file. useProvidedScope Default value is false. If true, the dependencies with provided are placed onto the container classpath. Be aware that this is NOT the webapp classpath, as \"provided\" indicates that these dependencies would normally be expected to be provided by the container. You should very rarely ever need to use this. See Container Classpath vs WebApp Classpath. deployMode of EXTERNAL. This is similar to the old \"jetty:run-distro\" goal - your webapp is deployed into a dynamically downloaded, unpacked and configured Jetty distribution. A separate process is forked to run it. These extra configuration parameters are available: jettyBase Optional. The location of an existing Jetty base directory to use to deploy the webapp. The existing base will be copied to the target/ directory before the webapp is deployed. If there is no existing jetty base, a fresh one will be made in target/jetty-base. jettyHome Optional. The location of an existing unpacked Jetty distribution. If one does not exist, a fresh Jetty distribution will be downloaded from Maven and installed to the target directory. jettyOptions Optional. A space separated string representing extra arguments to the synthesized Jetty command line. Values for these arguments can be found in the section titled \"Options\" in the output of java -jar $jetty.home/start.jar --help. jvmArgs Optional. A space separated string representing arguments that should be passed to the jvm of the child process running the distro. modules Optional. An array of names of additional Jetty modules that the Jetty child process will activate. Use this to change the container classpath instead of useProvidedScope. These modules are enabled by default: server,http,webapp,deploy. The following configuration parameters are common to all of the \"run-\" and \"start-\" goals: deployMode One of EMBED, FORK or EXTERNAL. Default EMBED. Can also be configured by setting the Maven property jetty.deployMode. This parameter determines whether the webapp will run in Jetty in-process with Maven, forked into a new process, or deployed into a Jetty distribution. See Deployment Modes. jettyXmls Optional. A comma separated list of locations of Jetty xml files to apply in addition to any plugin configuration parameters. You might use it if you have other webapps, handlers, specific types of connectors etc., to deploy, or if you have other Jetty objects that you cannot configure from the plugin. skip Default is false. If true, the execution of the plugin exits. Same as setting the SystemProperty -Djetty.skip on the command line. This is most useful when configuring Jetty for execution during integration testing and you want to skip the tests. excludedGoals Optional. A list of Jetty plugin goal names that will cause the plugin to print an informative message and exit. Useful if you want to prevent users from executing goals that you know cannot work with your project. supportedPackagings Optional. Defaults to war. This is a list of maven types that can work with the jetty plugin. Usually, only war projects are suitable, however, you may configure other types. The plugin will refuse to start if the type in the pom is not in list of supportedPackagings. systemProperties Optional. Allows you to configure System properties for the execution of the plugin. For more information, see Setting System Properties. systemPropertiesFile Optional. A file containing System properties to set for the execution of the plugin. By default, settings that you make here do not override any system properties already set on the command line, by the JVM, or in the POM via systemProperties. Read Setting System Properties for how to force overrides. jettyProperties Optional. A map of property name, value pairs. Allows you to configure standard jetty properties. The Servlet Specification makes a strong distinction between the classpath for a webapp, and the classpath of the container. When running in Maven, the plugin’s classpath is equivalent to the container classpath. It will make a classpath for the webapp to be deployed comprised of specified in the pom. If your production environment places specific jars onto the container’s classpath, the equivalent way to do this with Maven is to define these as for the plugin itself, not the project. See configuring maven plugins. This is suitable if you are using either EMBED or FORK mode. If you are using EXTERNAL mode, then you should configure the modules parameter with the names of the Jetty modules that place these jars onto the container classpath. Note that in EMBED or FORK mode, you could also influence the container classpath by setting the useProvidedScope parameter to true: this will place any dependencies with provided onto the plugin’s classpath. Use this very cautiously: as the plugin already automatically places most Jetty jars onto the classpath, you could wind up with duplicate jars. The run goal deploys a webapp that is not first built into a WAR. A virtual webapp is constructed from the project’s sources and its dependencies. It looks for the constituent parts of a webapp in the Maven default project locations, although you can override these in the plugin configuration. For example, by default it looks for: resources in ${project.basedir}/src/main/webapp classes in ${project.build.outputDirectory} web.xml in ${project.basedir}/src/main/webapp/WEB-INF/ The plugin first runs a Maven parallel build to ensure that the classes are built and up-to-date before deployment. If you change the source of a class and your IDE automatically compiles it in the background, the plugin picks up the changed class (note you need to configure a non-zero scan interval for automatic redeployment). If the plugin is invoked in a multi-module build, any dependencies that are also in the Maven reactor are used from their compiled classes. Once invoked, you can configure the plugin to run continuously, scanning for changes in the project and automatically performing a hot redeploy when necessary. Any changes you make are immediately reflected in the running instance of Jetty, letting you quickly jump from coding to testing, rather than going through the cycle of: code, compile, reassemble, redeploy, test. The Maven build will be paused until Jetty exits, at which time Maven will also exit. Stopping Jetty is accomplished by typing cntrl-c at the command line. Output from Jetty will be logged to the console. Here is an example, which turns on scanning for changes every ten seconds, and sets the webapp context path to /test: org.eclipse.jetty.ee10 jetty-ee10-maven-plugin 12.0.10-SNAPSHOT 10 /test webApp This is an instance of org.eclipse.jetty.ee10.maven.plugin.MavenWebAppContext, which is an extension to the class org.eclipse.jetty.ee10.webapp.WebAppContext. You can use any of the setter methods on this object to configure your webapp. Here are a few of the most useful ones: contextPath The context path for your webapp. By default, this is set to /. If using a custom value for this parameter, you should include the leading /, example /mycontext. descriptor The path to the web.xml file for your webapp. By default, the plugin will look in src/main/webapp/WEB-INF/web.xml. defaultsDescriptor The path to a webdefault.xml file that will be applied to your webapp before the web.xml. If you don’t supply one, Jetty uses a default file baked into the jetty-ee10-webapp.jar. overrideDescriptor The path to a web.xml file that Jetty applies after reading your web.xml. You can use this to replace or add configuration. jettyEnvXml Optional. Location of a jetty-env.xml file, which allows you to make JNDI bindings that satisfy env-entry, resource-env-ref, and resource-ref linkages in the web.xml that are scoped only to the webapp and not shared with other webapps that you might be deploying at the same time (for example, by using a jettyXml file). tempDirectory The path to a dir that Jetty can use to expand or copy jars and jsp compiles when your webapp is running. The default is ${project.build.outputDirectory}/tmp. baseResource The path from which Jetty serves static resources. Defaults to src/main/webapp. If this location does not exist (because, for example, your project does not use static content), then the plugin will synthesize a virtual static resource location of target/webapp-synth. resourceBases Use instead of baseResource if you have multiple directories from which you want to serve static content. This is an array of directory locations, either as urls or file paths. baseAppFirst Defaults to \"true\". Controls whether any overlaid wars are added before or after the original base resource(s) of the webapp. See the section on overlaid wars for more information. containerIncludeJarPattern Defaults to ./jetty-jakarta-servlet-api-[/]\\.jar$|.jakarta.servlet.jsp.jstl-[/]\\.jar|.taglibs-standard-impl-.\\.jar. This is a pattern that is applied to the names of the jars on the container’s classpath (ie the classpath of the plugin, not that of the webapp) that should be scanned for fragments, tlds, annotations etc. This is analogous to the context attribute org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern that is documented here. You can define extra patterns of jars that will be included in the scan. webInfIncludeJarPattern Defaults to matching all of the dependency jars for the webapp (ie the equivalent of WEB-INF/lib). You can make this pattern more restrictive to only match certain jars by using this setter. This is analogous to the context attribute org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern that is documented here. contextXml The path to a context xml file that is applied to your webapp AFTER the webApp element. classesDirectory Location of your compiled classes for the webapp. You should rarely need to set this parameter. Instead, you should set in your pom.xml. testClassesDirectory Location of the compiled test classes for your webapp. By default this is ${project.build.testOutputDirectory}. useTestScope If true, the classes from testClassesDirectory and dependencies of scope \"test\" are placed first on the classpath. By default this is false. scan The pause in seconds between sweeps of the webapp to check for changes and automatically hot redeploy if any are detected. By default this is -1, which disables hot redeployment scanning. A value of 0 means no hot redeployment is done, and that you must use the Enter key to manually force a redeploy. Any positive integer will enable hot redeployment, using the number as the sweep interval in seconds. scanTargetPatterns Optional. List of extra directories with glob-style include/excludes patterns (see javadoc for FileSystem.getPathMatcher) to specify other files to periodically scan for changes. scanClassesPattern Optional. Include and exclude patterns that can be applied to the classesDirectory for the purposes of scanning, it does not affect the classpath. If a file or directory is excluded by the patterns then a change in that file (or subtree in the case of a directory) is ignored and will not cause the webapp to redeploy. Patterns are specified as a relative path using a glob-like syntax as described in the javadoc for FileSystem.getPathMatcher. scanTestClassesPattern Optional. Include and exclude patterns that can be applied to the testClassesDirectory for the purposes of scanning, it does not affect the classpath. If a file or directory is excluded by the patterns then a change in that file (or subtree in the case of a directory) is ignored and will not cause the webapp to redeploy. Patterns are specified as a relative path using a glob-like syntax as described in the javadoc for FileSystem.getPathMatcher. See Deployment Modes for other configuration parameters available when using the run goal in EMBED, FORK or EXTERNAL modes. Here is an example of a pom configuration for the plugin with the run goal: ... ... org.eclipse.jetty.ee10 jetty-ee10-maven-plugin 12.0.10-SNAPSHOT / ${project.basedir}/src/over/here/web.xml ${project.basedir}/src/over/here/jetty-env.xml ${project.basedir}/src/staticfiles ${project.basedir}/somewhere/else **/Foo.class src/other-resources **/*.xml **/*.properties **/myspecial.xml **/myspecial.properties ... If, for whatever reason, you cannot run on an unassembled webapp, the goal run-war works on assembled webapps. When invoked at the command line this goal first executes a maven build of your project to the package phase. By default it then deploys the resultant war to Jetty, but you can use this goal instead to deploy any war file by simply setting the configuration parameter to its location. If you set a non-zero scan, Jetty watches your pom.xml and the WAR file; if either changes, it redeploys the war. The maven build is held up until Jetty exits, which is achieved by typing cntrl-c at the command line. All Jetty output is directed to the console. Configuration parameters are: webApp war The location of the built WAR file. This defaults to ${project.build.directory}/${project.build.finalName}.war. You can set it to the location of any pre-built war file. contextPath The context path for your webapp. By default, this is set to /. If using a custom value for this parameter, you should include the leading /, example /mycontext. defaultsDescriptor The path to a webdefault.xml file that will be applied to your webapp before the web.xml. If you don’t supply one, Jetty uses a default file baked into the jetty-ee10-webapp.jar. overrideDescriptor The path to a web.xml file that Jetty applies after reading your web.xml. You can use this to replace or add configuration. containerIncludeJarPattern Defaults to ./jetty-jakarta-servlet-api-[/]\\.jar$|.jakarta.servlet.jsp.jstl-[/]\\.jar|.taglibs-standard-impl-.\\.jar. This is a pattern that is applied to the names of the jars on the container’s classpath (ie the classpath of the plugin, not that of the webapp) that should be scanned for fragments, tlds, annotations etc. This is analogous to the context attribute org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern that is documented here. You can define extra patterns of jars that will be included in the scan. webInfIncludeJarPattern Defaults to matching all of the dependency jars for the webapp (ie the equivalent of WEB-INF/lib). You can make this pattern more restrictive to only match certain jars by using this setter. This is analogous to the context attribute org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern that is documented here. tempDirectory The path to a dir that Jetty can use to expand or copy jars and jsp compiles when your webapp is running. The default is ${project.build.outputDirectory}/tmp. contextXml The path to a context xml file that is applied to your webapp AFTER the webApp element. scan The pause in seconds between sweeps of the webapp to check for changes and automatically hot redeploy if any are detected. By default this is -1, which disables hot redeployment scanning. A value of 0 means no hot redeployment is done, and that you must use the Enter key to manually force a redeploy. Any positive integer will enable hot redeployment, using the number as the sweep interval in seconds. scanTargetPatterns Optional. List of directories with ant-style include/excludes patterns to specify other files to periodically scan for changes. See Deployment Modes for other configuration parameters available when using the run-war goal in EMBED, FORK or EXTERNAL modes. This is similar to the jetty:run goal, however it is not designed to be run from the command line and does not first execute the build up until the test-compile phase to ensure that all necessary classes and files of the webapp have been generated. It will not scan your project for changes and restart your webapp. It does not pause maven until Jetty is stopped. Instead, it is designed to be used with build phase bindings in your pom. For example to you can have Maven start your webapp at the beginning of your tests and stop at the end. If the plugin is invoked as part of a multi-module build, any dependencies that are also in the maven reactor are used from their compiled classes. Here’s an example of using the pre-integration-test and post-integration-test Maven build phases to trigger the execution and termination of Jetty: org.eclipse.jetty.ee10 jetty-ee10-maven-plugin 12.0.10-SNAPSHOT foo 9999 start-jetty pre-integration-test start stop-jetty post-integration-test stop This goal will generate output from jetty into the target/jetty-start.out file. These configuration parameters are available: webApp This is an instance of org.eclipse.jetty.ee10.maven.plugin.MavenWebAppContext, which is an extension to the class org.eclipse.jetty.ee9.webapp.WebAppContext. You can use any of the setter methods on this object to configure your webapp. Here are a few of the most useful ones: contextPath The context path for your webapp. By default, this is set to /. If using a custom value for this parameter, you should include the leading /, example /mycontext. descriptor The path to the web.xml file for your webapp. The default is src/main/webapp/WEB-INF/web.xml. defaultsDescriptor The path to a webdefault.xml file that will be applied to your webapp before the web.xml. If you don’t supply one, Jetty uses a default file baked into the jetty-ee10-webapp.jar. overrideDescriptor The path to a web.xml file that Jetty applies after reading your web.xml. You can use this to replace or add configuration. jettyEnvXml Optional. Location of a jetty-env.xml file, which allows you to make JNDI bindings that satisfy env-entry, resource-env-ref, and resource-ref linkages in the web.xml that are scoped only to the webapp and not shared with other webapps that you might be deploying at the same time (for example, by using a jettyXml file). tempDirectory The path to a dir that Jetty can use to expand or copy jars and jsp compiles when your webapp is running. The default is ${project.build.outputDirectory}/tmp. baseResource The path from which Jetty serves static resources. Defaults to src/main/webapp. resourceBases Use instead of baseResource if you have multiple directories from which you want to serve static content. This is an array of directory names. baseAppFirst Defaults to \"true\". Controls whether any overlaid wars are added before or after the original base resource(s) of the webapp. See the section on overlaid wars for more information. containerIncludeJarPattern Defaults to ./jetty-jakarta-servlet-api-[/]\\.jar$|.jakarta.servlet.jsp.jstl-[/]\\.jar|.taglibs-standard-impl-.\\.jar. This is a pattern that is applied to the names of the jars on the container’s classpath (ie the classpath of the plugin, not that of the webapp) that should be scanned for fragments, tlds, annotations etc. This is analogous to the context attribute org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern that is documented here. You can define extra patterns of jars that will be included in the scan. webInfIncludeJarPattern Defaults to matching all of the dependency jars for the webapp (ie the equivalent of WEB-INF/lib). You can make this pattern more restrictive to only match certain jars by using this setter. This is analogous to the context attribute org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern that is documented here. contextXml The path to a context xml file that is applied to your webapp AFTER the webApp element. classesDirectory Location of your compiled classes for the webapp. You should rarely need to set this parameter. Instead, you should set build outputDirectory in your pom.xml. testClassesDirectory Location of the compiled test classes for your webapp. By default this is ${project.build.testOutputDirectory}. useTestScope If true, the classes from testClassesDirectory and dependencies of scope \"test\" are placed first on the classpath. By default this is false. stopPort Optional. Port to listen on for stop commands. Useful to use in conjunction with the stop and start goals. stopKey Optional. Used in conjunction with stopPort for stopping jetty. Useful to use in conjunction with the stop and start goals. These additional configuration parameters are available when running in FORK or EXTERNAL mode: maxChildStartChecks Default is 10. This is maximum number of times the parent process checks to see if the forked jetty process has started correctly maxChildStartCheckMs Default is 200. This is the time in milliseconds between checks on the startup of the forked jetty process. Similarly to the jetty:start goal, jetty:start-war is designed to be bound to build lifecycle phases in your pom. It will not scan your project for changes and restart your webapp. It does not pause maven until Jetty is stopped. By default, if your pom is for a webapp project, it will deploy the war file for the project to jetty. However, like the jetty:run-war project, you can nominate any war file to deploy by defining its location in the parameter. If the plugin is invoked as part of a multi-module build, any dependencies that are also in the Maven reactor are used from their compiled classes. This goal will generate output from jetty into the target/jetty-start-war.out file. These configuration parameters are available: webApp war The location of the built WAR file. This defaults to ${project.build.directory}/${project.build.finalName}.war. You can set it to the location of any pre-built war file. contextPath The context path for your webapp. By default, this is set to /. If using a custom value for this parameter, you should include the leading /, example /mycontext. defaultsDescriptor The path to a webdefault.xml file that will be applied to your webapp before the web.xml. If you don’t supply one, Jetty uses a default file baked into the jetty-ee10-webapp.jar. overrideDescriptor The path to a web.xml file that Jetty applies after reading your web.xml. You can use this to replace or add configuration. containerIncludeJarPattern Defaults to ./jetty-jakarta-servlet-api-[/]\\.jar$|.jakarta.servlet.jsp.jstl-[/]\\.jar|.taglibs-standard-impl-.\\.jar. This is a pattern that is applied to the names of the jars on the container’s classpath (ie the classpath of the plugin, not that of the webapp) that should be scanned for fragments, tlds, annotations etc. This is analogous to the context attribute org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern that is documented here. You can define extra patterns of jars that will be included in the scan. webInfIncludeJarPattern Defaults to matching all of the dependency jars for the webapp (ie the equivalent of WEB-INF/lib). You can make this pattern more restrictive to only match certain jars by using this setter. This is analogous to the context attribute org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern that is documented here. tempDirectory The path to a dir that Jetty can use to expand or copy jars and jsp compiles when your webapp is running. The default is ${project.build.outputDirectory}/tmp. contextXml The path to a context xml file that is applied to your webapp AFTER the webApp element. stopPort Optional. Port to listen on for stop commands. Useful to use in conjunction with the stop. stopKey Optional. Used in conjunction with stopPort for stopping jetty. Useful to use in conjunction with the stop. These additional configuration parameters are available when running in FORK or EXTERNAL mode: maxChildStartChecks Default is 10. This is maximum number of times the parent process checks to see if the forked Jetty process has started correctly maxChildStartCheckMs Default is 200. This is the time in milliseconds between checks on the startup of the forked Jetty process. The stop goal stops a FORK or EXTERNAL mode running instance of Jetty. To use it, you need to configure the plugin with a special port number and key. That same port number and key will also be used by the other goals that start Jetty. stopPort A port number for Jetty to listen on to receive a stop command to cause it to shutdown. stopKey A string value sent to the stopPort to validate the stop command. stopWait The maximum time in seconds that the plugin will wait for confirmation that Jetty has stopped. If false or not specified, the plugin does not wait for confirmation but exits after issuing the stop command. Here’s a configuration example: org.eclipse.jetty.ee10 jetty-ee10-maven-plugin 12.0.10-SNAPSHOT 9966 foo 10 Then, while Jetty is running (in another window), type: mvn jetty:stop The stopPort must be free on the machine you are running on. If this is not the case, you will get an \"Address already in use\" error message after the \"Started ServerConnector …​\" message. This goal calculates a synthetic web.xml (the \"effective web.xml\") according to the rules of the Servlet Specification taking into account all sources of discoverable configuration of web components in your application: descriptors (webdefault.xml, web.xml, web-fragment.xml`s, `web-override.xml) and discovered annotations (@WebServlet, @WebFilter, @WebListener). No programmatic declarations of servlets, filters and listeners can be taken into account. You can calculate the effective web.xml for any pre-built war file by setting the parameter, or you can calculate it for the unassembled webapp by setting all of the usual parameters as for jetty:run. Other useful information about your webapp that is produced as part of the analysis is also stored as context parameters in the effective-web.xml. The effective-web.xml can be used in conjunction with the Quickstart feature to quickly start your webapp (note that Quickstart is not appropriate for the mvn jetty goals). The effective web.xml from these combined sources is generated into a file, which by default is target/effective-web.xml, but can be changed by setting the effectiveWebXml configuration parameter. effectiveWebXml The full path name of a file into which you would like the effective web xml generated. webApp war The location of the built WAR file. This defaults to ${project.build.directory}/${project.build.finalName}.war. You can set it to the location of any pre-built war file. Or you can leave it blank and set up the other webApp parameters as per jetty:run, as well as the webAppSourceDirectory, classes and testClasses parameters. contextPath The context path for your webapp. By default, this is set to /. If using a custom value for this parameter, you should include the leading /, example /mycontext. defaultsDescriptor The path to a webdefault.xml file that will be applied to your webapp before the web.xml. If you don’t supply one, Jetty uses a default file baked into the jetty-ee10-webapp.jar. overrideDescriptor The path to a web.xml file that Jetty applies after reading your web.xml. You can use this to replace or add configuration. containerIncludeJarPattern Defaults to ./jetty-jakarta-servlet-api-[/]\\.jar$|.jakarta.servlet.jsp.jstl-[/]\\.jar|.taglibs-standard-impl-.\\.jar. This is a pattern that is applied to the names of the jars on the container’s classpath (ie the classpath of the plugin, not that of the webapp) that should be scanned for fragments, tlds, annotations etc. This is analogous to the context attribute org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern that is documented here. You can define extra patterns of jars that will be included in the scan. webInfIncludeJarPattern Defaults to matching all of the dependency jars for the webapp (ie the equivalent of WEB-INF/lib). You can make this pattern more restrictive to only match certain jars by using this setter. This is analogous to the context attribute org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern that is documented here. tempDirectory The path to a dir that Jetty can use to expand or copy jars and jsp compiles when your webapp is running. The default is ${project.build.outputDirectory}/tmp. contextXml The path to a context xml file that is applied to your webapp AFTER the webApp element. You can also generate the origin of each element into the effective web.xml file. The origin is either a descriptor eg web.xml,web-fragment.xml,override-web.xml file, or an annotation eg @WebServlet. Some examples of elements with origin attribute information are: To generate origin information, use the following configuration parameters on the webApp element: originAttribute The name of the attribute that will contain the origin. By default it is origin. generateOrigin False by default. If true, will force the generation of the originAttribute onto each element. If your webapp depends on other war files, the jetty:run and jetty:start goals are able to merge resources from all of them. It can do so based on the settings of the maven-war-plugin, or if your project does not use the maven-war-plugin to handle the overlays, it can fall back to a simple algorithm to determine the ordering of resources. The maven-war-plugin has a rich set of capabilities for merging resources. The jetty:run and jetty:start goals are able to interpret most of them and apply them during execution of your unassembled webapp. This is probably best seen by looking at a concrete example. Suppose your webapp depends on the following wars: com.acme X war com.acme Y war Containing: WebAppX: /foo.jsp /bar.jsp /WEB-INF/web.xml WebAppY: /bar.jsp /baz.jsp /WEB-INF/web.xml /WEB-INF/special.xml They are configured for the maven-war-plugin: org.apache.maven.plugins maven-war-plugin 12.0.10-SNAPSHOT com.acme X bar.jsp com.acme Y baz.jsp Then executing jetty:run would yield the following ordering of resources: com.acme.X.war : com.acme.Y.war: ${project.basedir}/src/main/webapp. Note that the current project’s resources are placed last in the ordering due to the empty element in the maven-war-plugin. You can either use that, or specify the false parameter to the jetty-ee10-maven-plugin. Moreover, due to the exclusions specified above, a request for the resource ` bar.jsp` would only be satisfied from com.acme.Y.war. Similarly as baz.jsp is excluded, a request for it would result in a 404 error. The algorithm is fairly simple, is based on the ordering of declaration of the dependent wars, and does not support exclusions. The configuration parameter (see for example jetty:run for more information) can be used to control whether your webapp’s resources are placed first or last on the resource path at runtime. For example, suppose our webapp depends on these two wars: com.acme X war com.acme Y war Suppose the webapps contain: WebAppX: /foo.jsp /bar.jsp /WEB-INF/web.xml WebAppY: /bar.jsp /baz.jsp /WEB-INF/web.xml /WEB-INF/special.xml Then our webapp has available these additional resources: /foo.jsp (X) /bar.jsp (X) /baz.jsp (Y) /WEB-INF/web.xml (X) /WEB-INF/special.xml (Y) You can configure LoginServices in the plugin. Here’s an example of setting up the HashLoginService for a webapp: org.eclipse.jetty.ee10 jetty-ee10-maven-plugin 12.0.10-SNAPSHOT 10 /test Test Realm ${project.basedir}/src/etc/realm.properties If you have external resources that you want to incorporate in the execution of a webapp, but which are not assembled into war files, you can’t use the overlaid wars method described above, but you can tell Jetty the directories in which these external resources are located. At runtime, when Jetty receives a request for a resource, it searches all the locations to retrieve the resource. It’s a lot like the overlaid war situation, but without the war. Here is a configuration example: /${build.finalName} src/main/webapp /home/johndoe/path/to/my/other/source /yet/another/folder You can use either a jetty.xml file to configure extra (pre-compiled) webapps that you want to deploy, or you can use the configuration element to do so. If you want to deploy webapp A, and webapps B and C in the same Jetty instance: Putting the configuration in webapp A’s pom.xml: org.eclipse.jetty.ee10 jetty-ee10-maven-plugin 12.0.10-SNAPSHOT 10 /test ${project.basedir}../../B.war /B ${project.basedir}../../C.war /C If the ContextHandler you are deploying is a webapp, it is essential that you use an org.eclipse.jetty.ee10.maven.plugin.MavenWebAppContext instance rather than a standard org.eclipse.jetty.ee10.webapp.WebAppContext instance. Only the former will allow the webapp to function correctly in the Maven environment. Alternatively, add a jetty.xml file to webapp A. Copy the jetty.xml file from the Jetty distribution, and then add WebAppContexts for the other 2 webapps: /B ../../B.war /C ../../C.war Then configure the location of this jetty.xml file into webapp A’s Jetty plugin: org.eclipse.jetty.ee10 jetty-ee10-maven-plugin 12.0.10-SNAPSHOT 10 /test src/main/etc/jetty.xml For either of these solutions, the other webapps must already have been built, and they are not automatically monitored for changes. You can refer either to the packed WAR file of the pre-built webapps or to their expanded equivalents. You can specify property name/value pairs that Jetty sets as System properties for the execution of the plugin. This feature is useful to tidy up the command line and save a lot of typing. However, sometimes it is not possible to use this feature to set System properties - sometimes the software component using the System property is already initialized by the time that maven runs (in which case you will need to provide the System property on the command line), or by the time that Jetty runs. In the latter case, you can use the maven properties plugin to define the system properties instead. Here’s an example that configures the logback logging system as the Jetty logger: org.codehaus.mojo properties-maven-plugin set-system-properties logback.configurationFile ${project.baseUri}/resources/logback.xml If a System property is already set (for example, from the command line or by the JVM itself), then by default these configured properties DO NOT override them. However, they can override system properties set from a file instead, see specifying system properties in a file. Here’s an example of how to specify System properties in the POM: org.eclipse.jetty.{ee-current} jetty-{ee-current}-maven-plugin 222 /test You can also specify your System properties in a file. System properties you specify in this way do not override System properties that set on the command line, by the JVM, or directly in the POM via systemProperties. Suppose we have a file called mysys.props which contains the following: fooprop=222 This can be configured on the plugin like so: org.eclipse.jetty.{ee-current} jetty-{ee-current}-maven-plugin ${project.basedir}/mysys.props /test You can instead specify the file by setting the System property jetty.systemPropertiesFile on the command line.","title":"Using the Jetty Maven Plugin","component":"jetty","version":"12","name":"jetty-maven-plugin","url":"/docs/jetty/12/programming-guide/maven-jetty/jetty-maven-plugin.html","titles":[{"text":"Get Up and Running","hash":"get-up-and-running","id":1},{"text":"Supported Goals","hash":"supported-goals","id":2},{"text":"Deployment Modes","hash":"deployment-modes","id":3},{"text":"Embedded","hash":"embedded","id":4},{"text":"Forked","hash":"forked","id":5},{"text":"In a jetty distribution","hash":"in-a-jetty-distribution","id":6},{"text":"Common Configuration","hash":"common-configuration","id":7},{"text":"Container Classpath vs WebApp Classpath","hash":"container-classpath","id":8},{"text":"jetty:run","hash":"jetty-run-goal","id":9},{"text":"Configuration","hash":"configuration","id":10},{"text":"jetty:run-war","hash":"jetty-run-war-goal","id":11},{"text":"Configuration","hash":"configuration-2","id":12},{"text":"jetty:start","hash":"jetty-start-goal","id":13},{"text":"Configuration","hash":"configuration-3","id":14},{"text":"jetty:start-war","hash":"jetty-start-war-goal","id":15},{"text":"Configuration","hash":"configuration-4","id":16},{"text":"jetty:stop","hash":"jetty-stop-goal","id":17},{"text":"Configuration","hash":"configuration-5","id":18},{"text":"jetty:effective-web-xml","hash":"jetty-effective-web-xml-goal","id":19},{"text":"Configuration","hash":"configuration-6","id":20},{"text":"Using Overlaid wars","hash":"using-overlaid-wars","id":21},{"text":"With maven-war-plugin","hash":"with-maven-war-plugin","id":22},{"text":"Without maven-war-plugin","hash":"without-maven-war-plugin","id":23},{"text":"Configuring Security Settings","hash":"configuring-security-settings","id":24},{"text":"Using Multiple Webapp Root Directories","hash":"using-multiple-webapp-root-directories","id":25},{"text":"Running More than One Webapp","hash":"running-more-than-one-webapp","id":26},{"text":"With jetty:run","hash":"with-jettyrun","id":27},{"text":"Setting System Properties","hash":"setting-system-properties","id":28},{"text":"Specifying System Properties in the POM","hash":"specifying-properties-in-pom","id":29},{"text":"Specifying System Properties in a File","hash":"specifying-properties-in-file","id":30}]},"57":{"id":57,"text":"Jetty 11.0.x Jetty 12.0.x Java 11 Java 17 Jetty 11.0.x Jetty 12.0.x org.eclipse.jetty.fcgi:fcgi-client org.eclipse.jetty.fcgi:jetty-fcgi-client org.eclipse.jetty.fcgi:fcgi-server org.eclipse.jetty.fcgi:jetty-fcgi-server org.eclipse.jetty.http2:http2-client org.eclipse.jetty.http2:jetty-http2-client org.eclipse.jetty.http2:http2-common org.eclipse.jetty.http2:jetty-http2-common org.eclipse.jetty.http2:http2-hpack org.eclipse.jetty.http2:jetty-http2-hpack org.eclipse.jetty.http2:http2-http-client-transport org.eclipse.jetty.http2:jetty-http2-client-transport org.eclipse.jetty.http2:http2-server org.eclipse.jetty.http2:jetty-http2-server org.eclipse.jetty.http3:http3-client org.eclipse.jetty.http3:jetty-http3-client org.eclipse.jetty.http3:http3-common org.eclipse.jetty.http3:jetty-http3-common org.eclipse.jetty.http3:http3-http-client-transport org.eclipse.jetty.http3:jetty-http3-client-transport org.eclipse.jetty.http3:http3-qpack org.eclipse.jetty.http3:jetty-http3-qpack org.eclipse.jetty.http3:http3-server org.eclipse.jetty.http3:jetty-http3-server org.eclipse.jetty:jetty-osgi.* org.eclipse.jetty:jetty-osgi org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-osgi-* org.eclipse.jetty:jetty-proxy org.eclipse.jetty:jetty-proxy org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-proxy org.eclipse.jetty.quic:quic-client org.eclipse.jetty.quic:jetty-quic-client org.eclipse.jetty.quic:quic-common org.eclipse.jetty.quic:jetty-quic-common org.eclipse.jetty.quic:quic-quiche org.eclipse.jetty.quic:jetty-quic-quiche org.eclipse.jetty.quic:quic-server org.eclipse.jetty.quic:jetty-quic-server org.eclipse.jetty:jetty-unixsocket.* Removed — Use org.eclipse.jetty:jetty-unixdomain-server org.eclipse.jetty.websocket:websocket-core-client org.eclipse.jetty.websocket:jetty-websocket-core-client org.eclipse.jetty.websocket:websocket-core-common org.eclipse.jetty.websocket:jetty-websocket-core-common org.eclipse.jetty.websocket:websocket-core-server org.eclipse.jetty.websocket:jetty-websocket-core-server org.eclipse.jetty.websocket:websocket-jetty-api org.eclipse.jetty.websocket:jetty-websocket-jetty-api org.eclipse.jetty.websocket:websocket-jetty-client org.eclipse.jetty.websocket:jetty-websocket-jetty-client org.eclipse.jetty.ee{8,9,10}.websocket:jetty-ee{8,9,10}-websocket-jetty-client org.eclipse.jetty.websocket:websocket-jetty-common org.eclipse.jetty.websocket:jetty-websocket-jetty-common org.eclipse.jetty.ee{8,9,10}.websocket:jetty-ee{8,9,10}-websocket-jetty-common org.eclipse.jetty.websocket:websocket-jetty-server org.eclipse.jetty.websocket:jetty-websocket-jetty-server org.eclipse.jetty.ee{8,9,10}.websocket:jetty-ee{8,9,10}-websocket-jetty-server org.eclipse.jetty.websocket:websocket-jakarta-client org.eclipse.jetty.ee{8,9,10}.websocket:jetty-ee{8,9,10}-websocket-jakarta-client org.eclipse.jetty.websocket:websocket-jakarta-common org.eclipse.jetty.ee{8,9,10}.websocket:jetty-ee{8,9,10}-websocket-jakarta-common org.eclipse.jetty.websocket:websocket-jakarta-server org.eclipse.jetty.ee{8,9,10}.websocket:jetty-ee{8,9,10}-websocket-jakarta-server org.eclipse.jetty.websocket:websocket-servlet org.eclipse.jetty.ee{8,9,10}.websocket:jetty-ee{8,9,10}-websocket-servlet org.eclipse.jetty:apache-jsp org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-apache-jsp org.eclipse.jetty:jetty-annotations org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-annotations org.eclipse.jetty:jetty-ant Removed — No Replacement org.eclipse.jetty:jetty-cdi org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-cdi org.eclipse.jetty:glassfish-jstl org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-glassfish-jstl org.eclipse.jetty:jetty-jaspi org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-jaspi org.eclipse.jetty:jetty-jndi org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-jndi org.eclipse.jetty:jetty-jspc-maven-plugin org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-jspc-maven-plugin org.eclipse.jetty:jetty-maven-plugin org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-maven-plugin org.eclipse.jetty:jetty-plus org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-plus org.eclipse.jetty:jetty-quickstart org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-quickstart org.eclipse.jetty:jetty-runner org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-runner org.eclipse.jetty:jetty-servlet org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-servlet org.eclipse.jetty:jetty-servlets org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-servlets org.eclipse.jetty:jetty-webapp org.eclipse.jetty.ee{8,9,10}:jetty-ee{8,9,10}-webapp Jetty 11.0.x Jetty 12.0.x org.eclipse.jetty.client.api.* org.eclipse.jetty.client.* org.eclipse.jetty.client.util.* org.eclipse.jetty.client.* org.eclipse.jetty.client.util.* org.eclipse.jetty.client.* org.eclipse.jetty.client.http.* org.eclipse.jetty.client.transport.* org.eclipse.jetty.http2.client.http.* org.eclipse.jetty.http2.client.transport.* org.eclipse.jetty.websocket.api.annotation.OnWebSocketConnect org.eclipse.jetty.websocket.api.annotation.OnWebSocketOpen org.eclipse.jetty.websocket.api.WriteCallback org.eclipse.jetty.websocket.api.Callback org.eclipse.jetty.websocket.api.WebSocket*Listener org.eclipse.jetty.websocket.api.Session.Listener.AutoDemanding org.eclipse.jetty.websocket.api.RemoteEndpoint org.eclipse.jetty.websocket.api.Session org.eclipse.jetty.websocket.api.WebSocketPolicy org.eclipse.jetty.websocket.api.Configurable Web applications written using the Servlet APIs may be re-written using the Jetty Handler APIs. The sections below outline the Jetty Handler APIs that correspond to the Servlet APIs. For more information about why using the Jetty Handler APIs instead of the Servlet APIs, refer to this section. For more information about replacing HttpServlets or Servlet Filters with Jetty Handlers, refer to this section. public class RequestAPIs extends Handler.Abstract { @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { // Gets the request method. // Replaces: // - servletRequest.getMethod(); String method = request.getMethod(); // Gets the request protocol name and version. // Replaces: // - servletRequest.getProtocol(); String protocol = request.getConnectionMetaData().getProtocol(); // Gets the full request URI. // Replaces: // - servletRequest.getRequestURL(); String fullRequestURI = request.getHttpURI().asString(); // Gets the request context. // Replaces: // - servletRequest.getServletContext() Context context = request.getContext(); // Gets the context path. // Replaces: // - servletRequest.getContextPath() String contextPath = context.getContextPath(); // Gets the request path. // Replaces: // - servletRequest.getRequestURI(); String requestPath = request.getHttpURI().getPath(); // Gets the request path after the context path. // Replaces: // - servletRequest.getServletPath() + servletRequest.getPathInfo() String pathInContext = Request.getPathInContext(request); // Gets the request query. // Replaces: // - servletRequest.getQueryString() String queryString = request.getHttpURI().getQuery(); // Gets request parameters. // Replaces: // - servletRequest.getParameterNames(); // - servletRequest.getParameter(name); // - servletRequest.getParameterValues(name); // - servletRequest.getParameterMap(); Fields queryParameters = Request.extractQueryParameters(request, UTF_8); Fields allParameters = Request.getParameters(request); // Gets cookies. // Replaces: // - servletRequest.getCookies(); List cookies = Request.getCookies(request); // Gets request HTTP headers. // Replaces: // - servletRequest.getHeaderNames() // - servletRequest.getHeader(name) // - servletRequest.getHeaders(name) // - servletRequest.getDateHeader(name) // - servletRequest.getIntHeader(name) HttpFields requestHeaders = request.getHeaders(); // Gets the request Content-Type. // Replaces: // - servletRequest.getContentType() String contentType = request.getHeaders().get(HttpHeader.CONTENT_TYPE); // Gets the request Content-Length. // Replaces: // - servletRequest.getContentLength() // - servletRequest.getContentLengthLong() long contentLength = request.getLength(); // Gets the request locales. // Replaces: // - servletRequest.getLocale() // - servletRequest.getLocales() List locales = Request.getLocales(request); // Gets the request scheme. // Replaces: // - servletRequest.getScheme() String scheme = request.getHttpURI().getScheme(); // Gets the server name. // Replaces: // - servletRequest.getServerName() String serverName = Request.getServerName(request); // Gets the server port. // Replaces: // - servletRequest.getServerPort() int serverPort = Request.getServerPort(request); // Gets the remote host/address. // Replaces: // - servletRequest.getRemoteAddr() // - servletRequest.getRemoteHost() String remoteAddress = Request.getRemoteAddr(request); // Gets the remote port. // Replaces: // - servletRequest.getRemotePort() int remotePort = Request.getRemotePort(request); // Gets the local host/address. // Replaces: // - servletRequest.getLocalAddr() // - servletRequest.getLocalHost() String localAddress = Request.getLocalAddr(request); // Gets the local port. // Replaces: // - servletRequest.getLocalPort() int localPort = Request.getLocalPort(request); // Gets the request attributes. // Replaces: // - servletRequest.getAttributeNames() // - servletRequest.getAttribute(name) // - servletRequest.setAttribute(name, value) // - servletRequest.removeAttribute(name) String name = \"name\"; Object value = \"value\"; Set names = request.getAttributeNameSet(); Object attribute = request.getAttribute(name); Object oldValue = request.setAttribute(name, value); Object removedValue = request.removeAttribute(name); request.clearAttributes(); Map map = request.asAttributeMap(); // Gets the request trailers. // Replaces: // - servletRequest.getTrailerFields() HttpFields trailers = request.getTrailers(); // Gets the HTTP session. // Replaces: // - servletRequest.getSession() // - servletRequest.getSession(create) boolean create = true; Session session = request.getSession(create); callback.succeeded(); return false; } } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { // Non-blocking read the request content as a String. // Use with caution as the request content may be large. CompletableFuture completable = Content.Source.asStringAsync(request, UTF_8); completable.whenComplete((requestContent, failure) -> { if (failure == null) { // Process the request content here. // Implicitly respond with status code 200 and no content. callback.succeeded(); } else { // Implicitly respond with status code 500. callback.failed(failure); } }); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { // Non-blocking read the request content as a ByteBuffer. // Use with caution as the request content may be large. CompletableFuture completable = Content.Source.asByteBufferAsync(request); completable.whenComplete((requestContent, failure) -> { if (failure == null) { // Process the request content here. // Implicitly respond with status code 200 and no content. callback.succeeded(); } else { // Implicitly respond with status code 500. callback.failed(failure); } }); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { // Read the request content as an InputStream. // Note that InputStream.read() may block. try (InputStream inputStream = Content.Source.asInputStream(request)) { while (true) { int read = inputStream.read(); // EOF was reached, stop reading. if (read reader = new CompletableTask<>() { @Override public void run() { // Read in a loop. while (true) { // Read a chunk of content. Content.Chunk chunk = request.read(); // If there is no content, demand to be // called back when more content is available. if (chunk == null) { request.demand(this); return; } // If a failure is read, complete with a failure. if (Content.Chunk.isFailure(chunk)) { Throwable failure = chunk.getFailure(); completeExceptionally(failure); return; } if (chunk instanceof Trailers trailers) { // Possibly process the request trailers here. // Trailers have an empty ByteBuffer and are a last chunk. } // Process the request content chunk here. // After the processing, the chunk MUST be released. chunk.release(); // If the last chunk is read, complete normally. if (chunk.isLast()) { complete(null); return; } // Not the last chunk of content, loop around to read more. } } }; // Initiate the read of the request content. reader.start(); // When the read is complete, complete the Handler callback. callback.completeWith(reader); return true; } public class ResponseAPIs extends Handler.Abstract { @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { // Sets/Gets the response HTTP status. // Replaces: // - servletResponse.setStatus(code); // - servletResponse.getStatus(); response.setStatus(HttpStatus.OK_200); int status = response.getStatus(); // Gets the response HTTP headers. // Replaces: // - servletResponse.setHeader(name, value); // - servletResponse.addHeader(name, value); // - servletResponse.setDateHeader(name, date); // - servletResponse.addDateHeader(name, date); // - servletResponse.setIntHeader(name, value); // - servletResponse.addIntHeader(name, value); // - servletResponse.getHeaderNames() // - servletResponse.getHeader(name) // - servletResponse.getHeaders(name) // - servletResponse.containsHeader(name) HttpFields.Mutable responseHeaders = response.getHeaders(); // Sets an HTTP cookie. // Replaces: // - Cookie cookie = new Cookie(\"name\", \"value\"); // - cookie.setDomain(\"example.org\"); // - cookie.setPath(\"/path\"); // - cookie.setMaxAge(24 * 3600); // - cookie.setAttribute(\"SameSite\", \"Lax\"); // - servletResponse.addCookie(cookie); HttpCookie cookie = HttpCookie.build(\"name\", \"value\") .domain(\"example.org\") .path(\"/path\") .maxAge(Duration.ofDays(1).toSeconds()) .sameSite(HttpCookie.SameSite.LAX) .build(); Response.addCookie(response, cookie); // Sets the response Content-Type. // Replaces: // - servletResponse.setContentType(type) responseHeaders.put(HttpHeader.CONTENT_TYPE, \"text/plain; charset=UTF-8\"); // Sets the response Content-Length. // Replaces: // - servletResponse.setContentLength(length) // - servletResponse.setContentLengthLong(length) responseHeaders.put(HttpHeader.CONTENT_LENGTH, 1024L); // Sets/Gets the response trailers. // Replaces: // - servletResponse.setTrailerFields(() -> trailers) // - servletResponse.getTrailerFields() HttpFields trailers = HttpFields.build().put(\"checksum\", 0xCAFE); response.setTrailersSupplier(trailers); Supplier trailersSupplier = response.getTrailersSupplier(); // Gets whether the response is committed. // Replaces: // - servletResponse.isCommitted() boolean committed = response.isCommitted(); // Resets the response. // Replaces: // - servletResponse.reset(); response.reset(); // Sends a redirect response. // Replaces: // - servletResponse.encodeRedirectURL(location) // - servletResponse.sendRedirect(location) String location = Request.toRedirectURI(request, \"/redirect\"); Response.sendRedirect(request, response, callback, location); // Sends an error response. // Replaces: // - servletResponse.sendError(code); // - servletResponse.sendError(code, message); Response.writeError(request, response, callback, HttpStatus.SERVICE_UNAVAILABLE_503, \"Request Cannot be Processed\"); callback.succeeded(); return true; } } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { // Produces an implicit response with status code 200 // with no content when returning from this method. // The Handler callback must be completed when returning true. callback.succeeded(); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { // Produces an implicit response with status 204 // with no content when returning from this method. response.setStatus(HttpStatus.NO_CONTENT_204); // The Handler callback must be completed when returning true. callback.succeeded(); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { // Produces an explicit response with status 204 with no content. response.setStatus(HttpStatus.NO_CONTENT_204); // This explicit first write() writes the response status code and headers. // It is also the last write (as specified by the first parameter) // and writes an empty content (the second parameter, a null ByteBuffer). // When this write completes, the Handler callback is completed. response.write(true, null, callback); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { response.setStatus(HttpStatus.OK_200); ByteBuffer content = UTF_8.encode(\"Hello World\"); // Explicit first write that writes the response status code, headers and content. // When this write completes, the Handler callback is completed. response.write(true, content, callback); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { response.setStatus(HttpStatus.OK_200); ByteBuffer content = UTF_8.encode(\"Hello World\"); response.getHeaders().put(HttpHeader.CONTENT_LENGTH, content.remaining()); // Flush the response status code and the headers (no content). // This is the fist but non-last write. Callback.Completable completable = new Callback.Completable(); response.write(false, null, completable); // When the first write completes, perform the second (and last) write. completable.whenComplete((ignored, failure) -> { if (failure == null) { // Now explicitly write the content as the last write. // When this write completes, the Handler callback is completed. response.write(true, content, callback); } else { // Implicitly respond with status code 500. callback.failed(failure); } }); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { response.setStatus(HttpStatus.OK_200); // Utility method to write UTF-8 string content. // When this write completes, the Handler callback is completed. Content.Sink.write(response, true, \"Hello World\", callback); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { response.setStatus(HttpStatus.OK_200); // Utility method to echo the content from the request to the response. // When the echo completes, the Handler callback is completed. Content.copy(request, response, callback); return true; } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { response.setStatus(HttpStatus.OK_200); // The trailers must be set on the response before the first write. HttpFields.Mutable trailers = HttpFields.build(); response.setTrailersSupplier(trailers); // Explicit first write that writes the response status code, headers and content. // The trailers have not been written yet; they will be written with the last write. ByteBuffer content = UTF_8.encode(\"Hello World\"); Callback.Completable completable = new Callback.Completable(); response.write(false, content, completable); completable.whenComplete((ignored, failure) -> { if (failure == null) { // Update the trailers trailers.put(\"Content-Checksum\", 0xCAFE); // Explicit last write to write the trailers // and complete the Handler callback. response.write(true, null, callback); } else { // Implicitly respond with status code 500. callback.failed(failure); } }); return true; } The Jetty 11 Request.onResponseContentDemanded(Response.DemandedContentListener) API has been replaced by Request.onResponseContentSource(Response.ContentSourceListener) in Jetty 12. However, also look at Request.onResponseContentAsync(Response.AsyncContentListener) and Request.onResponseContent(Response.ContentListener) for simpler usages. The Jetty 11 model was a \"demand+push\" model: the application was demanding content; when the content was available, the implementation was pushing content to the application by calling DemandedContentListener.onContent(Response, LongConsumer, ByteBuffer, Callback) for every content chunk. The Jetty 12 model is a \"demand+pull\" model: when the content is available, the implementation calls once Response.ContentSourceListener.onContentSource(Content.Source); the application can then pull the content chunks from the Content.Source. For more information about the new model, see this section. The Jetty WebSocket APIs have been vastly simplified, and brought in line with the style of other APIs. The Jetty 12 WebSocket APIs are now fully asynchronous, so the Jetty 11 SuspendToken class has been removed in favor of an explicit (or automatic) demand mechanism in Jetty 12 (for more information, refer to this section). The various Jetty 11 WebSocket*Listener interfaces have been replaced by a single interface in Jetty 12, Session.Listener.AutoDemanding (for more information, refer to this section). The Jetty 11 RemoteEndpoint APIs have been merged into the Session APIs in Jetty 12. The Jetty 11 WriteCallback class has been renamed to just Callback in Jetty 12, because it is now also used when receiving binary data. Note that this Callback interface is a different interface from the org.eclipse.jetty.util.Callback interface, which cannot be used in the Jetty WebSocket APIs due to class loader visibility issues. On the server-side, the Jetty WebSocket APIs have been made independent of the Servlet APIs. Jetty 11 JettyWebSocketServerContainer has been replaced by ServerWebSocketContainer in Jetty 12, with similar APIs (for more information, refer to this section). On the client-side the WebSocketClient APIs are practically unchanged, as most of the changes come from the HttpClient changes described above.","title":"Migrating from Jetty 11.0.x to Jetty 12.0.x","component":"jetty","version":"12","name":"11-to-12","url":"/docs/jetty/12/programming-guide/migration/11-to-12.html","titles":[{"text":"Required Java Version Changes","hash":"java-version","id":1},{"text":"Maven Artifacts Changes","hash":"maven-artifacts","id":2},{"text":"Class Packages/Names Changes","hash":"class-packages-names","id":3},{"text":"Migrate Servlets to Jetty Handlers","hash":"servlet-to-handler","id":4},{"text":"Handler Request APIs","hash":"handler-request-apis","id":5},{"text":"Handler Request Content APIs","hash":"handler-request-content-apis","id":6},{"text":"Handler Response APIs","hash":"handler-response-apis","id":7},{"text":"Handler Response Content APIs","hash":"handler-response-content-apis","id":8},{"text":"APIs Changes","hash":"api-changes","id":9},{"text":"HttpClient","hash":"httpclient","id":10},{"text":"WebSocket","hash":"websocket","id":11}]},"58":{"id":58,"text":"Jetty 9.4.x Jetty 10.0.x Java 8 Java 11 Migrating from Jetty 9.4.x to Jetty 10.0.x requires changes in the coordinates of the Maven artifact dependencies for WebSocket. Some of these classes have also changed name and package. This is not a comprehensive list of changes but should cover the most common changes encountered during migration. Jetty 9.4.x Jetty 10.0.x org.eclipse.jetty.websocket:websocket-api org.eclipse.jetty.websocket:websocket-jetty-api org.eclipse.jetty.websocket:websocket-server org.eclipse.jetty.websocket:websocket-jetty-server org.eclipse.jetty.websocket:websocket-client org.eclipse.jetty.websocket:websocket-jetty-client org.eclipse.jetty.websocket:javax-websocket-server-impl org.eclipse.jetty.websocket:websocket-javax-server org.eclipse.jetty.websocket:javax-websocket-client-impl org.eclipse.jetty.websocket:websocket-javax-client Jetty 9.4.x Jetty 10.0.x org.eclipse.jetty.websocket.server.NativeWebSocketServletContainerInitializer org.eclipse.jetty.websocket.server.config.JettyWebSocketServletContainerInitializer org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer org.eclipse.jetty.websocket.javax.server.config.JavaxWebSocketServletContainerInitializer org.eclipse.jetty.websocket.servlet.WebSocketCreator org.eclipse.jetty.websocket.server.JettyWebSocketCreator org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest org.eclipse.jetty.websocket.server.JettyServerUpgradeRequest org.eclipse.jetty.websocket.servlet.ServletUpgradeResponse org.eclipse.jetty.websocket.server.JettyServerUpgradeResponse org.eclipse.jetty.websocket.servlet.WebSocketServlet org.eclipse.jetty.websocket.server.JettyWebSocketServlet org.eclipse.jetty.websocket.servlet.WebSocketServletFactory org.eclipse.jetty.websocket.server.JettyWebSocketServletFactory Jetty 9.4.x Jetty 10.0.x public class ExampleWebSocketServlet extends WebSocketServlet { @Override public void configure(WebSocketServletFactory factory) { factory.setCreator(new WebSocketCreator() { @Override public Object createWebSocket(ServletUpgradeRequest req, ServletUpgradeResponse resp) { return new ExampleEndpoint(); } }); } } public class ExampleWebSocketServlet extends JettyWebSocketServlet { @Override public void configure(JettyWebSocketServletFactory factory) { factory.setCreator(new JettyWebSocketCreator() { @Override public Object createWebSocket(JettyServerUpgradeRequest req, JettyServerUpgradeResponse resp) { return new ExampleEndpoint(); } }); } }","title":"Migrating from Jetty 9.4.x to Jetty 10.0.x","component":"jetty","version":"12","name":"94-to-10","url":"/docs/jetty/12/programming-guide/migration/94-to-10.html","titles":[{"text":"Required Java Version Changes","hash":"java-version","id":1},{"text":"WebSocket Migration Guide","hash":"websocket","id":2},{"text":"Maven Artifacts Changes","hash":"websocket-maven-artifact-changes","id":3},{"text":"Class Names Changes","hash":"websocket-class-name-changes","id":4},{"text":"Example Code","hash":"websocket-example-code","id":5}]},"59":{"id":59,"text":"The Jetty server strives to keep up with the latest IETF RFCs for compliance with internet specifications, which are periodically updated. When possible, Jetty will support backwards compatibility by providing compliance modes that can be configured to allow violations of the current specifications that may have been allowed in obsoleted specifications. There are compliance modes provided for: HTTP Compliance URI Compliance Cookie Compliance Compliance modes can be configured to allow violations from the RFC requirements, or in some cases to allow additional behaviors that Jetty has implemented in excess of the RFC (for example, to allow ambiguous URIs). For example, the HTTP RFCs require that request HTTP methods are case sensitive, however Jetty can allow case-insensitive HTTP methods by including the HttpCompliance.Violation.CASE_INSENSITIVE_METHOD in the HttpCompliance set of allowed violations. In 1995, when Jetty was first implemented, there were no RFC specification of HTTP, only a W3C specification for HTTP/0.9, which has since been obsoleted or augmented by: RFC 1945 for HTTP/1.0 in 1996 RFC 2068 for HTTP/1.1 in 1997 RFC 2616 for HTTP/1.1 bis in 1999 RFC 7230, RFC 7231, RFC 7232, RFC 7233, RFC 7234, RFC 7235 again for HTTP/1.1 in 2014 RFC 7540 for HTTP/2.0 in 2015 In addition to these evolving requirements, some earlier version of Jetty did not completely or strictly implement the RFC at the time (for example, case-insensitive HTTP methods). Therefore, upgrading to a newer Jetty version may cause runtime behavior differences that may break your applications. The HttpCompliance.Violation enumeration defines the RFC requirements that may be optionally enforced by Jetty, to support legacy deployments. These possible violations are grouped into modes by the HttpCompliance class, which also defines several named modes that support common deployed sets of violations (with the default being HttpCompliance.RFC7230). For example: HttpConfiguration httpConfiguration = new HttpConfiguration(); httpConfiguration.setHttpCompliance(HttpCompliance.RFC7230); If you want to customize the violations that you want to allow, you can create your own mode using the HttpCompliance.from(String) method: HttpConfiguration httpConfiguration = new HttpConfiguration(); // RFC7230 compliance, but allow Violation.MULTIPLE_CONTENT_LENGTHS. HttpCompliance customHttpCompliance = HttpCompliance.from(\"RFC7230,MULTIPLE_CONTENT_LENGTHS\"); httpConfiguration.setHttpCompliance(customHttpCompliance); Universal Resource Locators (URLs) where initially formalized in 1994 in RFC 1738 and then refined in 1995 with relative URLs by RFC 1808. In 1998, URLs were generalized to Universal Resource Identifiers (URIs) by RFC 2396, which also introduced features such a path parameters. This was then obsoleted in 2005 by RFC 3986 which removed the definition for path parameters. Unfortunately by this stage the existence and use of such parameters had already been codified in the Servlet specification. For example, the relative URI /foo/bar;JSESSIONID=a8b38cd02b1c would define the path parameter JSESSIONID for the path segment bar, but the most recent RFC does not specify a formal definition of what this relative URI actually means. The current situation is that there may be URIs that are entirely valid for RFC 3986, but are ambiguous when handled by the Servlet APIs: A URI with .. and path parameters such as /some/..;/path is not resolved by RFC 3986, since the resolution process only applies to the exact segment .., not to ..;. However, once the path parameters are removed by the Servlet APIs, the resulting /some/../path can easily be resolved to /path, rather than be treated as a path that has ..; as a segment. A URI such as /some/%2e%2e/path is not resolved by RFC 3986, yet when URL-decoded by the Servlet APIs will result in /some/../path which can easily be resolved to /path, rather than be treated as a path that has .. as a segment. A URI with empty segments like /some//../path may be correctly resolved to /some/path (the .. removes the previous empty segment) by the Servlet APIs. However, if the URI raw path is passed to some other APIs (for example, file system APIs) it can be interpreted as /path because the empty segment // is discarded and treated as /, and the .. thus removes the /some segment. In order to avoid ambiguous URIs, Jetty imposes additional URI requirements in excess of what is required by RFC 3986 compliance. These additional requirements may optionally be violated and are defined by the UriCompliance.Violation enumeration. These violations are then grouped into modes by the UriCompliance class, which also defines several named modes that support common deployed sets of violations, with the default being UriCompliance.DEFAULT. For example: HttpConfiguration httpConfiguration = new HttpConfiguration(); httpConfiguration.setUriCompliance(UriCompliance.RFC3986); If you want to customize the violations that you want to allow, you can create your own mode using the UriCompliance.from(String) method: HttpConfiguration httpConfiguration = new HttpConfiguration(); // RFC3986 compliance, but enforce Violation.AMBIGUOUS_PATH_SEPARATOR. UriCompliance customUriCompliance = UriCompliance.from(\"RFC3986,-AMBIGUOUS_PATH_SEPARATOR\"); httpConfiguration.setUriCompliance(customUriCompliance); The standards for Cookies have varied greatly over time from a non-specified but de-facto standard (implemented by the first browsers), through RFC 2965 and currently to RFC 6265. The CookieCompliance.Violation enumeration defines the RFC requirements that may be optionally enforced by Jetty when parsing the Cookie HTTP header in requests and when generating the Set-Cookie HTTP header in responses. These violations are then grouped into modes by the CookieCompliance class, which also defines several named modes that support common deployed sets of violations, with the default being CookieCompliance.RFC6265. For example: HttpConfiguration httpConfiguration = new HttpConfiguration(); httpConfiguration.setRequestCookieCompliance(CookieCompliance.RFC6265); httpConfiguration.setResponseCookieCompliance(CookieCompliance.RFC6265); If you want to customize the violations that you want to allow, you can create your own mode using the CookieCompliance.from(String) method: HttpConfiguration httpConfiguration = new HttpConfiguration(); // RFC6265 compliance, but enforce Violation.RESERVED_NAMES_NOT_DOLLAR_PREFIXED. CookieCompliance customUriCompliance = CookieCompliance.from(\"RFC6265,-RESERVED_NAMES_NOT_DOLLAR_PREFIXED\"); httpConfiguration.setRequestCookieCompliance(customUriCompliance); httpConfiguration.setResponseCookieCompliance(CookieCompliance.RFC6265);","title":"Server Compliance Modes","component":"jetty","version":"12","name":"compliance","url":"/docs/jetty/12/programming-guide/server/compliance.html","titles":[{"text":"HTTP Compliance Modes","hash":"http","id":1},{"text":"URI Compliance Modes","hash":"uri","id":2},{"text":"Cookie Compliance Modes","hash":"cookie","id":3}]},"60":{"id":60,"text":"TODO","title":"FastCGI Server Libraries","component":"jetty","version":"12","name":"fastcgi","url":"/docs/jetty/12/programming-guide/server/fastcgi.html","titles":[]},"61":{"id":61,"text":"Web application development typically involves writing your web applications, packaging them into a web application archive, the *.war file, and then deploy the *.war file into a standalone Servlet Container that you have previously installed. The Jetty server libraries allow you to write web applications components using either the Jetty APIs (by writing Jetty Handlers) or using the standard Servlet APIs (by writing Servlets and Servlet Filters). These components can then be programmatically assembled together, without the need of creating a *.war file, added to a Jetty Server instance that is then started. This result in your web applications to be available to HTTP clients as if you deployed your *.war files in a standalone Jetty server. Jetty Handler APIs pros: Simple minimalist asynchronous APIs. Very low overhead, only configure the features you use. Faster turnaround to implement new APIs or new standards. Normal classloading behavior (web application classloading isolation also available). Servlet APIs pros: Standard, well known, APIs. The Maven artifact coordinates are: org.eclipse.jetty jetty-server 12.0.10-SNAPSHOT An org.eclipse.jetty.server.Server instance is the central component that links together a collection of Connectors and a collection of Handlers, with threads from a ThreadPool doing the work. The components that accept connections from clients are org.eclipse.jetty.server.Connector implementations. When a Jetty server interprets the HTTP protocol (HTTP/1.1, HTTP/2 or HTTP/3), it uses org.eclipse.jetty.server.Handler instances to process incoming requests and eventually produce responses. A Server must be created, configured and started: // Create and configure a ThreadPool. QueuedThreadPool threadPool = new QueuedThreadPool(); threadPool.setName(\"server\"); // Create a Server instance. Server server = new Server(threadPool); // Create a ServerConnector to accept connections from clients. Connector connector = new ServerConnector(server); // Add the Connector to the Server server.addConnector(connector); // Set a simple Handler to handle requests/responses. server.setHandler(new Handler.Abstract() { @Override public boolean handle(Request request, Response response, Callback callback) { // Succeed the callback to signal that the // request/response processing is complete. callback.succeeded(); return true; } }); // Start the Server to start accepting connections from clients. server.start(); The example above shows the simplest HTTP/1.1 server; it has no support for HTTP sessions, nor for HTTP authentication, nor for any of the features required by the Servlet specification. These features (HTTP session support, HTTP authentication support, etc.) are provided by the Jetty server libraries, but not all of them may be necessary in your web application. You need to put together the required Jetty components to provide the features required by your web applications. The advantage is that you do not pay the cost for features that you do not use, saving resources and likely increasing performance. The built-in Handlers provided by the Jetty server libraries allow you to write web applications that have functionalities similar to Apache HTTPD or Nginx (for example: URL redirection, URL rewriting, serving static content, reverse proxying, etc.), as well as generating content dynamically by processing incoming requests. Read this section for further details about Handlers. If you are interested in writing your web application based on the Servlet APIs, jump to this section. The Jetty HTTP request processing is outlined below in the diagram below. You may want to refer to the Jetty I/O architecture for additional information about the classes mentioned below. Request handing is slightly different for each protocol; in HTTP/2 Jetty takes into account multiplexing, something that is not present in HTTP/1.1. However, the diagram below captures the essence of request handling that is common among all protocols that carry HTTP requests. First, the Jetty I/O layer emits an event that a socket has data to read. This event is converted to a call to AbstractConnection.onFillable(), where the Connection first reads from the EndPoint into a ByteBuffer, and then calls a protocol specific parser to parse the bytes in the ByteBuffer. The parser emit events that are protocol specific; the HTTP/2 parser, for example, emits events for each HTTP/2 frame that has been parsed, and similarly does the HTTP/3 parser. The parser events are then converted to protocol independent events such as \"request start\", \"request headers\", \"request content chunk\", etc. detailed in this section. When enough of the HTTP request is arrived, the Connection calls HttpChannel.onRequest(). HttpChannel.onRequest() calls the request customizers, that allow to customize the request and/or the response headers on a per-Connector basis. After request customization, if any, the Handler chain is invoked, starting from the Server instance, and eventually your web application code is invoked. Advanced web applications may be interested in the progress of the processing of an HTTP request/response. A typical case is to know exactly when the HTTP request/response processing starts and when it is complete, for example to monitor processing times. This is conveniently implemented by org.eclipse.jetty.server.handler.EventsHandler, described in more details in this section. HTTP requests and responses can be logged to provide data that can be later analyzed with other tools. These tools can provide information such as the most frequently accessed request URIs, the response status codes, the request/response content lengths, geographical information about the clients, etc. The default request/response log line format is the NCSA Format extended with referrer data and user-agent data. Typically, the extended NCSA format is the is enough and it’s the standard used and understood by most log parsing tools and monitoring tools. To customize the request/response log line format see the CustomRequestLog javadocs. Request logging can be enabled at the Server level. The request logging output can be directed to an SLF4J logger named \"org.eclipse.jetty.server.RequestLog\" at INFO level, and therefore to any logging library implementation of your choice (see also this section about logging). Server server = new Server(); // Sets the RequestLog to log to an SLF4J logger named \"org.eclipse.jetty.server.RequestLog\" at INFO level. server.setRequestLog(new CustomRequestLog(new Slf4jRequestLogWriter(), CustomRequestLog.EXTENDED_NCSA_FORMAT)); Alternatively, the request logging output can be directed to a daily rolling file of your choice, and the file name must contain yyyy_MM_dd so that rolled over files retain their date: Server server = new Server(); // Use a file name with the pattern 'yyyy_MM_dd' so rolled over files retain their date. RequestLogWriter logWriter = new RequestLogWriter(\"/var/log/yyyy_MM_dd.jetty.request.log\"); // Retain rolled over files for 2 weeks. logWriter.setRetainDays(14); // Log times are in the current time zone. logWriter.setTimeZone(TimeZone.getDefault().getID()); // Set the RequestLog to log to the given file, rolling over at midnight. server.setRequestLog(new CustomRequestLog(logWriter, CustomRequestLog.EXTENDED_NCSA_FORMAT)); For maximum flexibility, you can log to multiple RequestLogs using class RequestLog.Collection, for example by logging with different formats or to different outputs. You can use CustomRequestLog with a custom RequestLog.Writer to direct the request logging output to your custom targets (for example, an RDBMS). You can implement your own RequestLog if you want to have functionalities that are not implemented by CustomRequestLog. A request customizer is an instance of HttpConfiguration.Customizer, that can customize the HTTP request and/or the HTTP response headers before the Handler chain is invoked. Request customizers are added to a particular HttpConfiguration instance, and therefore are specific to a Connector instance: you can have two different Connectors configured with different request customizers. For example, it is common to configure a secure Connector with the SecureRequestCustomizer that customizes the HTTP request by adding attributes that expose TLS data associated with the secure communication. A request customizer may: Inspect the received HTTP request method, URI, version and headers. Wrap the Request object to allow any method to be overridden and customized. Typically this is done to synthesize additional HTTP request headers, or to change the return value of overridden methods. Add or modify the HTTP response headers. The out-of-the-box request customizers include: ForwardedRequestCustomizer — to interpret the Forwarded (or the the obsolete X-Forwarded-*) HTTP header added by a reverse proxy; see this section. HostHeaderCustomizer — to customize, or synthesize it when original absent, the HTTP Host header; see this section. ProxyCustomizer — to expose as Request attributes the ip:port information carried by the PROXY protocol; see this section. RewriteCustomizer — to rewrite the request URI; see this section. SecureRequestCustomizer — to expose TLS data via Request attributes; see this section. You can also write your own request customizers and add them to the HttpConfiguration instance along existing request customizers. Multiple request customizers will be invoked in the order they have been added. Below you can find an example of how to add a request customizer: Server server = new Server(); // Configure the secure connector. HttpConfiguration httpsConfig = new HttpConfiguration(); // Add the SecureRequestCustomizer. httpsConfig.addCustomizer(new SecureRequestCustomizer()); // Configure the SslContextFactory with the KeyStore information. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); // Configure the Connector to speak HTTP/1.1 and HTTP/2. HttpConnectionFactory h1 = new HttpConnectionFactory(httpsConfig); HTTP2ServerConnectionFactory h2 = new HTTP2ServerConnectionFactory(httpsConfig); ALPNServerConnectionFactory alpn = new ALPNServerConnectionFactory(); alpn.setDefaultProtocol(h1.getProtocol()); SslConnectionFactory ssl = new SslConnectionFactory(sslContextFactory, alpn.getProtocol()); ServerConnector connector = new ServerConnector(server, ssl, alpn, h2, h1); server.addConnector(connector); server.start(); ForwardedRequestCustomizer should be added when Jetty receives requests from a reverse proxy on behalf of a remote client, and web applications need to access the remote client information. The reverse proxy adds the Forwarded (or the obsolete X-Forwarded-*) HTTP header to the request, and may offload TLS so that the request arrives in clear-text to Jetty. Applications deployed in Jetty may need to access information related to the remote client, for example the remote IP address and port, or whether the request was sent through a secure communication channel. However, the request is forwarded by the reverse proxy, so the direct information about the remote IP address is that of the proxy, not of the remote client. Furthermore, the proxy may offload TLS and forward the request in clear-text, so that the URI scheme would be http as forwarded by the reverse proxy, not https as sent by the remote client. ForwardedRequestCustomizer reads the Forwarded header where the reverse proxy saved the remote client information, and wraps the original Request so that applications will transparently see the remote client information when calling methods such as Request.isSecure(), or Request.getConnectionMetaData().getRemoteSocketAddress(), etc. For more information about how to configure ForwardedRequestCustomizer, see also the javadocs. HostHeaderCustomizer should be added when Jetty receives requests that may lack the Host HTTP header, such as HTTP/1.0, HTTP/2 or HTTP/3 requests, and web applications have logic that depends on the value of the Host HTTP header. For HTTP/2 and HTTP/3, the Host HTTP header is missing because the authority information is carried by the :authority pseudo-header, as per the respective specifications. HostHeaderCustomizer will look at the :authority pseudo-header, then wrap the original Request adding a Host HTTP header synthesized from the :authority pseudo-header. In this way, web applications that rely on the presence of the Host HTTP header will work seamlessly in any HTTP protocol version. HostHeaderCustomizer works also for the WebSocket protocol. WebSocket over HTTP/2 or over HTTP/3 initiate the WebSocket communication with an HTTP request that only has the :authority pseudo-header. HostHeaderCustomizer synthesizes the Host HTTP header for such requests, so that WebSocket web applications that inspect the initial HTTP request before the WebSocket communication will work seamlessly in any HTTP protocol version. For more information about how to configure HostHeaderCustomizer, see also the javadocs. ProxyCustomizer should be added when Jetty receives requests from a reverse proxy on behalf of a remote client, prefixed by the PROXY protocol (see also this section about the PROXY protocol). ProxyCustomizer adds the reverse proxy IP address and port as Request attributes. Web applications may use these attributes in conjunction with the data exposed by ForwardedRequestCustomizer (see this section). For more information about how to configure ProxyCustomizer, see also the javadocs. RewriteCustomizer is similar to RewriteHandler (see this section), but a RewriteCustomizer cannot send a response or otherwise complete the request/response processing. A RewriteCustomizer is mostly useful if you want to rewrite the request URI before the Handler chain is invoked. However, a very similar effect can be achieved by having the RewriteHandler as the first Handler (the child Handler of the Server instance). Since RewriteCustomizer cannot send a response or complete the request/response processing, Rules that do so such as redirect rules have no effect and are ignored; only Rules that modify or wrap the Request will have effect and be applied. Due to this limitation, it is often a better choice to use RewriteHandler instead of RewriteCustomizer. For more information about how to configure RewriteCustomizer, see also the javadocs. SecureRequestCustomizer should be added when Jetty receives requests over a secure Connector. SecureRequestCustomizer adds TLS information as request attributes, in particular an instance of EndPoint.SslSessionData that contains information about the negotiated TLS cipher suite and possibly client certificates, and an instance of org.eclipse.jetty.util.ssl.X509 that contains information about the server certificate. SecureRequestCustomizer also adds, if configured so, the Strict-Transport-Security HTTP response header (for more information about this header, see its specification). For more information about how to configure SecureRequestCustomizer, see also the javadocs. A Connector is the component that handles incoming requests from clients, and works in conjunction with ConnectionFactory instances. The available implementations are: org.eclipse.jetty.server.ServerConnector, for TCP/IP sockets. org.eclipse.jetty.unixdomain.server.UnixDomainServerConnector for Unix-Domain sockets (requires Java 16 or later). org.eclipse.jetty.quic.server.QuicServerConnector, for the low-level QUIC protocol and HTTP/3. org.eclipse.jetty.server.MemoryConnector, for memory communication between client and server. ServerConnector and UnixDomainServerConnector use a java.nio.channels.ServerSocketChannel to listen to a socket address and to accept socket connections. QuicServerConnector uses a java.nio.channels.DatagramChannel to listen to incoming UDP packets. MemoryConnector uses memory for the communication between client and server, avoiding the use of sockets. Since ServerConnector wraps a ServerSocketChannel, it can be configured in a similar way, for example the TCP port to listen to, the IP address to bind to, etc.: Server server = new Server(); // The number of acceptor threads. int acceptors = 1; // The number of selectors. int selectors = 1; // Create a ServerConnector instance. ServerConnector connector = new ServerConnector(server, acceptors, selectors, new HttpConnectionFactory()); // Configure TCP/IP parameters. // The port to listen to. connector.setPort(8080); // The address to bind to. connector.setHost(\"127.0.0.1\"); // The TCP accept queue size. connector.setAcceptQueueSize(128); server.addConnector(connector); server.start(); UnixDomainServerConnector also wraps a ServerSocketChannel and can be configured with the Unix-Domain path to listen to: Server server = new Server(); // The number of acceptor threads. int acceptors = 1; // The number of selectors. int selectors = 1; // Create a ServerConnector instance. UnixDomainServerConnector connector = new UnixDomainServerConnector(server, acceptors, selectors, new HttpConnectionFactory()); // Configure Unix-Domain parameters. // The Unix-Domain path to listen to. connector.setUnixDomainPath(Path.of(\"/tmp/jetty.sock\")); // The TCP accept queue size. connector.setAcceptQueueSize(128); server.addConnector(connector); server.start(); You can use Unix-Domain sockets only when you run your server with Java 16 or later. QuicServerConnector wraps a DatagramChannel and can be configured in a similar way, as shown in the example below. Since the communication via UDP does not require to \"accept\" connections like TCP does, the number of acceptors is set to 0 and there is no API to configure their number. Server server = new Server(); // Configure the SslContextFactory with the keyStore information. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); // Create a QuicServerConnector instance. Path pemWorkDir = Path.of(\"/path/to/pem/dir\"); ServerQuicConfiguration serverQuicConfig = new ServerQuicConfiguration(sslContextFactory, pemWorkDir); QuicServerConnector connector = new QuicServerConnector(server, serverQuicConfig, new HTTP3ServerConnectionFactory(serverQuicConfig)); // The port to listen to. connector.setPort(8080); // The address to bind to. connector.setHost(\"127.0.0.1\"); server.addConnector(connector); server.start(); MemoryConnector uses in-process memory, not sockets, for the communication between client and server, that therefore must be in the same process. Typical usage of MemoryConnector is the following: Server server = new Server(); // Create a MemoryConnector instance that speaks HTTP/1.1. MemoryConnector connector = new MemoryConnector(server, new HttpConnectionFactory()); server.addConnector(connector); server.start(); // The code above is the server-side. // ---- // The code below is the client-side. HttpClient httpClient = new HttpClient(); httpClient.start(); ContentResponse response = httpClient.newRequest(\"http://localhost/\") // Use the memory Transport to communicate with the server-side. .transport(new MemoryTransport(connector)) .send(); The acceptors are threads (typically only one) that compete to accept TCP socket connections. The connectors for the QUIC or HTTP/3 protocol, based on UDP, have no acceptors. When a TCP connection is accepted, ServerConnector wraps the accepted SocketChannel and passes it to the SelectorManager. Therefore, there is a little moment where the acceptor thread is not accepting new connections because it is busy wrapping the just accepted connection to pass it to the SelectorManager. Connections that are ready to be accepted but are not accepted yet are queued in a bounded queue (at the OS level) whose capacity can be configured with the acceptQueueSize parameter. If your application must withstand a very high rate of connection opening, configuring more than one acceptor thread may be beneficial: when one acceptor thread accepts one connection, another acceptor thread can take over accepting connections. The selectors are components that manage a set of accepted TCP sockets, implemented by ManagedSelector. For QUIC or HTTP/3, there are no accepted TCP sockets, but only one DatagramChannel and therefore there is only one selector. Each selector requires one thread and uses the Java NIO mechanism to efficiently handle a set of registered channels. As a rule of thumb, a single selector can easily manage up to 1000-5000 TCP sockets, although the number may vary greatly depending on the application. For example, web applications for websites tend to use TCP sockets for one or more HTTP requests to retrieve resources and then the TCP socket is idle for most of the time. In this case a single selector may be able to manage many TCP sockets because chances are that they will be idle most of the time. On the contrary, web messaging applications or REST applications tend to send many small messages at a very high frequency so that the TCP sockets are rarely idle. In this case a single selector may be able to manage less TCP sockets because chances are that many of them will be active at the same time, so you may need more than one selector. It is possible to configure more than one Connector per Server. Typical cases are a ServerConnector for clear-text HTTP, and another ServerConnector for secure HTTP. Another case could be a publicly exposed ServerConnector for secure HTTP, and an internally exposed UnixDomainServerConnector or MemoryConnector for clear-text HTTP. Yet another example could be a ServerConnector for clear-text HTTP, a ServerConnector for secure HTTP/2, and an QuicServerConnector for QUIC+HTTP/3. For example: Server server = new Server(); // Create a ServerConnector instance on port 8080. ServerConnector connector1 = new ServerConnector(server, 1, 1, new HttpConnectionFactory()); connector1.setPort(8080); server.addConnector(connector1); // Create another ServerConnector instance on port 9090, // for example with a different HTTP configuration. HttpConfiguration httpConfig2 = new HttpConfiguration(); httpConfig2.setHttpCompliance(HttpCompliance.LEGACY); ServerConnector connector2 = new ServerConnector(server, 1, 1, new HttpConnectionFactory(httpConfig2)); connector2.setPort(9090); server.addConnector(connector2); server.start(); If you do not specify the port the connector listens to explicitly, the OS will allocate one randomly when the connector starts. You may need to use the randomly allocated port to configure other components. One example is to use the randomly allocated port to configure secure redirects (when redirecting from a URI with the http scheme to the https scheme). Another example is to bind both the HTTP/2 connector and the HTTP/3 connector to the same randomly allocated port. It is possible that the HTTP/2 connector and the HTTP/3 connector share the same port, because one uses TCP, while the other uses UDP. For example: SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); Server server = new Server(); // The plain HTTP configuration. HttpConfiguration plainConfig = new HttpConfiguration(); // The secure HTTP configuration. HttpConfiguration secureConfig = new HttpConfiguration(plainConfig); secureConfig.addCustomizer(new SecureRequestCustomizer()); // First, create the secure connector for HTTPS and HTTP/2. HttpConnectionFactory https = new HttpConnectionFactory(secureConfig); HTTP2ServerConnectionFactory http2 = new HTTP2ServerConnectionFactory(secureConfig); ALPNServerConnectionFactory alpn = new ALPNServerConnectionFactory(); alpn.setDefaultProtocol(https.getProtocol()); ConnectionFactory ssl = new SslConnectionFactory(sslContextFactory, https.getProtocol()); ServerConnector secureConnector = new ServerConnector(server, 1, 1, ssl, alpn, http2, https); server.addConnector(secureConnector); // Second, create the plain connector for HTTP. HttpConnectionFactory http = new HttpConnectionFactory(plainConfig); ServerConnector plainConnector = new ServerConnector(server, 1, 1, http); server.addConnector(plainConnector); // Third, create the connector for HTTP/3. Path pemWorkDir = Path.of(\"/path/to/pem/dir\"); ServerQuicConfiguration serverQuicConfig = new ServerQuicConfiguration(sslContextFactory, pemWorkDir); QuicServerConnector http3Connector = new QuicServerConnector(server, serverQuicConfig, new HTTP3ServerConnectionFactory(serverQuicConfig)); server.addConnector(http3Connector); // Set up a listener so that when the secure connector starts, // it configures the other connectors that have not started yet. secureConnector.addEventListener(new NetworkConnector.Listener() { @Override public void onOpen(NetworkConnector connector) { int port = connector.getLocalPort(); // Configure the plain connector for secure redirects from http to https. plainConfig.setSecurePort(port); // Configure the HTTP3 connector port to be the same as HTTPS/HTTP2. http3Connector.setPort(port); } }); server.start(); A server Connector can be configured with one or more ConnectionFactorys, and this list of ConnectionFactorys represents the protocols that the Connector can understand. If no ConnectionFactory is specified then HttpConnectionFactory is implicitly configured. For each accepted connection, the server Connector asks a ConnectionFactory to create a Connection object that handles the traffic on that connection, parsing and generating bytes for a specific protocol (see this section for more details about Connection objects). You can listen for Connection open and close events as detailed in this section. Secure protocols like secure HTTP/1.1, secure HTTP/2 or HTTP/3 (HTTP/3 is intrinsically secure — there is no clear-text HTTP/3) require an SslContextFactory.Server to be configured with a KeyStore. For HTTP/1.1 and HTTP/2, SslContextFactory.Server is used in conjunction with SSLEngine, which drives the TLS handshake that establishes the secure communication. Applications may register a org.eclipse.jetty.io.ssl.SslHandshakeListener to be notified of TLS handshakes success or failure, by adding the SslHandshakeListener as a bean to the Connector: // Create a SslHandshakeListener. SslHandshakeListener listener = new SslHandshakeListener() { @Override public void handshakeSucceeded(Event event) throws SSLException { SSLEngine sslEngine = event.getSSLEngine(); System.getLogger(\"tls\").log(INFO, \"TLS handshake successful to %s\", sslEngine.getPeerHost()); } @Override public void handshakeFailed(Event event, Throwable failure) { SSLEngine sslEngine = event.getSSLEngine(); System.getLogger(\"tls\").log(ERROR, \"TLS handshake failure to %s\", sslEngine.getPeerHost(), failure); } }; Server server = new Server(); ServerConnector connector = new ServerConnector(server); server.addConnector(connector); // Add the SslHandshakeListener as bean to ServerConnector. // The listener will be notified of TLS handshakes success and failure. connector.addBean(listener); HttpConnectionFactory creates HttpConnection objects that parse bytes and generate bytes for the HTTP/1.1 protocol. This is how you configure Jetty to support clear-text HTTP/1.1: Server server = new Server(); // The HTTP configuration object. HttpConfiguration httpConfig = new HttpConfiguration(); // Configure the HTTP support, for example: httpConfig.setSendServerVersion(false); // The ConnectionFactory for HTTP/1.1. HttpConnectionFactory http11 = new HttpConnectionFactory(httpConfig); // Create the ServerConnector. ServerConnector connector = new ServerConnector(server, http11); connector.setPort(8080); server.addConnector(connector); server.start(); Supporting encrypted HTTP/1.1 (that is, requests with the https scheme) is supported by configuring an SslContextFactory that has access to the KeyStore containing the private server key and public server certificate, in this way: Server server = new Server(); // The HTTP configuration object. HttpConfiguration httpConfig = new HttpConfiguration(); // Add the SecureRequestCustomizer because TLS is used. httpConfig.addCustomizer(new SecureRequestCustomizer()); // The ConnectionFactory for HTTP/1.1. HttpConnectionFactory http11 = new HttpConnectionFactory(httpConfig); // Configure the SslContextFactory with the keyStore information. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); // The ConnectionFactory for TLS. SslConnectionFactory tls = new SslConnectionFactory(sslContextFactory, http11.getProtocol()); // The ServerConnector instance. ServerConnector connector = new ServerConnector(server, tls, http11); connector.setPort(8443); server.addConnector(connector); server.start(); You can customize the SSL/TLS provider as explained in this section. It is well known that the HTTP ports are 80 (for clear-text HTTP) and 443 for encrypted HTTP. By using those ports, a client had prior knowledge that the server would speak, respectively, the HTTP/1.x protocol and the TLS protocol (and, after decryption, the HTTP/1.x protocol). HTTP/2 was designed to be a smooth transition from HTTP/1.1 for users and as such the HTTP ports were not changed. However the HTTP/2 protocol is, on the wire, a binary protocol, completely different from HTTP/1.1. Therefore, with HTTP/2, clients that connect to port 80 (or to a specific Unix-Domain path) may speak either HTTP/1.1 or HTTP/2, and the server must figure out which version of the HTTP protocol the client is speaking. Jetty can support both HTTP/1.1 and HTTP/2 on the same clear-text port by configuring both the HTTP/1.1 and the HTTP/2 ConnectionFactorys: Server server = new Server(); // The HTTP configuration object. HttpConfiguration httpConfig = new HttpConfiguration(); // The ConnectionFactory for HTTP/1.1. HttpConnectionFactory http11 = new HttpConnectionFactory(httpConfig); // The ConnectionFactory for clear-text HTTP/2. HTTP2CServerConnectionFactory h2c = new HTTP2CServerConnectionFactory(httpConfig); // The ServerConnector instance. ServerConnector connector = new ServerConnector(server, http11, h2c); connector.setPort(8080); server.addConnector(connector); server.start(); Note how the ConnectionFactorys passed to ServerConnector are in order: first HTTP/1.1, then HTTP/2. This is necessary to support both protocols on the same port: Jetty will start parsing the incoming bytes as HTTP/1.1, but then realize that they are HTTP/2 bytes and will therefore upgrade from HTTP/1.1 to HTTP/2. This configuration is also typical when Jetty is installed in backend servers behind a load balancer that also takes care of offloading TLS. When Jetty is behind a load balancer, you can always prepend the PROXY protocol as described in this section. When using encrypted HTTP/2, the unencrypted protocol is negotiated by client and server using an extension to the TLS protocol called ALPN. Jetty supports ALPN and encrypted HTTP/2 with this configuration: Server server = new Server(); // The HTTP configuration object. HttpConfiguration httpConfig = new HttpConfiguration(); // Add the SecureRequestCustomizer because TLS is used. httpConfig.addCustomizer(new SecureRequestCustomizer()); // The ConnectionFactory for HTTP/1.1. HttpConnectionFactory http11 = new HttpConnectionFactory(httpConfig); // The ConnectionFactory for HTTP/2. HTTP2ServerConnectionFactory h2 = new HTTP2ServerConnectionFactory(httpConfig); // The ALPN ConnectionFactory. ALPNServerConnectionFactory alpn = new ALPNServerConnectionFactory(); // The default protocol to use in case there is no negotiation. alpn.setDefaultProtocol(http11.getProtocol()); // Configure the SslContextFactory with the keyStore information. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); // The ConnectionFactory for TLS. SslConnectionFactory tls = new SslConnectionFactory(sslContextFactory, alpn.getProtocol()); // The ServerConnector instance. ServerConnector connector = new ServerConnector(server, tls, alpn, h2, http11); connector.setPort(8443); server.addConnector(connector); server.start(); Note how the ConnectionFactorys passed to ServerConnector are in order: TLS, ALPN, HTTP/2, HTTP/1.1. Jetty starts parsing TLS bytes so that it can obtain the ALPN extension. With the ALPN extension information, Jetty can negotiate a protocol and pick, among the ConnectionFactorys supported by the ServerConnector, the ConnectionFactory correspondent to the negotiated protocol. The fact that the HTTP/2 protocol comes before the HTTP/1.1 protocol indicates that HTTP/2 is the preferred protocol for the server. Note also that the default protocol set in the ALPN ConnectionFactory, which is used in case ALPN is not supported by the client, is HTTP/1.1 — if the client does not support ALPN is probably an old client so HTTP/1.1 is the safest choice. You can customize the SSL/TLS provider as explained in this section. The HTTP/3 protocol is layered on top of the QUIC protocol, which is based on UDP. This is rather different with respect to HTTP/1 and HTTP/2, that are based on TCP. Jetty only implements the HTTP/3 layer in Java; the QUIC implementation is provided by the Quiche native library, that Jetty calls via JNA (and possibly, in the future, via the Foreign APIs). Jetty’s HTTP/3 support can only be used on the platforms (OS and CPU) supported by the Quiche native library. HTTP/3 clients may not know in advance if the server supports QUIC (over UDP), but the server typically supports either HTTP/1 or HTTP/2 (over TCP) on the default HTTP secure port 443, and advertises the availability HTTP/3 as an HTTP alternate service, possibly on a different port and/or on a different host. For example, an HTTP/2 response may include the following header: Alt-Svc: h3=\":843\" The presence of this header indicates that protocol h3 is available on the same host (since no host is defined before the port), but on port 843 (although it may be the same port 443). The HTTP/3 client may now initiate a QUIC connection on port 843 and make HTTP/3 requests. It is nowadays common to use the same port 443 for both HTTP/2 and HTTP/3. This does not cause problems because HTTP/2 listens on the TCP port 443, while QUIC listens on the UDP port 443. It is therefore common for HTTP/3 clients to initiate connections using the HTTP/2 protocol over TCP, and if the server supports HTTP/3 switch to HTTP/3 as indicated by the server. The code necessary to configure HTTP/2 is described in this section. To setup HTTP/3, for example on port 843, you need the following code (some of which could be shared with other connectors such as HTTP/2’s): Server server = new Server(); SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); HttpConfiguration httpConfig = new HttpConfiguration(); httpConfig.addCustomizer(new SecureRequestCustomizer()); // Create and configure the HTTP/3 connector. // It is mandatory to configure the PEM directory. Path pemWorkDir = Path.of(\"/path/to/pem/dir\"); ServerQuicConfiguration serverQuicConfig = new ServerQuicConfiguration(sslContextFactory, pemWorkDir); QuicServerConnector connector = new QuicServerConnector(server, serverQuicConfig, new HTTP3ServerConnectionFactory(serverQuicConfig)); connector.setPort(843); server.addConnector(connector); server.start(); The use of the Quiche native library requires the private key and public certificate present in the KeyStore to be exported as PEM files for Quiche to use them. It is therefore mandatory to configure the PEM directory as shown above. The PEM directory must also be adequately protected using file system permissions, because it stores the private key PEM file. You want to grant as few permissions as possible, typically the equivalent of POSIX rwx only to the user that runs the Jetty process. Using /tmp or any other directory accessible by any user is not a secure choice. If not explicitly configured, the TLS implementation is provided by the JDK you are using at runtime. OpenJDK’s vendors may replace the default TLS provider with their own, but you can also explicitly configure an alternative TLS provider. The standard TLS provider from OpenJDK is implemented in Java (no native code), and its performance is not optimal, both in CPU usage and memory usage. A faster alternative, implemented natively, is Google’s Conscrypt, which is built on BoringSSL, which is Google’s fork of OpenSSL. As Conscrypt eventually binds to a native library, there is a higher risk that a bug in Conscrypt or in the native library causes a JVM crash, while the Java implementation will not cause a JVM crash. To use Conscrypt as TLS provider, you must have the Conscrypt jar and the Jetty dependency jetty-alpn-conscrypt-server-12.0.10-SNAPSHOT.jar in the class-path or module-path. Then, you must configure the JDK with the Conscrypt provider, and configure Jetty to use the Conscrypt provider, in this way: // Configure the JDK with the Conscrypt provider. Security.addProvider(new OpenSSLProvider()); SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); // Configure Jetty's SslContextFactory to use Conscrypt. sslContextFactory.setProvider(\"Conscrypt\"); It is often the case that Jetty receives connections from a load balancer configured to distribute the load among many Jetty backend servers. From the Jetty point of view, all the connections arrive from the load balancer, rather than the real clients, but is possible to configure the load balancer to forward the real client IP address and IP port to the backend Jetty server using the PROXY protocol. The PROXY protocol is widely supported by load balancers such as HAProxy (via its send-proxy directive), Nginx(via its proxy_protocol on directive) and others. To support this case, Jetty can be configured in this way: Server server = new Server(); // The HTTP configuration object. HttpConfiguration httpConfig = new HttpConfiguration(); // Configure the HTTP support, for example: httpConfig.setSendServerVersion(false); // The ConnectionFactory for HTTP/1.1. HttpConnectionFactory http11 = new HttpConnectionFactory(httpConfig); // The ConnectionFactory for the PROXY protocol. ProxyConnectionFactory proxy = new ProxyConnectionFactory(http11.getProtocol()); // Create the ServerConnector. ServerConnector connector = new ServerConnector(server, proxy, http11); connector.setPort(8080); server.addConnector(connector); server.start(); Note how the ConnectionFactorys passed to ServerConnector are in order: first PROXY, then HTTP/1.1. Note also how the PROXY ConnectionFactory needs to know its next protocol (in this example, HTTP/1.1). Each ConnectionFactory is asked to create a Connection object for each accepted TCP connection; the Connection objects will be chained together to handle the bytes, each for its own protocol. Therefore the ProxyConnection will handle the PROXY protocol bytes and HttpConnection will handle the HTTP/1.1 bytes producing a request object and response object that will be processed by Handlers. The load balancer may be configured to communicate with Jetty backend servers via Unix-Domain sockets (requires Java 16 or later). For example: Server server = new Server(); // The HTTP configuration object. HttpConfiguration httpConfig = new HttpConfiguration(); // Configure the HTTP support, for example: httpConfig.setSendServerVersion(false); // The ConnectionFactory for HTTP/1.1. HttpConnectionFactory http11 = new HttpConnectionFactory(httpConfig); // The ConnectionFactory for the PROXY protocol. ProxyConnectionFactory proxy = new ProxyConnectionFactory(http11.getProtocol()); // Create the ServerConnector. UnixDomainServerConnector connector = new UnixDomainServerConnector(server, proxy, http11); connector.setUnixDomainPath(Path.of(\"/tmp/jetty.sock\")); server.addConnector(connector); server.start(); Note that the only difference when using Unix-Domain sockets is instantiating UnixDomainServerConnector instead of ServerConnector and configuring the Unix-Domain path instead of the IP port. An org.eclipse.jetty.server.Handler is the component that processes incoming HTTP requests and eventually produces HTTP responses. Handlers can process the HTTP request themselves, or they can be Handler.Containers that delegate HTTP request processing to one or more contained Handlers. This allows Handlers to be organized as a tree comprised of: Leaf Handlers that generate a response, complete the Callback, and return true from the handle(...) method. A Handler.Wrapper can be used to form a chain of Handlers where request, response or callback objects may be wrapped in the handle(...) method before being passed down the chain. A Handler.Sequence that contains a sequence of Handlers, with each Handler being called in sequence until one returns true from its handle(...) method. A specialized Handler.Container that may use properties of the request (for example, the URI, or a header, etc.) to select from one or more contained Handlers to delegate the HTTP request processing to, for example PathMappingsHandler. A Handler tree is created by composing Handlers together: Server server = new Server(); GzipHandler gzipHandler = new GzipHandler(); server.setHandler(gzipHandler); Handler.Sequence sequence = new Handler.Sequence(); gzipHandler.setHandler(sequence); sequence.addHandler(new App1Handler()); sequence.addHandler(new App2Handler()); The corresponding Handler tree structure looks like the following: Server └── GzipHandler └── Handler.Sequence ├── App1Handler └── App2Handler You should prefer using existing Handlers provided by the Jetty server libraries for managing web application contexts, security, HTTP sessions and Servlet support. Refer to this section for more information about how to use the Handlers provided by the Jetty server libraries. You should write your own leaf Handlers to implement your web application logic. Refer to this section for more information about how to write your own Handlers. A Handler may be declared as non-blocking (by extending Handler.Abstract.NonBlocking) or as blocking (by extending Handler.Abstract), to allow interaction with the Jetty threading architecture for more efficient thread and CPU utilization during the request/response processing. Container Handlers typically inherit whether they are blocking or non-blocking from their child or children. Furthermore, container Handlers may be declared as dynamic: they allow adding/removing child Handlers after they have been started (see Handler.AbstractContainer for more information). Dynamic container Handlers are therefore always blocking, as it is not possible to know if a child Handler added in the future will be blocking or non-blocking. If the Handler tree is not dynamic, then it is possible to create a non-blocking Handler tree, for example: Server └── RewriteHandler └── GzipHandler └── ContextHandler └── AppHandler extends Handler.Abstract.NonBlocking When the Handler tree is non-blocking, Jetty may use the Produce-Consume mode to invoke the Handler tree, therefore avoiding a thread hand-off, and saving the cost of being scheduled on a different CPU with cold caches. The Produce-Consume mode is equivalent to what other servers call \"event loop\" or \"selector thread loop\" architectures. This mode has the benefit of reducing OS context switches and CPU cache misses, using fewer threads, and it is overall very efficient. On the other hand, it requires writing quick, non-blocking code, and partially sequentializes the request/response processing, so that the Nth request in the sequence pays the latency of the processing of the N-1 requests in front of it. If you declare your Handler to be non-blocking by extending Handler.Abstract.NonBlocking, the code you write in handle(...) (and recursively all the code called from there) must truly be non-blocking, and possibly execute quickly. If the code blocks, you risk a server lock-up. If the code takes a long time to execute, requests from other connections may be delayed. Web applications are the unit of deployment in an HTTP server or Servlet container such as Jetty. Two different web applications are typically deployed on different context paths, where a context path is the initial segment of the URI path. For example, web application webappA that implements a web user interface for an e-commerce site may be deployed to context path /shop, while web application webappB that implements a REST API for the e-commerce business may be deployed to /api. A client making a request to URI /shop/cart is directed by Jetty to webappA, while a request to URI /api/products is directed to webappB. An alternative way to deploy the two web applications of the example above is to use virtual hosts. A virtual host is a subdomain of the primary domain that shares the same IP address with the primary domain. If the e-commerce business primary domain is domain.com, then a virtual host for webappA could be shop.domain.com, while a virtual host for webappB could be api.domain.com. Web application webappA can now be deployed to virtual host shop.domain.com and context path /, while web application webappB can be deployed to virtual host api.domain.com and context path /. Both applications have the same context path /, but they can be distinguished by the subdomain. A client making a request to https://shop.domain.com/cart is directed by Jetty to webappA, while a request to https://api.domain.com/products is directed to webappB. Therefore, in general, a web application is deployed to a context which can be seen as the pair (virtual_host, context_path). In the first case the contexts were (domain.com, /shop) and (domain.com, /api), while in the second case the contexts were (shop.domain.com, /) and (api.domain.com, /). Server applications using the Jetty Server Libraries create and configure a context for each web application. Many contexts can be deployed together to enrich the web application offering — for example a catalog context, a shop context, an API context, an administration context, etc. Web applications can be written using exclusively the Servlet APIs, since developers know well the Servlet API and because they guarantee better portability across Servlet container implementations, as described in this section. On the other hand, web applications can be written using the Jetty APIs, for better performance, or to be able to access to Jetty specific APIs, or to use features such as redirection from HTTP to HTTPS, support for gzip content compression, URI rewriting, etc. The Jetty Server Libraries provides a number of out-of-the-box Handlers that implement the most common functionalities and are described in the next sections. ContextHandler is a Handler that represents a context for a web application. It is a Handler.Wrapper that performs some action before and after delegating to the nested Handler. The simplest use of ContextHandler is the following: class ShopHandler extends Handler.Abstract { @Override public boolean handle(Request request, Response response, Callback callback) { // Implement the shop, remembering to complete the callback. return true; } } Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Create a ContextHandler with contextPath. ContextHandler context = new ContextHandler(new ShopHandler(), \"/shop\"); // Link the context to the server. server.setHandler(context); server.start(); The Handler tree structure looks like the following: Server └── ContextHandler /shop └── ShopHandler Server applications may need to deploy to Jetty more than one web application. Recall from the introduction that Jetty offers Handler.Collection that contains a sequence of child Handlers. However, this has no knowledge of the concept of context and just iterates through the sequence of Handlers. A better choice for multiple web application is ContextHandlerCollection, that matches a context from either its context path or virtual host, without iterating through the Handlers. If ContextHandlerCollection does not find a match, it just returns false from its handle(...) method. What happens next depends on the Handler tree structure: other Handlers may be invoked after ContextHandlerCollection, for example DefaultHandler (see this section). Eventually, if no Handler returns true from their own handle(...) method, then Jetty returns an HTTP 404 response to the client. class ShopHandler extends Handler.Abstract { @Override public boolean handle(Request request, Response response, Callback callback) { // Implement the shop, remembering to complete the callback. return true; } } class RESTHandler extends Handler.Abstract { @Override public boolean handle(Request request, Response response, Callback callback) { // Implement the REST APIs, remembering to complete the callback. return true; } } Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Create a ContextHandlerCollection to hold contexts. ContextHandlerCollection contextCollection = new ContextHandlerCollection(); // Create the context for the shop web application and add it to ContextHandlerCollection. contextCollection.addHandler(new ContextHandler(new ShopHandler(), \"/shop\")); // Link the ContextHandlerCollection to the Server. server.setHandler(contextCollection); server.start(); // Create the context for the API web application. ContextHandler apiContext = new ContextHandler(new RESTHandler(), \"/api\"); // Web applications can be deployed after the Server is started. contextCollection.deployHandler(apiContext, Callback.NOOP); The Handler tree structure looks like the following: Server └── ContextHandlerCollection ├── ContextHandler /shop │ └── ShopHandler └── ContextHandler /api └── RESTHandler Static content such as images or files (HTML, JavaScript, CSS) can be sent by Jetty very efficiently because Jetty can write the content asynchronously, using direct ByteBuffers to minimize data copy, and using a memory cache for faster access to the data to send. Being able to write content asynchronously means that if the network gets congested (for example, the client reads the content very slowly) and the server stalls the send of the requested data, then Jetty will wait to resume the send without blocking a thread to finish the send. ResourceHandler supports the following features: Welcome files, for example serving /index.html for request URI / Precompressed resources, serving a precompressed /document.txt.gz for request URI /document.txt Range requests, for requests containing the Range header, which allows clients to pause and resume downloads of large files Directory listing, serving a HTML page with the file list of the requested directory Conditional headers, for requests containing the If-Match, If-None-Match, If-Modified-Since, If-Unmodified-Since headers. The number of features supported and the efficiency in sending static content are on the same level as those of common front-end servers used to serve static content such as Nginx or Apache. Therefore, the traditional architecture where Nginx/Apache was the front-end server used only to send static content and Jetty was the back-end server used only to send dynamic content is somehow obsolete as Jetty can perform efficiently both tasks. This leads to simpler systems (less components to configure and manage) and more performance (no need to proxy dynamic requests from front-end servers to back-end servers). It is common to use Nginx/Apache as load balancers, or as rewrite/redirect servers. We typically recommend HAProxy as load balancer, and Jetty has rewrite/redirect features as well. This is how you configure a ResourceHandler to create a simple file server: Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Create and configure a ResourceHandler. ResourceHandler handler = new ResourceHandler(); // Configure the directory where static resources are located. handler.setBaseResource(ResourceFactory.of(handler).newResource(\"/path/to/static/resources/\")); // Configure directory listing. handler.setDirAllowed(false); // Configure welcome files. handler.setWelcomeFiles(List.of(\"index.html\")); // Configure whether to accept range requests. handler.setAcceptRanges(true); // Link the context to the server. server.setHandler(handler); server.start(); If you need to serve static resources from multiple directories: ResourceHandler handler = new ResourceHandler(); // For multiple directories, use ResourceFactory.combine(). Resource resource = ResourceFactory.combine( ResourceFactory.of(handler).newResource(\"/path/to/static/resources/\"), ResourceFactory.of(handler).newResource(\"/another/path/to/static/resources/\") ); handler.setBaseResource(resource); If the resource is not found, ResourceHandler will not return true from the handle(...) method, so what happens next depends on the Handler tree structure. See also how to use DefaultHandler. GzipHandler provides supports for automatic decompression of compressed request content and automatic compression of response content. GzipHandler is a Handler.Wrapper that inspects the request and, if the request matches the GzipHandler configuration, just installs the required components to eventually perform decompression of the request content or compression of the response content. The decompression/compression is not performed until the web application reads request content or writes response content. GzipHandler can be configured at the server level in this way: Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Create and configure GzipHandler. GzipHandler gzipHandler = new GzipHandler(); server.setHandler(gzipHandler); // Only compress response content larger than this. gzipHandler.setMinGzipSize(1024); // Do not compress these URI paths. gzipHandler.setExcludedPaths(\"/uncompressed\"); // Also compress POST responses. gzipHandler.addIncludedMethods(\"POST\"); // Do not compress these mime types. gzipHandler.addExcludedMimeTypes(\"font/ttf\"); // Create a ContextHandlerCollection to manage contexts. ContextHandlerCollection contexts = new ContextHandlerCollection(); gzipHandler.setHandler(contexts); server.start(); The Handler tree structure looks like the following: Server └── GzipHandler └── ContextHandlerCollection ├── ContextHandler 1 :── ... └── ContextHandler N However, in less common cases, you can configure GzipHandler on a per-context basis, for example because you want to configure GzipHandler with different parameters for each context, or because you want only some contexts to have compression support: Server server = new Server(); ServerConnector connector = new ServerConnector(server); server.addConnector(connector); // Create a ContextHandlerCollection to hold contexts. ContextHandlerCollection contextCollection = new ContextHandlerCollection(); // Link the ContextHandlerCollection to the Server. server.setHandler(contextCollection); // Create the context for the shop web application wrapped with GzipHandler so only the shop will do gzip. GzipHandler shopGzipHandler = new GzipHandler(new ContextHandler(new ShopHandler(), \"/shop\")); // Add it to ContextHandlerCollection. contextCollection.addHandler(shopGzipHandler); // Create the context for the API web application. ContextHandler apiContext = new ContextHandler(new RESTHandler(), \"/api\"); // Add it to ContextHandlerCollection. contextCollection.addHandler(apiContext); server.start(); The Handler tree structure looks like the following: Server └── ContextHandlerCollection └── ContextHandlerCollection ├── GzipHandler │ └── ContextHandler /shop │ └── ShopHandler └── ContextHandler /api └── RESTHandler RewriteHandler provides support for URL rewriting, very similarly to Apache’s mod_rewrite or Nginx rewrite module. The Maven artifact coordinates are: org.eclipse.jetty jetty-rewrite 12.0.10-SNAPSHOT RewriteHandler can be configured with a set of rules; a rule inspects the request and when it matches it performs some change to the request (for example, changes the URI path, adds/removes headers, etc.). The Jetty Server Libraries provide rules for the most common usages, but you can write your own rules by extending the org.eclipse.jetty.rewrite.handler.Rule class. Please refer to the jetty-rewrite module javadocs for the complete list of available rules. You typically want to configure RewriteHandler at the server level, although it is possible to configure it on a per-context basis. Server server = new Server(); ServerConnector connector = new ServerConnector(server); server.addConnector(connector); // Create and link the RewriteHandler to the Server. RewriteHandler rewriteHandler = new RewriteHandler(); server.setHandler(rewriteHandler); // Compacts URI paths with double slashes, e.g. /ctx//path/to//resource. rewriteHandler.addRule(new CompactPathRule()); // Rewrites */products/* to */p/*. rewriteHandler.addRule(new RewriteRegexRule(\"/(.*)/product/(.*)\", \"/$1/p/$2\")); // Redirects permanently to a different URI. RedirectRegexRule redirectRule = new RedirectRegexRule(\"/documentation/(.*)\", \"https://docs.domain.com/$1\"); redirectRule.setStatusCode(HttpStatus.MOVED_PERMANENTLY_301); rewriteHandler.addRule(redirectRule); // Create a ContextHandlerCollection to hold contexts. ContextHandlerCollection contextCollection = new ContextHandlerCollection(); rewriteHandler.setHandler(contextCollection); server.start(); The Handler tree structure looks like the following: Server └── RewriteHandler └── ContextHandlerCollection ├── ContextHandler 1 :── ... └── ContextHandler N SizeLimitHandler tracks the sizes of request content and response content, and fails the request processing with an HTTP status code of 413 Content Too Large. Server applications can set up the SizeLimitHandler before or after handlers that modify the request content or response content such as GzipHandler. When SizeLimitHandler is before GzipHandler in the Handler tree, it will limit the compressed content; when it is after, it will limit the uncompressed content. The Handler tree structure look like the following, to limit uncompressed content: Server └── GzipHandler └── SizeLimitHandler └── ContextHandlerCollection ├── ContextHandler 1 :── ... └── ContextHandler N StatisticsHandler gathers and exposes a number of statistic values related to request processing such as: Total number of requests Current number of concurrent requests Minimum, maximum, average and standard deviation of request processing times Number of responses grouped by HTTP code (i.e. how many 2xx responses, how many 3xx responses, etc.) Total response content bytes Server applications can read these values and use them internally, or expose them via some service, or export them to JMX. StatisticsHandler can be configured at the server level or at the context level. Server server = new Server(); ServerConnector connector = new ServerConnector(server); server.addConnector(connector); // Create and link the StatisticsHandler to the Server. StatisticsHandler statsHandler = new StatisticsHandler(); server.setHandler(statsHandler); // Create a ContextHandlerCollection to hold contexts. ContextHandlerCollection contextCollection = new ContextHandlerCollection(); statsHandler.setHandler(contextCollection); server.start(); The Handler tree structure looks like the following: Server └── StatisticsHandler └── ContextHandlerCollection ├── ContextHandler 1 :── ... └── ContextHandler N It is possible to act on those statistics by subclassing StatisticsHandler. For instance, StatisticsHandler.MinimumDataRateHandler can be used to enforce a minimum read rate and a minimum write rate based of the figures collected by the StatisticsHandler: Server server = new Server(); ServerConnector connector = new ServerConnector(server); server.addConnector(connector); // Create and link the MinimumDataRateHandler to the Server. // Create the MinimumDataRateHandler with a minimum read rate of 1KB per second and no minimum write rate. StatisticsHandler.MinimumDataRateHandler dataRateHandler = new StatisticsHandler.MinimumDataRateHandler(1024L, 0L); server.setHandler(dataRateHandler); // Create a ContextHandlerCollection to hold contexts. ContextHandlerCollection contextCollection = new ContextHandlerCollection(); dataRateHandler.setHandler(contextCollection); server.start(); EventsHandler allows applications to be notified of request processing events. EventsHandler must be subclassed, and the relevant onXYZ() methods overridden to capture the request processing events you are interested in. The request processing events can be used in conjunction with Request APIs that provide the information you may be interested in. For example, if you want to use EventsHandler to record processing times, you can use the request processing events with the following Request APIs: Request.getBeginNanoTime(), which returns the earliest possible nanoTime the request was received. Request.getHeadersNanoTime(), which returns the nanoTime at which the parsing of the HTTP headers was completed. The Request and Response objects may be inspected during events, but it is recommended to avoid modifying them, for example by adding/removing headers or by reading/writing content, because any modification may interfere with the processing performed by other Handlers. EventsHandler emits the following events: beforeHandling Emitted just before EventsHandler invokes the Handler.handle(...) method of the next Handler in the Handler tree. afterHandling Emitted just after the invocation to the Handler.handle(...) method of the next Handler in the Handler tree returns, either normally or by throwing. requestRead Emitted every time a chunk of content is read from the Request. responseBegin Emitted when the response first write happens. responseWrite Emitted every time the write of some response content is initiated. responseWriteComplete Emitted every time the write of some response content is completed, either successfully or with a failure. responseTrailersComplete Emitted when the write of the response trailers is completed. complete Emitted when both request and the response have been completely processed. Your EventsHandler subclass should then be linked in the Handler tree in the relevant position, typically as the outermost Handler after Server: class MyEventsHandler extends EventsHandler { @Override protected void onBeforeHandling(Request request) { // The nanoTime at which the request is first received. long requestBeginNanoTime = request.getBeginNanoTime(); // The nanoTime just before invoking the next Handler. request.setAttribute(\"beforeHandlingNanoTime\", NanoTime.now()); } @Override protected void onComplete(Request request, int status, HttpFields headers, Throwable failure) { // Retrieve the before handling nanoTime. long beforeHandlingNanoTime = (long)request.getAttribute(\"beforeHandlingNanoTime\"); // Record the request processing time and the status that was sent back to the client. long processingTime = NanoTime.millisSince(beforeHandlingNanoTime); System.getLogger(\"trackTime\").log(INFO, \"processing request %s took %d ms and ended with status code %d\", request, processingTime, status); } } Server server = new Server(); ServerConnector connector = new ServerConnector(server); server.addConnector(connector); // Link the EventsHandler as the outermost Handler after Server. MyEventsHandler eventsHandler = new MyEventsHandler(); server.setHandler(eventsHandler); ContextHandler appHandler = new ContextHandler(\"/app\"); eventsHandler.setHandler(appHandler); server.start(); The Handler tree structure looks like the following: Server └── MyEventsHandler └── ContextHandler /app You can link the EventsHandler at any point in the Handler tree structure, and even have multiple EventsHandlers to be notified of the request processing events at the different stages of the Handler tree, for example: Server └── TotalEventsHandler └── SlowHandler └── AppEventsHandler └── ContextHandler /app In the example above, TotalEventsHandler may record the total times of request processing, from SlowHandler all the way to the ContextHandler. On the other hand, AppEventsHandler may record both the time it takes for the request to flow from TotalEventsHandler to AppEventsHandler, therefore effectively measuring the processing time due to SlowHandler, and the time it takes to process the request by the ContextHandler. Refer to the EventsHandler javadocs for further information. QoSHandler allows web applications to limit the number of concurrent requests, therefore implementing a quality of service (QoS) mechanism for end users. Web applications may need to access resources with limited capacity, for example a relational database accessed through a JDBC connection pool. Consider the case where each HTTP request results in a JDBC query, and the capacity of the database is of 400 queries/s. Allowing more than 400 HTTP requests/s into the system, for example 500 requests/s, results in 100 requests blocking waiting for a JDBC connection for every second. It is evident that even a short load spike of few seconds eventually results in consuming all the server threads: some will be processing requests and queries, the remaining will be blocked waiting for a JDBC connection. When no more threads are available, additional requests will queue up as tasks in the thread pool, consuming more memory and potentially causing a complete server failure. This situation affects the whole server, so one bad behaving web application may affect other well behaving web applications. From the end user perspective the quality of service is terrible, because requests will take a lot of time to be served and eventually time out. In cases of load spikes, caused for example by popular events (weather or social events), usage bursts (Black Friday sales), or even denial of service attacks, it is desirable to give priority to certain requests rather than others. For example, in an e-commerce site requests that lead to the checkout and to the payments should have higher priorities than requests to browse the products. Another example is to prioritize requests for certain users such as paying users or administrative users. QoSHandler allows you to configure the maximum number of concurrent requests; by extending QoSHandler you can prioritize suspended requests for faster processing. A simple example that just limits the number of concurrent requests: class ShopHandler extends Handler.Abstract { @Override public boolean handle(Request request, Response response, Callback callback) { // Implement the shop, remembering to complete the callback. callback.succeeded(); return true; } } int maxThreads = 256; QueuedThreadPool serverThreads = new QueuedThreadPool(maxThreads); Server server = new Server(serverThreads); ServerConnector connector = new ServerConnector(server); server.addConnector(connector); // Create and configure QoSHandler. QoSHandler qosHandler = new QoSHandler(); // Set the max number of concurrent requests, // for example in relation to the thread pool. qosHandler.setMaxRequestCount(maxThreads / 2); // A suspended request may stay suspended for at most 15 seconds. qosHandler.setMaxSuspend(Duration.ofSeconds(15)); server.setHandler(qosHandler); // Provide quality of service to the shop // application by wrapping ShopHandler with QoSHandler. qosHandler.setHandler(new ShopHandler()); server.start(); This is an example of a QoSHandler subclass where you can implement a custom prioritization logic: class PriorityQoSHandler extends QoSHandler { @Override protected int getPriority(Request request) { String pathInContext = Request.getPathInContext(request); // Payment requests have the highest priority. if (pathInContext.startsWith(\"/payment/\")) return 3; // Login, checkout and admin requests. if (pathInContext.startsWith(\"/login/\")) return 2; if (pathInContext.startsWith(\"/checkout/\")) return 2; if (pathInContext.startsWith(\"/admin/\")) return 2; // Health-check requests from the load balancer. if (pathInContext.equals(\"/health-check\")) return 1; // Other requests have the lowest priority. return 0; } } SecuredRedirectHandler allows to redirect requests made with the http scheme (and therefore to the clear-text port) to the https scheme (and therefore to the encrypted port). For example a request to http://domain.com:8080/path?param=value is redirected to https://domain.com:8443/path?param=value. Server applications must configure a HttpConfiguration object with the secure scheme and secure port so that SecuredRedirectHandler can build the redirect URI. SecuredRedirectHandler is typically configured at the server level, although it can be configured on a per-context basis. Server server = new Server(); // Configure the HttpConfiguration for the clear-text connector. int securePort = 8443; HttpConfiguration httpConfig = new HttpConfiguration(); httpConfig.setSecurePort(securePort); // The clear-text connector. ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory(httpConfig)); connector.setPort(8080); server.addConnector(connector); // Configure the HttpConfiguration for the secure connector. HttpConfiguration httpsConfig = new HttpConfiguration(httpConfig); // Add the SecureRequestCustomizer because TLS is used. httpConfig.addCustomizer(new SecureRequestCustomizer()); // The HttpConnectionFactory for the secure connector. HttpConnectionFactory http11 = new HttpConnectionFactory(httpsConfig); // Configure the SslContextFactory with the keyStore information. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); // The ConnectionFactory for TLS. SslConnectionFactory tls = new SslConnectionFactory(sslContextFactory, http11.getProtocol()); // The secure connector. ServerConnector secureConnector = new ServerConnector(server, tls, http11); secureConnector.setPort(8443); server.addConnector(secureConnector); // Create and link the SecuredRedirectHandler to the Server. SecuredRedirectHandler securedHandler = new SecuredRedirectHandler(); server.setHandler(securedHandler); // Create a ContextHandlerCollection to hold contexts. ContextHandlerCollection contextCollection = new ContextHandlerCollection(); securedHandler.setHandler(contextCollection); server.start(); CrossOriginHandler supports the server-side requirements of the CORS protocol implemented by browsers when performing cross-origin requests. An example of a cross-origin request is when a script downloaded from the origin domain http://domain.com uses fetch() or XMLHttpRequest to make a request to a cross domain such as http://cross.domain.com (a subdomain of the origin domain) or to http://example.com (a completely different domain). This is common, for example, when you embed reusable components such as a chat component into a web page: the web page and the chat component files are downloaded from http://domain.com, but the chat server is at http://chat.domain.com, so the chat component must make cross-origin requests to the chat server. This kind of setup exposes to cross-site request forgery (CSRF) attacks, and the CORS protocol has been established to protect against this kind of attacks. For security reasons, browsers by default do not allow cross-origin requests, unless the response from the cross domain contains the right CORS headers. CrossOriginHandler relieves server-side web applications from handling CORS headers explicitly. You can set up your Handler tree with the CrossOriginHandler, configure it, and it will take care of the CORS headers separately from your application, where you can concentrate on the business logic. The Handler tree structure looks like the following: Server └── CrossOriginHandler └── ContextHandler /app └── AppHandler The most important CrossOriginHandler configuration parameter that must be configured is allowedOrigins, which by default is the empty set, therefore disallowing all origins. You want to restrict requests to your cross domain to only origins you trust. From the chat example above, the chat server at http://chat.domain.com knows that the chat component is downloaded from the origin server at http://domain.com, so the CrossOriginHandler is configured in this way: CrossOriginHandler crossOriginHandler = new CrossOriginHandler(); // The allowed origins are regex patterns. crossOriginHandler.setAllowedOriginPatterns(Set.of(\"http://domain\\\\.com\")); Browsers send cross-origin requests in two ways: Directly, if the cross-origin request meets some simple criteria. By issuing a hidden preflight request before the actual cross-origin request, to verify with the server if it is willing to reply properly to the actual cross-origin request. Both preflight requests and cross-origin requests will be handled by CrossOriginHandler, which will analyze the request and possibly add appropriate CORS response headers. By default, preflight requests are not delivered to the CrossOriginHandler child Handler, but it is possible to configure CrossOriginHandler by setting deliverPreflightRequests=true so that the web application can fine-tune the CORS response headers. Another important CrossOriginHandler configuration parameter is allowCredentials, which controls whether cookies and authentication headers that match the cross-origin request to the cross domain are sent in the cross-origin requests. By default, allowCredentials=false so that cookies and authentication headers are not sent in cross-origin requests. If the application deployed in the cross domain requires cookies or authentication, then you must set allowCredentials=true, but you also need to restrict the allowed origins only to the ones your trust, otherwise your cross domain application will be vulnerable to CSRF attacks. For more CrossOriginHandler configuration options, refer to the CrossOriginHandler javadocs. StateTrackingHandler is a troubleshooting Handler that tracks whether Handler/Request/Response asynchronous APIs are properly used by applications. Asynchronous APIs are notoriously more difficult to troubleshoot than blocking APIs, and may be subject to restrictions that applications need to respect (a typical case is that they cannot perform blocking operations). For example, a Handler implementation whose handle(...) method returns true must eventually complete the callback passed to handle(...) (for more details on the Handler APIs, see this section). When an application forgets to complete the callback passed to handle(...), the HTTP response may not be sent to the client, but it will be difficult to troubleshoot why the client is not receiving responses. StateTrackingHandler helps with this troubleshooting because it tracks the callback passed to handle(...) and emits an event if the callback is not completed within a configurable timeout: StateTrackingHandler stateTrackingHandler = new StateTrackingHandler(); // Emit an event if the Handler callback is not completed with 5 seconds. stateTrackingHandler.setHandlerCallbackTimeout(5000); By default, events are logged at warning level, but it is possible to specify a listener to be notified of the events tracked by StateTrackingHandler: StateTrackingHandler stateTrackingHandler = new StateTrackingHandler(new StateTrackingHandler.Listener() { @Override public void onHandlerCallbackNotCompleted(Request request, StateTrackingHandler.ThreadInfo handlerThreadInfo) { // Your own event handling logic. } }); // Emit an event if the Handler callback is not completed with 5 seconds. stateTrackingHandler.setHandlerCallbackTimeout(5000); Other events tracked by StateTrackingHandler are demand callbacks that block, writes that do not complete their callbacks, or write callbacks that block. The complete list of events is specified by the StateTrackingHandler.Listener class (javadocs). DefaultHandler is a terminal Handler that always returns true from its handle(...) method and performs the following: Serves the favicon.ico Jetty icon when it is requested Sends a HTTP 404 response for any other request The HTTP 404 response content nicely shows a HTML table with all the contexts deployed on the Server instance DefaultHandler is set directly on the server, for example: Server server = new Server(); server.setDefaultHandler(new DefaultHandler(false, true)); Connector connector = new ServerConnector(server); server.addConnector(connector); // Add a ContextHandlerCollection to manage contexts. ContextHandlerCollection contexts = new ContextHandlerCollection(); // Link the contexts to the Server. server.setHandler(contexts); server.start(); The Handler tree structure looks like the following: Server ├── ContextHandlerCollection │ ├── ContextHandler 1 │ :── ... │ └── ContextHandler N └── DefaultHandler In the example above, ContextHandlerCollection will try to match a request to one of the contexts; if the match fails, Server will call the DefaultHandler that will return a HTTP 404 with an HTML page showing the existing contexts deployed on the Server. DefaultHandler just sends a nicer HTTP 404 response in case of wrong requests from clients. Jetty will send an HTTP 404 response anyway if DefaultHandler has not been set. Handlers are easy to write, but often web applications have already been written using the Servlet APIs, using Servlets and Filters. ServletContextHandler is a ContextHandler that provides support for the Servlet APIs and implements the behaviors required by the Servlet specification. However, differently from WebAppContext, it does not require web application to be packaged as a *.war, nor it requires a web.xml for configuration. With ServletContextHandler you can just put all your Servlet components in a *.jar and configure each component using the ServletContextHandler APIs, in a way equivalent to what you would write in a web.xml. The Maven artifact coordinates depend on the version of Jakarta EE you want to use, and they are: org.eclipse.jetty.ee{8,9,10} jetty-ee{8,9,10}-servlet 12.0.10-SNAPSHOT For example, for Jakarta EE 10 the coordinates are: org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.10-SNAPSHOT. Below you can find an example of how to set up a Jakarta EE 10 ServletContextHandler: public class ShopCartServlet extends HttpServlet { @Override protected void service(HttpServletRequest request, HttpServletResponse response) { // Implement the shop cart functionality. } } Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Add the CrossOriginHandler to protect from CSRF attacks. CrossOriginHandler crossOriginHandler = new CrossOriginHandler(); crossOriginHandler.setAllowedOriginPatterns(Set.of(\"http://domain.com\")); crossOriginHandler.setAllowCredentials(true); server.setHandler(crossOriginHandler); // Create a ServletContextHandler with contextPath. ServletContextHandler context = new ServletContextHandler(); context.setContextPath(\"/shop\"); // Link the context to the server. crossOriginHandler.setHandler(context); // Add the Servlet implementing the cart functionality to the context. ServletHolder servletHolder = context.addServlet(ShopCartServlet.class, \"/cart/*\"); // Configure the Servlet with init-parameters. servletHolder.setInitParameter(\"maxItems\", \"128\"); server.start(); The Handler and Servlet components tree structure looks like the following: Server └── ServletContextHandler /shop ├── ShopCartServlet /cart/* └── CrossOriginFilter /* Note how the Servlet components (they are not Handlers) are represented in italic. Note also how adding a Servlet or a Filter returns a holder object that can be used to specify additional configuration for that particular Servlet or Filter, for example initialization parameters (equivalent to in web.xml). When a request arrives to ServletContextHandler the request URI will be matched against the Filters and Servlet mappings and only those that match will process the request, as dictated by the Servlet specification. ServletContextHandler is a terminal Handler, that is it always returns true from its handle(...) method when invoked. Server applications must be careful when creating the Handler tree to put ServletContextHandlers as last Handlers in any Handler.Collection or as children of a ContextHandlerCollection. WebAppContext is a ServletContextHandler that autoconfigures itself by reading a web.xml Servlet configuration file. The Maven artifact coordinates depend on the version of Jakarta EE you want to use, and they are: org.eclipse.jetty.ee{8,9,10} jetty-ee{8,9,10}-webapp 12.0.10-SNAPSHOT Server applications can specify a *.war file or a directory with the structure of a *.war file to WebAppContext to deploy a standard Servlet web application packaged as a war (as defined by the Servlet specification). Where server applications using ServletContextHandler must manually invoke methods to add Servlets and Filters as described in this section, WebAppContext reads WEB-INF/web.xml to add Servlets and Filters, and also enforces a number of restrictions defined by the Servlet specification, in particular related to class loading. Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Create a WebAppContext. WebAppContext context = new WebAppContext(); // Link the context to the server. server.setHandler(context); // Configure the path of the packaged web application (file or directory). context.setWar(\"/path/to/webapp.war\"); // Configure the contextPath. context.setContextPath(\"/app\"); server.start(); WebAppContext Class Loading The Servlet specification requires that a web application class loader must load the web application classes from WEB-INF/classes and WEB_INF/lib. The web application class loader is special because it behaves differently from typical class loaders: where typical class loaders first delegate to their parent class loader and then try to find the class locally, the web application class loader first tries to find the class locally and then delegates to the parent class loader. The typical class loading model, parent-first, is inverted for web application class loaders, as they use a child-first model. Furthermore, the Servlet specification requires that web applications cannot load or otherwise access the Servlet container implementation classes, also called server classes. Web applications receive the HTTP request object as an instance of the jakarta.servlet.http.HttpServletRequest interface, and cannot downcast it to the Jetty specific implementation of that interface to access Jetty specific features — this ensures maximum web application portability across Servlet container implementations. Lastly, the Servlet specification requires that other classes, also called system classes, such as jakarta.servlet.http.HttpServletRequest or JDK classes such as java.lang.String or java.sql.Connection cannot be modified by web applications by putting, for example, modified versions of those classes in WEB-INF/classes so that they are loaded first by the web application class loader (instead of the class-path class loader where they are normally loaded from). WebAppContext implements this class loader logic using a single class loader, WebAppClassLoader, with filtering capabilities: when it loads a class, it checks whether the class is a system class or a server class and acts according to the Servlet specification. When WebAppClassLoader is asked to load a class, it first tries to find the class locally (since it must use the inverted child-first model); if the class is found, and it is not a system class, the class is loaded; otherwise the class is not found locally. If the class is not found locally, the parent class loader is asked to load the class; the parent class loader uses the standard parent-first model, so it delegates the class loading to its parent, and so on. If the class is found, and it is not a server class, the class is loaded; otherwise the class is not found and a ClassNotFoundException is thrown. Unfortunately, the Servlet specification does not define exactly which classes are system classes and which classes are server classes. However, Jetty picks good defaults and allows server applications to customize system classes and server classes in WebAppContext. If you have a Servlet web application, you may want to use a DefaultServlet instead of ResourceHandler. The features are similar, but DefaultServlet is more commonly used to serve static files for Servlet web applications. The Maven artifact coordinates depend on the version of Jakarta EE you want to use, and they are: org.eclipse.jetty.ee{8,9,10} jetty-ee{8,9,10}-servlet 12.0.10-SNAPSHOT Below you can find an example of how to setup DefaultServlet: // Create a ServletContextHandler with contextPath. ServletContextHandler context = new ServletContextHandler(); context.setContextPath(\"/app\"); // Add the DefaultServlet to serve static content. ServletHolder servletHolder = context.addServlet(DefaultServlet.class, \"/\"); // Configure the DefaultServlet with init-parameters. servletHolder.setInitParameter(\"resourceBase\", \"/path/to/static/resources/\"); servletHolder.setAsyncSupported(true); The Handler API consist fundamentally of just one method: public boolean handle(Request request, Response response, Callback callback) throws Exception The code that implements the handle(...) method must respect the following contract: It may inspect Request immutable information such as URI and headers, typically to decide whether to return true or false (see below). Returning false means that the implementation will not handle the request, and it must not complete the callback parameter, nor read the request content, nor write response content. Returning true means that the implementation will handle the request, and it must eventually complete the callback parameter. The completion of the callback parameter may happen synchronously within the invocation to handle(...), or at a later time, asynchronously, possibly from another thread. If the response has not been explicitly written when the callback has been completed, the Jetty implementation will write a 200 response with no content if the callback has been succeeded, or an error response if the callback has been failed. Violating the contract above may result in undefined or unexpected behavior, and possibly leak resources. For example, returning true from handle(...), but not completing the callback parameter may result in the request or the response never be completed, likely causing the client to time out. Similarly, returning false from handle(...) but then either writing the response or completing the callback parameter will likely result in a garbled response be sent to the client, as the implementation will either invoke another Handler (that may write a response) or write a default response. Applications may wrap the request, the response, or the callback and forward the wrapped request, response and callback to a child Handler. A simple \"Hello World\" Handler is the following: class HelloWorldHandler extends Handler.Abstract.NonBlocking { @Override public boolean handle(Request request, Response response, Callback callback) { response.setStatus(200); response.getHeaders().put(HttpHeader.CONTENT_TYPE, \"text/html; charset=UTF-8\"); // Write a Hello World response. Content.Sink.write(response, true, \"\"\" Jetty Hello World Handler Hello World \"\"\", callback); return true; } } Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Set the Hello World Handler. server.setHandler(new HelloWorldHandler()); server.start(); Such a simple Handler can access the request and response main features, such as reading request headers and content, or writing response headers and content. Note how HelloWorldHandler extends from Handler.Abstract.NonBlocking. This is a declaration that HelloWorldHandler does not use blocking APIs (of any kind) to perform its logic, allowing Jetty to apply optimizations (see here) that are not applied to Handlers that declare themselves as blocking. If your Handler implementation uses blocking APIs (of any kind), extend from Handler.Abstract. Note how the callback parameter is passed to Content.Sink.write(...) — a utility method that eventually calls Response.write(...), so that when the write completes, also the callback parameter is completed. Note also that because the callback parameter will eventually be completed, the value returned from handle(...) is true. In this way the Handler contract is fully respected: when true is returned, the callback will eventually be completed. A filtering Handler is a handler that perform some modification to the request or response, and then either forwards the request to another Handler or produces an error response: class FilterHandler extends Handler.Wrapper { public FilterHandler(Handler handler) { super(handler); } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { String path = Request.getPathInContext(request); if (path.startsWith(\"/old_path/\")) { // Rewrite old paths to new paths. HttpURI uri = request.getHttpURI(); String newPath = \"/new_path/\" + path.substring(\"/old_path/\".length()); HttpURI newURI = HttpURI.build(uri).path(newPath).asImmutable(); // Modify the request object by wrapping the HttpURI. Request newRequest = Request.serveAs(request, newURI); // Forward to the next Handler using the wrapped Request. return super.handle(newRequest, response, callback); } else { // Forward to the next Handler as-is. return super.handle(request, response, callback); } } } Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Link the Handlers in a chain. server.setHandler(new FilterHandler(new HelloWorldHandler())); server.start(); Note how a filtering Handler extends from Handler.Wrapper and as such needs another handler to forward the request processing to, and how the two Handlers needs to be linked together to work properly. The Request object can be accessed by web applications to inspect the HTTP request URI, the HTTP request headers and read the HTTP request content. Since the Request object may be wrapped by filtering Handlers, the design decision for the Request APIs was to keep the number of virtual methods at a minimum. This minimizes the effort necessary to write Request wrapper implementations and provides a single source for the data carried by Request objects. To use the Request APIs, you should look up the relevant methods in the following order: Request virtual methods. For example, Request.getMethod() returns the HTTP method used in the request, such as GET, POST, etc. Request static methods. These are utility methods that provide more convenient access to request features. For example, the HTTP URI query is a string and can be directly accessed via the non-static method request.getHttpURI().getQuery(); however, the query string typically holds key/value parameters and applications should not have the burden to parse the query string, so the static Request.extractQueryParameters(Request) method is provided. Super class static methods. Since Request is-a Content.Source, look also for static methods in Content.Source that take a Content.Source as a parameter, so that you can pass the Request object as a parameter. Below you can find a list of the most common Request features and how to access them. Refer to the Request javadocs for the complete list. Request URI The Request URI is accessed via Request.getHttpURI() and the HttpURI APIs. Request HTTP headers The Request HTTP headers are accessed via Request.getHeaders() and the HttpFields APIs. Request cookies The Request cookies are accessed via static Request.getCookies(Request) and the HttpCookie APIs. Request parameters The Request parameters are accessed via static Request.extractQueryParameters(Request) for those present in the HTTP URI query, and via static Request.getParametersAsync(Request) for both query parameters and request content parameters received via form upload with Content-Type: application/x-www-url-form-encoded, and the Fields APIs. If you are only interested in the request content parameters received via form upload, you can use static FormFields.from(Request), see also this section. Request HTTP session The Request HTTP session is accessed via Request.getSession(boolean) and the Session APIs. For more information about how to set up support for HTTP sessions, see this section. Since Request is-a Content.Source, the section about reading from Content.Source applies to Request as well. The static Content.Source utility methods will allow you to read the request content as a string, or as an InputStream, for example. There are two special cases that are specific to HTTP for the request content: form parameters (sent when submitting an HTML form) and multipart form data (sent when submitting an HTML form with file upload). For form parameters, typical of HTML form submissions, you can use the FormFields APIs as shown here: class FormHandler extends Handler.Abstract.NonBlocking { @Override public boolean handle(Request request, Response response, Callback callback) { String contentType = request.getHeaders().get(HttpHeader.CONTENT_TYPE); if (MimeTypes.Type.FORM_ENCODED.is(contentType)) { // Convert the request content into Fields. CompletableFuture completableFields = FormFields.from(request); (1) // When all the request content has arrived, process the fields. completableFields.whenComplete((fields, failure) -> (2) { if (failure == null) { processFields(fields); // Send a simple 200 response, completing the callback. response.setStatus(HttpStatus.OK_200); callback.succeeded(); } else { // Reading the request content failed. // Send an error response, completing the callback. Response.writeError(request, response, callback, failure); } }); // The callback will be eventually completed in all cases, return true. return true; } else { // Send an error response, completing the callback, and returning true. Response.writeError(request, response, callback, HttpStatus.BAD_REQUEST_400, \"invalid request\"); return true; } } } 1 If the Content-Type is x-www-form-urlencoded, read the request content with FormFields. 2 When all the request content has arrived, process the Fields. The Handler returns true, so the callback parameter must be completed. It is therefore mandatory to use CompletableFuture APIs that are invoked even when reading the request content failed, such as whenComplete(BiConsumer), handle(BiFunction), exceptionally(Function), etc. Failing to do so may result in the Handler callback parameter to never be completed, causing the request processing to hang forever. For multipart form data, typical for HTML form file uploads, you can use the MultiPartFormData.Parser APIs as shown here: class MultiPartFormDataHandler extends Handler.Abstract.NonBlocking { @Override public boolean handle(Request request, Response response, Callback callback) { String contentType = request.getHeaders().get(HttpHeader.CONTENT_TYPE); if (MimeTypes.Type.MULTIPART_FORM_DATA.is(contentType)) { // Extract the multipart boundary. String boundary = MultiPart.extractBoundary(contentType); // Create and configure the multipart parser. MultiPartFormData.Parser parser = new MultiPartFormData.Parser(boundary); // By default, uploaded files are stored in this directory, to // avoid to read the file content (which can be large) in memory. parser.setFilesDirectory(Path.of(\"/tmp\")); // Convert the request content into parts. CompletableFuture completableParts = parser.parse(request); (1) // When all the request content has arrived, process the parts. completableParts.whenComplete((parts, failure) -> (2) { if (failure == null) { // Use the Parts API to process the parts. processParts(parts); // Send a simple 200 response, completing the callback. response.setStatus(HttpStatus.OK_200); callback.succeeded(); } else { // Reading the request content failed. // Send an error response, completing the callback. Response.writeError(request, response, callback, failure); } }); // The callback will be eventually completed in all cases, return true. return true; } else { // Send an error response, completing the callback, and returning true. Response.writeError(request, response, callback, HttpStatus.BAD_REQUEST_400, \"invalid request\"); return true; } } } 1 If the Content-Type is multipart/form-data, read the request content with MultiPartFormData.Parser. 2 When all the request content has arrived, process the MultiPartFormData.Parts. The Handler returns true, so the callback parameter must be completed. It is therefore mandatory to use CompletableFuture APIs that are invoked even when reading the request content failed, such as whenComplete(BiConsumer), handle(BiFunction), exceptionally(Function), etc. Failing to do so may result in the Handler callback parameter to never be completed, causing the request processing to hang forever. Application may add listeners to the Request object to be notified of particular events happening during the request/response processing. Request.addIdleTimeoutListener(Predicate) allows you to add an idle timeout listener, which is invoked when an idle timeout period elapses during the request/response processing, if the idle timeout event is not notified otherwise. When an idle timeout event happens, it is delivered to the application as follows: If there is pending demand (via Request.demand(Runnable)), then the demand Runnable is invoked and the application may see the idle timeout failure by reading from the Request, obtaining a transient failure chunk. If there is a pending response write (via Response.write(boolean, ByteBuffer, Callback)), the response write Callback is failed. If neither of the above, the idle timeout listeners are invoked, in the same order they have been added. The first idle timeout listener that returns true stops the Jetty implementation from invoking the idle timeout listeners that follow. The idle timeout listeners are therefore invoked only when the application is really idle, neither trying to read nor trying to write. An idle timeout listener may return true to indicate that the idle timeout should be treated as a fatal failure of the request/response processing; otherwise the listener may return false to indicate that no further handling of the idle timeout is needed from the Jetty implementation. When idle timeout listeners return false, then any subsequent idle timeouts are handled as above. In the case that the application does not initiate any read or write, then the idle timeout listeners are invoked again after another idle timeout period. Request.addFailureListener(Consumer) allows you to add a failure listener, which is invoked when a failure happens during the request/response processing. When a failure happens during the request/response processing, then: The pending demand for request content, if any, is invoked; that is, the Runnable passed to Request.demand(Runnable) is invoked. The callback of an outstanding call to Response.write(boolean, ByteBuffer, Callback), if any, is failed. The failure listeners are invoked, in the same order they have been added. Failure listeners are invoked also in case of idle timeouts, in the following cases: At least one idle timeout listener returned true to indicate to the Jetty implementation to treat the idle timeout as a fatal failure. There are no idle timeout listeners. Failures reported to a failure listener are always fatal failures; see also this section about fatal versus transient failures. This means that it is not possible to read or write from a failure listener: the read returns a fatal failure chunk, and the write will immediately fail the write callback. Applications are always required to complete the Handler callback, as described here. In case of asynchronous failures, failure listeners are a good place to complete (typically by failing it) the Handler callback. Request.addCompletionListener(Consumer) allows you to add a completion listener, which is invoked at the very end of the request/response processing. This is equivalent to adding an HttpStream wrapper and overriding both HttpStream.succeeded() and HttpStream.failed(Throwable). Completion listeners are typically (but not only) used to recycle or dispose resources used during the request/response processing, or get a precise timing for when the request/response processing finishes, to be paired with Request.getBeginNanoTime(). Note that while failure listeners are invoked as soon as the failure happens, completion listeners are invoked only at the very end of the request/response processing: after the Callback passed to Handler.handle(Request, Response, Callback) has been completed, all container dispatched threads have returned, and all the response writes have been completed. In case of many completion listeners, they are invoked in the reverse order they have been added. The Response object can be accessed by web applications to set the HTTP response status code, the HTTP response headers and write the HTTP response content. The design of the Response APIs is similar to that of the Request APIs, described in this section. To use the Response APIs, you should look up the relevant methods in the following order: Response virtual methods. For example, Response.setStatus(int) to set the HTTP response status code. Request static methods. These are utility methods that provide more convenient access to response features. For example, adding an HTTP cookie could be done by adding a Set-Cookie response header, but it would be extremely error-prone. The utility method static Response.addCookie(Response, HttpCookie) is provided instead. Super class static methods. Since Response is-a Content.Sink, look also for static methods in Content.Sink that take a Content.Sink as a parameter, so that you can pass the Response object as a parameter. Below you can find a list of the most common Response features and how to access them. Refer to the Response javadocs for the complete list. Response status code The Response HTTP status code is accessed via Response.getStatus() and Response.setStatus(int). Response HTTP headers The Response HTTP headers are accessed via Response.getHeaders() and the HttpFields.Mutable APIs. The response headers are mutable until the response is committed, as defined in this section. Response cookies The Response cookies are accessed via static Response.addCookie(Response, HttpCookie), static Response.replaceCookie(Response, HttpCookie) and the HttpCookie APIs. Since cookies translate to HTTP headers, they can be added/replaces until the response is committed, as defined in this section. Since Response is-a Content.Sink, the section about writing to Content.Sink applies to Response as well. The static Content.Sink utility methods will allow you to write the response content as a string, or as an OutputStream, for example. The first call to Response.write(boolean, ByteBuffer, Callback) commits the response. Committing the response means that the response status code and response headers are sent to the other peer, and therefore cannot be modified anymore. Trying to modify them may result in an IllegalStateException to be thrown, as it is an application mistake to commit the response and then try to modify the headers. You can explicitly commit the response by performing an empty, non-last write: class FlushingHandler extends Handler.Abstract.NonBlocking { @Override public boolean handle(Request request, Response response, Callback callback) { // Set the response status code. response.setStatus(HttpStatus.OK_200); // Set the response headers. response.getHeaders().put(HttpHeader.CONTENT_TYPE, \"text/plain\"); // Commit the response with a \"flush\" write. Callback.Completable.with(flush -> response.write(false, null, flush)) // When the flush is finished, send the content and complete the callback. .whenComplete((ignored, failure) -> { if (failure == null) response.write(true, UTF_8.encode(\"HELLO\"), callback); else callback.failed(failure); }); // Return true because the callback will eventually be completed. return true; } } The Handler returns true, so the callback parameter must be completed. It is therefore mandatory to use CompletableFuture APIs that are invoked even when writing the response content failed, such as whenComplete(BiConsumer), handle(BiFunction), exceptionally(Function), etc. Failing to do so may result in the Handler callback parameter to never be completed, causing the request processing to hang forever. Jetty can perform important optimizations for the HTTP/1.1 protocol if the response content length is known before the response is committed: class ContentLengthHandler extends Handler.Abstract.NonBlocking { @Override public boolean handle(Request request, Response response, Callback callback) { // Set the response status code. response.setStatus(HttpStatus.OK_200); String content = \"\"\" { \"result\": 0, \"advice\": { \"message\": \"Jetty Rocks!\" } } \"\"\"; // Must count the bytes, not the characters! byte[] bytes = content.getBytes(UTF_8); long contentLength = bytes.length; // Set the response headers before the response is committed. HttpFields.Mutable responseHeaders = response.getHeaders(); // Set the content type. responseHeaders.put(HttpHeader.CONTENT_TYPE, \"application/json; charset=UTF-8\"); // Set the response content length. responseHeaders.put(HttpHeader.CONTENT_LENGTH, contentLength); // Commit the response. response.write(true, ByteBuffer.wrap(bytes), callback); // Return true because the callback will eventually be completed. return true; } } Setting the response content length is an optimization; Jetty will work well even without it. If you set the response content length, however, remember that it must specify the number of bytes, not the number of characters. The HTTP protocol (any version) allows applications to write interim responses. An interim response has a status code in the 1xx range (but not 101), and an application may write zero or more interim response before the final response. This is an example of writing an interim 100 Continue response: class Continue100Handler extends Handler.Wrapper { public Continue100Handler(Handler handler) { super(handler); } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { HttpFields requestHeaders = request.getHeaders(); if (requestHeaders.contains(HttpHeader.EXPECT, HttpHeaderValue.CONTINUE.asString())) { // Analyze the request and decide whether to receive the content. long contentLength = request.getLength(); if (contentLength > 0 && contentLength processing = response.writeInterim(HttpStatus.CONTINUE_100, HttpFields.EMPTY) (1) // Then read the request content into a ByteBuffer. .thenCompose(ignored -> Promise.Completable.with(p -> Content.Source.asByteBuffer(request, p))) // Then store the ByteBuffer somewhere. .thenCompose(byteBuffer -> store(byteBuffer)); // At the end of the processing, complete // the callback with the CompletableFuture, // a simple 200 response in case of success, // or a 500 response in case of failure. callback.completeWith(processing); (2) return true; } else { // The request content is too large, send an error. Response.writeError(request, response, callback, HttpStatus.PAYLOAD_TOO_LARGE_413); return true; } } else { return super.handle(request, response, callback); } } } 1 Using Response.writeInterim(...) to send the interim response. 2 The completion of the callback must take into account both success and failure. Note how writing an interim response is as asynchronous operation. As such you must perform subsequent operations using the CompletableFuture APIs, and remember to complete the Handler callback parameter both in case of success or in case of failure. This is an example of writing an interim 103 Early Hints response: class EarlyHints103Handler extends Handler.Wrapper { public EarlyHints103Handler(Handler handler) { super(handler); } @Override public boolean handle(Request request, Response response, Callback callback) throws Exception { String pathInContext = Request.getPathInContext(request); // Simple logic that assumes that every HTML // file has associated the same CSS stylesheet. if (pathInContext.endsWith(\".html\")) { // Tell the client that a Link is coming // sending a 103 Early Hints interim response. HttpFields.Mutable interimHeaders = HttpFields.build() .put(HttpHeader.LINK, \"; rel=preload; as=style\"); response.writeInterim(HttpStatus.EARLY_HINTS_103, interimHeaders) (1) .whenComplete((ignored, failure) -> (2) { if (failure == null) { try { // Delegate the handling to the child Handler. boolean handled = super.handle(request, response, callback); if (!handled) { // The child Handler did not produce a final response, do it here. Response.writeError(request, response, callback, HttpStatus.NOT_FOUND_404); } } catch (Throwable x) { callback.failed(x); } } else { callback.failed(failure); } }); // This Handler sent an interim response, so this Handler // (or its descendants) must produce a final response, so return true. return true; } else { // Not a request for an HTML page, delegate // the handling to the child Handler. return super.handle(request, response, callback); } } } 1 Using Response.writeInterim(...) to send the interim response. 2 The completion of the callback must take into account both success and failure. An interim response may or may not have its own HTTP headers (this depends on the interim response status code), and they are typically different from the final response HTTP headers. Some web applications (but not all of them) have the concept of a user, that is a way to identify a specific client that is interacting with the web application. The HTTP session is a feature offered by servers that allows web applications to maintain a temporary, per-user, storage for user-specific data. The storage can be accessed by the web application across multiple request/response interactions with the client. This makes the web application stateful, because a computation performed by a previous request may be stored in the HTTP session and used in subsequent requests without the need to perform again the computation. Since not all web applications need support for the HTTP session, Jetty offers this feature optionally. The Maven coordinates for the Jetty HTTP session support are: org.eclipse.jetty jetty-session 12.0.10-SNAPSHOT The HTTP session support is provided by the org.eclipse.jetty.session.SessionHandler, that must be set up in the Handler tree between a ContextHandler and your Handler implementation: class MyAppHandler extends Handler.Abstract.NonBlocking { @Override public boolean handle(Request request, Response response, Callback callback) { // Your web application implemented here. // You can access the HTTP session. Session session = request.getSession(false); return true; } } Server server = new Server(); Connector connector = new ServerConnector(server); server.addConnector(connector); // Create a ContextHandler with contextPath. ContextHandler contextHandler = new ContextHandler(\"/myApp\"); server.setHandler(contextHandler); // Create and link the SessionHandler. SessionHandler sessionHandler = new SessionHandler(); contextHandler.setHandler(sessionHandler); // Link your web application Handler. sessionHandler.setHandler(new MyAppHandler()); server.start(); The corresponding Handler tree structure looks like the following: Server └── ContextHandler /myApp └── SessionHandler └── MyAppHandler With the Handlers set up in this way, you can access the HTTP session from your MyAppHandler using Request.getSession(boolean), and then use the Session APIs. The support provided by Jetty for HTTP sessions is advanced and completely pluggable, providing features such as first-level and second-level caching, eviction, etc. You can configure the HTTP session support from a very simple local in-memory configuration, to a replicated (across nodes in a cluster), persistent (for example over file system, database or memcached) configuration for the most advanced use cases. The advanced configuration of Jetty’s HTTP session support is discussed in more details in this section. TODO Writing HTTP applications is typically simple, especially when using blocking APIs. However, there are subtle cases where it is worth clarifying what a server application should do to obtain the desired results when run by Jetty. The HTTP/1.1 RFC allows for 1xx informational responses to be sent before a real content response. Unfortunately the servlet specification does not provide a way for these to be sent, so Jetty has had to provide non-standard handling of these headers. The 100 Continue response should be sent by the server when a client sends a request with an Expect: 100-continue header, as the client will not send the body of the request until the 100 Continue response has been sent. The intent of this feature is to allow a server to inspect the headers and to tell the client to not send a request body that might be too large or insufficiently private or otherwise unable to be handled. Jetty achieves this by waiting until the input stream or reader is obtained by the filter/servlet, before sending the 100 Continue response. Thus a filter/servlet may inspect the headers of a request before getting the input stream and send an error response (or redirect etc.) rather than the 100 continues. class Continue100HttpServlet extends HttpServlet { @Override protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException { // Inspect the method and headers. boolean isPost = HttpMethod.POST.is(request.getMethod()); boolean expects100 = HttpHeaderValue.CONTINUE.is(request.getHeader(\"Expect\")); long contentLength = request.getContentLengthLong(); if (isPost && expects100) { if (contentLength > 1024 * 1024) { // Rejects uploads that are too large. response.sendError(HttpStatus.PAYLOAD_TOO_LARGE_413); } else { // Getting the request InputStream indicates that // the application wants to read the request content. // Jetty will send the 100 Continue response at this // point, and the client will send the request content. ServletInputStream input = request.getInputStream(); // Read and process the request input. } } else { // Process normal requests. } } } RFC 2518 defined the 102 Processing status code that can be sent: when the server has a reasonable expectation that the request will take significant time to complete. As guidance, if a method is taking longer than 20 seconds (a reasonable, but arbitrary value) to process the server SHOULD return a 102 Processing response. — RFC 2518 section 10.1 However, a later update of RFC 2518, RFC 4918, removed the 102 Processing status code for \"lack of implementation\". Jetty supports the 102 Processing status code. If a request is received with the Expect: 102-processing header, then a filter/servlet may send a 102 Processing response (without terminating further processing) by calling response.sendError(102).","title":"HTTP Server Libraries","component":"jetty","version":"12","name":"http","url":"/docs/jetty/12/programming-guide/server/http.html","titles":[{"text":"Request Processing","hash":"request-processing","id":1},{"text":"Request Processing Events","hash":"request-processing-events","id":2},{"text":"Request Logging","hash":"request-logging","id":3},{"text":"Request Customizers","hash":"request-customizers","id":4},{"text":"ForwardedRequestCustomizer","hash":"request-customizer-forwarded","id":5},{"text":"HostHeaderCustomizer","hash":"request-customizer-host","id":6},{"text":"ProxyCustomizer","hash":"request-customizer-proxy","id":7},{"text":"RewriteCustomizer","hash":"request-customizer-rewrite","id":8},{"text":"SecureRequestCustomizer","hash":"request-customizer-secure","id":9},{"text":"Server Connectors","hash":"connector","id":10},{"text":"Acceptors","hash":"connector-acceptors","id":11},{"text":"Selectors","hash":"connector-selectors","id":12},{"text":"Multiple Connectors","hash":"connector-multiple","id":13},{"text":"Configuring Protocols","hash":"connector-protocol","id":14},{"text":"Clear-Text HTTP/1.1","hash":"connector-protocol-http11","id":15},{"text":"Encrypted HTTP/1.1 (https)","hash":"connector-protocol-http11-tls","id":16},{"text":"Clear-Text HTTP/2","hash":"connector-protocol-http2","id":17},{"text":"Encrypted HTTP/2","hash":"connector-protocol-http2-tls","id":18},{"text":"HTTP/3","hash":"connector-protocol-http3","id":19},{"text":"Using Conscrypt as SSL/TLS Provider","hash":"connector-protocol-tls-conscrypt","id":20},{"text":"Jetty Behind a Load Balancer","hash":"connector-protocol-proxy-http11","id":21},{"text":"Server Handlers","hash":"handler","id":22},{"text":"Jetty Handlers","hash":"handler-use","id":23},{"text":"ContextHandler","hash":"handler-use-context","id":24},{"text":"ContextHandlerCollection","hash":"handler-use-context-collection","id":25},{"text":"ResourceHandler — Static Content","hash":"handler-use-resource","id":26},{"text":"GzipHandler","hash":"handler-use-gzip","id":27},{"text":"RewriteHandler","hash":"handler-use-rewrite","id":28},{"text":"SizeLimitHandler","hash":"handler-use-sizelimit","id":29},{"text":"StatisticsHandler","hash":"handler-use-statistics","id":30},{"text":"EventsHandler","hash":"handler-use-events","id":31},{"text":"QoSHandler","hash":"handler-use-qos","id":32},{"text":"SecuredRedirectHandler — Redirect from HTTP to HTTPS","hash":"handler-use-secured","id":33},{"text":"CrossOriginHandler","hash":"handler-use-cross-origin","id":34},{"text":"StateTrackingHandler","hash":"handler-use-state-tracking","id":35},{"text":"DefaultHandler","hash":"handler-use-default","id":36},{"text":"Servlet API Handlers","hash":"handler-use-servlet","id":37},{"text":"ServletContextHandler","hash":"handler-use-servlet-context","id":38},{"text":"WebAppContext","hash":"handler-use-webapp-context","id":39},{"text":"DefaultServlet — Static Content for Servlets","hash":"handler-use-default-servlet","id":40},{"text":"Implementing Handler","hash":"handler-impl","id":41},{"text":"Hello World Handler","hash":"handler-impl-hello","id":42},{"text":"Filtering Handler","hash":"handler-impl-filter","id":43},{"text":"Using the Request","hash":"handler-impl-request","id":44},{"text":"Reading the Request Content","hash":"handler-impl-request-content","id":45},{"text":"Request Listeners","hash":"handler-impl-request-listeners","id":46},{"text":"Using the Response","hash":"handler-impl-response","id":47},{"text":"Writing the Response Content","hash":"handler-impl-response-content","id":48},{"text":"Sending Interim Responses","hash":"handler-impl-response-interim","id":49},{"text":"HTTP Session Support","hash":"session","id":50},{"text":"Securing HTTP Server Applications","hash":"security","id":51},{"text":"Writing HTTP Server Applications","hash":"application","id":52},{"text":"Sending 1xx Responses","hash":"application-1xx","id":53},{"text":"100 Continue","hash":"application-100","id":54},{"text":"102 Processing","hash":"jetty-102-processing","id":55}]},"62":{"id":62,"text":"In the vast majority of cases, server applications should use the generic, high-level, HTTP server library that also provides HTTP/2 support via the HTTP/2 ConnectionFactorys as described in details here. The low-level HTTP/2 server library has been designed for those applications that need low-level access to HTTP/2 features such as sessions, streams and frames, and this is quite a rare use case. See also the correspondent HTTP/2 client library. The Maven artifact coordinates for the HTTP/2 client library are the following: org.eclipse.jetty.http2 jetty-http2-server 12.0.10-SNAPSHOT HTTP/2 is a multiplexed protocol: it allows multiple HTTP/2 requests to be sent on the same TCP connection, or session. Each request/response cycle is represented by a stream. Therefore, a single session manages multiple concurrent streams. A stream has typically a very short life compared to the session: a stream only exists for the duration of the request/response cycle and then disappears. The HTTP/2 protocol is flow controlled (see the specification). This means that a sender and a receiver maintain a flow control window that tracks the number of data bytes sent and received, respectively. When a sender sends data bytes, it reduces its flow control window. When a receiver receives data bytes, it also reduces its flow control window, and then passes the received data bytes to the application. The application consumes the data bytes and tells back the receiver that it has consumed the data bytes. The receiver then enlarges the flow control window, and the implementation arranges to send a message to the sender with the number of bytes consumed, so that the sender can enlarge its flow control window. A sender can send data bytes up to its whole flow control window, then it must stop sending. The sender may resume sending data bytes when it receives a message from the receiver that the data bytes sent previously have been consumed. This message enlarges the sender flow control window, which allows the sender to send more data bytes. HTTP/2 defines two flow control windows: one for each session, and one for each stream. Let’s see with an example how they interact, assuming that in this example the session flow control window is 120 bytes and the stream flow control window is 100 bytes. The sender opens a session, and then opens stream_1 on that session, and sends 80 data bytes. At this point the session flow control window is 40 bytes (120 - 80), and stream_1's flow control window is 20 bytes (100 - 80). The sender now opens stream_2 on the same session and sends 40 data bytes. At this point, the session flow control window is 0 bytes (40 - 40), while stream_2's flow control window is 60 (100 - 40). Since now the session flow control window is 0, the sender cannot send more data bytes, neither on stream_1 nor on stream_2, nor on other streams, despite all the streams having their stream flow control windows greater than 0. The receiver consumes stream_2's 40 data bytes and sends a message to the sender with this information. At this point, the session flow control window is 40 (0 + 40), stream_1's flow control window is still 20 and stream_2's flow control window is 100 (60 + 40). If the sender opens stream_3 and would like to send 50 data bytes, it would only be able to send 40 because that is the maximum allowed by the session flow control window at this point. It is therefore very important that applications notify the fact that they have consumed data bytes as soon as possible, so that the implementation (the receiver) can send a message to the sender (in the form of a WINDOW_UPDATE frame) with the information to enlarge the flow control window, therefore reducing the possibility that sender stalls due to the flow control windows being reduced to 0. How a server application should handle HTTP/2 flow control is discussed in details in this section. The low-level HTTP/2 support is provided by org.eclipse.jetty.http2.server.RawHTTP2ServerConnectionFactory and org.eclipse.jetty.http2.api.server.ServerSessionListener: // Create a Server instance. Server server = new Server(); ServerSessionListener sessionListener = new ServerSessionListener() {}; // Create a ServerConnector with RawHTTP2ServerConnectionFactory. RawHTTP2ServerConnectionFactory http2 = new RawHTTP2ServerConnectionFactory(sessionListener); // Configure RawHTTP2ServerConnectionFactory, for example: // Configure the max number of concurrent requests. http2.setMaxConcurrentStreams(128); // Enable support for CONNECT. http2.setConnectProtocolEnabled(true); // Create the ServerConnector. ServerConnector connector = new ServerConnector(server, http2); // Add the Connector to the Server server.addConnector(connector); // Start the Server so it starts accepting connections from clients. server.start(); Where server applications using the high-level server library deal with HTTP requests and responses in Handlers, server applications using the low-level HTTP/2 server library deal directly with HTTP/2 sessions, streams and frames in a ServerSessionListener implementation. The ServerSessionListener interface defines a number of methods that are invoked by the implementation upon the occurrence of HTTP/2 events, and that server applications can override to react to those events. Please refer to the ServerSessionListener javadocs for the complete list of events. The first event is the accept event and happens when a client opens a new TCP connection to the server and the server accepts the connection. This is the first occasion where server applications have access to the HTTP/2 Session object: ServerSessionListener sessionListener = new ServerSessionListener() { @Override public void onAccept(Session session) { SocketAddress remoteAddress = session.getRemoteSocketAddress(); System.getLogger(\"http2\").log(INFO, \"Connection from {0}\", remoteAddress); } }; After connecting to the server, a compliant HTTP/2 client must send the HTTP/2 client preface, and when the server receives it, it generates the preface event on the server. This is where server applications can customize the connection settings by returning a map of settings that the implementation will send to the client: ServerSessionListener sessionListener = new ServerSessionListener() { @Override public Map onPreface(Session session) { // Customize the settings, for example: Map settings = new HashMap<>(); // Tell the client that HTTP/2 push is disabled. settings.put(SettingsFrame.ENABLE_PUSH, 0); return settings; } }; Receiving an HTTP request from the client, and sending a response, creates a stream that encapsulates the exchange of HTTP/2 frames that compose the request and the response. An HTTP request is made of a HEADERS frame, that carries the request method, the request URI and the request headers, and optional DATA frames that carry the request content. Receiving the HEADERS frame opens the Stream: ServerSessionListener sessionListener = new ServerSessionListener() { @Override public Stream.Listener onNewStream(Stream stream, HeadersFrame frame) { // This is the \"new stream\" event, so it's guaranteed to be a request. MetaData.Request request = (MetaData.Request)frame.getMetaData(); // Return a Stream.Listener to handle the request events, // for example request content events or a request reset. return new Stream.Listener() { // Override callback methods for events you are interested in. }; } }; Server applications should return a Stream.Listener implementation from onNewStream(...) to be notified of events generated by the client, such as DATA frames carrying request content, or a RST_STREAM frame indicating that the client wants to reset the request, or an idle timeout event indicating that the client was supposed to send more frames but it did not. The example below shows how to receive request content: ServerSessionListener sessionListener = new ServerSessionListener() { @Override public Stream.Listener onNewStream(Stream stream, HeadersFrame frame) { MetaData.Request request = (MetaData.Request)frame.getMetaData(); // Demand for request data content. stream.demand(); // Return a Stream.Listener to handle the request events. return new Stream.Listener() { @Override public void onDataAvailable(Stream stream) { Stream.Data data = stream.readData(); if (data == null) { stream.demand(); return; } // Get the content buffer. ByteBuffer buffer = data.frame().getByteBuffer(); // Consume the buffer, here - as an example - just log it. System.getLogger(\"http2\").log(INFO, \"Consuming buffer {0}\", buffer); // Tell the implementation that the buffer has been consumed. data.release(); if (!data.frame().isEndStream()) { // Demand more DATA frames when they are available. stream.demand(); } } }; } }; When onDataAvailable(Stream stream) is invoked, the demand is implicitly cancelled. Just returning from the onDataAvailable(Stream stream) method does not implicitly demand for more DATA frames. Applications must call Stream.demand() to explicitly require that onDataAvailable(Stream stream) is invoked again when more DATA frames are available. Applications that consume the content buffer within onDataAvailable(Stream stream) (for example, writing it to a file, or copying the bytes to another storage) should call Data.release() as soon as they have consumed the content buffer. This allows the implementation to reuse the buffer, reducing the memory requirements needed to handle the content buffers. Alternatively, an application may store away the Data object to consume the buffer bytes later, or pass the Data object to another asynchronous API (this is typical in proxy applications). The call to Stream.readData() tells the implementation to enlarge the stream and session flow control windows so that the sender will be able to send more DATA frames without stalling. Applications can unwrap the Data object into some other object that may be used later, provided that the release semantic is maintained: record Chunk(ByteBuffer byteBuffer, Callback callback) { } // A queue that consumers poll to consume content asynchronously. Queue dataQueue = new ConcurrentLinkedQueue<>(); // Implementation of Stream.Listener.onDataAvailable(Stream stream) // in case of unwrapping of the Data object for asynchronous content // consumption and demand. Stream.Listener listener = new Stream.Listener() { @Override public void onDataAvailable(Stream stream) { Stream.Data data = stream.readData(); if (data == null) { stream.demand(); return; } // Get the content buffer. ByteBuffer byteBuffer = data.frame().getByteBuffer(); // Unwrap the Data object, converting it to a Chunk. // The Data.release() semantic is maintained in the completion of the Callback. dataQueue.offer(new Chunk(byteBuffer, Callback.from(() -> { // When the buffer has been consumed, then: // A) release the Data object. data.release(); // B) possibly demand more DATA frames. if (!data.frame().isEndStream()) stream.demand(); }))); // Do not demand more data here, to avoid to overflow the queue. } }; Applications that implement onDataAvailable(Stream stream) must remember to call Stream.demand() eventually. If they do not call Stream.demand(), the implementation will not invoke onDataAvailable(Stream stream) to deliver more DATA frames and the application will stall threadlessly until an idle timeout fires to close the stream or the session. After receiving an HTTP request, a server application must send an HTTP response. An HTTP response is typically composed of a HEADERS frame containing the HTTP status code and the response headers, and optionally one or more DATA frames containing the response content bytes. The HTTP/2 protocol also supports response trailers (that is, headers that are sent after the response content) that also are sent using a HEADERS frame. A server application can send a response in this way: ServerSessionListener sessionListener = new ServerSessionListener() { @Override public Stream.Listener onNewStream(Stream stream, HeadersFrame frame) { // Send a response after reading the request. MetaData.Request request = (MetaData.Request)frame.getMetaData(); if (frame.isEndStream()) { respond(stream, request); return null; } else { // Demand for request data. stream.demand(); // Return a listener to handle the request events. return new Stream.Listener() { @Override public void onDataAvailable(Stream stream) { Stream.Data data = stream.readData(); if (data == null) { stream.demand(); return; } // Consume the request content. data.release(); if (data.frame().isEndStream()) respond(stream, request); else stream.demand(); } }; } } private void respond(Stream stream, MetaData.Request request) { // Prepare the response HEADERS frame. // The response HTTP status and HTTP headers. MetaData.Response response = new MetaData.Response(HttpStatus.OK_200, null, HttpVersion.HTTP_2, HttpFields.EMPTY); if (HttpMethod.GET.is(request.getMethod())) { // The response content. ByteBuffer resourceBytes = getResourceBytes(request); // Send the HEADERS frame with the response status and headers, // and a DATA frame with the response content bytes. stream.headers(new HeadersFrame(stream.getId(), response, null, false)) .thenCompose(s -> s.data(new DataFrame(s.getId(), resourceBytes, true))); } else { // Send just the HEADERS frame with the response status and headers. stream.headers(new HeadersFrame(stream.getId(), response, null, true)); } } }; A server application may decide that it does not want to accept the request. For example, it may throttle the client because it sent too many requests in a time window, or the request is invalid (and does not deserve a proper HTTP response), etc. A request can be reset in this way: ServerSessionListener sessionListener = new ServerSessionListener() { @Override public Stream.Listener onNewStream(Stream stream, HeadersFrame frame) { float requestRate = calculateRequestRate(); if (requestRate > maxRequestRate) { stream.reset(new ResetFrame(stream.getId(), ErrorCode.REFUSED_STREAM_ERROR.code), Callback.NOOP); return null; } else { // The request is accepted. MetaData.Request request = (MetaData.Request)frame.getMetaData(); // Return a Stream.Listener to handle the request events. return new Stream.Listener() { // Override callback methods for events you are interested in. }; } } }; A server application may push secondary resources related to a primary resource. A client may inform the server that it does not accept pushed resources(see this section of the specification) via a SETTINGS frame. Server applications must track SETTINGS frames and verify whether the client supports HTTP/2 push, and only push if the client supports it: // The favicon bytes. ByteBuffer faviconBuffer = BufferUtil.toBuffer(ResourceFactory.root().newResource(\"/path/to/favicon.ico\"), true); ServerSessionListener sessionListener = new ServerSessionListener() { // By default, push is enabled. private boolean pushEnabled = true; @Override public void onSettings(Session session, SettingsFrame frame) { // Check whether the client sent an ENABLE_PUSH setting. Map settings = frame.getSettings(); Integer enablePush = settings.get(SettingsFrame.ENABLE_PUSH); if (enablePush != null) pushEnabled = enablePush == 1; } @Override public Stream.Listener onNewStream(Stream stream, HeadersFrame frame) { MetaData.Request request = (MetaData.Request)frame.getMetaData(); if (pushEnabled && request.getHttpURI().toString().endsWith(\"/index.html\")) { // Push the favicon. HttpURI pushedURI = HttpURI.build(request.getHttpURI()).path(\"/favicon.ico\"); MetaData.Request pushedRequest = new MetaData.Request(\"GET\", pushedURI, HttpVersion.HTTP_2, HttpFields.EMPTY); PushPromiseFrame promiseFrame = new PushPromiseFrame(stream.getId(), 0, pushedRequest); stream.push(promiseFrame, null) .thenCompose(pushedStream -> { // Send the favicon \"response\". MetaData.Response pushedResponse = new MetaData.Response(HttpStatus.OK_200, null, HttpVersion.HTTP_2, HttpFields.EMPTY); return pushedStream.headers(new HeadersFrame(pushedStream.getId(), pushedResponse, null, false)) .thenCompose(pushed -> pushed.data(new DataFrame(pushed.getId(), faviconBuffer.slice(), true))); }); } // Return a Stream.Listener to handle the request events. return new Stream.Listener() { // Override callback methods for events you are interested in. }; } };","title":"HTTP/2 Server Library","component":"jetty","version":"12","name":"http2","url":"/docs/jetty/12/programming-guide/server/http2.html","titles":[{"text":"Introduction","hash":"intro","id":1},{"text":"HTTP/2 Flow Control","hash":"flow-control","id":2},{"text":"Server Setup","hash":"setup","id":3},{"text":"Receiving a Request","hash":"request","id":4},{"text":"Sending a Response","hash":"response","id":5},{"text":"Resetting a Request","hash":"reset","id":6},{"text":"HTTP/2 Push of Resources","hash":"push","id":7}]},"63":{"id":63,"text":"In the vast majority of cases, server applications should use the generic, high-level, HTTP server library that also provides HTTP/3 support via the HTTP/3 connector and ConnectionFactorys as described in details here. The low-level HTTP/3 server library has been designed for those applications that need low-level access to HTTP/3 features such as sessions, streams and frames, and this is quite a rare use case. See also the correspondent HTTP/3 client library. The Maven artifact coordinates for the HTTP/3 client library are the following: org.eclipse.jetty.http3 jetty-http3-server 12.0.10-SNAPSHOT HTTP/3 is a multiplexed protocol because it relies on the multiplexing capabilities of QUIC, the protocol based on UDP that transports HTTP/3 frames. Thanks to multiplexing, multiple HTTP/3 requests are sent on the same QUIC connection, or session. Each request/response cycle is represented by a stream. Therefore, a single session manages multiple concurrent streams. A stream has typically a very short life compared to the session: a stream only exists for the duration of the request/response cycle and then disappears. The low-level HTTP/3 support is provided by org.eclipse.jetty.http3.server.RawHTTP3ServerConnectionFactory and org.eclipse.jetty.http3.api.Session.Server.Listener: // Create a Server instance. Server server = new Server(); // HTTP/3 is always secure, so it always need a SslContextFactory. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore\"); sslContextFactory.setKeyStorePassword(\"secret\"); // The listener for session events. Session.Server.Listener sessionListener = new Session.Server.Listener() {}; ServerQuicConfiguration quicConfiguration = new ServerQuicConfiguration(sslContextFactory, Path.of(\"/path/to/pem/dir\")); // Configure the max number of requests per QUIC connection. quicConfiguration.setMaxBidirectionalRemoteStreams(1024); // Create and configure the RawHTTP3ServerConnectionFactory. RawHTTP3ServerConnectionFactory http3 = new RawHTTP3ServerConnectionFactory(quicConfiguration, sessionListener); http3.getHTTP3Configuration().setStreamIdleTimeout(15000); // Create and configure the QuicServerConnector. QuicServerConnector connector = new QuicServerConnector(server, quicConfiguration, http3); // Add the Connector to the Server. server.addConnector(connector); // Start the Server so it starts accepting connections from clients. server.start(); Where server applications using the high-level server library deal with HTTP requests and responses in Handlers, server applications using the low-level HTTP/3 server library deal directly with HTTP/3 sessions, streams and frames in a Session.Server.Listener implementation. The Session.Server.Listener interface defines a number of methods that are invoked by the implementation upon the occurrence of HTTP/3 events, and that server applications can override to react to those events. Please refer to the Session.Server.Listener javadocs for the complete list of events. The first event is the accept event and happens when a client opens a new QUIC connection to the server and the server accepts the connection. This is the first occasion where server applications have access to the HTTP/3 Session object: Session.Server.Listener sessionListener = new Session.Server.Listener() { @Override public void onAccept(Session session) { SocketAddress remoteAddress = session.getRemoteSocketAddress(); System.getLogger(\"http3\").log(INFO, \"Connection from {0}\", remoteAddress); } }; After the QUIC connection has been established, both client and server send an HTTP/3 SETTINGS frame to exchange their HTTP/3 configuration. This generates the preface event, where applications can customize the HTTP/3 settings by returning a map of settings that the implementation will send to the other peer: Session.Server.Listener sessionListener = new Session.Server.Listener() { @Override public Map onPreface(Session session) { Map settings = new HashMap<>(); // Customize the settings return settings; } }; Receiving an HTTP request from the client, and sending a response, creates a stream that encapsulates the exchange of HTTP/3 frames that compose the request and the response. An HTTP request is made of a HEADERS frame, that carries the request method, the request URI and the request headers, and optional DATA frames that carry the request content. Receiving the HEADERS frame opens the Stream: Session.Server.Listener sessionListener = new Session.Server.Listener() { @Override public Stream.Server.Listener onRequest(Stream.Server stream, HeadersFrame frame) { MetaData.Request request = (MetaData.Request)frame.getMetaData(); // Return a Stream.Server.Listener to handle the request events, // for example request content events or a request reset. return new Stream.Server.Listener() {}; } }; Server applications should return a Stream.Server.Listener implementation from onRequest(…​) to be notified of events generated by the client, such as DATA frames carrying request content, or a reset event indicating that the client wants to reset the request, or an idle timeout event indicating that the client was supposed to send more frames but it did not. The example below shows how to receive request content: Session.Server.Listener sessionListener = new Session.Server.Listener() { @Override public Stream.Server.Listener onRequest(Stream.Server stream, HeadersFrame frame) { MetaData.Request request = (MetaData.Request)frame.getMetaData(); // Demand to be called back when data is available. stream.demand(); // Return a Stream.Server.Listener to handle the request content. return new Stream.Server.Listener() { @Override public void onDataAvailable(Stream.Server stream) { // Read a chunk of the request content. Stream.Data data = stream.readData(); if (data == null) { // No data available now, demand to be called back. stream.demand(); } else { // Get the content buffer. ByteBuffer buffer = data.getByteBuffer(); // Consume the buffer, here - as an example - just log it. System.getLogger(\"http3\").log(INFO, \"Consuming buffer {0}\", buffer); // Tell the implementation that the buffer has been consumed. data.release(); if (!data.isLast()) { // Demand to be called back. stream.demand(); } } } }; } }; After receiving an HTTP request, a server application must send an HTTP response. An HTTP response is typically composed of a HEADERS frame containing the HTTP status code and the response headers, and optionally one or more DATA frames containing the response content bytes. The HTTP/3 protocol also supports response trailers (that is, headers that are sent after the response content) that also are sent using a HEADERS frame. A server application can send a response in this way: Session.Server.Listener sessionListener = new Session.Server.Listener() { @Override public Stream.Server.Listener onRequest(Stream.Server stream, HeadersFrame frame) { // Send a response after reading the request. MetaData.Request request = (MetaData.Request)frame.getMetaData(); if (frame.isLast()) { respond(stream, request); return null; } else { // Demand to be called back when data is available. stream.demand(); return new Stream.Server.Listener() { @Override public void onDataAvailable(Stream.Server stream) { Stream.Data data = stream.readData(); if (data == null) { stream.demand(); } else { // Consume the request content. data.release(); if (data.isLast()) respond(stream, request); else stream.demand(); } } }; } } private void respond(Stream.Server stream, MetaData.Request request) { // Prepare the response HEADERS frame. // The response HTTP status and HTTP headers. MetaData.Response response = new MetaData.Response(HttpStatus.OK_200, null, HttpVersion.HTTP_3, HttpFields.EMPTY); if (HttpMethod.GET.is(request.getMethod())) { // The response content. ByteBuffer resourceBytes = getResourceBytes(request); // Send the HEADERS frame with the response status and headers, // and a DATA frame with the response content bytes. stream.respond(new HeadersFrame(response, false)) .thenCompose(s -> s.data(new DataFrame(resourceBytes, true))); } else { // Send just the HEADERS frame with the response status and headers. stream.respond(new HeadersFrame(response, true)); } } }; A server application may decide that it does not want to accept the request. For example, it may throttle the client because it sent too many requests in a time window, or the request is invalid (and does not deserve a proper HTTP response), etc. A request can be reset in this way: Session.Server.Listener sessionListener = new Session.Server.Listener() { @Override public Stream.Server.Listener onRequest(Stream.Server stream, HeadersFrame frame) { float requestRate = calculateRequestRate(); if (requestRate > maxRequestRate) { stream.reset(HTTP3ErrorCode.REQUEST_REJECTED_ERROR.code(), new RejectedExecutionException()); return null; } else { // The request is accepted. MetaData.Request request = (MetaData.Request)frame.getMetaData(); // Return a Stream.Listener to handle the request events. return new Stream.Server.Listener() {}; } } };","title":"HTTP/3 Server Library","component":"jetty","version":"12","name":"http3","url":"/docs/jetty/12/programming-guide/server/http3.html","titles":[{"text":"Introduction","hash":"intro","id":1},{"text":"Server Setup","hash":"setup","id":2},{"text":"Receiving a Request","hash":"request","id":3},{"text":"Sending a Response","hash":"response","id":4},{"text":"Resetting a Request","hash":"reset","id":5}]},"64":{"id":64,"text":"The Eclipse Jetty Project provides server-side libraries that allow you to configure and start programmatically an HTTP or WebSocket server from a main class, or embed it in your existing application. A typical example is a HTTP server that needs to expose a REST endpoint. Another example is a proxy application that receives HTTP requests, processes them, and then forwards them to third party services, for example using the Jetty client libraries. While historically Jetty is an HTTP server, it is possible to use the Jetty server-side libraries to write a generic network server that interprets any network protocol (not only HTTP). If you are interested in the low-level details of how the Eclipse Jetty server libraries work, or are interested in writing a custom protocol, look at the Server I/O Architecture. The Jetty server-side libraries provide: HTTP high-level support for HTTP/1.0, HTTP/1.1, HTTP/2, clear-text or encrypted, HTTP/3, for applications that want to embed Jetty as a generic HTTP server or proxy (no matter the HTTP version), via the HTTP libraries HTTP/2 low-level support, for applications that want to explicitly handle low-level HTTP/2 sessions, streams and frames, via the HTTP/2 libraries HTTP/3 low-level support, for applications that want to explicitly handle low-level HTTP/3 sessions, streams and frames, via the HTTP/3 libraries WebSocket support, for applications that want to embed a WebSocket server, via the WebSocket libraries FCGI support, to delegate requests to PHP, Python, Ruby or similar scripting languages.","title":"Server Libraries","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/programming-guide/server/index.html","titles":[]},"65":{"id":65,"text":"The Jetty server libraries provide the basic components and APIs to implement a network server. They build on the common Jetty I/O Architecture and provide server specific concepts. The Jetty server libraries provide I/O support for TCP/IP sockets (for both IPv4 and IPv6) and, when using Java 16 or later, for Unix-Domain sockets. Support for Unix-Domain sockets is interesting when Jetty is deployed behind a proxy or a load-balancer: it is possible to configure the proxy or load balancer to communicate with Jetty via Unix-Domain sockets, rather than via the loopback network interface. The central I/O server-side component are org.eclipse.jetty.server.ServerConnector, that handles the TCP/IP socket traffic, and org.eclipse.jetty.unixdomain.server.UnixDomainServerConnector, that handles the Unix-Domain socket traffic. ServerConnector and UnixDomainServerConnector are very similar, and while in the following sections ServerConnector is used, the same concepts apply to UnixDomainServerConnector, unless otherwise noted. A ServerConnector manages a list of ConnectionFactorys, that indicate what protocols the connector is able to speak. Recall from the Connection section of the Jetty I/O architecture that Connection instances are responsible for parsing bytes read from a socket and generating bytes to write to that socket. On the server-side, a ConnectionFactory creates Connection instances that know how to parse and generate bytes for the specific protocol they support — it can be either HTTP/1.1, or TLS, or FastCGI, or the PROXY protocol. For example, this is how clear-text HTTP/1.1 is configured for TCP/IP sockets: // Create the HTTP/1.1 ConnectionFactory. HttpConnectionFactory http = new HttpConnectionFactory(); Server server = new Server(); // Create the connector with the ConnectionFactory. ServerConnector connector = new ServerConnector(server, http); connector.setPort(8080); server.addConnector(connector); server.start(); With this configuration, the ServerConnector will listen on port 8080. Similarly, this is how clear-text HTTP/1.1 is configured for Unix-Domain sockets: // Create the HTTP/1.1 ConnectionFactory. HttpConnectionFactory http = new HttpConnectionFactory(); Server server = new Server(); // Create the connector with the ConnectionFactory. UnixDomainServerConnector connector = new UnixDomainServerConnector(server, http); connector.setUnixDomainPath(Path.of(\"/tmp/jetty.sock\")); server.addConnector(connector); server.start(); With this configuration, the UnixDomainServerConnector will listen on file /tmp/jetty.sock. ServerConnector and UnixDomainServerConnector only differ by how they are configured — for ServerConnector you specify the IP port it listens to, for UnixDomainServerConnector you specify the Unix-Domain path it listens to. Both configure ConnectionFactorys in exactly the same way. When a new socket connection is established, ServerConnector delegates to the ConnectionFactory the creation of the Connection instance for that socket connection, that is linked to the corresponding EndPoint: For every socket connection there will be an EndPoint + Connection pair. A ConnectionFactory may wrap another ConnectionFactory; for example, the TLS protocol provides encryption for any other protocol. Therefore, to support encrypted HTTP/1.1 (also known as https), you need to configure the ServerConnector with two ConnectionFactorys — one for the TLS protocol and one for the HTTP/1.1 protocol, like in the example below: // Create the HTTP/1.1 ConnectionFactory. HttpConnectionFactory http = new HttpConnectionFactory(); // Create and configure the TLS context factory. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore.p12\"); sslContextFactory.setKeyStorePassword(\"secret\"); // Create the TLS ConnectionFactory, // setting HTTP/1.1 as the wrapped protocol. SslConnectionFactory tls = new SslConnectionFactory(sslContextFactory, http.getProtocol()); Server server = new Server(); // Create the connector with both ConnectionFactories. ServerConnector connector = new ServerConnector(server, tls, http); connector.setPort(8443); server.addConnector(connector); server.start(); With this configuration, the ServerConnector will listen on port 8443. When a new socket connection is established, the first ConnectionFactory configured in ServerConnector is invoked to create a Connection. In the example above, SslConnectionFactory creates a SslConnection and then asks to its wrapped ConnectionFactory (in the example, HttpConnectionFactory) to create the wrapped Connection (an HttpConnection) and will then link the two Connections together, in this way: Bytes read by the SocketChannelEndPoint will be interpreted as TLS bytes by the SslConnection, then decrypted and made available to the SslEndPoint (a component part of SslConnection), which will then provide them to HttpConnection. The application writes bytes through the HttpConnection to the SslEndPoint, which will encrypt them through the SslConnection and write the encrypted bytes to the SocketChannelEndPoint. Typically, a network port is associated with a specific protocol. For example, port 80 is associated with clear-text HTTP, while port 443 is associated with encrypted HTTP (that is, the TLS protocol wrapping the HTTP protocol, also known as https). In certain cases, applications need to listen to the same port for two or more protocols, or for different but incompatible versions of the same protocol, which can only be distinguished by reading the initial bytes and figuring out to what protocol they belong to. The Jetty server libraries support this case by placing a DetectorConnectionFactory in front of other ConnectionFactorys. DetectorConnectionFactory accepts a list of ConnectionFactorys that implement ConnectionFactory.Detecting, which will be called to see if one of them recognizes the initial bytes. In the example below you can see how to support both clear-text and encrypted HTTP/1.1 (i.e. both http and https) on the same network port: // Create the HTTP/1.1 ConnectionFactory. HttpConnectionFactory http = new HttpConnectionFactory(); // Create and configure the TLS context factory. SslContextFactory.Server sslContextFactory = new SslContextFactory.Server(); sslContextFactory.setKeyStorePath(\"/path/to/keystore.p12\"); sslContextFactory.setKeyStorePassword(\"secret\"); // Create the TLS ConnectionFactory, // setting HTTP/1.1 as the wrapped protocol. SslConnectionFactory tls = new SslConnectionFactory(sslContextFactory, http.getProtocol()); Server server = new Server(); // Create the detector ConnectionFactory to // detect whether the initial bytes are TLS. DetectorConnectionFactory tlsDetector = new DetectorConnectionFactory(tls); (1) // Create the connector with both ConnectionFactories. ServerConnector connector = new ServerConnector(server, tlsDetector, http); (2) connector.setPort(8181); server.addConnector(connector); server.start(); 1 Creates the DetectorConnectionFactory with the SslConnectionFactory as the only detecting ConnectionFactory. With this configuration, the detector will delegate to SslConnectionFactory to recognize the initial bytes, which will detect whether the bytes are TLS protocol bytes. 2 Creates the ServerConnector with DetectorConnectionFactory as the first ConnectionFactory, and HttpConnectionFactory as the next ConnectionFactory to invoke if the detection fails. In the example above ServerConnector will listen on port 8181. When a new socket connection is established, DetectorConnectionFactory is invoked to create a Connection, because it is the first ConnectionFactory specified in the ServerConnector list. DetectorConnectionFactory reads the initial bytes and asks to its detecting ConnectionFactorys if they recognize the bytes. In the example above, the detecting ConnectionFactory is SslConnectionFactory which will therefore detect whether the initial bytes are TLS bytes. If one of the detecting ConnectionFactorys recognizes the bytes, it creates a Connection; otherwise DetectorConnectionFactory will try the next ConnectionFactory after itself in the ServerConnector list. In the example above, the next ConnectionFactory after DetectorConnectionFactory is HttpConnectionFactory. The final result is that when new socket connection is established, the initial bytes are examined: if they are TLS bytes, a SslConnectionFactory will create a SslConnection that wraps an HttpConnection as explained here, therefore supporting https; otherwise they are not TLS bytes and an HttpConnection is created, therefore supporting http. This section explains how to use the Jetty server-side libraries to write a generic network server able to parse and generate any protocol.. Let’s suppose that we want to write a custom protocol that is based on JSON but has the same semantic as HTTP; let’s call this custom protocol JSONHTTP, so that a request would look like this: { \"type\": \"request\", \"method\": \"GET\", \"version\": \"HTTP/1.1\", \"uri\": \"http://localhost/path\", \"fields\": { \"content-type\": \"text/plain;charset=ASCII\" }, \"content\": \"HELLO\" } In order to implement this custom protocol, we need to: implement a JSONHTTPConnectionFactory implement a JSONHTTPConnection parse bytes and generate bytes in the JSONHTTP format design an easy to use API that applications use to process requests and respond First, the JSONHTTPConnectionFactory: public class JSONHTTPConnectionFactory extends AbstractConnectionFactory { public JSONHTTPConnectionFactory() { super(\"JSONHTTP\"); } @Override public Connection newConnection(Connector connector, EndPoint endPoint) { JSONHTTPConnection connection = new JSONHTTPConnection(endPoint, connector.getExecutor()); // Call configure() to apply configurations common to all connections. return configure(connection, connector, endPoint); } } Note how JSONHTTPConnectionFactory extends AbstractConnectionFactory to inherit facilities common to all ConnectionFactory implementations. Second, the JSONHTTPConnection. Recall from the echo Connection example that you need to override onOpen() to call fillInterested() so that the Jetty I/O system will notify your Connection implementation when there are bytes to read by calling onFillable(). Furthermore, because the Jetty libraries are non-blocking and asynchronous, you need to use IteratingCallback to implement onFillable(): public class JSONHTTPConnection extends AbstractConnection { // The asynchronous JSON parser. private final AsyncJSON parser = new AsyncJSON.Factory().newAsyncJSON(); private final IteratingCallback callback = new JSONHTTPIteratingCallback(); public JSONHTTPConnection(EndPoint endPoint, Executor executor) { super(endPoint, executor); } @Override public void onOpen() { super.onOpen(); // Declare interest in being called back when // there are bytes to read from the network. fillInterested(); } @Override public void onFillable() { callback.iterate(); } private class JSONHTTPIteratingCallback extends IteratingCallback { private ByteBuffer buffer; @Override protected Action process() throws Throwable { if (buffer == null) buffer = BufferUtil.allocate(getInputBufferSize(), true); while (true) { int filled = getEndPoint().fill(buffer); if (filled > 0) { boolean parsed = parser.parse(buffer); if (parsed) { Map request = parser.complete(); // Allow applications to process the request. invokeApplication(request, this); // Signal that the iteration should resume when // the application completed the request processing. return Action.SCHEDULED; } else { // Did not receive enough JSON bytes, // loop around to try to read more. } } else if (filled == 0) { // We don't need the buffer anymore, so // don't keep it around while we are idle. buffer = null; // No more bytes to read, declare // again interest for fill events. fillInterested(); // Signal that the iteration is now IDLE. return Action.IDLE; } else { // The other peer closed the connection, // the iteration completed successfully. return Action.SUCCEEDED; } } } @Override protected void onCompleteSuccess() { getEndPoint().close(); } @Override protected void onCompleteFailure(Throwable cause) { getEndPoint().close(cause); } } } Again, note how JSONHTTPConnection extends AbstractConnection to inherit facilities that you would otherwise need to re-implement from scratch. When JSONHTTPConnection receives a full JSON object it calls invokeApplication(…​) to allow the application to process the incoming request and produce a response. At this point you need to design a non-blocking asynchronous API that takes a Callback parameter so that applications can signal to the implementation when the request processing is complete (either successfully or with a failure). A simple example of this API design could be the following: Wrap the JSON Map into a JSONHTTPRequest parameter so that applications may use more specific HTTP APIs such as JSONHTTPRequest.getMethod() rather than a generic Map.get(\"method\") Provide an equivalent JSONHTTPResponse parameter so that applications may use more specific APIs such as JSONHTTPResponse.setStatus(int) rather than a generic Map.put(\"status\", 200) Provide a Callback (or a CompletableFuture) parameter so that applications may indicate when the request processing is complete This results in the following API: class JSONHTTPRequest { // Request APIs } class JSONHTTPResponse { // Response APIs } interface JSONHTTPService { void service(JSONHTTPRequest request, JSONHTTPResponse response, Callback callback); } The important part of this simple API example is the Callback parameter that makes the API non-blocking and asynchronous.","title":"Server I/O Architecture","component":"jetty","version":"12","name":"io-arch","url":"/docs/jetty/12/programming-guide/server/io-arch.html","titles":[{"text":"Creating Connections with ConnectionFactory","hash":"connection-factory","id":1},{"text":"Wrapping a ConnectionFactory","hash":"connection-factory-wrapping","id":2},{"text":"Choosing ConnectionFactory via Bytes Detection","hash":"connection-factory-detecting","id":3},{"text":"Writing a Custom ConnectionFactory","hash":"connection-factory-custom","id":4}]},"66":{"id":66,"text":"Sessions are a concept within the Servlet API which allow requests to store and retrieve information across the time a user spends in an application. Jetty session support has been architected to provide a core implementation that is independent of the Servlet specification. This allows programmers who use core Jetty - without the Servlet API - to still have classic Servlet session-like support for their Requests and Handlers. These core classes are adapted to each of the various Servlet specification environments to deliver classic HttpSessions for Servlets,`Filter``s, etc Full support for the session lifecycle is supported, in addition to L1 and L2 caching, and a number of pluggable options for persisting session data. Here are some of the most important concepts that will be referred to throughout the documentation: SessionIdManager responsible for allocation of unique session ids. HouseKeeper responsible for orchestrating the detection and removal of expired sessions. SessionManager responsible for managing the lifecycle of sessions. SessionHandler an implementation of SessionManager that adapts sessions to either the core or Servlet specification environment. SessionCache an L1 cache of in-use ManagedSession objects Session a session consisting of SessionData that can be associated with a Request ManagedSession a Session that supports caching and lifecycle management SessionData encapsulates the attributes and metadata associated with a Session SessionDataStore responsible for creating, persisting and reading SessionData CachingSessionDataStore an L2 cache of SessionData Diagrammatically, these concepts can be represented as: There is a maximum of one SessionIdManager per Server instance. Its purpose is to generate fresh, unique session ids and to coordinate the re-use of session ids amongst co-operating contexts. The SessionIdManager is agnostic with respect to the type of clustering technology chosen. Jetty provides a default implementation - the DefaultSessionIdManager - which should meet the needs of most users. A single instance of the DefaultSessionIdManager should be created and registered as a bean on the Server instance so that all SessionHandler's share the same instance. This is done by the Jetty session module, but can be done programmatically instead. As a fallback, when an individual SessionHandler starts up, if it does not find the SessionIdManager already present for the Server it will create and register a bean for it. That instance will be shared by the other SessionHandlers. The most important configuration parameter for the DefaultSessionIdManager is the workerName, which uniquely identifies the server in a cluster. If a workerName has not been explicitly set, then the value is derived as follows: node[JETTY_WORKER_NAME] where JETTY_WORKER_NAME is an environment variable whose value can be an integer or string. If the environment variable is not set, then it defaults to 0, yielding the default workerName of \"node0\". It is essential to change this default if you have more than one Server. Here is an example of explicitly setting up a DefaultSessionIdManager with a workerName of server3 in code: Server server = new Server(); DefaultSessionIdManager idMgr = new DefaultSessionIdManager(server); //you must set the workerName unless you set the env viable JETTY_WORKER_NAME idMgr.setWorkerName(\"server3\"); server.addBean(idMgr, true); The DefaultSessionIdManager creates a HouseKeeper, which periodically scans for, and eliminates, expired sessions (referred to as \"scavenging\"). The period of the scan is controlled by the setIntervalSec(int) method, defaulting to 600secs. Setting a negative or 0 value prevents scavenging occurring. The HouseKeeper semi-randomly adds 10% to the configured intervalSec. This is to help prevent sync-ing up of servers in a cluster that are all restarted at once, and slightly stagger their scavenge cycles to ensure any load on the persistent storage mechanism is spread out. Here is an example of creating and configuring a HouseKeeper for the DefaultSessionIdManager in code: Server server = new Server(); DefaultSessionIdManager idMgr = new DefaultSessionIdManager(server); idMgr.setWorkerName(\"server7\"); server.addBean(idMgr, true); HouseKeeper houseKeeper = new HouseKeeper(); houseKeeper.setSessionIdManager(idMgr); //set the frequency of scavenge cycles houseKeeper.setIntervalSec(600L); idMgr.setSessionHouseKeeper(houseKeeper); If the DefaultSessionIdManager does not meet your needs, you can extend it, or implement the SessionIdManager interface directly. When implementing a SessionIdManager pay particular attention to the following: the getWorkerName() method must return a name that is unique to the Server instance. The workerName becomes important in clustering scenarios because sessions can migrate from node to node: the workerName identifies which node was last managing a Session. the contract of the isIdInUse(String id) method is very specific: a session id may only be reused iff it is already in use by another context. This restriction is important to support cross-context dispatch. you should be very careful to ensure that the newSessionId(HttpServletRequest request, long created) method does not return duplicate or predictable session ids. A SessionHandler is a Handler that implements the SessionManager, and is thus responsible for the creation, maintenance and propagation of sessions. There are SessionHandlers for both the core and the various Servlet environments. Note that in the Servlet environments, each ServletContextHandler or WebAppContext has at most a single SessionHandler. Both core and Servlet environment SessionHandlers can be configured programmatically. Here are some of the most important methods that you may call to customize your session setup. Note that in Servlet environments, some of these methods also have analogous Servlet API methods and/or analogous web.xml declarations and also equivalent context init params. These alternatives are noted below. setCheckingRemoteSessionIdEncoding(boolean) [Default:false] This controls whether response urls will be encoded with the session id as a path parameter when the URL is destined for a remote node. Servlet environment alternatives: org.eclipse.jetty.session.CheckingRemoteSessionIdEncoding context init parameter setMaxInactiveInterval(int) [Default:-1] This is the amount of time in seconds after which an unused session may be scavenged. Servlet environment alternatives: element in web.xml (NOTE! this element is specified in minutes but this method uses seconds). ServletContext.setSessionTimeout(int) where the timeout is configured in minutes. setHttpOnly(boolean) [Default:false] If true, the session cookie will not be exposed to client-side scripting code. Servlet environment alternatives: SessionCookieConfig.setHttpOnly(boolean) element in web.xml setRefreshCookieAge(int) [Default:-1] Value in seconds that controls resetting the session cookie when SessionCookieConfig.setMaxAge(int) is non-zero. See also setting the max session cookie age with an init parameter. If the amount of time since the session cookie was last set exceeds this time, the session cookie is regenerated to keep the session cookie valid. setSameSite(HttpCookie.SameSite) [Default:null] The values are HttpCookie.SameSite.NONE, HttpCookie.SameSite.STRICT, HttpCookie.SameSite.LAX. setSecureRequestOnly(boolean) [Default:true] If true and the request is HTTPS, the set session cookie will be marked as secure, meaning the client will only send the session cookie to the server on subsequent requests over HTTPS. Servlet environment alternatives: SessionCookieConfig.setSecure(true), in which case the set session cookie will always be marked as secure, even if the request triggering the creation of the cookie was not over HTTPS. element in web.xml setSessionCookie(String) [Default:\"JSESSIONID\"] This is the name of the session cookie. Servlet environment alternatives: SessionCookieConfig.setName(String) element in web.xml org.eclipse.jetty.session.SessionCookie context init parameter. setSessionIdPathParameterName(String) [Default:\"jsessionid\"] This is the name of the path parameter used to transmit the session id on request URLs, and on encoded URLS in responses. Servlet environment alternatives: org.eclipse.jetty.session.SessionIdPathParameterName context init parameter setSessionTrackingModes(Set) [Default:{SessionTrackingMode.COOKIE, SessionTrackingMode.URL}] Servlet environment alternatives: ServletContext.setSessionTrackingModes) defining up to three s for the element in web.xml setUsingCookies(boolean) [Default:true] Determines whether the SessionHandler will look for session cookies on requests, and will set session cookies on responses. If false session ids must be transmitted as path params on URLs. setMaxAge(int) [Default:-1] This is the maximum number of seconds that the session cookie will be considered to be valid. By default, the cookie has no maximum validity time. See also refreshing the session cookie. Servlet environment alternatives: ServletContext.getSessionCookieConfig().setMaxAge(int) org.eclipse.jetty.session.MaxAge context init parameter setSessionDomain(String) [Default:null] This is the domain of the session cookie. Servlet environment alternatives: ServletContext.getSessionCookieConfig().setDomain(String) element in web.xml org.eclipse.jetty.session.SessionDomain context init parameter setSessionPath(String) [Default:null] This is used when creating a new session cookie. If nothing is configured, the context path is used instead, defaulting to /. Servlet environment alternatives: ServletContext.getSessionCookieConfig().setPath(String) element in web.xml org.eclipse.jetty.session.SessionPath context init parameter Some statistics about the sessions for a context can be obtained from the SessionHandler, either by calling the methods directly or via JMX: getSessionsCreated() This is the total number of sessions that have been created for this context since Jetty started. getSessionTimeMax() The longest period of time a session was valid in this context before being invalidated. getSessionTimeMean() The average period of time a session in this context was valid. getSessionTimeStdDev() The standard deviation of the session validity times for this context. getSessionTimeTotal() The total time that all sessions in this context have remained valid. There is one SessionCache per SessionManager, and thus one per context. Its purpose is to provide an L1 cache of ManagedSession objects. Having a working set of ManagedSession objects in memory allows multiple simultaneous requests for the same session (ie the same session id in the same context) to share the same ManagedSession object. A SessionCache uses a SessionDataStore to create, read, store, and delete the SessionData associated with the ManagedSession. There are two ways to create a SessionCache for a SessionManager: allow the SessionManager to create one lazily at startup. The SessionManager looks for a SessionCacheFactory bean on the Server to produce the SessionCache instance. It then looks for a SessionDataStoreFactory bean on the Server to produce a SessionDataStore instance to use with the SessionCache. If no SessionCacheFactory is present, it defaults to creating a DefaultSessionCache. If no SessionDataStoreFactory is present, it defaults to creating a NullSessionDataStore. pass a fully configured SessionCache instance to the SessionManager. You are responsible for configuring both the SessionCache instance and its SessionDataStore More on SessionDataStores later, this section concentrates on the SessionCache and SessionCacheFactory. The AbstractSessionCache provides most of the behaviour of SessionCaches. If you are implementing a custom SessionCache it is strongly recommended that you extend this class because it implements the numerous subtleties of the Servlet specification. Some of the important behaviours of SessionCaches are: eviction By default, ManagedSessions remain in a cache until they are expired or invalidated. If you have many or large sessions that are infrequently referenced you can use eviction to reduce the memory consumed by the cache. When a session is evicted, it is removed from the cache but it is not invalidated. If you have configured a SessionDataStore that persists or distributes the session in some way, it will continue to exist, and can be read back in when it needs to be referenced again. The eviction strategies are: NEVER_EVICT This is the default, sessions remain in the cache until expired or invalidated. EVICT_ON_SESSION_EXIT When the last simultaneous request for a session finishes, the session will be evicted from the cache. EVICT_ON_INACTIVITY If a session has not been referenced for a configurable number of seconds, then it will be evicted from the cache. saveOnInactiveEviction This controls whether a session will be persisted to the SessionDataStore if it is being evicted due to the EVICT_ON_INACTIVITY policy. Usually sessions are written to the SessionDataStore whenever the last simultaneous request exits the session. However, as SessionDataStores` can be configured to skip some writes, this option ensures that the session will be written out. saveOnCreate Usually a session will be written through to the configured SessionDataStore when the last request for it finishes. In the case of a freshly created session, this means that it will not be persisted until the request is fully finished. If your application uses context forwarding or including, the newly created session id will not be available in the subsequent contexts. You can enable this feature to ensure that a freshly created session is immediately persisted after creation: in this way the session id will be available for use in other contexts accessed during the same request. removeUnloadableSessions If a session becomes corrupted in the persistent store, it cannot be re-loaded into the SessionCache. This can cause noisy log output during scavenge cycles, when the same corrupted session fails to load over and over again. To prevent his, enable this feature and the SessionCache will ensure that if a session fails to be loaded, it will be deleted. invalidateOnShutdown Some applications want to ensure that all cached sessions are removed when the server shuts down. This option will ensure that all cached sessions are invalidated. The AbstractSessionCache does not implement this behaviour, a subclass must implement the SessionCache.shutdown() method. flushOnResponseCommit This forces a \"dirty\" session to be written to the SessionDataStore just before a response is returned to the client, rather than waiting until the request is finished. A \"dirty\" session is one whose attributes have changed, or it has been freshly created. Using this option ensures that all subsequent requests - either to the same or a different node - will see the latest changes to the session. Jetty provides two SessionCache implementations: the DefaultSessionCache and the NullSessionCache. The DefaultSessionCache retains ManagedSession objects in memory in a ConcurrentHashMap. It is suitable for non-clustered and clustered deployments. For clustered deployments, a sticky load balancer is strongly recommended, otherwise you risk indeterminate session state as the session bounces around multiple nodes. It implements the SessionCache.shutdown() method. It also provides some statistics on sessions, which are convenient to access either directly in code or remotely via JMX: current sessions The DefaultSessionCache.getSessionsCurrent() method reports the number of sessions in the cache at the time of the method call. max sessions The DefaultSessionCache.getSessionsMax() method reports the highest number of sessions in the cache at the time of the method call. total sessions The DefaultSessionCache.getSessionsTotal() method reports the cumulative total of the number of sessions in the cache at the time of the method call. If you create a DefaultSessionFactory and register it as a Server bean, a SessionManger will be able to lazily create a DefaultSessionCache. The DefaultSessionCacheFactory has all of the same configuration setters as a DefaultSessionCache. Alternatively, if you only have a single SessionManager, or you need to configure a DefaultSessionCache differently for every SessionManager, then you could dispense with the DefaultSessionCacheFactory and simply instantiate, configure, and pass in the DefaultSessionCache yourself. Server server = new Server(); DefaultSessionCacheFactory cacheFactory = new DefaultSessionCacheFactory(); //EVICT_ON_INACTIVE: evict a session after 60sec inactivity cacheFactory.setEvictionPolicy(60); //Only useful with the EVICT_ON_INACTIVE policy cacheFactory.setSaveOnInactiveEviction(true); cacheFactory.setFlushOnResponseCommit(true); cacheFactory.setInvalidateOnShutdown(false); cacheFactory.setRemoveUnloadableSessions(true); cacheFactory.setSaveOnCreate(true); //Add the factory as a bean to the server, now whenever a //SessionManager starts it will consult the bean to create a new DefaultSessionCache server.addBean(cacheFactory); If you don’t configure any SessionCache or SessionCacheFactory, a SessionManager will automatically create its own DefaultSessionCache. The NullSessionCache does not actually cache any objects: each request uses a fresh ManagedSession object. It is suitable for clustered deployments without a sticky load balancer and non-clustered deployments when purely minimal support for sessions is needed. As no sessions are actually cached, of course functions like invalidateOnShutdown and all of the eviction strategies have no meaning for the NullSessionCache. There is a NullSessionCacheFactory which you can instantiate, configure and set as a Server bean to enable a SessionManager to automatically create new NullSessionCaches as needed. All of the same configuration options are available on the NullSessionCacheFactory as the NullSessionCache itself. Alternatively, if you only have a single SessionManager, or you need to configure a NullSessionCache differently for every SessionManager, then you could dispense with the NullSessionCacheFactory and simply instantiate, configure, and pass in the NullSessionCache yourself. Server server = new Server(); NullSessionCacheFactory cacheFactory = new NullSessionCacheFactory(); cacheFactory.setFlushOnResponseCommit(true); cacheFactory.setRemoveUnloadableSessions(true); cacheFactory.setSaveOnCreate(true); //Add the factory as a bean to the server, now whenever a //SessionManager starts it will consult the bean to create a new NullSessionCache server.addBean(cacheFactory); As previously mentioned, it is strongly recommended that you extend the AbstractSessionCache. Using one of the SessionCacheFactorys will ensure that every time a SessionManager starts it will create a new instance of the corresponding type of SessionCache. But, what if you deploy multiple webapps, and for one of them, you don’t want to use sessions? Or alternatively, you don’t want to use sessions, but you have one webapp that now needs them? In that case, you can configure the SessionCacheFactory appropriate to the majority, and then specifically create the right type of SessionCache for the others. Here’s an example where we configure the DefaultSessionCacheFactory to handle most webapps, but then specifically use a NullSessionCache for another: Server server = new Server(); DefaultSessionCacheFactory cacheFactory = new DefaultSessionCacheFactory(); //NEVER_EVICT cacheFactory.setEvictionPolicy(SessionCache.NEVER_EVICT); cacheFactory.setFlushOnResponseCommit(true); cacheFactory.setInvalidateOnShutdown(false); cacheFactory.setRemoveUnloadableSessions(true); cacheFactory.setSaveOnCreate(true); //Add the factory as a bean to the server, now whenever a //SessionManager starts it will consult the bean to create a new DefaultSessionCache server.addBean(cacheFactory); ContextHandlerCollection contexts = new ContextHandlerCollection(); server.setHandler(contexts); //Add a webapp that will use a DefaultSessionCache via the DefaultSessionCacheFactory WebAppContext app1 = new WebAppContext(); app1.setContextPath(\"/app1\"); contexts.addHandler(app1); //Add a webapp that uses an explicit NullSessionCache instead WebAppContext app2 = new WebAppContext(); app2.setContextPath(\"/app2\"); NullSessionCache nullSessionCache = new NullSessionCache(app2.getSessionHandler()); nullSessionCache.setFlushOnResponseCommit(true); nullSessionCache.setRemoveUnloadableSessions(true); nullSessionCache.setSaveOnCreate(true); //If we pass an existing SessionCache instance to the SessionHandler, it must be //fully configured: this means we must also provide SessionDataStore nullSessionCache.setSessionDataStore(new NullSessionDataStore()); app2.getSessionHandler().setSessionCache(nullSessionCache); A SessionDataStore mediates the storage, retrieval and deletion of SessionData. There is one SessionDataStore per SessionCache and thus one per context. Jetty provides a number of alternative SessionDataStore implementations: NullSessionDataStore Does not store SessionData, meaning that sessions will exist in-memory only. See NullSessionDataStore FileSessionDataStore Uses the file system to persist SessionData. See FileSessionDataStore for more information. GCloudSessionDataStore Uses GCloud Datastore for persisting SessionData. See GCloudSessionDataStore for more information. HazelcastSessionDataStore Uses Hazelcast for persisting SessionData. InfinispanSessionDataStore Uses Infinispan for persisting SessionData. See InfinispanSessionDataStore for more information. JDBCSessionDataStore Uses a relational database via JDBC API to persist SessionData. See JDBCSessionDataStore for more information. MongoSessionDataStore Uses MongoDB document database to persist SessionData. See MongoSessionDataStore for more information. CachingSessionDataStore Uses memcached to provide an L2 cache of SessionData while delegating to another SessionDataStore for persistence of SessionData. See CachingSessionDataStore for more information. Most of the behaviour common to SessionDataStores is provided by the AbstractSessionDataStore class. You are strongly encouraged to use this as the base class for implementing your custom SessionDataStore. Some important methods are: isPassivating() Boolean. \"True\" means that session data is serialized. Some persistence mechanisms serialize, such as JDBC, GCloud Datastore etc. Others can store an object in shared memory, e.g. Infinispan and thus don’t serialize session data. In Servlet environments, whether a SessionDataStore reports that it is capable of passivating controls whether HttpSessionActivationListeners will be called. When implementing a custom SessionDataStore you need to decide whether you will support passivation or not. setSavePeriodSec(int) [Default:0] This is an interval defined in seconds. It is used to reduce the frequency with which SessionData is written. Normally, whenever the last concurrent request leaves a Session, the SessionData for that Session is always persisted, even if the only thing that changed is the lastAccessTime. If the savePeriodSec is non-zero, the SessionData will not be persisted if no session attributes changed, unless the time since the last save exceeds the savePeriod. Setting a non-zero value can reduce the load on the persistence mechanism, but in a clustered environment runs the risk that other nodes will see the session as expired because it has not been persisted sufficiently recently. setGracePeriodSec(int) [Default:3600] The gracePeriod is an interval defined in seconds. It is an attempt to deal with the non-transactional nature of sessions with regard to finding sessions that have expired. In a clustered configuration - even with a sticky load balancer - it is always possible that a session is \"live\" on a node but not yet updated in the persistent store. This means that it can be hard to determine at any given moment whether a clustered session has truly expired. Thus, we use the gracePeriod to provide a bit of leeway around the moment of expiry during scavenging: on every scavenge cycle an AbstractSessionDataStore searches for sessions that belong to the context that expired at least one gracePeriod ago infrequently the AbstractSessionDataStore searches for and summarily deletes sessions - from any context - that expired at least 10 gracePeriods ago When implementing a SessionDataStore for a particular persistence technology, you should base it off the AbstractSessionDataStore class. Firstly, it is important to understand the components of a unique key for a session suitable for storing in a persistence mechanism. Consider that although multiple contexts may share the same session id (ie cross-context dispatch), the data in those sessions must be distinct. Therefore, when storing session data in a persistence mechanism that is shared by many nodes in a cluster, the session must be identified by a combination of the id and the context. The SessionDataStores use the following information to synthesize a unique key for session data that is suitable to the particular persistence mechanism : id This is the id as generated by the SessionIdManager context The path of the context associated with the session. virtual host The first virtual host - if any - associated with the context. The SessionContext class, of which every AbstractSessionDataStore has an instance, will provide these components to you in a canonicalized form. Then you will need to implement the following methods: public boolean doExists(String id) Check if data for the given session exists in your persistence mechanism. The id is always relative to the context, see above. public void doStore(String id, SessionData data, long lastSaveTime) Store the session data into your persistence mechanism. The id is always relative to the context, see above. public SessionData doLoad(String id) Load the session from your persistent mechanism. The id is always relative to the context, see above. public Set doCheckExpired(Set candidates, long time) Verify which of the suggested session ids have expired since the time given, according to the data stored in your persistence mechanism. This is used during scavenging to ensure that a session that is a candidate for expiry according to this node is not in-use on another node. The sessions matching these ids will be loaded as ManagedSessions and have their normal expiration lifecycle events invoked. The id is always relative to the context, see above. public Set doGetExpired(long before) Find the ids of sessions that expired at or before the time given. The sessions matching these ids will be loaded as ManagedSessions and have their normal expiration lifecycle events invoked. The id is always relative to the context, see above. public void doCleanOrphans(long time) Find the ids of sessions that expired at or before the given time, independent of the context they are in. The purpose is to find sessions that are no longer being managed by any node. These sessions may even belong to contexts that no longer exist. Thus, any such sessions must be summarily deleted from the persistence mechanism and cannot have their normal expiration lifecycle events invoked. Every SessionDataStore has a factory class that creates instances based on common configuration. All SessionDataStoreFactory implementations support configuring: setSavePeriodSec(int) setGracePeriodSec(int) The NullSessionDataStore is a trivial implementation of SessionDataStore that does not persist SessionData. Use it when you want your sessions to remain in memory only. Be careful of your SessionCache when using the NullSessionDataStore: if using a NullSessionCache then your sessions are neither shared nor saved if using a DefaultSessionCache with eviction settings, your session will cease to exist when it is evicted from the cache If you have not configured any other SessionDataStore, when a SessionHandler aka AbstractSessionManager starts up, it will instantiate a NullSessionDataStore. The FileSessionDataStore supports persistent storage of session data in a filesystem. Persisting sessions to the local file system should never be used in a clustered environment. One file represents one session in one context. File names follow this pattern: [expiry]_[contextpath]_[virtualhost]_[id] expiry This is the expiry time in milliseconds since the epoch. contextpath This is the context path with any special characters, including /, replaced by the underscore character. For example, a context path of /catalog would become _catalog. A context path of simply / becomes just _. virtualhost This is the first virtual host associated with the context and has the form of 4 digits separated by . characters. If there are no virtual hosts associated with a context, then 0.0.0.0 is used: [digit].[digit].[digit].[digit] id This is the unique id of the session. Putting all of the above together as an example, a session with an id of node0ek3vx7x2y1e7pmi3z00uqj1k0 for the context with path /test with no virtual hosts and an expiry of 1599558193150 would have a file name of: 1599558193150__test_0.0.0.0_node0ek3vx7x2y1e7pmi3z00uqj1k0 You can configure either a FileSessionDataStore individually, or a FileSessionDataStoreFactory if you want multiple SessionHandlers to use FileSessionDataStores that are identically configured. The configuration methods are: setStoreDir(File) [Default:null] This is the location for storage of session files. If the directory does not exist at startup, it will be created. If you use the same storeDir for multiple SessionHandlers, then the sessions for all of those contexts are stored in the same directory. This is not a problem, as the name of the file is unique because it contains the context information. You must supply a value for this, otherwise startup of the FileSessionDataStore will fail. deleteUnrestorableFiles(boolean) [Default:false] If set to true, unreadable files will be deleted. This is useful to prevent repeated logging of the same error when the scavenger periodically (re-)attempts to load the corrupted information for a session in order to expire it. setSavePeriodSec(int) [Default:0] This is an interval defined in seconds. It is used to reduce the frequency with which SessionData is written. Normally, whenever the last concurrent request leaves a Session, the SessionData for that Session is always persisted, even if the only thing that changed is the lastAccessTime. If the savePeriodSec is non-zero, the SessionData will not be persisted if no session attributes changed, unless the time since the last save exceeds the savePeriod. Setting a non-zero value can reduce the load on the persistence mechanism, but in a clustered environment runs the risk that other nodes will see the session as expired because it has not been persisted sufficiently recently. setGracePeriodSec(int) [Default:3600] The gracePeriod is an interval defined in seconds. It is an attempt to deal with the non-transactional nature of sessions with regard to finding sessions that have expired. In a clustered configuration - even with a sticky load balancer - it is always possible that a session is \"live\" on a node but not yet updated in the persistent store. This means that it can be hard to determine at any given moment whether a clustered session has truly expired. Thus, we use the gracePeriod to provide a bit of leeway around the moment of expiry during scavenging: on every scavenge cycle an AbstractSessionDataStore searches for sessions that belong to the context that expired at least one gracePeriod ago infrequently the AbstractSessionDataStore searches for and summarily deletes sessions - from any context - that expired at least 10 gracePeriods ago Here’s an example of configuring a FileSessionDataStoreFactory: Server server = new Server(); //First lets configure a DefaultSessionCacheFactory DefaultSessionCacheFactory cacheFactory = new DefaultSessionCacheFactory(); //NEVER_EVICT cacheFactory.setEvictionPolicy(SessionCache.NEVER_EVICT); cacheFactory.setFlushOnResponseCommit(true); cacheFactory.setInvalidateOnShutdown(false); cacheFactory.setRemoveUnloadableSessions(true); cacheFactory.setSaveOnCreate(true); //Add the factory as a bean to the server, now whenever a //SessionManager starts it will consult the bean to create a new DefaultSessionCache server.addBean(cacheFactory); //Now, lets configure a FileSessionDataStoreFactory FileSessionDataStoreFactory storeFactory = new FileSessionDataStoreFactory(); storeFactory.setStoreDir(new File(\"/tmp/sessions\")); storeFactory.setGracePeriodSec(3600); storeFactory.setSavePeriodSec(0); //Add the factory as a bean on the server, now whenever a //SessionManager starts, it will consult the bean to create a new FileSessionDataStore //for use by the DefaultSessionCache server.addBean(storeFactory); Here’s an alternate example, configuring a FileSessionDataStore directly: //create a context WebAppContext app1 = new WebAppContext(); app1.setContextPath(\"/app1\"); //First, we create a DefaultSessionCache DefaultSessionCache cache = new DefaultSessionCache(app1.getSessionHandler()); cache.setEvictionPolicy(SessionCache.NEVER_EVICT); cache.setFlushOnResponseCommit(true); cache.setInvalidateOnShutdown(false); cache.setRemoveUnloadableSessions(true); cache.setSaveOnCreate(true); //Now, we configure a FileSessionDataStore FileSessionDataStore store = new FileSessionDataStore(); store.setStoreDir(new File(\"/tmp/sessions\")); store.setGracePeriodSec(3600); store.setSavePeriodSec(0); //Tell the cache to use the store cache.setSessionDataStore(store); //Tell the context to use the cache/store combination app1.getSessionHandler().setSessionCache(cache); The JDBCSessionDataStore supports persistent storage of session data in a relational database. To do that, it requires a DatabaseAdaptor that handles the differences between databases (eg Oracle, Postgres etc), and a SessionTableSchema that allows for the customization of table and column names. The JDBCSessionDataStore and corresponding JDBCSessionDataStoreFactory support the following configuration: setSavePeriodSec(int) [Default:0] This is an interval defined in seconds. It is used to reduce the frequency with which SessionData is written. Normally, whenever the last concurrent request leaves a Session, the SessionData for that Session is always persisted, even if the only thing that changed is the lastAccessTime. If the savePeriodSec is non-zero, the SessionData will not be persisted if no session attributes changed, unless the time since the last save exceeds the savePeriod. Setting a non-zero value can reduce the load on the persistence mechanism, but in a clustered environment runs the risk that other nodes will see the session as expired because it has not been persisted sufficiently recently. setGracePeriodSec(int) [Default:3600] The gracePeriod is an interval defined in seconds. It is an attempt to deal with the non-transactional nature of sessions with regard to finding sessions that have expired. In a clustered configuration - even with a sticky load balancer - it is always possible that a session is \"live\" on a node but not yet updated in the persistent store. This means that it can be hard to determine at any given moment whether a clustered session has truly expired. Thus, we use the gracePeriod to provide a bit of leeway around the moment of expiry during scavenging: on every scavenge cycle an AbstractSessionDataStore searches for sessions that belong to the context that expired at least one gracePeriod ago infrequently the AbstractSessionDataStore searches for and summarily deletes sessions - from any context - that expired at least 10 gracePeriods ago setDatabaseAdaptor(DatabaseAdaptor) A JDBCSessionDataStore requires a DatabaseAdapter, otherwise an Exception is thrown at start time. setSessionTableSchema(SessionTableSchema) If a SessionTableSchema has not been explicitly set, one with all values defaulted is created at start time. Many databases use different keywords for types such as long, blob and varchar. Jetty will detect the type of the database at runtime by interrogating the metadata associated with a database connection. Based on that metadata Jetty will try to select that database’s preferred keywords. However, you may need to instead explicitly configure these as described below. setDatasource(String) setDatasource(Datasource) Either the JNDI name of a Datasource to look up, or the Datasource itself. Alternatively you can set the driverInfo, see below. DatabaseAdaptor datasourceAdaptor = new DatabaseAdaptor(); datasourceAdaptor.setDatasourceName(\"/jdbc/myDS\"); setDriverInfo(String, String) setDriverInfo(Driver, String) This is the name or instance of a Driver class and a connection URL. Alternatively you can set the datasource, see above. DatabaseAdaptor driverAdaptor = new DatabaseAdaptor(); driverAdaptor.setDriverInfo(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://127.0.0.1:3306/sessions?user=sessionsadmin\"); setBlobType(String) [Default: \"blob\" or \"bytea\" for Postgres] The type name used to represent \"blobs\" by the database. setLongType(String) [Default: \"bigint\" or \"number(20)\" for Oracle] The type name used to represent large integers by the database. setStringType(String) [Default: \"varchar\"] The type name used to represent character data by the database. SessionData is stored in a table with one row per session. This is the definition of the table with the table name, column names, and type keywords all at their default settings: Table:JettySessions sessionId contextPath virtualHost lastNode accessTime lastAccessTime createTime cookieTime lastSavedTime expiryTime maxInterval map 120 varchar 60 varchar 60 varchar 60 varchar long long long long long long long blob Use the SessionTableSchema class to customize these names. setSchemaName(String), setCatalogName(String) [Default: null] The exact meaning of these two are dependent on your database vendor, but can broadly be described as further scoping for the session table name. See https://en.wikipedia.org/wiki/Database_schema and https://en.wikipedia.org/wiki/Database_catalog. These extra scoping names come into play at startup time when Jetty determines if the session table already exists, or creates it on-the-fly. If your database is not using schema or catalog name scoping, leave these unset. If your database is configured with a schema or catalog name, use the special value \"INFERRED\" and Jetty will extract them from the database metadata. Alternatively, set them explicitly using these methods. setTableName(String) [Default:\"JettySessions\"] This is the name of the table in which session data is stored. setAccessTimeColumn(String) [Default: \"accessTime\"] This is the name of the column that stores the time - in ms since the epoch - at which a session was last accessed setContextPathColumn(String) [Default: \"contextPath\"] This is the name of the column that stores the contextPath of a session. setCookieTimeColumn(String) [Default: \"cookieTime\"] This is the name of the column that stores the time - in ms since the epoch - that the cookie was last set for a session. setCreateTimeColumn(String) [Default: \"createTime\"] This is the name of the column that stores the time - in ms since the epoch - at which a session was created. setExpiryTimeColumn(String) [Default: \"expiryTime\"] This is name of the column that stores - in ms since the epoch - the time at which a session will expire. setLastAccessTimeColumn(String) [Default: \"lastAccessTime\"] This is the name of the column that stores the time - in ms since the epoch - that a session was previously accessed. setLastSavedTimeColumn(String) [Default: \"lastSavedTime\"] This is the name of the column that stores the time - in ms since the epoch - at which a session was last written. setIdColumn(String) [Default: \"sessionId\"] This is the name of the column that stores the id of a session. setLastNodeColumn(String) [Default: \"lastNode\"] This is the name of the column that stores the workerName of the last node to write a session. setVirtualHostColumn(String) [Default: \"virtualHost\"] This is the name of the column that stores the first virtual host of the context of a session. setMaxIntervalColumn(String) [Default: \"maxInterval\"] This is the name of the column that stores the interval - in ms - during which a session can be idle before being considered expired. setMapColumn(String) [Default: \"map\"] This is the name of the column that stores the serialized attributes of a session. The MongoSessionDataStore supports persistence of SessionData in a nosql database. The best description for the document model for session information is found in the javadoc for the MongoSessionDataStore. In overview, it can be represented thus: The database contains a document collection for the sessions. Each document represents a session id, and contains one nested document per context in which that session id is used. For example, the session id abcd12345 might be used by two contexts, one with path /contextA and one with path /contextB. In that case, the outermost document would refer to abcd12345 and it would have a nested document for /contextA containing the session attributes for that context, and another nested document for /contextB containing the session attributes for that context. Remember, according to the Servlet Specification, a session id can be shared by many contexts, but the attributes must be unique per context. The outermost document contains these fields: id The session id. created The time (in ms since the epoch) at which the session was first created in any context. maxIdle The time (in ms) for which an idle session is regarded as valid. As maxIdle times can be different for Sessions from different contexts, this is the shortest maxIdle time. expiry The time (in ms since the epoch) at which the session will expire. As the expiry time can be different for Sessions from different contexts, this is the shortest expiry time. Each nested context-specific document contains: attributes The session attributes as a serialized map. lastSaved The time (in ms since the epoch) at which the session in this context was saved. lastAccessed The time (in ms since the epoch) at which the session in this context was previously accessed. accessed The time (in ms since the epoch) at which this session was most recently accessed. lastNode The workerName of the last server that saved the session data. version An object that is updated every time a session is written for a context. You can configure either a MongoSessionDataStore individually, or a MongoSessionDataStoreFactory if you want multiple SessionHandlers to use MongoSessionDataStores that are identically configured. The configuration methods for the MongoSessionDataStoreFactory are: setSavePeriodSec(int) [Default:0] This is an interval defined in seconds. It is used to reduce the frequency with which SessionData is written. Normally, whenever the last concurrent request leaves a Session, the SessionData for that Session is always persisted, even if the only thing that changed is the lastAccessTime. If the savePeriodSec is non-zero, the SessionData will not be persisted if no session attributes changed, unless the time since the last save exceeds the savePeriod. Setting a non-zero value can reduce the load on the persistence mechanism, but in a clustered environment runs the risk that other nodes will see the session as expired because it has not been persisted sufficiently recently. setGracePeriodSec(int) [Default:3600] The gracePeriod is an interval defined in seconds. It is an attempt to deal with the non-transactional nature of sessions with regard to finding sessions that have expired. In a clustered configuration - even with a sticky load balancer - it is always possible that a session is \"live\" on a node but not yet updated in the persistent store. This means that it can be hard to determine at any given moment whether a clustered session has truly expired. Thus, we use the gracePeriod to provide a bit of leeway around the moment of expiry during scavenging: on every scavenge cycle an AbstractSessionDataStore searches for sessions that belong to the context that expired at least one gracePeriod ago infrequently the AbstractSessionDataStore searches for and summarily deletes sessions - from any context - that expired at least 10 gracePeriods ago setDbName(String) This is the name of the database. setCollectionName(String) The name of the document collection. setConnectionString(String) a mongodb url, eg \"mongodb://localhost\". Alternatively, you can specify the host,port combination instead, see below. setHost(String) setPort(int) the hostname and port number of the mongodb instance to contact. Alternatively, you can specify the connectionString instead, see above. This is an example of configuring a MongoSessionDataStoreFactory: Server server = new Server(); MongoSessionDataStoreFactory mongoSessionDataStoreFactory = new MongoSessionDataStoreFactory(); mongoSessionDataStoreFactory.setGracePeriodSec(3600); mongoSessionDataStoreFactory.setSavePeriodSec(0); mongoSessionDataStoreFactory.setDbName(\"HttpSessions\"); mongoSessionDataStoreFactory.setCollectionName(\"JettySessions\"); // Either set the connectionString mongoSessionDataStoreFactory.setConnectionString(\"mongodb:://localhost:27017\"); // or alternatively set the host and port. mongoSessionDataStoreFactory.setHost(\"localhost\"); mongoSessionDataStoreFactory.setPort(27017); The InfinispanSessionDataStore supports persistent storage of session data via the Infinispan data grid. You may use Infinispan in either embedded mode, where it runs in the same process as Jetty, or in remote mode mode, where your Infinispan instance is on another node. For more information on Infinispan, including some code examples, consult the Infinispan documentation. See below for some code examples of configuring the InfinispanSessionDataStore in Jetty. Note that the configuration options are the same for both the InfinispanSessionDataStore and the InfinispanSessionDataStoreFactory. Use the latter to apply the same configuration to multiple InfinispanSessionDataStores. setSavePeriodSec(int) [Default:0] This is an interval defined in seconds. It is used to reduce the frequency with which SessionData is written. Normally, whenever the last concurrent request leaves a Session, the SessionData for that Session is always persisted, even if the only thing that changed is the lastAccessTime. If the savePeriodSec is non-zero, the SessionData will not be persisted if no session attributes changed, unless the time since the last save exceeds the savePeriod. Setting a non-zero value can reduce the load on the persistence mechanism, but in a clustered environment runs the risk that other nodes will see the session as expired because it has not been persisted sufficiently recently. setGracePeriodSec(int) [Default:3600] The gracePeriod is an interval defined in seconds. It is an attempt to deal with the non-transactional nature of sessions with regard to finding sessions that have expired. In a clustered configuration - even with a sticky load balancer - it is always possible that a session is \"live\" on a node but not yet updated in the persistent store. This means that it can be hard to determine at any given moment whether a clustered session has truly expired. Thus, we use the gracePeriod to provide a bit of leeway around the moment of expiry during scavenging: on every scavenge cycle an AbstractSessionDataStore searches for sessions that belong to the context that expired at least one gracePeriod ago infrequently the AbstractSessionDataStore searches for and summarily deletes sessions - from any context - that expired at least 10 gracePeriods ago setCache(BasicCache cache) Infinispan uses a cache API as the interface to the data grid and this method configures Jetty with the cache instance. This cache can be either an embedded cache - also called a \"local\" cache in Infinispan parlance - or a remote cache. setSerialization(boolean) [Default: false] When the InfinispanSessionDataStore starts, if it detects the Infinispan classes for remote caches on the classpath, it will automatically assume serialization is true, and thus that SessionData will be serialized over-the-wire to a remote cache. You can use this parameter to override this. If this parameter is true, the InfinispanSessionDataStore returns true for the isPassivating() method, but false otherwise. setInfinispanIdleTimeoutSec(int) [Default: 0] This controls the Infinispan option whereby it can detect and delete entries that have not been referenced for a configurable amount of time. A value of 0 disables it. If you use this option, expired sessions will be summarily deleted from Infinispan without the normal session invalidation handling (eg calling of lifecycle listeners). Only use this option if you do not have session lifecycle listeners that must be called when a session is invalidated. setQueryManager(QueryManager) If this parameter is not set, the InfinispanSessionDataStore will be unable to scavenge for unused sessions. In that case, you can use the infinispanIdleTimeoutSec option instead to prevent the accumulation of expired sessions. When using Infinispan in embedded mode, configure the EmbeddedQueryManager to enable Jetty to query for expired sessions so that they may be property invalidated and lifecycle listeners called. When using Infinispan in remote mode, configure the RemoteQueryManager instead. Here is an example of configuring an InfinispanSessionDataStore in code using an embedded cache: /* Create a core SessionHandler * Alternatively in a Servlet Environment do: * WebAppContext webapp = new WebAppContext(); * SessionHandler sessionHandler = webapp.getSessionHandler(); */ SessionHandler sessionHandler = new SessionHandler(); //Use an Infinispan local cache configured via an infinispan xml file DefaultCacheManager defaultCacheManager = new DefaultCacheManager(\"path/to/infinispan.xml\"); Cache localCache = defaultCacheManager.getCache(); //Configure the Jetty session datastore with Infinispan InfinispanSessionDataStore infinispanSessionDataStore = new InfinispanSessionDataStore(); infinispanSessionDataStore.setCache(localCache); infinispanSessionDataStore.setSerialization(false); //local cache does not serialize session data infinispanSessionDataStore.setInfinispanIdleTimeoutSec(0); //do not use infinispan auto delete of unused sessions infinispanSessionDataStore.setQueryManager(new org.eclipse.jetty.session.infinispan.EmbeddedQueryManager(localCache)); //enable Jetty session scavenging infinispanSessionDataStore.setGracePeriodSec(3600); infinispanSessionDataStore.setSavePeriodSec(0); //Configure a SessionHandler to use the local Infinispan cache as a store of SessionData DefaultSessionCache sessionCache = new DefaultSessionCache(sessionHandler); sessionCache.setSessionDataStore(infinispanSessionDataStore); sessionHandler.setSessionCache(sessionCache); Here is an example of configuring an InfinispanSessionDataStore in code using a remote cache: /* Create a core SessionHandler * Alternatively in a Servlet Environment do: * WebAppContext webapp = new WebAppContext(); * SessionHandler sessionHandler = webapp.getSessionHandler(); */ SessionHandler sessionHandler = new SessionHandler(); //Configure Infinispan to provide a remote cache called \"JettySessions\" Properties hotrodProperties = new Properties(); hotrodProperties.load(new FileInputStream(\"/path/to/hotrod-client.properties\")); org.infinispan.client.hotrod.configuration.ConfigurationBuilder configurationBuilder = new ConfigurationBuilder(); configurationBuilder.withProperties(hotrodProperties); configurationBuilder.marshaller(new ProtoStreamMarshaller()); configurationBuilder.addContextInitializer(new org.eclipse.jetty.session.infinispan.InfinispanSerializationContextInitializer()); org.infinispan.client.hotrod.RemoteCacheManager remoteCacheManager = new RemoteCacheManager(configurationBuilder.build()); RemoteCache remoteCache = remoteCacheManager.getCache(\"JettySessions\"); //Configure the Jetty session datastore with Infinispan InfinispanSessionDataStore infinispanSessionDataStore = new InfinispanSessionDataStore(); infinispanSessionDataStore.setCache(remoteCache); infinispanSessionDataStore.setSerialization(true); //remote cache serializes session data infinispanSessionDataStore.setInfinispanIdleTimeoutSec(0); //do not use infinispan auto delete of unused sessions infinispanSessionDataStore.setQueryManager(new org.eclipse.jetty.session.infinispan.RemoteQueryManager(remoteCache)); //enable Jetty session scavenging infinispanSessionDataStore.setGracePeriodSec(3600); infinispanSessionDataStore.setSavePeriodSec(0); //Configure a SessionHandler to use a remote Infinispan cache as a store of SessionData DefaultSessionCache sessionCache = new DefaultSessionCache(sessionHandler); sessionCache.setSessionDataStore(infinispanSessionDataStore); sessionHandler.setSessionCache(sessionCache); The GCloudSessionDataStore supports persistent storage of session data into Google Cloud DataStore. You will first need to create a project and enable the Google Cloud API: https://cloud.google.com/docs/authentication#preparation. Take note of the project id that you create in this step as you need to supply it in later steps. You can choose to use Jetty either inside or outside of Google infrastructure. Outside of Google infrastructure Before running Jetty, you will need to choose one of the following methods to set up the local environment to enable remote GCloud DataStore communications: Using the GCloud SDK Ensure you have the GCloud SDK installed: https://cloud.google.com/sdk/?hl=en Use the GCloud tool to set up the project you created in the preparation step: gcloud config set project PROJECT_ID Use the GCloud tool to authenticate a Google account associated with the project created in the preparation step: gcloud auth login ACCOUNT Using environment variables Define the environment variable GCLOUD_PROJECT with the project id you created in the preparation step. Generate a JSON service account key and then define the environment variable GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/key.json Inside of Google infrastructure The Google deployment tools will automatically configure the project and authentication information for you. Jetty GCloud session support provides some indexes as optimizations that can speed up session searches. This will particularly benefit session scavenging, although it may make write operations slower. By default, indexes will not be used. You will see a log WARNING message informing you about the absence of indexes: WARN: Session indexes not uploaded, falling back to less efficient queries In order to use them, you will need to manually upload the file to GCloud that defines the indexes. This file is named index.yaml and you can find it in your distribution in $JETTY_BASE/etc/sessions/gcloud/index.yaml. Follow the instructions here to upload the pre-generated index.yaml file. The following configuration options apply to both the GCloudSessionDataStore and the GCloudSessionDataStoreFactory. Use the latter if you want multiple SessionHandlers to use GCloudSessionDataStores that are identically configured. setSavePeriodSec(int) [Default:0] This is an interval defined in seconds. It is used to reduce the frequency with which SessionData is written. Normally, whenever the last concurrent request leaves a Session, the SessionData for that Session is always persisted, even if the only thing that changed is the lastAccessTime. If the savePeriodSec is non-zero, the SessionData will not be persisted if no session attributes changed, unless the time since the last save exceeds the savePeriod. Setting a non-zero value can reduce the load on the persistence mechanism, but in a clustered environment runs the risk that other nodes will see the session as expired because it has not been persisted sufficiently recently. setGracePeriodSec(int) [Default:3600] The gracePeriod is an interval defined in seconds. It is an attempt to deal with the non-transactional nature of sessions with regard to finding sessions that have expired. In a clustered configuration - even with a sticky load balancer - it is always possible that a session is \"live\" on a node but not yet updated in the persistent store. This means that it can be hard to determine at any given moment whether a clustered session has truly expired. Thus, we use the gracePeriod to provide a bit of leeway around the moment of expiry during scavenging: on every scavenge cycle an AbstractSessionDataStore searches for sessions that belong to the context that expired at least one gracePeriod ago infrequently the AbstractSessionDataStore searches for and summarily deletes sessions - from any context - that expired at least 10 gracePeriods ago setProjectId(String) [Default: null] Optional. The project id of your project. You don’t need to set this if you carried out the instructions in the Preparation section, but you might want to set this - along with the host and/or namespace parameters - if you want more explicit control over connecting to GCloud. setHost(String) [Default: null] Optional. This is the name of the host for the GCloud DataStore. If you leave it unset, then the GCloud DataStore library will work out the host to contact. You might want to use this - along with projectId and/or namespace parameters - if you want more explicit control over connecting to GCloud. setNamespace(String) [Default: null] Optional. If set, partitions the visibility of session data in multi-tenant deployments. More information can be found here. setMaxRetries(int) [Default: 5] This is the maximum number of retries to connect to GCloud DataStore in order to write a session. This is used in conjunction with the backoffMs parameter to control the frequency with which Jetty will retry to contact GCloud to write out a session. setBackoffMs(int) [Default: 1000] This is the interval that Jetty will wait in between retrying failed writes. Each time a write fails, Jetty doubles the previous backoff. Used in conjunction with the maxRetries parameter. setEntityDataModel(EntityDataModel) The EntityDataModel encapsulates the type (called \"kind\" in GCloud DataStore) of stored session objects and the names of its fields. If you do not set this parameter, GCloudSessionDataStore uses all default values, which should be sufficient for most needs. Should you need to customize this, the methods and their defaults are: setKind(String) [Default: \"GCloudSession\"] this is the type of the session object. setId(String) [Default: \"id\"] this is the name of the field storing the session id. setContextPath(String) [Default: \"contextPath\"] this is name of the field storing the canonicalized context path of the context to which the session belongs. setVhost(String) [Default: \"vhost\"] this the name of the field storing the canonicalized virtual host of the context to which the session belongs. setAccessed(String) [Default: \"accessed\"] this is the name of the field storing the current access time of the session. setLastAccessed(String) [Default: \"lastAccessed\"] this is the name of the field storing the last access time of the session. setCreateTime(String) [Default: \"createTime\"] this is the name of the field storing the time in ms since the epoch, at which the session was created. setCookieSetTime(String) [Default: \"cookieSetTime\"] this is the name of the field storing time at which the session cookie was last set. setLastNode(String) [Default: \"lastNode\"] this is the name of the field storing the workerName of the last node to manage the session. setExpiry(String) [Default: \"expiry\"] this is the name of the field storing the time, in ms since the epoch, at which the session will expire. setMaxInactive(String) [Default: \"maxInactive\"] this is the name of the field storing the session timeout in ms. setAttributes(String) [Default: \"attributes\"] this is the name of the field storing the session attribute map. Here’s an example of configuring a GCloudSessionDataStoreFactory: Server server = new Server(); //Ensure there is a SessionCacheFactory DefaultSessionCacheFactory cacheFactory = new DefaultSessionCacheFactory(); //Add the factory as a bean to the server, now whenever a //SessionManager starts it will consult the bean to create a new DefaultSessionCache server.addBean(cacheFactory); //Configure the GCloudSessionDataStoreFactory GCloudSessionDataStoreFactory storeFactory = new GCloudSessionDataStoreFactory(); storeFactory.setGracePeriodSec(3600); storeFactory.setSavePeriodSec(0); storeFactory.setBackoffMs(2000); //increase the time between retries of failed writes storeFactory.setMaxRetries(10); //increase the number of retries of failed writes //Add the factory as a bean on the server, now whenever a //SessionManager starts, it will consult the bean to create a new GCloudSessionDataStore //for use by the DefaultSessionCache server.addBean(storeFactory); The CachingSessionDataStore is a special type of SessionDataStore that checks an L2 cache for SessionData before checking a delegate SessionDataStore. This can improve the performance of slow stores. The L2 cache is an instance of a SessionDataMap. Jetty provides one implementation of this L2 cache based on memcached, MemcachedSessionDataMap. This is an example of how to programmatically configure CachingSessionDataStores, using a FileSessionDataStore as a delegate, and memcached as the L2 cache: Server server = new Server(); //Make a factory for memcached L2 caches for SessionData MemcachedSessionDataMapFactory mapFactory = new MemcachedSessionDataMapFactory(); mapFactory.setExpirySec(0); //items in memcached don't expire mapFactory.setHeartbeats(true); //tell memcached to use heartbeats mapFactory.setAddresses(new InetSocketAddress(\"localhost\", 11211)); //use a local memcached instance mapFactory.setWeights(new int[]{100}); //set the weighting //Make a FileSessionDataStoreFactory for creating FileSessionDataStores //to persist the session data FileSessionDataStoreFactory storeFactory = new FileSessionDataStoreFactory(); storeFactory.setStoreDir(new File(\"/tmp/sessions\")); storeFactory.setGracePeriodSec(3600); storeFactory.setSavePeriodSec(0); //Make a factory that plugs the L2 cache into the SessionDataStore CachingSessionDataStoreFactory cachingSessionDataStoreFactory = new CachingSessionDataStoreFactory(); cachingSessionDataStoreFactory.setSessionDataMapFactory(mapFactory); cachingSessionDataStoreFactory.setSessionStoreFactory(storeFactory); //Register it as a bean so that all SessionManagers will use it //to make FileSessionDataStores that use memcached as an L2 SessionData cache. server.addBean(cachingSessionDataStoreFactory);","title":"HTTP Session Management","component":"jetty","version":"12","name":"session","url":"/docs/jetty/12/programming-guide/server/session.html","titles":[{"text":"Session Architecture","hash":"architecture","id":1},{"text":"The SessionIdManager","hash":"idmgr","id":2},{"text":"The DefaultSessionIdManager","hash":"defaultidmgr","id":3},{"text":"The HouseKeeper","hash":"housekeeper","id":4},{"text":"Implementing a Custom SessionIdManager","hash":"implementing-a-custom-sessionidmanager","id":5},{"text":"The SessionHandler","hash":"handler","id":6},{"text":"Statistics","hash":"statistics","id":7},{"text":"The SessionCache","hash":"cache","id":8},{"text":"The DefaultSessionCache","hash":"hash","id":9},{"text":"The NullSessionCache","hash":"null","id":10},{"text":"Implementing a custom SessionCache","hash":"customcache","id":11},{"text":"Heterogeneous caching","hash":"heterogeneous-caching","id":12},{"text":"The SessionDataStore","hash":"datastore","id":13},{"text":"Custom SessionDataStores","hash":"custom-sessiondatastores","id":14},{"text":"The SessionDataStoreFactory","hash":"the-sessiondatastorefactory","id":15},{"text":"The NullSessionDataStore","hash":"datastore-null","id":16},{"text":"The FileSessionDataStore","hash":"datastore-file","id":17},{"text":"The JDBCSessionDataStore","hash":"datastore-jdbc","id":18},{"text":"The DatabaseAdaptor","hash":"the-databaseadaptor","id":19},{"text":"The SessionTableSchema","hash":"the-sessiontableschema","id":20},{"text":"The MongoSessionDataStore","hash":"datastore-mongo","id":21},{"text":"The InfinispanSessionDataStore","hash":"datastore-infinispan","id":22},{"text":"The GCloudSessionDataStore","hash":"datastore-gcloud","id":23},{"text":"Preparation","hash":"datastore-gcloud-prep","id":24},{"text":"Configuration","hash":"configuration","id":25},{"text":"The CachingSessionDataStore","hash":"cachingsessiondatastore","id":26}]},"67":{"id":67,"text":"Jetty provides different implementations of the WebSocket protocol: A Jakarta EE 8 (javax.websocket) implementation, based on the Jakarta WebSocket 1.1 Specification. A Jakarta EE 9 (jakarta.websocket) implementation, based on the Jakarta WebSocket 2.0 Specification. A Jakarta EE 10 (jakarta.websocket) implementation, based on the Jakarta WebSocket 2.1 Specification. A Jetty specific implementation, based on the Jetty WebSocket APIs, that does not depend on any Jakarta EE APIs. The Jakarta EE implementations and APIs are described in this section. Using the standard Jakarta EE WebSocket APIs allows your applications to depend only on standard APIs, and your applications may be deployed in any compliant WebSocket Container that supports Jakarta WebSocket. The standard Jakarta EE WebSocket APIs provide these features that are not present in the Jetty WebSocket APIs: Encoders and Decoders for automatic conversion of text or binary messages to objects. The Jetty specific WebSocket implementation and APIs are described in this section. Using the Jetty WebSocket APIs allows your applications to be more efficient and offer greater and more fine-grained control, and provide these features that are not present in the Jakarta EE WebSocket APIs: A demand mechanism to control backpressure. Remote socket address (IP address and port) information. Advanced request URI matching with regular expressions, in addition to Servlet patterns and URI template patterns. More configuration options, for example the network buffer capacity. Programmatic WebSocket upgrade, in addition to WebSocket upgrade based on URI matching, for maximum flexibility. If your application needs specific features that are not provided by the standard APIs, the Jetty WebSocket APIs may provide such features. If the feature you are looking for is not present, you may ask for these features by submitting an issue to the Jetty Project without waiting for the standard Jakarta EE process to approve them and release a new version of the Jakarta EE WebSocket specification. When you write a WebSocket application using the standard jakarta.websocket APIs, your code typically need to depend on just the APIs to compile your application. However, at runtime you need to have an implementation of the standard APIs in your class-path (or module-path). The standard jakarta.websocket APIs, for example for Jakarta EE 10, are provided by the following Maven artifact: jakarta.websocket jakarta.websocket-api 2.1.0 At runtime, you also need an implementation of the standard Jakarta EE 10 WebSocket APIs, that Jetty provides with the following Maven artifact (and its transitive dependencies): org.eclipse.jetty.ee10.websocket jetty-ee10-websocket-jakarta-server 12.0.10-SNAPSHOT The jakarta.websocket-api artifact and the jetty-ee10-websocket-jakarta-server artifact (and their transitive dependencies) should be present in the server class-path (or module-path), and never in the web application’s /WEB-INF/lib directory. To configure correctly your WebSocket application based on the standard Jakarta EE 10 WebSocket APIs, you need two steps: Make sure that Jetty sets up an instance of jakarta.websocket.server.ServerContainer, described in this section. Configure the WebSocket endpoints that implement your application logic, either by annotating their classes with the standard jakarta.websocket annotations, or by using the ServerContainer APIs to register them in your code, described in this section. Jetty sets up a ServerContainer instance using JakartaWebSocketServletContainerInitializer. When you deploy web applications using WebAppContext, then JakartaWebSocketServletContainerInitializer is automatically discovered and initialized by Jetty when the web application starts, so that it sets up the ServerContainer. In this way, you do not need to write any additional code: // Create a Server with a ServerConnector listening on port 8080. Server server = new Server(8080); // Create a WebAppContext with the given context path. WebAppContext handler = new WebAppContext(\"/path/to/webapp\", \"/ctx\"); server.setHandler(handler); // Starting the Server will start the WebAppContext. server.start(); On the other hand, when you deploy web applications using ServletContextHandler, you have to write the code to ensure that the JakartaWebSocketServletContainerInitializer is initialized, so that it sets up the ServerContainer: // Create a Server with a ServerConnector listening on port 8080. Server server = new Server(8080); // Create a ServletContextHandler with the given context path. ServletContextHandler handler = new ServletContextHandler(\"/ctx\"); server.setHandler(handler); // Ensure that JavaxWebSocketServletContainerInitializer is initialized, // to setup the ServerContainer for this web application context. JakartaWebSocketServletContainerInitializer.configure(handler, null); // Starting the Server will start the ServletContextHandler. server.start(); Calling JakartaWebSocketServletContainerInitializer.configure(...) must be done before the ServletContextHandler is started, and configures the Jakarta EE 10 WebSocket implementation for that web application context, making ServerContainer available to web applications. Once you have setup the ServerContainer, you can configure your WebSocket endpoints. The WebSocket endpoints classes may be either annotated with the standard jakarta.websocket annotations, extend the jakarta.websocket.Endpoint abstract class, or implement the jakarta.websocket.server.ServerApplicationConfig interface. When you deploy web applications using WebAppContext, then annotated WebSocket endpoint classes are automatically discovered and registered. In this way, you do not need to write any additional code; you just need to ensure that your WebSocket endpoint classes are present in the web application’s /WEB-INF/classes directory, or in a *.jar file in /WEB-INF/lib. On the other hand, when you deploy web applications using WebAppContext but you need to perform more advanced configuration of the ServerContainer or of the WebSocket endpoints, or when you deploy web applications using ServletContextHandler, you need to access the ServerContainer APIs. The ServerContainer instance is stored as a ServletContext attribute, so it can be retrieved when the ServletContext is initialized, either from a ServletContextListener, or from a Servlet Filter, or from an HttpServlet: // Create a Server with a ServerConnector listening on port 8080. Server server = new Server(8080); // Create a ServletContextHandler with the given context path. ServletContextHandler handler = new ServletContextHandler(\"/ctx\"); server.setHandler(handler); // Ensure that JavaxWebSocketServletContainerInitializer is initialized, // to setup the ServerContainer for this web application context. JakartaWebSocketServletContainerInitializer.configure(handler, null); // Add a WebSocket-initializer Servlet to register WebSocket endpoints. handler.addServlet(MyJavaxWebSocketInitializerServlet.class, \"/*\"); // Starting the Server will start the ServletContextHandler. server.start(); public class MyJavaxWebSocketInitializerServlet extends HttpServlet { @Override public void init() throws ServletException { try { // Retrieve the ServerContainer from the ServletContext attributes. ServerContainer container = (ServerContainer)getServletContext().getAttribute(ServerContainer.class.getName()); // Configure the ServerContainer. container.setDefaultMaxTextMessageBufferSize(128 * 1024); // Simple registration of your WebSocket endpoints. container.addEndpoint(MyJavaxWebSocketEndPoint.class); // Advanced registration of your WebSocket endpoints. container.addEndpoint( ServerEndpointConfig.Builder.create(MyJavaxWebSocketEndPoint.class, \"/ws\") .subprotocols(List.of(\"my-ws-protocol\")) .build() ); } catch (DeploymentException x) { throw new ServletException(x); } } } When you deploy web applications using ServletContextHandler, you can alternatively use the code below to set up the ServerContainer and configure the WebSocket endpoints in one step: // Create a Server with a ServerConnector listening on port 8080. Server server = new Server(8080); // Create a ServletContextHandler with the given context path. ServletContextHandler handler = new ServletContextHandler(\"/ctx\"); server.setHandler(handler); // Setup the ServerContainer and the WebSocket endpoints for this web application context. JakartaWebSocketServletContainerInitializer.configure(handler, (servletContext, container) -> { // Configure the ServerContainer. container.setDefaultMaxTextMessageBufferSize(128 * 1024); // Simple registration of your WebSocket endpoints. container.addEndpoint(MyJavaxWebSocketEndPoint.class); // Advanced registration of your WebSocket endpoints. container.addEndpoint( ServerEndpointConfig.Builder.create(MyJavaxWebSocketEndPoint.class, \"/ws\") .subprotocols(List.of(\"my-ws-protocol\")) .build() ); }); // Starting the Server will start the ServletContextHandler. server.start(); When the ServletContextHandler is started, the Configurator lambda (the second parameter passed to JakartaWebSocketServletContainerInitializer.configure(...)) is invoked and allows you to explicitly configure the WebSocket endpoints using the standard APIs provided by ServerContainer. Under the hood, JakartaWebSocketServletContainerInitializer installs the org.eclipse.jetty.ee10.websocket.servlet.WebSocketUpgradeFilter, which is the component that intercepts HTTP requests to upgrade to WebSocket, and performs the upgrade from the HTTP protocol to the WebSocket protocol. The WebSocketUpgradeFilter is installed under the filter name corresponding to its class name (that is, the string \"org.eclipse.jetty.ee10.websocket.servlet.WebSocketUpgradeFilter\") and with a filter mapping of /*. Refer to the advanced WebSocketUpgradeFilter configuration section for more information. With the default configuration, every HTTP request flows first through the WebSocketUpgradeFilter. If the HTTP request is a valid upgrade to WebSocket, then WebSocketUpgradeFilter tries to find a matching WebSocket endpoint for the request URI path; if the match is found, WebSocketUpgradeFilter performs the upgrade and does not invoke any other Filter or Servlet. From this point on, the communication happens with the WebSocket protocol, and HTTP components such as Filters and Servlets are not relevant anymore. If the HTTP request is not an upgrade to WebSocket, or WebSocketUpgradeFilter did not find a matching WebSocket endpoint for the request URI path, then the request is passed to the Filter chain of your web application, and eventually the request arrives to a Servlet to be processed (otherwise a 404 Not Found response is returned to client). The WebSocketUpgradeFilter that handles the HTTP requests that upgrade to WebSocket is installed by the JakartaWebSocketServletContainerInitializer, as described in this section. Typically, the WebSocketUpgradeFilter is not present in the web.xml configuration, and therefore the mechanisms above create a new WebSocketUpgradeFilter and install it before any other Filter declared in web.xml, under the default name of \"org.eclipse.jetty.ee10.websocket.servlet.WebSocketUpgradeFilter\" and with path mapping /*. However, if the WebSocketUpgradeFilter is already present in web.xml under the default name, then the ServletContainerInitializers will use that declared in web.xml instead of creating a new one. This allows you to customize: The filter order; for example, by configuring filters for increased security or authentication before the WebSocketUpgradeFilter. The WebSocketUpgradeFilter configuration via init-params, that affects all Session instances created by this filter. The WebSocketUpgradeFilter path mapping. Rather than the default mapping of /*, you can map the WebSocketUpgradeFilter to a more specific path such as /ws/*. The possibility to have multiple WebSocketUpgradeFilters, mapped to different paths, each with its own configuration. For example: My WebSocket WebApp (1) security com.acme.SecurityFilter true security /* (2) org.eclipse.jetty.ee10.websocket.servlet.WebSocketUpgradeFilter (3) org.eclipse.jetty.ee10.websocket.servlet.WebSocketUpgradeFilter (4) maxTextMessageSize 1048576 true org.eclipse.jetty.ee10.websocket.servlet.WebSocketUpgradeFilter /ws/* (5) 1 The custom SecurityFilter is the first, to apply custom security. 2 The configuration for the default WebSocketUpgradeFilter. 3 Note the use of the default WebSocketUpgradeFilter name. 4 Specific configuration for WebSocketUpgradeFilter parameters. 5 Use a more specific path mapping for WebSocketUpgradeFilter. Note that using a more specific path mapping for WebSocket requests is also beneficial to the performance of normal HTTP requests: they do not go through the WebSocketUpgradeFilter (as they will not match its path mapping), saving the cost of analyzing them to see whether they are WebSocket upgrade requests or not. When you write a WebSocket application using the Jetty WebSocket APIs, your code typically needs to depend on just the Jetty WebSocket APIs to compile your application. However, at runtime you need to have the implementation of the Jetty WebSocket APIs in your class-path (or module-path). Jetty’s WebSocket APIs are provided by the following Maven artifact: org.eclipse.jetty.websocket jetty-websocket-jetty-api 12.0.10-SNAPSHOT Jetty’s implementation of the Jetty WebSocket APIs is provided by the following Maven artifact (and its transitive dependencies): org.eclipse.jetty.websocket jetty-websocket-jetty-server 12.0.10-SNAPSHOT The jetty-websocket-jetty-api artifact and the jetty-websocket-jetty-server artifact (and its transitive dependencies) should be present in the server class-path (or module-path), and never in a web application’s /WEB-INF/lib directory. To configure correctly your WebSocket application based on the Jetty WebSocket APIs, you need two steps: Make sure to set up an instance of org.eclipse.jetty.websocket.server.ServerWebSocketContainer. Use the ServerWebSocketContainer APIs in your applications to register the WebSocket endpoints that implement your application logic. You can read more about the Jetty WebSocket architecture, which is common to both client-side and server-side, to get familiar with the terminology used in the following sections. You need Jetty to set up a ServerWebSocketContainer instance to make your WebSocket applications based on the Jetty WebSocket APIs work. Your WebSocket web application is represented by a ContextHandler. The WebSocket upgrade is performed in a descendant (typically the only child) of the ContextHandler, either by the org.eclipse.jetty.websocket.server.WebSocketUpgradeHandler, or by a custom Handler that you write and is part of your web application. In both cases, you need to set up a ServerWebSocketContainer, and this can be done implicitly by using WebSocketUpgradeHandler, or explicitly by creating the ServerWebSocketContainer instance. Using WebSocketUpgradeHandler is the most common way to set up your WebSocket applications. You can use the WebSocketUpgradeHandler and the ServerWebSocketContainer APIs to map HTTP request URIs to WebSocket endpoints. When an HTTP request arrives, WebSocketUpgradeHandler tests whether it is a WebSocket upgrade request, whether it matches a mapped URI, and if so upgrades the protocol to WebSocket. From this point on, the communication on the upgraded connection happens with the WebSocket protocol. This is very similar to what WebSocketUpgradeFilter does when using the Jakarta EE WebSocket APIs. Once you have set up the WebSocketUpgradeHandler, you can use the ServerWebSocketContainer APIs to configure the WebSocket endpoints. The example below shows how to set up the WebSocketUpgradeHandler and use the ServerWebSocketContainer APIs: // Create a Server with a ServerConnector listening on port 8080. Server server = new Server(8080); // Create a ContextHandler with the given context path. ContextHandler contextHandler = new ContextHandler(\"/ctx\"); server.setHandler(contextHandler); // Create a WebSocketUpgradeHandler that implicitly creates a ServerWebSocketContainer. WebSocketUpgradeHandler webSocketHandler = WebSocketUpgradeHandler.from(server, contextHandler, container -> { // Configure the ServerWebSocketContainer. container.setMaxTextMessageSize(128 * 1024); // Map a request URI to a WebSocket endpoint, for example using a regexp. container.addMapping(\"regex|/ws/v\\\\d+/echo\", (rq, rs, cb) -> new EchoEndPoint()); // Advanced registration of a WebSocket endpoint. container.addMapping(\"/ws/adv\", (rq, rs, cb) -> { List subProtocols = rq.getSubProtocols(); if (subProtocols.contains(\"my-ws-protocol\")) return new MyJettyWebSocketEndPoint(); return null; }); }); contextHandler.setHandler(webSocketHandler); // Starting the Server will start the ContextHandler and the WebSocketUpgradeHandler, // which would run the configuration of the ServerWebSocketContainer. server.start(); The mapping of request URIs to WebSocket endpoints is further explained in this section. A more advanced way to set up your WebSocket applications is to explicitly create the ServerWebSocketContainer instance programmatically. This gives you more flexibility when deciding whether an HTTP request should be upgraded to WebSocket, because you do not need to match request URIs (although you can), nor you need to use WebSocketUpgradeHandler (although you can). Once you have created the ServerWebSocketContainer, you can use its APIs to configure the WebSocket endpoints as shown in the example below. // Create a Server with a ServerConnector listening on port 8080. Server server = new Server(8080); // Create a ContextHandler with the given context path. ContextHandler contextHandler = new ContextHandler(\"/ctx\"); server.setHandler(contextHandler); // Create a ServerWebSocketContainer, which is also stored as an attribute in the context. ServerWebSocketContainer container = ServerWebSocketContainer.ensure(server, contextHandler); // You can use WebSocketUpgradeHandler if you want, but it is not necessary. // You can ignore the line below, it is shown only for reference. WebSocketUpgradeHandler webSocketHandler = new WebSocketUpgradeHandler(container); // You can directly use ServerWebSocketContainer from any Handler. contextHandler.setHandler(new Handler.Abstract() { @Override public boolean handle(Request request, Response response, Callback callback) { // Retrieve the ServerWebSocketContainer. ServerWebSocketContainer container = ServerWebSocketContainer.get(request.getContext()); // Verify special conditions for which a request should be upgraded to WebSocket. String pathInContext = Request.getPathInContext(request); if (pathInContext.startsWith(\"/ws/echo\") && request.getHeaders().contains(\"X-WS\", \"true\")) { try { // This is a WebSocket upgrade request, perform a direct upgrade. boolean upgraded = container.upgrade((rq, rs, cb) -> new EchoEndPoint(), request, response, callback); if (upgraded) return true; // This was supposed to be a WebSocket upgrade request, but something went wrong. Response.writeError(request, response, callback, HttpStatus.UPGRADE_REQUIRED_426); return true; } catch (Exception x) { Response.writeError(request, response, callback, HttpStatus.UPGRADE_REQUIRED_426, \"failed to upgrade\", x); return true; } } else { // Handle a normal HTTP request. response.setStatus(HttpStatus.OK_200); callback.succeeded(); return true; } } }); // Starting the Server will start the ContextHandler. server.start(); Note how the call to ServerWebSocketContainer.upgrade(...) allows you to perform a direct WebSocket upgrade programmatically. When using the Jetty WebSocket APIs, the WebSocket endpoint classes must be either annotated with the Jetty WebSocket annotations from the org.eclipse.jetty.websocket.api.annotations package, or implement the org.eclipse.jetty.websocket.api.Session.Listener interface. In the case you want to implement the Session.Listener interface, remember that you have to explicitly demand to receive the next WebSocket event. Use Session.Listener.AutoDemanding to automate the demand for simple use cases. Refer to the Jetty WebSocket architecture section for more information about Jetty WebSocket endpoints and how to correctly deal with the demand for WebSocket events. There is no automatic discovery of WebSocket endpoints; all the WebSocket endpoints of your application must be returned by a org.eclipse.jetty.websocket.server.WebSocketCreator that is either mapped to a request URI via ServerWebSocketContainer.addMapping(...), or directly upgraded via ServerWebSocketContainer.upgrade(...). In the call to ServerWebSocketContainer.addMapping(...), you can specify a path spec (the first parameter) that can specified as discussed in this section. When the Server is started, the lambda passed to ServerWebSocketContainer.configure(...)) is invoked and allows you to explicitly configure the WebSocket endpoints using the Jetty WebSocket APIs provided by ServerWebSocketContainer. The ServerWebSocketContainer.addMapping(...) API maps a path spec to a WebSocketCreator instance (typically a lambda expression). The path spec is matched against the WebSocket upgrade request URI to select the correspondent WebSocketCreator to invoke. The path spec can have these forms: Servlet syntax, specified with servlet|, where the servlet| prefix can be omitted if the path spec begins with / or *. (for example, /ws, /ws/chat or *.ws). Regex syntax, specified with regex|, where the regex| prefix can be omitted if the path spec begins with ^ (for example, ^/ws/[0-9]+). URI template syntax, specified with uri-template| (for example uri-template|/ws/chat/{room}). Within the WebSocketCreator, it is possible to access the path spec and, for example in case of URI templates, extract additional information in the following way: Server server = new Server(8080); ContextHandler contextHandler = new ContextHandler(\"/ctx\"); server.setHandler(contextHandler); // Create a WebSocketUpgradeHandler. WebSocketUpgradeHandler webSocketHandler = WebSocketUpgradeHandler.from(server, contextHandler, container -> { container.addMapping(\"/ws/chat/{room}\", (upgradeRequest, upgradeResponse, callback) -> { // Retrieve the URI template. UriTemplatePathSpec pathSpec = (UriTemplatePathSpec)upgradeRequest.getAttribute(PathSpec.class.getName()); // Match the URI template. String pathInContext = Request.getPathInContext(upgradeRequest); Map params = pathSpec.getPathParams(pathInContext); String room = params.get(\"room\"); // Create the new WebSocket endpoint with the URI template information. return new MyWebSocketRoomEndPoint(room); }); }); contextHandler.setHandler(webSocketHandler);","title":"WebSocket Server","component":"jetty","version":"12","name":"websocket","url":"/docs/jetty/12/programming-guide/server/websocket.html","titles":[{"text":"Standard APIs Implementation","hash":"standard","id":1},{"text":"Setting Up ServerContainer","hash":"standard-container","id":2},{"text":"Configuring Endpoints","hash":"standard-endpoints","id":3},{"text":"Upgrade to WebSocket","hash":"standard-upgrade","id":4},{"text":"Advanced WebSocketUpgradeFilter Configuration","hash":"configure-filter","id":5},{"text":"Jetty APIs Implementation","hash":"jetty","id":6},{"text":"Setting up ServerWebSocketContainer","hash":"jetty-container","id":7},{"text":"Implicit setup using WebSocketUpgradeHandler","hash":"jetty-container-websocket-handler","id":8},{"text":"Explicit setup using ServerWebSocketContainer","hash":"jetty-container-websocket-container","id":9},{"text":"WebSocket Endpoints","hash":"jetty-endpoints","id":10},{"text":"Custom PathSpec Mappings","hash":"jetty-pathspec","id":11}]},"68":{"id":68,"text":"Jetty components are organized in a component tree. At the root of the component tree there is typically a ContainerLifeCycle instance — typically a Server instance on the server and an HttpClient instance on the client. ContainerLifeCycle has built-in dump APIs that can be invoked either directly on the Server instance, or via JMX. You can invoke Server.dump() via JMX using a JMX console such as Java Mission Control (JMC): You can get more details from a Jetty’s QueuedThreadPool dump by enabling detailed dumps via queuedThreadPool.setDetailedDump(true).","title":"Component Tree Dump","component":"jetty","version":"12","name":"component-dump","url":"/docs/jetty/12/programming-guide/troubleshooting/component-dump.html","titles":[]},"69":{"id":69,"text":"Sometimes, in order to figure out a problem, enabling DEBUG logging is not enough and you really need to debug the code with a debugger. Debugging an embedded Jetty application is most easily done from your preferred IDE, so refer to your IDE instruction for how to debug Java applications. Remote debugging can be enabled in a Jetty application via command line options: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000 --class-path ... The example above enables remote debugging so that debuggers (for example, your preferred IDE) can connect to port 8000 on the host running the Jetty application to receive debugging events. More technically, remote debugging exchanges JVM Tools Interface (JVMTI) events and commands via the Java Debug Wire Protocol (JDWP).","title":"Remote Debugging","component":"jetty","version":"12","name":"debugging","url":"/docs/jetty/12/programming-guide/troubleshooting/debugging.html","titles":[]},"70":{"id":70,"text":"TODO: introduction","title":"Troubleshooting Jetty","component":"jetty","version":"12","name":"index","url":"/docs/jetty/12/programming-guide/troubleshooting/index.html","titles":[]},"71":{"id":71,"text":"The Jetty libraries (both client and server) use SLF4J as logging APIs. You can therefore plug in any SLF4J logging implementation, and configure the logging category org.eclipse.jetty at the desired level. When you have problems with Jetty, the first thing that you want to do is to enable DEBUG logging. This is helpful because by reading the DEBUG logs you get a better understanding of what is going on in the system (and that alone may give you the answers you need to fix the problem), and because Jetty developers will probably need the DEBUG logs to help you. The Jetty artifact jetty-slf4j-impl is a SLF4J binding, that is the Jetty implementation of the SLF4J APIs, and provides a number of easy-to-use features to configure logging. The Jetty SLF4J binding only provides an appender that writes to System.err. For more advanced configurations (for example, logging to a file), use LogBack, or Log4j2, or your preferred SLF4J binding. Only one binding can be present in the class-path or module-path. If you use the LogBack SLF4J binding or the Log4j2 SLF4J binding, remember to remove the Jetty SLF4J binding. The Jetty SLF4J binding reads a file in the class-path (or module-path) called jetty-logging.properties that can be configured with the logging levels for various logger categories: jetty-logging.properties # By default, log at INFO level all Jetty classes. org.eclipse.jetty.LEVEL=INFO # However, the Jetty client classes are logged at DEBUG level. org.eclipse.jetty.client.LEVEL=DEBUG Similarly to how you configure the jetty-logging.properties file, you can set the system property org.eclipse.jetty[.].LEVEL=DEBUG to quickly change the logging level to DEBUG without editing any file. The system property can be set on the command line, or in your IDE when you run your tests or your Jetty-based application and will override the jetty-logging.properties file configuration. For example to enable DEBUG logging for all the Jetty classes (very verbose): java -Dorg.eclipse.jetty.LEVEL=DEBUG --class-path ... If you want to enable DEBUG logging but only for the HTTP/2 classes: java -Dorg.eclipse.jetty.http2.LEVEL=DEBUG --class-path ...","title":"Logging","component":"jetty","version":"12","name":"logging","url":"/docs/jetty/12/programming-guide/troubleshooting/logging.html","titles":[{"text":"Jetty SLF4J Binding","hash":"jetty-slf4j-binding","id":1}]},"72":{"id":72,"text":"StateTrackingHandler (described here) is a troubleshooting Handler that can be inserted in the Handler chain to track usages of Handler/Request/Response asynchronous APIs. Dumping the Jetty component tree will dump the StateTrackingHandler, which will dump the state of the current requests. This will help detecting whether requests are not completed due to callbacks not being completed, or whether callback code is stuck while invoking blocking APIs, etc. Thread stack traces (including virtual threads) of operations that have been started but not completed, or are stuck in blocking code are provided in the component tree dump.","title":"StateTrackingHandler","component":"jetty","version":"12","name":"state-tracking","url":"/docs/jetty/12/programming-guide/troubleshooting/state-tracking.html","titles":[]},"73":{"id":73,"text":"TODO","title":"JVM Thread Dump","component":"jetty","version":"12","name":"thread-dump","url":"/docs/jetty/12/programming-guide/troubleshooting/thread-dump.html","titles":[]}},"components":{},"componentVersions":{"ROOT/":{"displayVersion":"default","title":"Home","version":"","name":"ROOT","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Jetty","site-url":"https://jetty.org","experimental":"","idprefix":"","idseparator":"-","page-pagination":""},"sourcemap":false,"extensions":[{},{},{},{},{},{}]},"url":"/index.html"},"docs/":{"displayVersion":"default","title":"Jetty Documentation","version":"","name":"docs","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Jetty","site-url":"https://jetty.org","experimental":"","idprefix":"","idseparator":"-","page-pagination":""},"sourcemap":false,"extensions":[{},{},{},{},{},{}]},"url":"/docs/index.html"},"contribution-guide/":{"displayVersion":"default","title":"Contribution Guide","version":"","name":"contribution-guide","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Jetty","site-url":"https://jetty.org","experimental":"","idprefix":"","idseparator":"-","page-pagination":""},"sourcemap":false,"extensions":[{},{},{},{},{},{}]},"url":"/docs/contribution-guide/index.html","navigation":[{"content":"Participation and Contribution","url":"/docs/contribution-guide/index.html","urlType":"internal","items":[{"content":"The Eclipse Contributor Agreement","url":"/docs/contribution-guide/eca/index.html","urlType":"internal"},{"content":"Getting the source code","url":"/docs/contribution-guide/source/index.html","urlType":"internal"},{"content":"Building Jetty","url":"/docs/contribution-guide/build/index.html","urlType":"internal"},{"content":"Code Standards","url":"/docs/contribution-guide/standards/index.html","urlType":"internal"},{"content":"Writing Documentation","url":"/docs/contribution-guide/documentation/index.html","urlType":"internal"},{"content":"Submitting Patches","url":"/docs/contribution-guide/patches/index.html","urlType":"internal"},{"content":"Security","url":"/docs/contribution-guide/security/index.html","urlType":"internal"}],"root":true,"order":0}]},"jetty/12":{"displayVersion":"12","title":"Eclipse Jetty","version":"12","name":"jetty","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Jetty","site-url":"https://jetty.org","experimental":"","idprefix":"","idseparator":"-","page-pagination":"","javadoc-url":"https://eclipse.dev/jetty/javadoc/jetty-12","jdurl":"https://eclipse.dev/jetty/javadoc/jetty-12","jetty-home":"/home/olamy/dev/sources/jetty/jetty.website/.cache/antora/jetty/jetty-home-12.0.11-SNAPSHOT@","version":"12.0.10-SNAPSHOT","ee-all":"ee{8,9,10}","ee-current":"ee10","ee-current-caps":"EE 10","run-jetty-classpath":"/home/olamy/.m2/repository/org/eclipse/jetty/tests/jetty-testers/12.0.11-SNAPSHOT/jetty-testers-12.0.11-SNAPSHOT.jar:/home/olamy/.m2/repository/org/slf4j/slf4j-api/2.0.12/slf4j-api-2.0.12.jar:/home/olamy/.m2/repository/org/apache/maven/maven-model-builder/3.9.6/maven-model-builder-3.9.6.jar:/home/olamy/.m2/repository/org/codehaus/plexus/plexus-utils/4.0.1/plexus-utils-4.0.1.jar:/home/olamy/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar:/home/olamy/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/home/olamy/.m2/repository/org/apache/maven/maven-model/3.9.6/maven-model-3.9.6.jar:/home/olamy/.m2/repository/org/apache/maven/maven-artifact/3.9.6/maven-artifact-3.9.6.jar:/home/olamy/.m2/repository/org/apache/commons/commons-lang3/3.14.0/commons-lang3-3.14.0.jar:/home/olamy/.m2/repository/org/apache/maven/maven-builder-support/3.9.6/maven-builder-support-3.9.6.jar:/home/olamy/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.inject/0.9.0.M2/org.eclipse.sisu.inject-0.9.0.M2.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-supplier/1.9.20/maven-resolver-supplier-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-api/1.9.20/maven-resolver-api-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-util/1.9.20/maven-resolver-util-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-spi/1.9.20/maven-resolver-spi-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-named-locks/1.9.20/maven-resolver-named-locks-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-impl/1.9.20/maven-resolver-impl-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-connector-basic/1.9.20/maven-resolver-connector-basic-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-transport-file/1.9.20/maven-resolver-transport-file-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-transport-http/1.9.20/maven-resolver-transport-http-1.9.20.jar:/home/olamy/.m2/repository/org/apache/httpcomponents/httpclient/4.5.14/httpclient-4.5.14.jar:/home/olamy/.m2/repository/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar:/home/olamy/.m2/repository/commons-codec/commons-codec/1.17.0/commons-codec-1.17.0.jar:/home/olamy/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar:/home/olamy/.m2/repository/org/apache/maven/maven-resolver-provider/3.9.6/maven-resolver-provider-3.9.6.jar:/home/olamy/.m2/repository/org/apache/maven/maven-repository-metadata/3.9.6/maven-repository-metadata-3.9.6.jar:/home/olamy/.m2/repository/org/codehaus/plexus/plexus-xml/4.0.3/plexus-xml-4.0.3.jar:/home/olamy/.m2/repository/org/apache/maven/maven-xml-impl/4.0.0-alpha-9/maven-xml-impl-4.0.0-alpha-9.jar:/home/olamy/.m2/repository/org/apache/maven/maven-api-xml/4.0.0-alpha-9/maven-api-xml-4.0.0-alpha-9.jar:/home/olamy/.m2/repository/org/apache/maven/maven-api-meta/4.0.0-alpha-9/maven-api-meta-4.0.0-alpha-9.jar:/home/olamy/.m2/repository/com/fasterxml/woodstox/woodstox-core/6.5.1/woodstox-core-6.5.1.jar:/home/olamy/.m2/repository/org/codehaus/woodstox/stax2-api/4.2.1/stax2-api-4.2.1.jar:/home/olamy/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/home/olamy/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/olamy/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/home/olamy/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/olamy/.m2/repository/org/eclipse/jetty/toolchain/jetty-test-helper/6.2/jetty-test-helper-6.2.jar:/home/olamy/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar"},"sourcemap":false,"extensions":[{},{},{},{},{},{}]},"url":"/docs/jetty/12/index.html","navigation":[{"content":"Operations Guide","url":"/docs/jetty/12/operations-guide/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/docs/jetty/12/operations-guide/begin/index.html","urlType":"internal"},{"content":"Eclipse Jetty Features","url":"/docs/jetty/12/operations-guide/features/index.html","urlType":"internal"},{"content":"Eclipse Jetty How-Tos","url":"/docs/jetty/12/operations-guide/howtos/index.html","urlType":"internal"},{"content":"Architecture Overview","url":"/docs/jetty/12/operations-guide/arch/index.html","urlType":"internal"},{"content":"Jetty Start Mechanism","url":"/docs/jetty/12/operations-guide/start/index.html","urlType":"internal","items":[{"content":"Starting Jetty using JPMS","url":"/docs/jetty/12/operations-guide/start/start-jpms.html","urlType":"internal"}]},{"content":"Jetty Modules","url":"/docs/jetty/12/operations-guide/modules/index.html","urlType":"internal","items":[{"content":"Custom Jetty Modules","url":"/docs/jetty/12/operations-guide/modules/custom.html","urlType":"internal"},{"content":"Standard Modules","url":"/docs/jetty/12/operations-guide/modules/standard.html","urlType":"internal"}]},{"content":"Web Application Deployment","url":"/docs/jetty/12/operations-guide/deploy/index.html","urlType":"internal"},{"content":"Jetty Server","url":"/docs/jetty/12/operations-guide/server/index.html","urlType":"internal"},{"content":"Jetty Connectors and Protocols","url":"/docs/jetty/12/operations-guide/protocols/index.html","urlType":"internal"},{"content":"Configuring SSL/TLS KeyStores","url":"/docs/jetty/12/operations-guide/keystore/index.html","urlType":"internal"},{"content":"HTTP Session Management","url":"/docs/jetty/12/operations-guide/session/index.html","urlType":"internal"},{"content":"Faster Web Application Deployment","url":"/docs/jetty/12/operations-guide/quickstart/index.html","urlType":"internal"},{"content":"Annotations","url":"/docs/jetty/12/operations-guide/annotations/index.html","urlType":"internal"},{"content":"Java Server Pages","url":"/docs/jetty/12/operations-guide/jsp/index.html","urlType":"internal"},{"content":"JavaServer Pages Standard Tag Libraries","url":"/docs/jetty/12/operations-guide/jstl/index.html","urlType":"internal"},{"content":"JavaServer Faces TagLibs","url":"/docs/jetty/12/operations-guide/jsf-taglibs/index.html","urlType":"internal"},{"content":"JNDI","url":"/docs/jetty/12/operations-guide/jndi/index.html","urlType":"internal"},{"content":"JAAS","url":"/docs/jetty/12/operations-guide/jaas/index.html","urlType":"internal"},{"content":"JASPI","url":"/docs/jetty/12/operations-guide/jaspi/index.html","urlType":"internal"},{"content":"JMX Monitoring &amp; Management","url":"/docs/jetty/12/operations-guide/jmx/index.html","urlType":"internal"},{"content":"Jetty Tools","url":"/docs/jetty/12/operations-guide/tools/index.html","urlType":"internal"},{"content":"Troubleshooting","url":"/docs/jetty/12/operations-guide/troubleshooting/index.html","urlType":"internal"},{"content":"Jetty XML","url":"/docs/jetty/12/operations-guide/xml/index.html","urlType":"internal"}],"root":true,"order":0},{"content":"Programming Guide","url":"/docs/jetty/12/programming-guide/index.html","urlType":"internal","items":[{"content":"Client Libraries","url":"/docs/jetty/12/programming-guide/client/index.html","urlType":"internal","items":[{"content":"I/O Architecture","url":"/docs/jetty/12/programming-guide/client/io-arch.html","urlType":"internal"},{"content":"HTTP Client","url":"/docs/jetty/12/programming-guide/client/http.html","urlType":"internal"},{"content":"HTTP/2 Client Library","url":"/docs/jetty/12/programming-guide/client/http2.html","urlType":"internal"},{"content":"HTTP/3 Client Library","url":"/docs/jetty/12/programming-guide/client/http3.html","urlType":"internal"},{"content":"WebSocket Client","url":"/docs/jetty/12/programming-guide/client/websocket.html","urlType":"internal"}]},{"content":"Server Libraries","url":"/docs/jetty/12/programming-guide/server/index.html","urlType":"internal","items":[{"content":"HTTP Server Libraries","url":"/docs/jetty/12/programming-guide/server/http.html","urlType":"internal"},{"content":"HTTP/2 Server Library","url":"/docs/jetty/12/programming-guide/server/http2.html","urlType":"internal"},{"content":"HTTP/3 Server Library","url":"/docs/jetty/12/programming-guide/server/http3.html","urlType":"internal"},{"content":"Server Compliance Modes","url":"/docs/jetty/12/programming-guide/server/compliance.html","urlType":"internal"},{"content":"HTTP Session Management","url":"/docs/jetty/12/programming-guide/server/session.html","urlType":"internal"},{"content":"WebSocket Server","url":"/docs/jetty/12/programming-guide/server/websocket.html","urlType":"internal"},{"content":"FastCGI Server Libraries","url":"/docs/jetty/12/programming-guide/server/fastcgi.html","urlType":"internal"},{"content":"Server I/O Architecture","url":"/docs/jetty/12/programming-guide/server/io-arch.html","urlType":"internal"}]},{"content":"Maven and Jetty","items":[{"content":"Using Maven","url":"/docs/jetty/12/programming-guide/maven-jetty/jetty-maven-helloworld.html","urlType":"internal"},{"content":"Using the Jetty Maven Plugin","url":"/docs/jetty/12/programming-guide/maven-jetty/jetty-maven-plugin.html","urlType":"internal"},{"content":"Jetty Jspc Maven Plugin","url":"/docs/jetty/12/programming-guide/maven-jetty/jetty-jspc-maven-plugin.html","urlType":"internal"}]},{"content":"Jetty Architecture","items":[{"content":"Jetty Component Architecture","url":"/docs/jetty/12/programming-guide/arch/bean.html","urlType":"internal"},{"content":"Jetty Threading Architecture","url":"/docs/jetty/12/programming-guide/arch/threads.html","urlType":"internal"},{"content":"Jetty I/O Architecture","url":"/docs/jetty/12/programming-guide/arch/io.html","urlType":"internal"},{"content":"Jetty Listeners","url":"/docs/jetty/12/programming-guide/arch/listener.html","urlType":"internal"},{"content":"Jetty JMX Support","url":"/docs/jetty/12/programming-guide/arch/jmx.html","urlType":"internal"}]},{"content":"Troubleshooting Jetty","url":"/docs/jetty/12/programming-guide/troubleshooting/index.html","urlType":"internal","items":[{"content":"Logging","url":"/docs/jetty/12/programming-guide/troubleshooting/logging.html","urlType":"internal"},{"content":"JVM Thread Dump","url":"/docs/jetty/12/programming-guide/troubleshooting/thread-dump.html","urlType":"internal"},{"content":"<code>StateTrackingHandler</code>","url":"/docs/jetty/12/programming-guide/troubleshooting/state-tracking.html","urlType":"internal"},{"content":"Component Tree Dump","url":"/docs/jetty/12/programming-guide/troubleshooting/component-dump.html","urlType":"internal"},{"content":"Remote Debugging","url":"/docs/jetty/12/programming-guide/troubleshooting/debugging.html","urlType":"internal"}]},{"content":"Migration Guides","items":[{"content":"Migrating from Jetty 9.4.x to Jetty 10.0.x","url":"/docs/jetty/12/programming-guide/migration/94-to-10.html","urlType":"internal"},{"content":"Migrating from Jetty 11.0.x to Jetty 12.0.x","url":"/docs/jetty/12/programming-guide/migration/11-to-12.html","urlType":"internal"}]}],"root":true,"order":1}]},"jetty/11":{"displayVersion":"11","title":"Eclipse Jetty","version":"11","name":"jetty","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Jetty","site-url":"https://jetty.org","experimental":"","idprefix":"","idseparator":"-","page-pagination":"","javadoc-url":"https://eclipse.dev/jetty/javadoc/jetty-11","jdurl":"https://eclipse.dev/jetty/javadoc/jetty-11","jetty-home":"/home/olamy/dev/sources/jetty/jetty.website/.cache/antora/jetty/jetty-home-11.0.22-SNAPSHOT@","version":"11.0.21-SNAPSHOT","run-jetty-classpath":"/home/olamy/.m2/repository/org/eclipse/jetty/tests/jetty-home-tester/11.0.22-SNAPSHOT/jetty-home-tester-11.0.22-SNAPSHOT.jar:/home/olamy/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/olamy/.m2/repository/org/apache/maven/maven-artifact/3.9.0/maven-artifact-3.9.0.jar:/home/olamy/.m2/repository/org/codehaus/plexus/plexus-utils/4.0.1/plexus-utils-4.0.1.jar:/home/olamy/.m2/repository/org/apache/commons/commons-lang3/3.14.0/commons-lang3-3.14.0.jar:/home/olamy/.m2/repository/org/apache/maven/maven-resolver-provider/3.9.0/maven-resolver-provider-3.9.0.jar:/home/olamy/.m2/repository/org/apache/maven/maven-model/3.9.0/maven-model-3.9.0.jar:/home/olamy/.m2/repository/org/apache/maven/maven-model-builder/3.9.0/maven-model-builder-3.9.0.jar:/home/olamy/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar:/home/olamy/.m2/repository/org/apache/maven/maven-builder-support/3.9.0/maven-builder-support-3.9.0.jar:/home/olamy/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.5/org.eclipse.sisu.inject-0.3.5.jar:/home/olamy/.m2/repository/org/apache/maven/maven-repository-metadata/3.9.0/maven-repository-metadata-3.9.0.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-api/1.9.20/maven-resolver-api-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-connector-basic/1.9.20/maven-resolver-connector-basic-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-impl/1.9.20/maven-resolver-impl-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-named-locks/1.9.20/maven-resolver-named-locks-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-spi/1.9.20/maven-resolver-spi-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-transport-file/1.9.20/maven-resolver-transport-file-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-transport-http/1.9.20/maven-resolver-transport-http-1.9.20.jar:/home/olamy/.m2/repository/org/apache/httpcomponents/httpclient/4.5.14/httpclient-4.5.14.jar:/home/olamy/.m2/repository/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar:/home/olamy/.m2/repository/commons-codec/commons-codec/1.17.0/commons-codec-1.17.0.jar:/home/olamy/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-util/1.9.20/maven-resolver-util-1.9.20.jar:/home/olamy/.m2/repository/org/awaitility/awaitility/4.2.1/awaitility-4.2.1.jar:/home/olamy/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/home/olamy/.m2/repository/org/eclipse/jetty/toolchain/jetty-test-helper/6.2/jetty-test-helper-6.2.jar:/home/olamy/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar"},"sourcemap":false,"extensions":[{},{},{},{},{},{}]},"url":"/docs/jetty/11/index.html","navigation":[{"content":"Operations Guide","url":"/docs/jetty/11/operations-guide/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/docs/jetty/11/operations-guide/begin/index.html","urlType":"internal"},{"content":"Eclipse Jetty Features","url":"/docs/jetty/11/operations-guide/features/index.html","urlType":"internal"},{"content":"Eclipse Jetty How-Tos","url":"/docs/jetty/11/operations-guide/howtos/index.html","urlType":"internal"},{"content":"Architecture Overview","url":"/docs/jetty/11/operations-guide/arch/index.html","urlType":"internal"},{"content":"Jetty Start Mechanism","url":"/docs/jetty/11/operations-guide/start/index.html","urlType":"internal","items":[{"content":"Starting Jetty using JPMS","url":"/docs/jetty/11/operations-guide/start/start-jpms.html","urlType":"internal"}]},{"content":"Jetty Modules","url":"/docs/jetty/11/operations-guide/modules/index.html","urlType":"internal","items":[{"content":"Custom Jetty Modules","url":"/docs/jetty/11/operations-guide/modules/custom.html","urlType":"internal"},{"content":"Standard Modules","url":"/docs/jetty/11/operations-guide/modules/standard.html","urlType":"internal"}]},{"content":"Web Application Deployment","url":"/docs/jetty/11/operations-guide/deploy/index.html","urlType":"internal"},{"content":"Jetty Server","url":"/docs/jetty/11/operations-guide/server/index.html","urlType":"internal"},{"content":"Jetty Connectors and Protocols","url":"/docs/jetty/11/operations-guide/protocols/index.html","urlType":"internal"},{"content":"Configuring SSL/TLS KeyStores","url":"/docs/jetty/11/operations-guide/keystore/index.html","urlType":"internal"},{"content":"HTTP Session Management","url":"/docs/jetty/11/operations-guide/session/index.html","urlType":"internal"},{"content":"Faster Web Application Deployment","url":"/docs/jetty/11/operations-guide/quickstart/index.html","urlType":"internal"},{"content":"Annotations","url":"/docs/jetty/11/operations-guide/annotations/index.html","urlType":"internal"},{"content":"Java Server Pages","url":"/docs/jetty/11/operations-guide/jsp/index.html","urlType":"internal"},{"content":"JavaServer Pages Standard Tag Libraries","url":"/docs/jetty/11/operations-guide/jstl/index.html","urlType":"internal"},{"content":"JavaServer Faces TagLibs","url":"/docs/jetty/11/operations-guide/jsf-taglibs/index.html","urlType":"internal"},{"content":"JNDI","url":"/docs/jetty/11/operations-guide/jndi/index.html","urlType":"internal"},{"content":"JAAS","url":"/docs/jetty/11/operations-guide/jaas/index.html","urlType":"internal"},{"content":"JASPI","url":"/docs/jetty/11/operations-guide/jaspi/index.html","urlType":"internal"},{"content":"JMX Monitoring &amp; Management","url":"/docs/jetty/11/operations-guide/jmx/index.html","urlType":"internal"},{"content":"Troubleshooting","url":"/docs/jetty/11/operations-guide/troubleshooting/index.html","urlType":"internal"},{"content":"Jetty XML","url":"/docs/jetty/11/operations-guide/xml/index.html","urlType":"internal"}],"root":true,"order":0},{"content":"Programming Guide","url":"/docs/jetty/11/programming-guide/index.html","urlType":"internal","items":[{"content":"Client Libraries","url":"/docs/jetty/11/programming-guide/client/index.html","urlType":"internal","items":[{"content":"I/O Architecture","url":"/docs/jetty/11/programming-guide/client/io-arch.html","urlType":"internal"},{"content":"HTTP Client","url":"/docs/jetty/11/programming-guide/client/http.html","urlType":"internal"},{"content":"HTTP/2 Client Library","url":"/docs/jetty/11/programming-guide/client/http2.html","urlType":"internal"},{"content":"HTTP/3 Client Library","url":"/docs/jetty/11/programming-guide/client/http3.html","urlType":"internal"},{"content":"WebSocket Client","url":"/docs/jetty/11/programming-guide/client/websocket.html","urlType":"internal"}]},{"content":"Server Libraries","url":"/docs/jetty/11/programming-guide/server/index.html","urlType":"internal","items":[{"content":"Server Compliance Modes","url":"/docs/jetty/11/programming-guide/server/compliance.html","urlType":"internal"},{"content":"HTTP Server Libraries","url":"/docs/jetty/11/programming-guide/server/http.html","urlType":"internal"},{"content":"HTTP/2 Server Library","url":"/docs/jetty/11/programming-guide/server/http2.html","urlType":"internal"},{"content":"HTTP/3 Server Library","url":"/docs/jetty/11/programming-guide/server/http3.html","urlType":"internal"},{"content":"HTTP Session Management","url":"/docs/jetty/11/programming-guide/server/session.html","urlType":"internal"},{"content":"WebSocket Server","url":"/docs/jetty/11/programming-guide/server/websocket.html","urlType":"internal"},{"content":"FastCGI Server Libraries","url":"/docs/jetty/11/programming-guide/server/fastcgi.html","urlType":"internal"},{"content":"Server I/O Architecture","url":"/docs/jetty/11/programming-guide/server/io-arch.html","urlType":"internal"}]},{"content":"Maven and Jetty","items":[{"content":"Using Maven","url":"/docs/jetty/11/programming-guide/maven-jetty/jetty-maven-helloworld.html","urlType":"internal"},{"content":"Using the Jetty Maven Plugin","url":"/docs/jetty/11/programming-guide/maven-jetty/jetty-maven-plugin.html","urlType":"internal"},{"content":"Jetty Jspc Maven Plugin","url":"/docs/jetty/11/programming-guide/maven-jetty/jetty-jspc-maven-plugin.html","urlType":"internal"}]},{"content":"Jetty Architecture","items":[{"content":"Jetty Component Architecture","url":"/docs/jetty/11/programming-guide/arch/bean.html","urlType":"internal"},{"content":"Jetty Threading Architecture","url":"/docs/jetty/11/programming-guide/arch/threads.html","urlType":"internal"},{"content":"Jetty I/O Architecture","url":"/docs/jetty/11/programming-guide/arch/io.html","urlType":"internal"},{"content":"Jetty Listeners","url":"/docs/jetty/11/programming-guide/arch/listener.html","urlType":"internal"},{"content":"Jetty JMX Support","url":"/docs/jetty/11/programming-guide/arch/jmx.html","urlType":"internal"}]},{"content":"Troubleshooting Jetty","url":"/docs/jetty/11/programming-guide/troubleshooting/index.html","urlType":"internal","items":[{"content":"Logging","url":"/docs/jetty/11/programming-guide/troubleshooting/logging.html","urlType":"internal"},{"content":"JVM Thread Dump","url":"/docs/jetty/11/programming-guide/troubleshooting/thread-dump.html","urlType":"internal"},{"content":"Jetty Component Tree Dump","url":"/docs/jetty/11/programming-guide/troubleshooting/component-dump.html","urlType":"internal"},{"content":"Debugging","url":"/docs/jetty/11/programming-guide/troubleshooting/debugging.html","urlType":"internal"}]},{"content":"Migration Guides","items":[{"content":"Migrating from Jetty 9.4.x to Jetty 10.0.x","url":"/docs/jetty/11/programming-guide/migration/94-to-10.html","urlType":"internal"}]}],"root":true,"order":1}]},"jetty/10":{"displayVersion":"10","title":"Eclipse Jetty","version":"10","name":"jetty","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Jetty","site-url":"https://jetty.org","experimental":"","idprefix":"","idseparator":"-","page-pagination":"","javadoc-url":"https://eclipse.dev/jetty/javadoc/jetty-10","jdurl":"https://eclipse.dev/jetty/javadoc/jetty-10","jetty-home":"/home/olamy/dev/sources/jetty/jetty.website/.cache/antora/jetty/jetty-home-10.0.22-SNAPSHOT@","version":"10.0.21-SNAPSHOT","run-jetty-classpath":"/home/olamy/.m2/repository/org/eclipse/jetty/tests/jetty-home-tester/10.0.22-SNAPSHOT/jetty-home-tester-10.0.22-SNAPSHOT.jar:/home/olamy/.m2/repository/jakarta/inject/jakarta.inject-api/1.0.5/jakarta.inject-api-1.0.5.jar:/home/olamy/.m2/repository/org/apache/maven/maven-artifact/3.9.0/maven-artifact-3.9.0.jar:/home/olamy/.m2/repository/org/codehaus/plexus/plexus-utils/4.0.1/plexus-utils-4.0.1.jar:/home/olamy/.m2/repository/org/apache/commons/commons-lang3/3.14.0/commons-lang3-3.14.0.jar:/home/olamy/.m2/repository/org/apache/maven/maven-resolver-provider/3.9.0/maven-resolver-provider-3.9.0.jar:/home/olamy/.m2/repository/org/apache/maven/maven-model/3.9.0/maven-model-3.9.0.jar:/home/olamy/.m2/repository/org/apache/maven/maven-model-builder/3.9.0/maven-model-builder-3.9.0.jar:/home/olamy/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar:/home/olamy/.m2/repository/org/apache/maven/maven-builder-support/3.9.0/maven-builder-support-3.9.0.jar:/home/olamy/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.5/org.eclipse.sisu.inject-0.3.5.jar:/home/olamy/.m2/repository/org/apache/maven/maven-repository-metadata/3.9.0/maven-repository-metadata-3.9.0.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-api/1.9.20/maven-resolver-api-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-connector-basic/1.9.20/maven-resolver-connector-basic-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-impl/1.9.20/maven-resolver-impl-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-named-locks/1.9.20/maven-resolver-named-locks-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-spi/1.9.20/maven-resolver-spi-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-transport-file/1.9.20/maven-resolver-transport-file-1.9.20.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-transport-http/1.9.20/maven-resolver-transport-http-1.9.20.jar:/home/olamy/.m2/repository/org/apache/httpcomponents/httpclient/4.5.14/httpclient-4.5.14.jar:/home/olamy/.m2/repository/org/apache/httpcomponents/httpcore/4.4.16/httpcore-4.4.16.jar:/home/olamy/.m2/repository/commons-codec/commons-codec/1.17.0/commons-codec-1.17.0.jar:/home/olamy/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar:/home/olamy/.m2/repository/org/apache/maven/resolver/maven-resolver-util/1.9.20/maven-resolver-util-1.9.20.jar:/home/olamy/.m2/repository/org/awaitility/awaitility/4.2.1/awaitility-4.2.1.jar:/home/olamy/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/home/olamy/.m2/repository/org/eclipse/jetty/toolchain/jetty-test-helper/6.2/jetty-test-helper-6.2.jar:/home/olamy/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar"},"sourcemap":false,"extensions":[{},{},{},{},{},{}]},"url":"/docs/jetty/10/index.html","navigation":[{"content":"Operations Guide","url":"/docs/jetty/10/operations-guide/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/docs/jetty/10/operations-guide/begin/index.html","urlType":"internal"},{"content":"Eclipse Jetty Features","url":"/docs/jetty/10/operations-guide/features/index.html","urlType":"internal"},{"content":"Eclipse Jetty How-Tos","url":"/docs/jetty/10/operations-guide/howtos/index.html","urlType":"internal"},{"content":"Architecture Overview","url":"/docs/jetty/10/operations-guide/arch/index.html","urlType":"internal"},{"content":"Jetty Start Mechanism","url":"/docs/jetty/10/operations-guide/start/index.html","urlType":"internal","items":[{"content":"Starting Jetty using JPMS","url":"/docs/jetty/10/operations-guide/start/start-jpms.html","urlType":"internal"}]},{"content":"Jetty Modules","url":"/docs/jetty/10/operations-guide/modules/index.html","urlType":"internal","items":[{"content":"Custom Jetty Modules","url":"/docs/jetty/10/operations-guide/modules/custom.html","urlType":"internal"},{"content":"Standard Modules","url":"/docs/jetty/10/operations-guide/modules/standard.html","urlType":"internal"}]},{"content":"Web Application Deployment","url":"/docs/jetty/10/operations-guide/deploy/index.html","urlType":"internal"},{"content":"Jetty Server","url":"/docs/jetty/10/operations-guide/server/index.html","urlType":"internal"},{"content":"Jetty Connectors and Protocols","url":"/docs/jetty/10/operations-guide/protocols/index.html","urlType":"internal"},{"content":"Configuring SSL/TLS KeyStores","url":"/docs/jetty/10/operations-guide/keystore/index.html","urlType":"internal"},{"content":"HTTP Session Management","url":"/docs/jetty/10/operations-guide/session/index.html","urlType":"internal"},{"content":"Faster Web Application Deployment","url":"/docs/jetty/10/operations-guide/quickstart/index.html","urlType":"internal"},{"content":"Annotations","url":"/docs/jetty/10/operations-guide/annotations/index.html","urlType":"internal"},{"content":"Java Server Pages","url":"/docs/jetty/10/operations-guide/jsp/index.html","urlType":"internal"},{"content":"JavaServer Pages Standard Tag Libraries","url":"/docs/jetty/10/operations-guide/jstl/index.html","urlType":"internal"},{"content":"JavaServer Faces TagLibs","url":"/docs/jetty/10/operations-guide/jsf-taglibs/index.html","urlType":"internal"},{"content":"JNDI","url":"/docs/jetty/10/operations-guide/jndi/index.html","urlType":"internal"},{"content":"JAAS","url":"/docs/jetty/10/operations-guide/jaas/index.html","urlType":"internal"},{"content":"JASPI","url":"/docs/jetty/10/operations-guide/jaspi/index.html","urlType":"internal"},{"content":"JMX Monitoring &amp; Management","url":"/docs/jetty/10/operations-guide/jmx/index.html","urlType":"internal"},{"content":"Troubleshooting","url":"/docs/jetty/10/operations-guide/troubleshooting/index.html","urlType":"internal"},{"content":"Jetty XML","url":"/docs/jetty/10/operations-guide/xml/index.html","urlType":"internal"}],"root":true,"order":0},{"content":"Programming Guide","url":"/docs/jetty/10/programming-guide/index.html","urlType":"internal","items":[{"content":"Client Libraries","url":"/docs/jetty/10/programming-guide/client/index.html","urlType":"internal","items":[{"content":"I/O Architecture","url":"/docs/jetty/10/programming-guide/client/io-arch.html","urlType":"internal"},{"content":"HTTP Client","url":"/docs/jetty/10/programming-guide/client/http.html","urlType":"internal"},{"content":"HTTP/2 Client Library","url":"/docs/jetty/10/programming-guide/client/http2.html","urlType":"internal"},{"content":"HTTP/3 Client Library","url":"/docs/jetty/10/programming-guide/client/http3.html","urlType":"internal"},{"content":"WebSocket Client","url":"/docs/jetty/10/programming-guide/client/websocket.html","urlType":"internal"}]},{"content":"Server Libraries","url":"/docs/jetty/10/programming-guide/server/index.html","urlType":"internal","items":[{"content":"Server Compliance Modes","url":"/docs/jetty/10/programming-guide/server/compliance.html","urlType":"internal"},{"content":"HTTP Server Libraries","url":"/docs/jetty/10/programming-guide/server/http.html","urlType":"internal"},{"content":"HTTP/2 Server Library","url":"/docs/jetty/10/programming-guide/server/http2.html","urlType":"internal"},{"content":"HTTP/3 Server Library","url":"/docs/jetty/10/programming-guide/server/http3.html","urlType":"internal"},{"content":"HTTP Session Management","url":"/docs/jetty/10/programming-guide/server/session.html","urlType":"internal"},{"content":"WebSocket Server","url":"/docs/jetty/10/programming-guide/server/websocket.html","urlType":"internal"},{"content":"FastCGI Server Libraries","url":"/docs/jetty/10/programming-guide/server/fastcgi.html","urlType":"internal"},{"content":"Server I/O Architecture","url":"/docs/jetty/10/programming-guide/server/io-arch.html","urlType":"internal"}]},{"content":"Maven and Jetty","items":[{"content":"Using Maven","url":"/docs/jetty/10/programming-guide/maven-jetty/jetty-maven-helloworld.html","urlType":"internal"},{"content":"Using the Jetty Maven Plugin","url":"/docs/jetty/10/programming-guide/maven-jetty/jetty-maven-plugin.html","urlType":"internal"},{"content":"Jetty Jspc Maven Plugin","url":"/docs/jetty/10/programming-guide/maven-jetty/jetty-jspc-maven-plugin.html","urlType":"internal"}]},{"content":"Jetty Architecture","items":[{"content":"Jetty Component Architecture","url":"/docs/jetty/10/programming-guide/arch/bean.html","urlType":"internal"},{"content":"Jetty Threading Architecture","url":"/docs/jetty/10/programming-guide/arch/threads.html","urlType":"internal"},{"content":"Jetty I/O Architecture","url":"/docs/jetty/10/programming-guide/arch/io.html","urlType":"internal"},{"content":"Jetty Listeners","url":"/docs/jetty/10/programming-guide/arch/listener.html","urlType":"internal"},{"content":"Jetty JMX Support","url":"/docs/jetty/10/programming-guide/arch/jmx.html","urlType":"internal"}]},{"content":"Troubleshooting Jetty","url":"/docs/jetty/10/programming-guide/troubleshooting/index.html","urlType":"internal","items":[{"content":"Logging","url":"/docs/jetty/10/programming-guide/troubleshooting/logging.html","urlType":"internal"},{"content":"JVM Thread Dump","url":"/docs/jetty/10/programming-guide/troubleshooting/thread-dump.html","urlType":"internal"},{"content":"Jetty Component Tree Dump","url":"/docs/jetty/10/programming-guide/troubleshooting/component-dump.html","urlType":"internal"},{"content":"Debugging","url":"/docs/jetty/10/programming-guide/troubleshooting/debugging.html","urlType":"internal"}]},{"content":"Migration Guides","items":[{"content":"Migrating from Jetty 9.4.x to Jetty 10.0.x","url":"/docs/jetty/10/programming-guide/migration/94-to-10.html","urlType":"internal"}]}],"root":true,"order":1}]}}}})